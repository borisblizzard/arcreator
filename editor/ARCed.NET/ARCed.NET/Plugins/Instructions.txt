How To Create a Plugin:

1. Create a new Windows Form project targetting ".NET Framework 4", not ".NET Framework 4 Client Profile"

2. Add a reference to "ARCed.exe", setting "Copy Local" to false in the reference properties

3. Add the following "usings" to each form you create: "ARCed", "ARCed.Plugins"

4. Change your form to inherit from "ARCed.UI.DockContent" instead of "Form", and have it iterface "IPluginClient"

		ex.  public class MyARCedPluginForm : ARCed.UI.DockContent, ARCed.Plugins.IPluginClient

5. In the designer, you will now see a few more options under a "Docking" category to use

6. Create your form to do as you wish using the ARCed objects exposed to you through the reference.

7. For every form that you want exposed to the editor, add a string resource to your project's resources:

		RegistryEntry*** --> SIMPLE_NAME|FULL_CLASS_NAME|DESCRIPTION

		Change the asteriks to a number, word, or whatever you like, so long as the resource name
		starts with "RegistryEntry". Do not use that naming convention for any other unreleated resources.

		SIMPLE_NAME = Change to the name the plugin will actually use in the editor that the
					  end user will see.

		FULL_CLASS_NAME = This is the full name of an invokable form including namespaces.

		DESCRIPTION = A simple description that will be used for tooltips

		ex. RegistryEntry1 -> Weather Configuration|MyNamespace.MyForms.WeatherConfigForm
			RegistryEntry2 -> Blizz-ABS Menu|MyNamespace.Forms.BlizzABSForm

		It is very important that these string resources are configured properly, the editor
		uses reflection to read this and generates a Type based on the class name.

8. Although both "*.exe" and "*.dll" are acceptable formats, I recommend changing the output type
   of your plugin to "Class Library" and deploying as a DLL. 