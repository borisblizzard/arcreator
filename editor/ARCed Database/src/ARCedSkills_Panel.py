"""Subclass of Skills_Panel, which is generated by wxFormBuilder."""

import wx
import ARCed_Templates 
from ARCedChooseGraphic_Dialog import ARCedChooseGraphic_Dialog
from Core.RMXP import RGSS1_RPG as RPG
from DatabaseManager import DatabaseManager as DM
import Kernel
from Kernel import Manager as KM

class ARCedSkills_Panel( ARCed_Templates.Skills_Panel ):
	def __init__( self, parent, skill_index=0 ):
		ARCed_Templates.Skills_Panel.__init__( self, parent )
		global Config, DataSkills, DataAnimations, DataElements
		global DataStates, DataCommonEvents
		Config = Kernel.GlobalObjects.get_value('ARCed_config')
		try:
			proj = Kernel.GlobalObjects.get_value('PROJECT')
			DataSkills = proj.getData('Skills')
			DataAnimations = proj.getData('Animations')
			DataStates = proj.getData('States')
			DataElements = proj.getData('System').elements
			DataCommonEvents = proj.getData('CommonEvents')
		except NameError:
			Kernel.Log('Database opened before Project has been initialized', '[Database:SKILLS]', True)
			self.Destroy()
		self.listCtrlStates.AssignImageList(DM.GetAddSubImageList(), wx.IMAGE_LIST_SMALL)
		font = wx.Font(8, wx.FONTFAMILY_TELETYPE, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL)
		font.SetFaceName(Config.get('Misc', 'NoteFont')) 
		self.textCtrlNotes.SetFont(font)
		self.comboBoxIcon.SetCursor(wx.STANDARD_CURSOR)
		self.comboBoxMenuSE.SetCursor(wx.STANDARD_CURSOR)
		if DM.ARC_FORMAT:
			params = Config.getlist('Misc', 'Parameters')
		else:
			params = ['STR', 'DEX', 'AGI', 'INT']
		self.CreateControls(params)
		self.setRanges()
		self.SelectedSkill = DataSkills[DM.FixedIndex(skill_index)]
		self.refreshAll()
		self.listBoxSkills.SetSelection(skill_index)
		DM.DrawHeaderBitmap(self.bitmapSkills, 'Skills')

	def CreateControls( self, params ):
		self.ParameterControls = [
			self.spinCtrlAtkF, self.spinCtrlPdefF,
			self.spinCtrlMdefF, self.spinCtrlEvaF ]
		# Get main sizer to add to, and split parameters into rows of 4 each
		mainsizer = self.panelParameters.GetSizer()
		rows = [params[i:i+4] for i in xrange(0, len(params), 4)]
		# Iterate through each of the rows and create the controls
		for row in rows:
			labelsizer = wx.BoxSizer(wx.HORIZONTAL)
			spinsizer = wx.BoxSizer(wx.HORIZONTAL)
			n = len(row)
			if n < 4:
				row.append(None)
				proportion = 25 * (4 - n)
			for param in row:
				if param != None:
					label = wx.StaticText( self.panelParameters, wx.ID_ANY, param + '-F:')
					label.Wrap( -1 )
					labelsizer.Add( label, 25, wx.ALL, 5 )
					spinctrl = wx.SpinCtrl( self.panelParameters, wx.ID_ANY, wx.EmptyString, style=wx.SP_ARROW_KEYS|wx.SP_WRAP)
					spinctrl.Bind(wx.EVT_SPINCTRL, Kernel.Protect(self.spinCtrlParameter_ValueChanged))
					self.ParameterControls.append(spinctrl)
					spinsizer.Add( spinctrl, 25, wx.BOTTOM|wx.RIGHT|wx.LEFT|wx.EXPAND, 5 )
				else:
					# Create a dummy filler
					dummy = wx.StaticText( self.panelParameters, wx.ID_ANY, '')
					dummy.Wrap(-1)
					labelsizer.Add(dummy, proportion, wx.ALL, 5)
					spinsizer.Add(dummy, proportion, wx.ALL, 5)
			mainsizer.Add( labelsizer, 0, wx.EXPAND, 5 )
			mainsizer.Add( spinsizer, 0, wx.EXPAND, 5 )

	def refreshSkillList( self ):
		"""Refreshes the values in the skill wxListBox control"""
		digits = len(Config.get('GameObjects', 'Skills'))
		DM.FillControl(self.listBoxSkills, DataSkills, digits, [])

	def refreshAnimations( self ):
		"""Refreshes the choices in the user and target animation controls"""
		digits = len(Config.get('GameObjects', 'Animations'))
		DM.FillControl(self.comboBoxTargetAnimation, DataAnimations, digits, ['(None)'])
		DM.FillControl(self.comboBoxUserAnimation, DataAnimations, digits, ['(None)'])

	def refreshElements( self ):
		"""Clears and refreshes the list of elements in the checklist"""
		self.checkListElements.Clear()
		self.checkListElements.AppendItems(DataElements[DM.FixedIndex(0):])

	def refreshStates( self ):
		"""Clears and refreshes the list of states in the checklist"""
		self.listCtrlStates.DeleteAllItems()
		start = DM.FixedIndex(0)
		names = [DataStates[i].name for i in xrange(start, len(DataStates))]
		self.listCtrlStates.InsertColumn(0, '')
		for i in xrange(len(names)):
			self.listCtrlStates.InsertStringItem(i, names[i], 0)

	def refreshCommonEvents( self ):
		"""Refreshes the common events in the combo box"""
		digits = len(Config.get('GameObjects', 'CommonEvents'))
		DM.FillControl(self.comboBoxCommonEvent, DataCommonEvents, digits, ['(None)'])

	def refreshValues(self ):
		"""Resets the values of all the controls to reflect the selected skill"""
		skill = self.SelectedSkill
		self.textCtrlName.ChangeValue(skill.name)
		self.textCtrlDescription.ChangeValue(skill.description)
		self.comboBoxIcon.SetValue(skill.icon_name)
		self.comboBoxScope.SetSelection(skill.scope)
		self.comboBoxOccasion.SetSelection(skill.occasion)
		self.comboBoxUserAnimation.SetSelection(skill.animation1_id)
		self.comboBoxTargetAnimation.SetSelection(skill.animation2_id)
		self.comboBoxCommonEvent.SetSelection(skill.common_event_id)
		self.comboBoxMenuSE.SetValue(skill.menu_se.name)


		# TODO: Remove this. Something got screwed up with the conversion
		if skill.power > 2147483647:
			skill.power = 0

		self.spinCtrlSPCost.SetValue(skill.sp_cost)
		self.spinCtrlPower.SetValue(skill.power) 
		self.spinCtrlHitRate.SetValue(skill.hit)
		self.spinCtrlVariance.SetValue(skill.variance)
		if DM.ARC_FORMAT:
			# TODO: Implement
			pass
		else:
			# TODO: Fix this
			self.ParameterControls[0].SetValue(skill.atk_f)
			self.ParameterControls[1].SetValue(skill.pdef_f)
			self.ParameterControls[2].SetValue(skill.mdef_f)
			self.ParameterControls[3].SetValue(skill.eva_f)		
			self.ParameterControls[4].SetValue(skill.str_f)
			self.ParameterControls[5].SetValue(skill.dex_f)
			self.ParameterControls[6].SetValue(skill.agi_f)
			self.ParameterControls[7].SetValue(skill.int_f)
		# Update elements
		for i in xrange(self.checkListElements.GetCount()):
			checked = skill.element_set
			if not DM.ARC_FORMAT:
				checked = [i - 1 for i in checked]
			self.checkListElements.SetChecked(checked)
		# Update plus/minus states
		if DM.ARC_FORMAT:
			addstates = skill.plus_state_set
			minusstates = skill.minus_state_set
		else:
			addstates = [id - 1 for id in skill.plus_state_set]
			minusstates = [id - 1 for id in skill.minus_state_set]
		for i in xrange(self.listCtrlStates.GetItemCount()):
			if i in addstates:
				self.listCtrlStates.SetItemImage(i, 1)
			elif i in minusstates:
				self.listCtrlStates.SetItemImage(i, 2)
			else:
				self.listCtrlStates.SetItemImage(i, 0)
		# RMXP Compatibility
		if not hasattr(skill, 'note'):
			setattr(skill, 'note', '')
		self.textCtrlNotes.ChangeValue(skill.note)

	def refreshAll( self ):
		"""Refreshes all child controls of the panel"""
		self.refreshSkillList()
		self.refreshAnimations()
		self.refreshStates()
		self.refreshElements()
		self.refreshCommonEvents()
		self.refreshValues()

	def setRanges( self ):
		self.spinCtrlSPCost.SetRange(0, Config.getint('Actors', 'MaxSP'))
		max = Config.getint('Misc', 'MaxParamValue')
		self.spinCtrlPower.SetRange(-max, max)
		for spinctrl in self.ParameterControls:
			spinctrl.SetRange(0, max)

	def listBoxSkills_SelectionChanged( self, event ):
		index = DM.FixedIndex(event.GetSelection())
		if DataSkills[index] == None:
			DataSkills[index] = RPG.Skill()
		self.SelectedSkill = DataSkills[index]
		self.refreshValues()

	def buttonMaximum_Clicked( self, event ):
		"""Starts the Change Maximum dialog"""
		max = Config.getint('GameObjects', 'Skills')
		DM.ChangeDataCapacity(self, self.listBoxSkills, DataSkills, max)

	def textCtrlName_TextChanged( self, event ):
		"""Updates the selected skill's name"""
		DM.UpdateObjectName(self.SelectedSkill, event.GetString(),
			self.listBoxSkills, len(Config.get('GameObjects', 'Skills')))

	def comboBoxIcon_LeftClicked( self, event ):
		"""Opens dialog to select an icon for the selected skill"""
		self.listBoxSkills.SetFocus()
		icon = self.SelectedSkill.icon_name
		dlg = ARCedChooseGraphic_Dialog(self, 'Graphics/Icons', icon)
		if dlg.ShowModal() == wx.ID_OK:
			

			self.comboBoxIcon.SetValue(self.SelectedSkill.icon_name)
		dlg.Destroy()

	def textCtrlDescription_TextChange( self, event ):
		"""Set the selected skill's description"""
		self.SelectedSkill.description = event.GetString()

	def comboBoxScope_SelectionChanged( self, event ):
		"""Set the selected skill's scope"""
		self.SelectedSkill.scope = event.GetInt()

	def comboBoxUserAnimation_SelectionChanged( self, event ):
		"""Set the selected skill's user animation ID"""
		self.SelectedSkill.animation1_id = event.GetInt()

	def comboBoxMenuSE_Clicked( self, event ):
		"""Opens the dialog for selecting the audio file to use"""
		self.listBoxSkills.SetFocus()
		audio = DM.ChooseAudio(self, 'Audio/SE/', self.SelectedSkill.menu_se, 0)
		self.SelectedSkill.menu_se = audio
		self.comboBoxMenuSE.SetValue(audio.name)

	def comboBoxOccasion_SelectionChanged( self, event ):
		"""Set the selected skill's occasion"""
		self.SelectedSkill.occasion = event.GetInt()

	def comboBoxTargetAnimation_SelectionChanged( self, event ):
		"""Set the selected skill's target animation ID"""
		self.SelectedSkill.animation2_id = event.GetInt()

	def comboBoxCommonEvent_SelectionChanged( self, event ):
		"""Set the selected skill's SP cost"""
		self.SelectedSkill.common_event_id = event.GetInt()

	def spinCtrlSPCost_ValueChanged( self, event ):
		"""Set the selected skill's SP cost"""
		self.SelectedSkill.sp_cost = event.GetInt()

	def spinCtrlHitRate_ValueChanged( self, event ):
		"""Set the selected skill's hit rate"""
		self.SelectedSkill.hit = event.GetInt()

	def spinCtrlPower_ValueChanged( self, event ):
		"""Set the selected skill's power"""
		self.SelectedSkill.power = event.GetInt()

	def spinCtrlVariance_ValueChanged( self, event ):
		"""Set the selected skill's variance"""
		self.SelectedSkill.variance = event.GetInt()

	def spinCtrlParameter_ValueChanged( self, event ):
		index = self.ParameterControls.index(event.GetEventObject())
		if DM.ARC_FORMAT:
			# TODO: Implement
			pass
		else:
			value = event.GetInt()
			if index == 0: self.SelectedSkill.atk_f = value
			elif index == 1: self.SelectedSkill.pdef_f = value
			elif index == 2: self.SelectedSkill.mdef_f = value
			elif index == 3: self.SelectedSkill.eva_f = value
			elif index == 4: self.SelectedSkill.str_f = value
			elif index == 5: self.SelectedSkill.dex_f = value
			elif index == 6: self.SelectedSkill.agi_f = value
			elif index == 7: self.SelectedSkill.int_f = value

	def checkListElements_CheckChanged( self, event ):
		"""Sets the IDs that are in the selected skills element set"""
		ids = [DM.FixedIndex(id) for id in self.checkListElements.GetChecked()]
		self.SelectedSkill.element_set = ids

	def listCtrlStates_LeftClicked( self, event ):
		"""Cycles the State change up one"""
		DM.ChangeSkillStates(self.listCtrlStates, self.SelectedSkill, event, 1)

	def listCtrlStates_RightClicked( self, event ):
		"""Cycles the State change down one"""
		DM.ChangeSkillStates(self.listCtrlStates, self.SelectedSkill, event, -1)

	def textCtrlNotes_TextChanged( self, event ):
		"""Sets the note for the selected skill"""
		self.SelectedSkill.note = event.GetString()