/* Generated by Cython 0.15.1 on Fri Nov 25 23:12:10 2011 */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#else

#include <stddef.h> /* For offsetof */
#ifndef offsetof
#define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif

#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif

#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif

#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif

#if PY_VERSION_HEX < 0x02040000
  #define METH_COEXIST 0
  #define PyDict_CheckExact(op) (Py_TYPE(op) == &PyDict_Type)
  #define PyDict_Contains(d,o)   PySequence_Contains(d,o)
#endif

#if PY_VERSION_HEX < 0x02050000
  typedef int Py_ssize_t;
  #define PY_SSIZE_T_MAX INT_MAX
  #define PY_SSIZE_T_MIN INT_MIN
  #define PY_FORMAT_SIZE_T ""
  #define PyInt_FromSsize_t(z) PyInt_FromLong(z)
  #define PyInt_AsSsize_t(o)   __Pyx_PyInt_AsInt(o)
  #define PyNumber_Index(o)    PyNumber_Int(o)
  #define PyIndex_Check(o)     PyNumber_Check(o)
  #define PyErr_WarnEx(category, message, stacklevel) PyErr_Warn(category, message)
#endif

#if PY_VERSION_HEX < 0x02060000
  #define Py_REFCNT(ob) (((PyObject*)(ob))->ob_refcnt)
  #define Py_TYPE(ob)   (((PyObject*)(ob))->ob_type)
  #define Py_SIZE(ob)   (((PyVarObject*)(ob))->ob_size)
  #define PyVarObject_HEAD_INIT(type, size) \
          PyObject_HEAD_INIT(type) size,
  #define PyType_Modified(t)

  typedef struct {
     void *buf;
     PyObject *obj;
     Py_ssize_t len;
     Py_ssize_t itemsize;
     int readonly;
     int ndim;
     char *format;
     Py_ssize_t *shape;
     Py_ssize_t *strides;
     Py_ssize_t *suboffsets;
     void *internal;
  } Py_buffer;

  #define PyBUF_SIMPLE 0
  #define PyBUF_WRITABLE 0x0001
  #define PyBUF_FORMAT 0x0004
  #define PyBUF_ND 0x0008
  #define PyBUF_STRIDES (0x0010 | PyBUF_ND)
  #define PyBUF_C_CONTIGUOUS (0x0020 | PyBUF_STRIDES)
  #define PyBUF_F_CONTIGUOUS (0x0040 | PyBUF_STRIDES)
  #define PyBUF_ANY_CONTIGUOUS (0x0080 | PyBUF_STRIDES)
  #define PyBUF_INDIRECT (0x0100 | PyBUF_STRIDES)

#endif

#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
#endif

#if PY_MAJOR_VERSION >= 3
  #define Py_TPFLAGS_CHECKTYPES 0
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif

#if (PY_VERSION_HEX < 0x02060000) || (PY_MAJOR_VERSION >= 3)
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif

#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#endif

#if PY_VERSION_HEX < 0x02060000
  #define PyBytesObject                PyStringObject
  #define PyBytes_Type                 PyString_Type
  #define PyBytes_Check                PyString_Check
  #define PyBytes_CheckExact           PyString_CheckExact
  #define PyBytes_FromString           PyString_FromString
  #define PyBytes_FromStringAndSize    PyString_FromStringAndSize
  #define PyBytes_FromFormat           PyString_FromFormat
  #define PyBytes_DecodeEscape         PyString_DecodeEscape
  #define PyBytes_AsString             PyString_AsString
  #define PyBytes_AsStringAndSize      PyString_AsStringAndSize
  #define PyBytes_Size                 PyString_Size
  #define PyBytes_AS_STRING            PyString_AS_STRING
  #define PyBytes_GET_SIZE             PyString_GET_SIZE
  #define PyBytes_Repr                 PyString_Repr
  #define PyBytes_Concat               PyString_Concat
  #define PyBytes_ConcatAndDel         PyString_ConcatAndDel
#endif

#if PY_VERSION_HEX < 0x02060000
  #define PySet_Check(obj)             PyObject_TypeCheck(obj, &PySet_Type)
  #define PyFrozenSet_Check(obj)       PyObject_TypeCheck(obj, &PyFrozenSet_Type)
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif

#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)

#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
#endif

#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif

#if PY_VERSION_HEX < 0x03020000
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif


#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif

#if (PY_MAJOR_VERSION < 3) || (PY_VERSION_HEX >= 0x03010300)
  #define __Pyx_PySequence_GetSlice(obj, a, b) PySequence_GetSlice(obj, a, b)
  #define __Pyx_PySequence_SetSlice(obj, a, b, value) PySequence_SetSlice(obj, a, b, value)
  #define __Pyx_PySequence_DelSlice(obj, a, b) PySequence_DelSlice(obj, a, b)
#else
  #define __Pyx_PySequence_GetSlice(obj, a, b) (unlikely(!(obj)) ? \
        (PyErr_SetString(PyExc_SystemError, "null argument to internal routine"), (PyObject*)0) : \
        (likely((obj)->ob_type->tp_as_mapping) ? (PySequence_GetSlice(obj, a, b)) : \
            (PyErr_Format(PyExc_TypeError, "'%.200s' object is unsliceable", (obj)->ob_type->tp_name), (PyObject*)0)))
  #define __Pyx_PySequence_SetSlice(obj, a, b, value) (unlikely(!(obj)) ? \
        (PyErr_SetString(PyExc_SystemError, "null argument to internal routine"), -1) : \
        (likely((obj)->ob_type->tp_as_mapping) ? (PySequence_SetSlice(obj, a, b, value)) : \
            (PyErr_Format(PyExc_TypeError, "'%.200s' object doesn't support slice assignment", (obj)->ob_type->tp_name), -1)))
  #define __Pyx_PySequence_DelSlice(obj, a, b) (unlikely(!(obj)) ? \
        (PyErr_SetString(PyExc_SystemError, "null argument to internal routine"), -1) : \
        (likely((obj)->ob_type->tp_as_mapping) ? (PySequence_DelSlice(obj, a, b)) : \
            (PyErr_Format(PyExc_TypeError, "'%.200s' object doesn't support slice deletion", (obj)->ob_type->tp_name), -1)))
#endif

#if PY_MAJOR_VERSION >= 3
  #define PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : PyInstanceMethod_New(func))
#endif

#if PY_VERSION_HEX < 0x02050000
  #define __Pyx_GetAttrString(o,n)   PyObject_GetAttrString((o),((char *)(n)))
  #define __Pyx_SetAttrString(o,n,a) PyObject_SetAttrString((o),((char *)(n)),(a))
  #define __Pyx_DelAttrString(o,n)   PyObject_DelAttrString((o),((char *)(n)))
#else
  #define __Pyx_GetAttrString(o,n)   PyObject_GetAttrString((o),(n))
  #define __Pyx_SetAttrString(o,n,a) PyObject_SetAttrString((o),(n),(a))
  #define __Pyx_DelAttrString(o,n)   PyObject_DelAttrString((o),(n))
#endif

#if PY_VERSION_HEX < 0x02050000
  #define __Pyx_NAMESTR(n) ((char *)(n))
  #define __Pyx_DOCSTR(n)  ((char *)(n))
#else
  #define __Pyx_NAMESTR(n) (n)
  #define __Pyx_DOCSTR(n)  (n)
#endif

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
#define _USE_MATH_DEFINES
#endif
#include <math.h>
#define __PYX_HAVE___PyXAL
#define __PYX_HAVE_API___PyXAL
#include <hltypes/hstring.h>
#include <hltypes/harray.h>
#include <xal/AudioManager.h>
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <xal/Sound.h>
#include <xal/Category.h>
#include <xal/Player.h>
#include <xal/Buffer.h>
#include <xal/xal.h>
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#ifdef PYREX_WITHOUT_ASSERTIONS
#define CYTHON_WITHOUT_ASSERTIONS
#endif


/* inline attribute */
#ifndef CYTHON_INLINE
  #if defined(__GNUC__)
    #define CYTHON_INLINE __inline__
  #elif defined(_MSC_VER)
    #define CYTHON_INLINE __inline
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_INLINE inline
  #else
    #define CYTHON_INLINE
  #endif
#endif

/* unused attribute */
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || defined(__INTEL_COMPILER)
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif

typedef struct {PyObject **p; char *s; const long n; const char* encoding; const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry; /*proto*/


/* Type Conversion Predeclarations */

#define __Pyx_PyBytes_FromUString(s) PyBytes_FromString((char*)s)
#define __Pyx_PyBytes_AsUString(s)   ((unsigned char*) PyBytes_AsString(s))

#define __Pyx_Owned_Py_None(b) (Py_INCREF(Py_None), Py_None)
#define __Pyx_PyBool_FromLong(b) ((b) ? (Py_INCREF(Py_True), Py_True) : (Py_INCREF(Py_False), Py_False))
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x);

static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
static CYTHON_INLINE size_t __Pyx_PyInt_AsSize_t(PyObject*);

#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))


#ifdef __GNUC__
  /* Test for GCC > 2.95 */
  #if __GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95))
    #define likely(x)   __builtin_expect(!!(x), 1)
    #define unlikely(x) __builtin_expect(!!(x), 0)
  #else /* __GNUC__ > 2 ... */
    #define likely(x)   (x)
    #define unlikely(x) (x)
  #endif /* __GNUC__ > 2 ... */
#else /* __GNUC__ */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
    
static PyObject *__pyx_m;
static PyObject *__pyx_b;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "_PyXAL.pyx",
};

/*--- Type declarations ---*/
struct __pyx_obj_6_PyXAL_XALManager;
struct __pyx_obj_6_PyXAL_PyAudioManager;
struct __pyx_obj_6_PyXAL_PyPlayer;
struct __pyx_obj_6_PyXAL_PySound;
struct __pyx_opt_args_6_PyXAL_EnableLogging;

/* "_PyXAL.pyx":37
 *     LOG_PATH = path
 * 
 * cpdef EnableLogging(bool state = True, str path = ""):             # <<<<<<<<<<<<<<
 *     global LOG_ENABLED
 *     LOG_ENABLED = state
 */
struct __pyx_opt_args_6_PyXAL_EnableLogging {
  int __pyx_n;
  bool state;
  PyObject *path;
};

/* "_PyXAL.pyx":61
 * 
 * 
 * cdef class XALManager             # <<<<<<<<<<<<<<
 * 
 * Mgr = None
 */
struct __pyx_obj_6_PyXAL_XALManager {
  PyObject_HEAD
  int destroyed;
  int inited;
  char *CATEGORY_STR;
  xal::Category *_category;
};


/* "_PyXAL.pyx":66
 * 
 * 
 * cdef class PyAudioManager:             # <<<<<<<<<<<<<<
 * 
 *     cdef XAL.AudioManager *_pointer
 */
struct __pyx_obj_6_PyXAL_PyAudioManager {
  PyObject_HEAD
  xal::AudioManager *_pointer;
};


/* "_PyXAL.pyx":164
 * 
 * 
 * cdef class PyPlayer:             # <<<<<<<<<<<<<<
 * 
 *     cdef XAL.Player *_pointer
 */
struct __pyx_obj_6_PyXAL_PyPlayer {
  PyObject_HEAD
  xal::Player *_pointer;
};


/* "_PyXAL.pyx":74
 * 
 * 
 * cdef class PySound:             # <<<<<<<<<<<<<<
 * 
 *     cdef XAL.Sound *_pointer
 */
struct __pyx_obj_6_PyXAL_PySound {
  PyObject_HEAD
  xal::Sound *_pointer;
};


#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif

#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname); /*proto*/
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
  #define __Pyx_RefNannySetupContext(name)           __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
  #define __Pyx_RefNannyFinishContext()           __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif /* CYTHON_REFNANNY */

static PyObject *__Pyx_GetName(PyObject *dict, PyObject *name); /*proto*/

static int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact); /*proto*/

static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name, PyObject* kw_name); /*proto*/

static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],     PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,     const char* function_name); /*proto*/

static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found); /*proto*/

static CYTHON_INLINE int __Pyx_CheckKeywordStrings(PyObject *kwdict,
    const char* function_name, int kw_allowed); /*proto*/

static CYTHON_INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb); /*proto*/
static CYTHON_INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb); /*proto*/

static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause); /*proto*/


static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}


#define __Pyx_GetItemInt_List(o, i, size, to_py_func) (((size) <= sizeof(Py_ssize_t)) ? \
                                                    __Pyx_GetItemInt_List_Fast(o, i) : \
                                                    __Pyx_GetItemInt_Generic(o, to_py_func(i)))

static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i) {
    if (likely(o != Py_None)) {
        if (likely((0 <= i) & (i < PyList_GET_SIZE(o)))) {
            PyObject *r = PyList_GET_ITEM(o, i);
            Py_INCREF(r);
            return r;
        }
        else if ((-PyList_GET_SIZE(o) <= i) & (i < 0)) {
            PyObject *r = PyList_GET_ITEM(o, PyList_GET_SIZE(o) + i);
            Py_INCREF(r);
            return r;
        }
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

#define __Pyx_GetItemInt_Tuple(o, i, size, to_py_func) (((size) <= sizeof(Py_ssize_t)) ? \
                                                    __Pyx_GetItemInt_Tuple_Fast(o, i) : \
                                                    __Pyx_GetItemInt_Generic(o, to_py_func(i)))

static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i) {
    if (likely(o != Py_None)) {
        if (likely((0 <= i) & (i < PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, i);
            Py_INCREF(r);
            return r;
        }
        else if ((-PyTuple_GET_SIZE(o) <= i) & (i < 0)) {
            PyObject *r = PyTuple_GET_ITEM(o, PyTuple_GET_SIZE(o) + i);
            Py_INCREF(r);
            return r;
        }
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}


#define __Pyx_GetItemInt(o, i, size, to_py_func) (((size) <= sizeof(Py_ssize_t)) ? \
                                                    __Pyx_GetItemInt_Fast(o, i) : \
                                                    __Pyx_GetItemInt_Generic(o, to_py_func(i)))

static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i) {
    PyObject *r;
    if (PyList_CheckExact(o) && ((0 <= i) & (i < PyList_GET_SIZE(o)))) {
        r = PyList_GET_ITEM(o, i);
        Py_INCREF(r);
    }
    else if (PyTuple_CheckExact(o) && ((0 <= i) & (i < PyTuple_GET_SIZE(o)))) {
        r = PyTuple_GET_ITEM(o, i);
        Py_INCREF(r);
    }
    else if (Py_TYPE(o)->tp_as_sequence && Py_TYPE(o)->tp_as_sequence->sq_item && (likely(i >= 0))) {
        r = PySequence_GetItem(o, i);
    }
    else {
        r = __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
    }
    return r;
}

static CYTHON_INLINE PyObject* __Pyx_tp_new(PyObject* type_obj) {
    return (PyObject*) (((PyTypeObject*)(type_obj))->tp_new(
        (PyTypeObject*)(type_obj), __pyx_empty_tuple, NULL));
}

static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type); /*proto*/

static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, long level); /*proto*/

#ifndef __Pyx_CppExn2PyErr
static void __Pyx_CppExn2PyErr() {
  // Catch a handful of different errors here and turn them into the
  // equivalent Python errors.
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::bad_alloc& exn) {
    PyErr_SetString(PyExc_MemoryError, exn.what());
  } catch (const std::bad_cast& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::domain_error& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::invalid_argument& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::ios_base::failure& exn) {
    // Unfortunately, in standard C++ we have no way of distinguishing EOF
    // from other errors here; be careful with the exception mask
    PyErr_SetString(PyExc_IOError, exn.what());
  } catch (const std::out_of_range& exn) {
    // Change out_of_range to IndexError
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::overflow_error& exn) {
    PyErr_SetString(PyExc_OverflowError, exn.what());
  } catch (const std::range_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::underflow_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

#include <string.h>

static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals); /*proto*/

static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals); /*proto*/

#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyString_Equals __Pyx_PyUnicode_Equals
#else
#define __Pyx_PyString_Equals __Pyx_PyBytes_Equals
#endif

static int __Pyx_Print(PyObject*, PyObject *, int); /*proto*/
#if PY_MAJOR_VERSION >= 3
static PyObject* __pyx_print = 0;
static PyObject* __pyx_print_kwargs = 0;
#endif

static int __Pyx_PrintOne(PyObject* stream, PyObject *o); /*proto*/

static CYTHON_INLINE unsigned char __Pyx_PyInt_AsUnsignedChar(PyObject *);

static CYTHON_INLINE unsigned short __Pyx_PyInt_AsUnsignedShort(PyObject *);

static CYTHON_INLINE unsigned int __Pyx_PyInt_AsUnsignedInt(PyObject *);

static CYTHON_INLINE char __Pyx_PyInt_AsChar(PyObject *);

static CYTHON_INLINE short __Pyx_PyInt_AsShort(PyObject *);

static CYTHON_INLINE int __Pyx_PyInt_AsInt(PyObject *);

static CYTHON_INLINE signed char __Pyx_PyInt_AsSignedChar(PyObject *);

static CYTHON_INLINE signed short __Pyx_PyInt_AsSignedShort(PyObject *);

static CYTHON_INLINE signed int __Pyx_PyInt_AsSignedInt(PyObject *);

static CYTHON_INLINE int __Pyx_PyInt_AsLongDouble(PyObject *);

static CYTHON_INLINE unsigned long __Pyx_PyInt_AsUnsignedLong(PyObject *);

static CYTHON_INLINE unsigned PY_LONG_LONG __Pyx_PyInt_AsUnsignedLongLong(PyObject *);

static CYTHON_INLINE long __Pyx_PyInt_AsLong(PyObject *);

static CYTHON_INLINE PY_LONG_LONG __Pyx_PyInt_AsLongLong(PyObject *);

static CYTHON_INLINE signed long __Pyx_PyInt_AsSignedLong(PyObject *);

static CYTHON_INLINE signed PY_LONG_LONG __Pyx_PyInt_AsSignedLongLong(PyObject *);

static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename); /*proto*/

static int __Pyx_check_binary_version(void);

static void __Pyx_AddTraceback(const char *funcname, int __pyx_clineno,
                               int __pyx_lineno, const char *__pyx_filename); /*proto*/

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t); /*proto*/

/* Module declarations from 'libcpp' */

/* Module declarations from 'hltypes' */

/* Module declarations from 'XAL' */

/* Module declarations from '_PyXAL' */
static PyTypeObject *__pyx_ptype_6_PyXAL_XALManager = 0;
static PyTypeObject *__pyx_ptype_6_PyXAL_PyAudioManager = 0;
static PyTypeObject *__pyx_ptype_6_PyXAL_PySound = 0;
static PyTypeObject *__pyx_ptype_6_PyXAL_PyPlayer = 0;
static char *__pyx_v_6_PyXAL_XAL_AS_DIRECTSOUND;
static char *__pyx_v_6_PyXAL_XAL_AS_OPENAL;
static char *__pyx_v_6_PyXAL_XAL_AS_SDL;
static char *__pyx_v_6_PyXAL_XAL_AS_AVFOUNDATION;
static char *__pyx_v_6_PyXAL_XAL_AS_COREAUDIO;
static char *__pyx_v_6_PyXAL_XAL_AS_DISABLED;
static char *__pyx_v_6_PyXAL_XAL_AS_DEFAULT;
static enum xal::HandlingMode __pyx_v_6_PyXAL_FULL;
static enum xal::HandlingMode __pyx_v_6_PyXAL_LAZY;
static enum xal::HandlingMode __pyx_v_6_PyXAL_ON_DEMAND;
static enum xal::HandlingMode __pyx_v_6_PyXAL_STREAMED;
static PyObject *__pyx_v_6_PyXAL_LOG_PATH = 0;
static bool __pyx_v_6_PyXAL_LOG_ENABLED;
static PyObject *__pyx_f_6_PyXAL_SetLogPath(PyObject *, int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_6_PyXAL_EnableLogging(int __pyx_skip_dispatch, struct __pyx_opt_args_6_PyXAL_EnableLogging *__pyx_optional_args); /*proto*/
static void __pyx_f_6_PyXAL_Log(chstr); /*proto*/
#define __Pyx_MODULE_NAME "_PyXAL"
int __pyx_module_is_main__PyXAL = 0;

/* Implementation of '_PyXAL' */
static PyObject *__pyx_builtin_open;
static PyObject *__pyx_builtin_RuntimeError;
static char __pyx_k_1[] = "";
static char __pyx_k_2[] = "\n";
static char __pyx_k_3[] = "XAL.log";
static char __pyx_k_4[] = "PyAudioManager Can not be initialized from python";
static char __pyx_k_6[] = "PySound Can not be initialized from python";
static char __pyx_k_8[] = "XAL is not Initialized";
static char __pyx_k_20[] = "PyPlayer Can not be initialized from python";
static char __pyx_k_40[] = "Only one XALManager interface allowed at a time, use the one at PyXAL.Mgr";
static char __pyx_k_43[] = "del XALManger";
static char __pyx_k_44[] = "dealloc XALManger";
static char __pyx_k_45[] = "DestroyXAL XALManger";
static char __pyx_k_46[] = "clear XALManager";
static char __pyx_k_48[] = "XAL Failed to load file %s";
static char __pyx_k_50[] = "XAL Failed to create a player for %s";
static char __pyx_k_51[] = "destroyPlayer Passed a None object";
static char __pyx_k_54[] = "destroySound Passed a None object";
static char __pyx_k_58[] = "XAL Failed to find a player for %s";
static char __pyx_k_69[] = "Init XAL";
static char __pyx_k_70[] = "XAL Destroy";
static char __pyx_k__ab[] = "ab";
static char __pyx_k__os[] = "os";
static char __pyx_k__Mgr[] = "Mgr";
static char __pyx_k__SDL[] = "SDL";
static char __pyx_k__Init[] = "Init";
static char __pyx_k__gain[] = "gain";
static char __pyx_k__join[] = "join";
static char __pyx_k__name[] = "name";
static char __pyx_k__open[] = "open";
static char __pyx_k__path[] = "path";
static char __pyx_k__close[] = "close";
static char __pyx_k__isdir[] = "isdir";
static char __pyx_k__split[] = "split";
static char __pyx_k__state[] = "state";
static char __pyx_k__write[] = "write";
static char __pyx_k__OpenAL[] = "OpenAL";
static char __pyx_k___PyXAL[] = "_PyXAL";
static char __pyx_k__exists[] = "exists";
static char __pyx_k__Destroy[] = "Destroy";
static char __pyx_k__default[] = "default";
static char __pyx_k__getName[] = "getName";
static char __pyx_k__looping[] = "looping";
static char __pyx_k__Disabled[] = "Disabled";
static char __pyx_k__SetupXAL[] = "SetupXAL";
static char __pyx_k____main__[] = "__main__";
static char __pyx_k____test__[] = "__test__";
static char __pyx_k__fadeTime[] = "fadeTime";
static char __pyx_k__makedirs[] = "makedirs";
static char __pyx_k__threaded[] = "threaded";
static char __pyx_k__CoreAudio[] = "CoreAudio";
static char __pyx_k__backendId[] = "backendId";
static char __pyx_k__DestroyXAL[] = "DestroyXAL";
static char __pyx_k__deviceName[] = "deviceName";
static char __pyx_k__systemname[] = "systemname";
static char __pyx_k__updateTime[] = "updateTime";
static char __pyx_k__DirectSound[] = "DirectSound";
static char __pyx_k__AVFoundation[] = "AVFoundation";
static char __pyx_k__RuntimeError[] = "RuntimeError";
static char __pyx_k__isXALInitialized[] = "isXALInitialized";
static PyObject *__pyx_kp_s_1;
static PyObject *__pyx_kp_s_20;
static PyObject *__pyx_kp_s_3;
static PyObject *__pyx_kp_s_4;
static PyObject *__pyx_kp_s_40;
static PyObject *__pyx_kp_s_43;
static PyObject *__pyx_kp_s_44;
static PyObject *__pyx_kp_s_45;
static PyObject *__pyx_kp_s_46;
static PyObject *__pyx_kp_s_48;
static PyObject *__pyx_kp_s_50;
static PyObject *__pyx_kp_s_51;
static PyObject *__pyx_kp_s_54;
static PyObject *__pyx_kp_s_58;
static PyObject *__pyx_kp_s_6;
static PyObject *__pyx_kp_s_69;
static PyObject *__pyx_kp_s_70;
static PyObject *__pyx_kp_s_8;
static PyObject *__pyx_n_s__Destroy;
static PyObject *__pyx_n_s__DestroyXAL;
static PyObject *__pyx_n_s__Init;
static PyObject *__pyx_n_s__Mgr;
static PyObject *__pyx_n_s__RuntimeError;
static PyObject *__pyx_n_s__SetupXAL;
static PyObject *__pyx_n_s___PyXAL;
static PyObject *__pyx_n_s____main__;
static PyObject *__pyx_n_s____test__;
static PyObject *__pyx_n_s__ab;
static PyObject *__pyx_n_s__backendId;
static PyObject *__pyx_n_s__close;
static PyObject *__pyx_n_s__deviceName;
static PyObject *__pyx_n_s__exists;
static PyObject *__pyx_n_s__fadeTime;
static PyObject *__pyx_n_s__gain;
static PyObject *__pyx_n_s__getName;
static PyObject *__pyx_n_s__isXALInitialized;
static PyObject *__pyx_n_s__isdir;
static PyObject *__pyx_n_s__join;
static PyObject *__pyx_n_s__looping;
static PyObject *__pyx_n_s__makedirs;
static PyObject *__pyx_n_s__name;
static PyObject *__pyx_n_s__open;
static PyObject *__pyx_n_s__os;
static PyObject *__pyx_n_s__path;
static PyObject *__pyx_n_s__split;
static PyObject *__pyx_n_s__state;
static PyObject *__pyx_n_s__systemname;
static PyObject *__pyx_n_s__threaded;
static PyObject *__pyx_n_s__updateTime;
static PyObject *__pyx_n_s__write;
static PyObject *__pyx_k_tuple_5;
static PyObject *__pyx_k_tuple_7;
static PyObject *__pyx_k_tuple_9;
static PyObject *__pyx_k_tuple_10;
static PyObject *__pyx_k_tuple_11;
static PyObject *__pyx_k_tuple_12;
static PyObject *__pyx_k_tuple_13;
static PyObject *__pyx_k_tuple_14;
static PyObject *__pyx_k_tuple_15;
static PyObject *__pyx_k_tuple_16;
static PyObject *__pyx_k_tuple_17;
static PyObject *__pyx_k_tuple_18;
static PyObject *__pyx_k_tuple_19;
static PyObject *__pyx_k_tuple_21;
static PyObject *__pyx_k_tuple_22;
static PyObject *__pyx_k_tuple_23;
static PyObject *__pyx_k_tuple_24;
static PyObject *__pyx_k_tuple_25;
static PyObject *__pyx_k_tuple_26;
static PyObject *__pyx_k_tuple_27;
static PyObject *__pyx_k_tuple_28;
static PyObject *__pyx_k_tuple_29;
static PyObject *__pyx_k_tuple_30;
static PyObject *__pyx_k_tuple_31;
static PyObject *__pyx_k_tuple_32;
static PyObject *__pyx_k_tuple_33;
static PyObject *__pyx_k_tuple_34;
static PyObject *__pyx_k_tuple_35;
static PyObject *__pyx_k_tuple_36;
static PyObject *__pyx_k_tuple_37;
static PyObject *__pyx_k_tuple_38;
static PyObject *__pyx_k_tuple_39;
static PyObject *__pyx_k_tuple_41;
static PyObject *__pyx_k_tuple_42;
static PyObject *__pyx_k_tuple_47;
static PyObject *__pyx_k_tuple_49;
static PyObject *__pyx_k_tuple_52;
static PyObject *__pyx_k_tuple_53;
static PyObject *__pyx_k_tuple_55;
static PyObject *__pyx_k_tuple_56;
static PyObject *__pyx_k_tuple_57;
static PyObject *__pyx_k_tuple_59;
static PyObject *__pyx_k_tuple_60;
static PyObject *__pyx_k_tuple_61;
static PyObject *__pyx_k_tuple_62;
static PyObject *__pyx_k_tuple_63;
static PyObject *__pyx_k_tuple_64;
static PyObject *__pyx_k_tuple_65;
static PyObject *__pyx_k_tuple_66;
static PyObject *__pyx_k_tuple_67;
static PyObject *__pyx_k_tuple_68;

/* "_PyXAL.pyx":30
 * cdef bool LOG_ENABLED = False
 * 
 * cpdef SetLogPath(str path):             # <<<<<<<<<<<<<<
 *     global LOG_PATH
 *     cdef str blank = ""
 */

static PyObject *__pyx_pf_6_PyXAL_SetLogPath(PyObject *__pyx_self, PyObject *__pyx_v_path); /*proto*/
static PyObject *__pyx_f_6_PyXAL_SetLogPath(PyObject *__pyx_v_path, int __pyx_skip_dispatch) {
  PyObject *__pyx_v_blank = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("SetLogPath");

  /* "_PyXAL.pyx":32
 * cpdef SetLogPath(str path):
 *     global LOG_PATH
 *     cdef str blank = ""             # <<<<<<<<<<<<<<
 *     if not LOG_PATH == blank and not os.path.exists(path) or not os.path.isdir(path):
 *         os.makedirs(path)
 */
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_1));
  __pyx_v_blank = __pyx_kp_s_1;

  /* "_PyXAL.pyx":33
 *     global LOG_PATH
 *     cdef str blank = ""
 *     if not LOG_PATH == blank and not os.path.exists(path) or not os.path.isdir(path):             # <<<<<<<<<<<<<<
 *         os.makedirs(path)
 *     LOG_PATH = path
 */
  __pyx_t_1 = __Pyx_PyString_Equals(((PyObject *)__pyx_v_6_PyXAL_LOG_PATH), ((PyObject *)__pyx_v_blank), Py_EQ); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 33; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (!__pyx_t_1);
  if (__pyx_t_2) {
    __pyx_t_3 = __Pyx_GetName(__pyx_m, __pyx_n_s__os); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 33; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyObject_GetAttr(__pyx_t_3, __pyx_n_s__path); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 33; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyObject_GetAttr(__pyx_t_4, __pyx_n_s__exists); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 33; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 33; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_4));
    __Pyx_INCREF(((PyObject *)__pyx_v_path));
    PyTuple_SET_ITEM(__pyx_t_4, 0, ((PyObject *)__pyx_v_path));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_path));
    __pyx_t_5 = PyObject_Call(__pyx_t_3, ((PyObject *)__pyx_t_4), NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 33; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 33; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_6 = (!__pyx_t_1);
    __pyx_t_1 = __pyx_t_6;
  } else {
    __pyx_t_1 = __pyx_t_2;
  }
  if (!__pyx_t_1) {
    __pyx_t_5 = __Pyx_GetName(__pyx_m, __pyx_n_s__os); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 33; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = PyObject_GetAttr(__pyx_t_5, __pyx_n_s__path); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 33; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyObject_GetAttr(__pyx_t_4, __pyx_n_s__isdir); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 33; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 33; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_4));
    __Pyx_INCREF(((PyObject *)__pyx_v_path));
    PyTuple_SET_ITEM(__pyx_t_4, 0, ((PyObject *)__pyx_v_path));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_path));
    __pyx_t_3 = PyObject_Call(__pyx_t_5, ((PyObject *)__pyx_t_4), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 33; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 33; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_6 = (!__pyx_t_2);
    __pyx_t_2 = __pyx_t_6;
  } else {
    __pyx_t_2 = __pyx_t_1;
  }
  if (__pyx_t_2) {

    /* "_PyXAL.pyx":34
 *     cdef str blank = ""
 *     if not LOG_PATH == blank and not os.path.exists(path) or not os.path.isdir(path):
 *         os.makedirs(path)             # <<<<<<<<<<<<<<
 *     LOG_PATH = path
 * 
 */
    __pyx_t_3 = __Pyx_GetName(__pyx_m, __pyx_n_s__os); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 34; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyObject_GetAttr(__pyx_t_3, __pyx_n_s__makedirs); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 34; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 34; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_3));
    __Pyx_INCREF(((PyObject *)__pyx_v_path));
    PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_v_path));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_path));
    __pyx_t_5 = PyObject_Call(__pyx_t_4, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 34; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "_PyXAL.pyx":35
 *     if not LOG_PATH == blank and not os.path.exists(path) or not os.path.isdir(path):
 *         os.makedirs(path)
 *     LOG_PATH = path             # <<<<<<<<<<<<<<
 * 
 * cpdef EnableLogging(bool state = True, str path = ""):
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_path));
  __Pyx_XGOTREF(((PyObject *)__pyx_v_6_PyXAL_LOG_PATH));
  __Pyx_DECREF(((PyObject *)__pyx_v_6_PyXAL_LOG_PATH));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_path));
  __pyx_v_6_PyXAL_LOG_PATH = __pyx_v_path;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("_PyXAL.SetLogPath", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_blank);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":30
 * cdef bool LOG_ENABLED = False
 * 
 * cpdef SetLogPath(str path):             # <<<<<<<<<<<<<<
 *     global LOG_PATH
 *     cdef str blank = ""
 */

static PyObject *__pyx_pf_6_PyXAL_SetLogPath(PyObject *__pyx_self, PyObject *__pyx_v_path); /*proto*/
static PyObject *__pyx_pf_6_PyXAL_SetLogPath(PyObject *__pyx_self, PyObject *__pyx_v_path) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("SetLogPath");
  __pyx_self = __pyx_self;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_path), (&PyString_Type), 1, "path", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 30; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_6_PyXAL_SetLogPath(__pyx_v_path, 0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 30; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_PyXAL.SetLogPath", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":37
 *     LOG_PATH = path
 * 
 * cpdef EnableLogging(bool state = True, str path = ""):             # <<<<<<<<<<<<<<
 *     global LOG_ENABLED
 *     LOG_ENABLED = state
 */

static PyObject *__pyx_pf_6_PyXAL_1EnableLogging(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_6_PyXAL_EnableLogging(int __pyx_skip_dispatch, struct __pyx_opt_args_6_PyXAL_EnableLogging *__pyx_optional_args) {
  bool __pyx_v_state = ((bool)1);
  PyObject *__pyx_v_path = ((PyObject*)__pyx_kp_s_1);
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("EnableLogging");
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_state = __pyx_optional_args->state;
      if (__pyx_optional_args->__pyx_n > 1) {
        __pyx_v_path = __pyx_optional_args->path;
      }
    }
  }

  /* "_PyXAL.pyx":39
 * cpdef EnableLogging(bool state = True, str path = ""):
 *     global LOG_ENABLED
 *     LOG_ENABLED = state             # <<<<<<<<<<<<<<
 *     SetLogPath(path)
 * 
 */
  __pyx_v_6_PyXAL_LOG_ENABLED = __pyx_v_state;

  /* "_PyXAL.pyx":40
 *     global LOG_ENABLED
 *     LOG_ENABLED = state
 *     SetLogPath(path)             # <<<<<<<<<<<<<<
 * 
 * cdef void Log(chstr logMessage):
 */
  __pyx_t_1 = __pyx_f_6_PyXAL_SetLogPath(__pyx_v_path, 0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 40; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_PyXAL.EnableLogging", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":37
 *     LOG_PATH = path
 * 
 * cpdef EnableLogging(bool state = True, str path = ""):             # <<<<<<<<<<<<<<
 *     global LOG_ENABLED
 *     LOG_ENABLED = state
 */

static PyObject *__pyx_pf_6_PyXAL_1EnableLogging(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pf_6_PyXAL_1EnableLogging(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  bool __pyx_v_state;
  PyObject *__pyx_v_path = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  struct __pyx_opt_args_6_PyXAL_EnableLogging __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__state,&__pyx_n_s__path,0};
  __Pyx_RefNannySetupContext("EnableLogging");
  __pyx_self = __pyx_self;
  {
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject*)__pyx_kp_s_1);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__state);
          if (value) { values[0] = value; kw_args--; }
        }
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__path);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "EnableLogging") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 37; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_state = __Pyx_PyObject_IsTrue(values[0]); if (unlikely((__pyx_v_state == (bool)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 37; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_state = ((bool)1);
    }
    __pyx_v_path = ((PyObject*)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("EnableLogging", 0, 0, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 37; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("_PyXAL.EnableLogging", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_path), (&PyString_Type), 1, "path", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 37; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2.__pyx_n = 2;
  __pyx_t_2.state = __pyx_v_state;
  __pyx_t_2.path = __pyx_v_path;
  __pyx_t_1 = __pyx_f_6_PyXAL_EnableLogging(0, &__pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 37; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_PyXAL.EnableLogging", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":42
 *     SetLogPath(path)
 * 
 * cdef void Log(chstr logMessage):             # <<<<<<<<<<<<<<
 *     global LOG_PATH
 *     global LOG_ENABLED
 */

static void __pyx_f_6_PyXAL_Log(chstr __pyx_v_logMessage) {
  const char* __pyx_v_message;
  const char* __pyx_v_line_end;
  PyObject *__pyx_v_s = NULL;
  PyObject *__pyx_v_path = NULL;
  PyObject *__pyx_v_file = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  const char* __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("Log");

  /* "_PyXAL.pyx":45
 *     global LOG_PATH
 *     global LOG_ENABLED
 *     if not LOG_ENABLED:             # <<<<<<<<<<<<<<
 *         return
 *     cdef const_char_ptr message
 */
  __pyx_t_1 = (!__pyx_v_6_PyXAL_LOG_ENABLED);
  if (__pyx_t_1) {

    /* "_PyXAL.pyx":46
 *     global LOG_ENABLED
 *     if not LOG_ENABLED:
 *         return             # <<<<<<<<<<<<<<
 *     cdef const_char_ptr message
 *     cdef const_char_ptr line_end = "\n"
 */
    goto __pyx_L0;
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "_PyXAL.pyx":48
 *         return
 *     cdef const_char_ptr message
 *     cdef const_char_ptr line_end = "\n"             # <<<<<<<<<<<<<<
 *     message = logMessage.c_str()
 *     s = message + line_end
 */
  __pyx_v_line_end = __pyx_k_2;

  /* "_PyXAL.pyx":49
 *     cdef const_char_ptr message
 *     cdef const_char_ptr line_end = "\n"
 *     message = logMessage.c_str()             # <<<<<<<<<<<<<<
 *     s = message + line_end
 *     message = s
 */
  __pyx_v_message = __pyx_v_logMessage.c_str();

  /* "_PyXAL.pyx":50
 *     cdef const_char_ptr line_end = "\n"
 *     message = logMessage.c_str()
 *     s = message + line_end             # <<<<<<<<<<<<<<
 *     message = s
 *     if os.path.exists(LOG_PATH):
 */
  __pyx_t_2 = PyBytes_FromString(__pyx_v_message); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  __pyx_t_3 = PyBytes_FromString(__pyx_v_line_end); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_3));
  __pyx_t_4 = PyNumber_Add(((PyObject *)__pyx_t_2), ((PyObject *)__pyx_t_3)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_4));
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
  __pyx_v_s = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "_PyXAL.pyx":51
 *     message = logMessage.c_str()
 *     s = message + line_end
 *     message = s             # <<<<<<<<<<<<<<
 *     if os.path.exists(LOG_PATH):
 *         path = os.path.join(LOG_PATH, "XAL.log")
 */
  __pyx_t_5 = PyBytes_AsString(((PyObject *)__pyx_v_s)); if (unlikely((__pyx_t_5 == (const char*)NULL) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 51; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_message = __pyx_t_5;

  /* "_PyXAL.pyx":52
 *     s = message + line_end
 *     message = s
 *     if os.path.exists(LOG_PATH):             # <<<<<<<<<<<<<<
 *         path = os.path.join(LOG_PATH, "XAL.log")
 *         file = open(path, "ab")
 */
  __pyx_t_4 = __Pyx_GetName(__pyx_m, __pyx_n_s__os); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 52; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = PyObject_GetAttr(__pyx_t_4, __pyx_n_s__path); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 52; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyObject_GetAttr(__pyx_t_3, __pyx_n_s__exists); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 52; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 52; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_3));
  __Pyx_INCREF(((PyObject *)__pyx_v_6_PyXAL_LOG_PATH));
  PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_v_6_PyXAL_LOG_PATH));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_6_PyXAL_LOG_PATH));
  __pyx_t_2 = PyObject_Call(__pyx_t_4, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 52; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 52; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_1) {

    /* "_PyXAL.pyx":53
 *     message = s
 *     if os.path.exists(LOG_PATH):
 *         path = os.path.join(LOG_PATH, "XAL.log")             # <<<<<<<<<<<<<<
 *         file = open(path, "ab")
 *         file.write(message)
 */
    __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__os); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 53; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__path); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 53; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyObject_GetAttr(__pyx_t_3, __pyx_n_s__join); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 53; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 53; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_3));
    __Pyx_INCREF(((PyObject *)__pyx_v_6_PyXAL_LOG_PATH));
    PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_v_6_PyXAL_LOG_PATH));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_6_PyXAL_LOG_PATH));
    __Pyx_INCREF(((PyObject *)__pyx_kp_s_3));
    PyTuple_SET_ITEM(__pyx_t_3, 1, ((PyObject *)__pyx_kp_s_3));
    __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_3));
    __pyx_t_4 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 53; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
    __pyx_v_path = __pyx_t_4;
    __pyx_t_4 = 0;

    /* "_PyXAL.pyx":54
 *     if os.path.exists(LOG_PATH):
 *         path = os.path.join(LOG_PATH, "XAL.log")
 *         file = open(path, "ab")             # <<<<<<<<<<<<<<
 *         file.write(message)
 *         file.close()
 */
    __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 54; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_4));
    __Pyx_INCREF(__pyx_v_path);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_path);
    __Pyx_GIVEREF(__pyx_v_path);
    __Pyx_INCREF(((PyObject *)__pyx_n_s__ab));
    PyTuple_SET_ITEM(__pyx_t_4, 1, ((PyObject *)__pyx_n_s__ab));
    __Pyx_GIVEREF(((PyObject *)__pyx_n_s__ab));
    __pyx_t_3 = PyObject_Call(__pyx_builtin_open, ((PyObject *)__pyx_t_4), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 54; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;
    __pyx_v_file = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "_PyXAL.pyx":55
 *         path = os.path.join(LOG_PATH, "XAL.log")
 *         file = open(path, "ab")
 *         file.write(message)             # <<<<<<<<<<<<<<
 *         file.close()
 * 
 */
    __pyx_t_3 = PyObject_GetAttr(__pyx_v_file, __pyx_n_s__write); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 55; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyBytes_FromString(__pyx_v_message); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 55; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_4));
    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 55; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_2));
    PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_t_4));
    __Pyx_GIVEREF(((PyObject *)__pyx_t_4));
    __pyx_t_4 = 0;
    __pyx_t_4 = PyObject_Call(__pyx_t_3, ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 55; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "_PyXAL.pyx":56
 *         file = open(path, "ab")
 *         file.write(message)
 *         file.close()             # <<<<<<<<<<<<<<
 * 
 * XAL.setLogFunction(Log)
 */
    __pyx_t_4 = PyObject_GetAttr(__pyx_v_file, __pyx_n_s__close); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 56; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = PyObject_Call(__pyx_t_4, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 56; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    goto __pyx_L4;
  }
  __pyx_L4:;

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_WriteUnraisable("_PyXAL.Log", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_s);
  __Pyx_XDECREF(__pyx_v_path);
  __Pyx_XDECREF(__pyx_v_file);
  __Pyx_RefNannyFinishContext();
}

/* "_PyXAL.pyx":70
 *     cdef XAL.AudioManager *_pointer
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         raise RuntimeError("PyAudioManager Can not be initialized from python")
 * 
 */

static int __pyx_pf_6_PyXAL_14PyAudioManager___init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pf_6_PyXAL_14PyAudioManager___init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__");
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;

  /* "_PyXAL.pyx":71
 * 
 *     def __init__(self):
 *         raise RuntimeError("PyAudioManager Can not be initialized from python")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_5), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 71; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  {__pyx_filename = __pyx_f[0]; __pyx_lineno = 71; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_PyXAL.PyAudioManager.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":78
 *     cdef XAL.Sound *_pointer
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         raise RuntimeError("PySound Can not be initialized from python")
 * 
 */

static int __pyx_pf_6_PyXAL_7PySound___init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pf_6_PyXAL_7PySound___init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__");
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;

  /* "_PyXAL.pyx":79
 * 
 *     def __init__(self):
 *         raise RuntimeError("PySound Can not be initialized from python")             # <<<<<<<<<<<<<<
 * 
 *     def isXALInitialized(self):
 */
  __pyx_t_1 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_7), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 79; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  {__pyx_filename = __pyx_f[0]; __pyx_lineno = 79; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_PyXAL.PySound.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":81
 *         raise RuntimeError("PySound Can not be initialized from python")
 * 
 *     def isXALInitialized(self):             # <<<<<<<<<<<<<<
 *         if XAL.mgr != NULL:
 *             return True
 */

static PyObject *__pyx_pf_6_PyXAL_7PySound_1isXALInitialized(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pf_6_PyXAL_7PySound_1isXALInitialized(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("isXALInitialized");

  /* "_PyXAL.pyx":82
 * 
 *     def isXALInitialized(self):
 *         if XAL.mgr != NULL:             # <<<<<<<<<<<<<<
 *             return True
 *         else:
 */
  __pyx_t_1 = (xal::mgr != NULL);
  if (__pyx_t_1) {

    /* "_PyXAL.pyx":83
 *     def isXALInitialized(self):
 *         if XAL.mgr != NULL:
 *             return True             # <<<<<<<<<<<<<<
 *         else:
 *             return False
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyBool_FromLong(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 83; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
    goto __pyx_L5;
  }
  /*else*/ {

    /* "_PyXAL.pyx":85
 *             return True
 *         else:
 *             return False             # <<<<<<<<<<<<<<
 * 
 *     def getName(self):
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyBool_FromLong(0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 85; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
  }
  __pyx_L5:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.PySound.isXALInitialized", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":87
 *             return False
 * 
 *     def getName(self):             # <<<<<<<<<<<<<<
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 */

static PyObject *__pyx_pf_6_PyXAL_7PySound_2getName(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pf_6_PyXAL_7PySound_2getName(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  hltypes::String __pyx_v_hl_name;
  const char* __pyx_v_name;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  hltypes::String __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getName");

  /* "_PyXAL.pyx":88
 * 
 *     def getName(self):
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         cdef String hl_name = self._pointer.getName()
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 88; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 88; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 88; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = (!__pyx_t_3);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":89
 *     def getName(self):
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         cdef String hl_name = self._pointer.getName()
 *         cdef const_char_ptr name = hl_name.c_str()
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_9), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 89; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 89; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "_PyXAL.pyx":90
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         cdef String hl_name = self._pointer.getName()             # <<<<<<<<<<<<<<
 *         cdef const_char_ptr name = hl_name.c_str()
 *         return name
 */
  try {__pyx_t_5 = ((struct __pyx_obj_6_PyXAL_PySound *)__pyx_v_self)->_pointer->getName();} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 90; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}
  __pyx_v_hl_name = __pyx_t_5;

  /* "_PyXAL.pyx":91
 *             raise RuntimeError("XAL is not Initialized")
 *         cdef String hl_name = self._pointer.getName()
 *         cdef const_char_ptr name = hl_name.c_str()             # <<<<<<<<<<<<<<
 *         return name
 * 
 */
  __pyx_v_name = __pyx_v_hl_name.c_str();

  /* "_PyXAL.pyx":92
 *         cdef String hl_name = self._pointer.getName()
 *         cdef const_char_ptr name = hl_name.c_str()
 *         return name             # <<<<<<<<<<<<<<
 * 
 *     def getFilename(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyBytes_FromString(__pyx_v_name); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 92; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  __pyx_r = ((PyObject *)__pyx_t_2);
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.PySound.getName", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":94
 *         return name
 * 
 *     def getFilename(self):             # <<<<<<<<<<<<<<
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 */

static PyObject *__pyx_pf_6_PyXAL_7PySound_3getFilename(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pf_6_PyXAL_7PySound_3getFilename(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  hltypes::String __pyx_v_hl_name;
  const char* __pyx_v_name;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  hltypes::String __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getFilename");

  /* "_PyXAL.pyx":95
 * 
 *     def getFilename(self):
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         cdef String hl_name = self._pointer.getFilename()
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 95; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 95; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 95; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = (!__pyx_t_3);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":96
 *     def getFilename(self):
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         cdef String hl_name = self._pointer.getFilename()
 *         cdef const_char_ptr name = hl_name.c_str()
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_10), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 96; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 96; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "_PyXAL.pyx":97
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         cdef String hl_name = self._pointer.getFilename()             # <<<<<<<<<<<<<<
 *         cdef const_char_ptr name = hl_name.c_str()
 *         return name
 */
  try {__pyx_t_5 = ((struct __pyx_obj_6_PyXAL_PySound *)__pyx_v_self)->_pointer->getFilename();} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 97; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}
  __pyx_v_hl_name = __pyx_t_5;

  /* "_PyXAL.pyx":98
 *             raise RuntimeError("XAL is not Initialized")
 *         cdef String hl_name = self._pointer.getFilename()
 *         cdef const_char_ptr name = hl_name.c_str()             # <<<<<<<<<<<<<<
 *         return name
 * 
 */
  __pyx_v_name = __pyx_v_hl_name.c_str();

  /* "_PyXAL.pyx":99
 *         cdef String hl_name = self._pointer.getFilename()
 *         cdef const_char_ptr name = hl_name.c_str()
 *         return name             # <<<<<<<<<<<<<<
 * 
 *     def getRealFilename(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyBytes_FromString(__pyx_v_name); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 99; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  __pyx_r = ((PyObject *)__pyx_t_2);
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.PySound.getFilename", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":101
 *         return name
 * 
 *     def getRealFilename(self):             # <<<<<<<<<<<<<<
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 */

static PyObject *__pyx_pf_6_PyXAL_7PySound_4getRealFilename(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pf_6_PyXAL_7PySound_4getRealFilename(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  hltypes::String __pyx_v_hl_name;
  const char* __pyx_v_name;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  hltypes::String __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getRealFilename");

  /* "_PyXAL.pyx":102
 * 
 *     def getRealFilename(self):
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         cdef String hl_name = self._pointer.getRealFilename()
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 102; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 102; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 102; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = (!__pyx_t_3);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":103
 *     def getRealFilename(self):
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         cdef String hl_name = self._pointer.getRealFilename()
 *         cdef const_char_ptr name = hl_name.c_str()
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_11), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 103; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 103; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "_PyXAL.pyx":104
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         cdef String hl_name = self._pointer.getRealFilename()             # <<<<<<<<<<<<<<
 *         cdef const_char_ptr name = hl_name.c_str()
 *         return name
 */
  try {__pyx_t_5 = ((struct __pyx_obj_6_PyXAL_PySound *)__pyx_v_self)->_pointer->getRealFilename();} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 104; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}
  __pyx_v_hl_name = __pyx_t_5;

  /* "_PyXAL.pyx":105
 *             raise RuntimeError("XAL is not Initialized")
 *         cdef String hl_name = self._pointer.getRealFilename()
 *         cdef const_char_ptr name = hl_name.c_str()             # <<<<<<<<<<<<<<
 *         return name
 * 
 */
  __pyx_v_name = __pyx_v_hl_name.c_str();

  /* "_PyXAL.pyx":106
 *         cdef String hl_name = self._pointer.getRealFilename()
 *         cdef const_char_ptr name = hl_name.c_str()
 *         return name             # <<<<<<<<<<<<<<
 * 
 *     def getSize(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyBytes_FromString(__pyx_v_name); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 106; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  __pyx_r = ((PyObject *)__pyx_t_2);
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.PySound.getRealFilename", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":108
 *         return name
 * 
 *     def getSize(self):             # <<<<<<<<<<<<<<
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 */

static PyObject *__pyx_pf_6_PyXAL_7PySound_5getSize(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pf_6_PyXAL_7PySound_5getSize(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  int __pyx_v_size;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getSize");

  /* "_PyXAL.pyx":109
 * 
 *     def getSize(self):
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         cdef int size = self._pointer.getSize()
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 109; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 109; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 109; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = (!__pyx_t_3);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":110
 *     def getSize(self):
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         cdef int size = self._pointer.getSize()
 *         return size
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_12), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 110; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 110; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "_PyXAL.pyx":111
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         cdef int size = self._pointer.getSize()             # <<<<<<<<<<<<<<
 *         return size
 * 
 */
  try {__pyx_t_5 = ((struct __pyx_obj_6_PyXAL_PySound *)__pyx_v_self)->_pointer->getSize();} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 111; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}
  __pyx_v_size = __pyx_t_5;

  /* "_PyXAL.pyx":112
 *             raise RuntimeError("XAL is not Initialized")
 *         cdef int size = self._pointer.getSize()
 *         return size             # <<<<<<<<<<<<<<
 * 
 *     def getChannels(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyInt_FromLong(__pyx_v_size); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 112; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.PySound.getSize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":114
 *         return size
 * 
 *     def getChannels(self):             # <<<<<<<<<<<<<<
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 */

static PyObject *__pyx_pf_6_PyXAL_7PySound_6getChannels(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pf_6_PyXAL_7PySound_6getChannels(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  int __pyx_v_channels;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getChannels");

  /* "_PyXAL.pyx":115
 * 
 *     def getChannels(self):
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         cdef int channels = self._pointer.getChannels()
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 115; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 115; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 115; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = (!__pyx_t_3);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":116
 *     def getChannels(self):
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         cdef int channels = self._pointer.getChannels()
 *         return channels
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_13), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 116; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 116; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "_PyXAL.pyx":117
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         cdef int channels = self._pointer.getChannels()             # <<<<<<<<<<<<<<
 *         return channels
 * 
 */
  try {__pyx_t_5 = ((struct __pyx_obj_6_PyXAL_PySound *)__pyx_v_self)->_pointer->getChannels();} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 117; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}
  __pyx_v_channels = __pyx_t_5;

  /* "_PyXAL.pyx":118
 *             raise RuntimeError("XAL is not Initialized")
 *         cdef int channels = self._pointer.getChannels()
 *         return channels             # <<<<<<<<<<<<<<
 * 
 *     def getSamplingRate(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyInt_FromLong(__pyx_v_channels); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 118; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.PySound.getChannels", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":120
 *         return channels
 * 
 *     def getSamplingRate(self):             # <<<<<<<<<<<<<<
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 */

static PyObject *__pyx_pf_6_PyXAL_7PySound_7getSamplingRate(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pf_6_PyXAL_7PySound_7getSamplingRate(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  int __pyx_v_rate;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getSamplingRate");

  /* "_PyXAL.pyx":121
 * 
 *     def getSamplingRate(self):
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         cdef int rate = self._pointer.getSamplingRate()
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 121; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 121; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 121; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = (!__pyx_t_3);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":122
 *     def getSamplingRate(self):
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         cdef int rate = self._pointer.getSamplingRate()
 *         return rate
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_14), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 122; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 122; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "_PyXAL.pyx":123
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         cdef int rate = self._pointer.getSamplingRate()             # <<<<<<<<<<<<<<
 *         return rate
 * 
 */
  try {__pyx_t_5 = ((struct __pyx_obj_6_PyXAL_PySound *)__pyx_v_self)->_pointer->getSamplingRate();} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 123; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}
  __pyx_v_rate = __pyx_t_5;

  /* "_PyXAL.pyx":124
 *             raise RuntimeError("XAL is not Initialized")
 *         cdef int rate = self._pointer.getSamplingRate()
 *         return rate             # <<<<<<<<<<<<<<
 * 
 *     def getBitsPerSample(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyInt_FromLong(__pyx_v_rate); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 124; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.PySound.getSamplingRate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":126
 *         return rate
 * 
 *     def getBitsPerSample(self):             # <<<<<<<<<<<<<<
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 */

static PyObject *__pyx_pf_6_PyXAL_7PySound_8getBitsPerSample(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pf_6_PyXAL_7PySound_8getBitsPerSample(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  int __pyx_v_rate;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getBitsPerSample");

  /* "_PyXAL.pyx":127
 * 
 *     def getBitsPerSample(self):
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         cdef int rate = self._pointer.getBitsPerSample()
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 127; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 127; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 127; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = (!__pyx_t_3);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":128
 *     def getBitsPerSample(self):
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         cdef int rate = self._pointer.getBitsPerSample()
 *         return rate
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_15), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 128; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 128; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "_PyXAL.pyx":129
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         cdef int rate = self._pointer.getBitsPerSample()             # <<<<<<<<<<<<<<
 *         return rate
 * 
 */
  try {__pyx_t_5 = ((struct __pyx_obj_6_PyXAL_PySound *)__pyx_v_self)->_pointer->getBitsPerSample();} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 129; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}
  __pyx_v_rate = __pyx_t_5;

  /* "_PyXAL.pyx":130
 *             raise RuntimeError("XAL is not Initialized")
 *         cdef int rate = self._pointer.getBitsPerSample()
 *         return rate             # <<<<<<<<<<<<<<
 * 
 *     def getDuration(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyInt_FromLong(__pyx_v_rate); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 130; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.PySound.getBitsPerSample", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":132
 *         return rate
 * 
 *     def getDuration(self):             # <<<<<<<<<<<<<<
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 */

static PyObject *__pyx_pf_6_PyXAL_7PySound_9getDuration(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pf_6_PyXAL_7PySound_9getDuration(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  float __pyx_v_duration;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  float __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getDuration");

  /* "_PyXAL.pyx":133
 * 
 *     def getDuration(self):
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         cdef float duration = self._pointer.getDuration()
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 133; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 133; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 133; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = (!__pyx_t_3);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":134
 *     def getDuration(self):
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         cdef float duration = self._pointer.getDuration()
 *         return duration
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_16), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 134; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 134; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "_PyXAL.pyx":135
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         cdef float duration = self._pointer.getDuration()             # <<<<<<<<<<<<<<
 *         return duration
 * 
 */
  try {__pyx_t_5 = ((struct __pyx_obj_6_PyXAL_PySound *)__pyx_v_self)->_pointer->getDuration();} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 135; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}
  __pyx_v_duration = __pyx_t_5;

  /* "_PyXAL.pyx":136
 *             raise RuntimeError("XAL is not Initialized")
 *         cdef float duration = self._pointer.getDuration()
 *         return duration             # <<<<<<<<<<<<<<
 * 
 *     def getFormat(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_duration); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 136; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.PySound.getDuration", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":138
 *         return duration
 * 
 *     def getFormat(self):             # <<<<<<<<<<<<<<
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 */

static PyObject *__pyx_pf_6_PyXAL_7PySound_10getFormat(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pf_6_PyXAL_7PySound_10getFormat(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  int __pyx_v_format;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  enum xal::Format __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getFormat");

  /* "_PyXAL.pyx":139
 * 
 *     def getFormat(self):
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         cdef int format = self._pointer.getFormat()
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 139; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 139; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 139; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = (!__pyx_t_3);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":140
 *     def getFormat(self):
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         cdef int format = self._pointer.getFormat()
 *         return format
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_17), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 140; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 140; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "_PyXAL.pyx":141
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         cdef int format = self._pointer.getFormat()             # <<<<<<<<<<<<<<
 *         return format
 * 
 */
  try {__pyx_t_5 = ((struct __pyx_obj_6_PyXAL_PySound *)__pyx_v_self)->_pointer->getFormat();} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 141; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}
  __pyx_v_format = __pyx_t_5;

  /* "_PyXAL.pyx":142
 *             raise RuntimeError("XAL is not Initialized")
 *         cdef int format = self._pointer.getFormat()
 *         return format             # <<<<<<<<<<<<<<
 * 
 *     def isStreamed(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyInt_FromLong(__pyx_v_format); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 142; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.PySound.getFormat", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":144
 *         return format
 * 
 *     def isStreamed(self):             # <<<<<<<<<<<<<<
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 */

static PyObject *__pyx_pf_6_PyXAL_7PySound_11isStreamed(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pf_6_PyXAL_7PySound_11isStreamed(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  int __pyx_v_streamed;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  bool __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("isStreamed");

  /* "_PyXAL.pyx":145
 * 
 *     def isStreamed(self):
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         cdef bint streamed = self._pointer.isStreamed()
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 145; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 145; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 145; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = (!__pyx_t_3);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":146
 *     def isStreamed(self):
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         cdef bint streamed = self._pointer.isStreamed()
 *         return streamed
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_18), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 146; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 146; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "_PyXAL.pyx":147
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         cdef bint streamed = self._pointer.isStreamed()             # <<<<<<<<<<<<<<
 *         return streamed
 * 
 */
  try {__pyx_t_5 = ((struct __pyx_obj_6_PyXAL_PySound *)__pyx_v_self)->_pointer->isStreamed();} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 147; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}
  __pyx_v_streamed = __pyx_t_5;

  /* "_PyXAL.pyx":148
 *             raise RuntimeError("XAL is not Initialized")
 *         cdef bint streamed = self._pointer.isStreamed()
 *         return streamed             # <<<<<<<<<<<<<<
 * 
 *     def readRawData(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_streamed); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 148; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.PySound.isStreamed", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":150
 *         return streamed
 * 
 *     def readRawData(self):             # <<<<<<<<<<<<<<
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 */

static PyObject *__pyx_pf_6_PyXAL_7PySound_12readRawData(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pf_6_PyXAL_7PySound_12readRawData(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  unsigned char *__pyx_v_raw_data;
  int __pyx_v_raw_size;
  char *__pyx_v_c_data;
  PyObject *__pyx_v_data = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("readRawData");

  /* "_PyXAL.pyx":151
 * 
 *     def readRawData(self):
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         cdef unsigned char* raw_data
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 151; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 151; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 151; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = (!__pyx_t_3);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":152
 *     def readRawData(self):
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         cdef unsigned char* raw_data
 *         cdef int raw_size
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_19), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 152; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 152; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "_PyXAL.pyx":155
 *         cdef unsigned char* raw_data
 *         cdef int raw_size
 *         raw_size = self._pointer.readRawData(&raw_data)             # <<<<<<<<<<<<<<
 *         cdef char* c_data = ""
 *         data = ""
 */
  try {__pyx_t_5 = ((struct __pyx_obj_6_PyXAL_PySound *)__pyx_v_self)->_pointer->readRawData((&__pyx_v_raw_data));} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 155; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}
  __pyx_v_raw_size = __pyx_t_5;

  /* "_PyXAL.pyx":156
 *         cdef int raw_size
 *         raw_size = self._pointer.readRawData(&raw_data)
 *         cdef char* c_data = ""             # <<<<<<<<<<<<<<
 *         data = ""
 *         if raw_size > 0:
 */
  __pyx_v_c_data = __pyx_k_1;

  /* "_PyXAL.pyx":157
 *         raw_size = self._pointer.readRawData(&raw_data)
 *         cdef char* c_data = ""
 *         data = ""             # <<<<<<<<<<<<<<
 *         if raw_size > 0:
 *             c_data = <char*>raw_data
 */
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_1));
  __pyx_v_data = ((PyObject *)__pyx_kp_s_1);

  /* "_PyXAL.pyx":158
 *         cdef char* c_data = ""
 *         data = ""
 *         if raw_size > 0:             # <<<<<<<<<<<<<<
 *             c_data = <char*>raw_data
 *             data = c_data[:raw_size]
 */
  __pyx_t_4 = (__pyx_v_raw_size > 0);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":159
 *         data = ""
 *         if raw_size > 0:
 *             c_data = <char*>raw_data             # <<<<<<<<<<<<<<
 *             data = c_data[:raw_size]
 *         return (raw_size, data)
 */
    __pyx_v_c_data = ((char *)__pyx_v_raw_data);

    /* "_PyXAL.pyx":160
 *         if raw_size > 0:
 *             c_data = <char*>raw_data
 *             data = c_data[:raw_size]             # <<<<<<<<<<<<<<
 *         return (raw_size, data)
 * 
 */
    __pyx_t_2 = PyBytes_FromStringAndSize(__pyx_v_c_data + 0, __pyx_v_raw_size - 0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 160; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_2));
    __Pyx_DECREF(__pyx_v_data);
    __pyx_v_data = ((PyObject *)__pyx_t_2);
    __pyx_t_2 = 0;
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "_PyXAL.pyx":161
 *             c_data = <char*>raw_data
 *             data = c_data[:raw_size]
 *         return (raw_size, data)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyInt_FromLong(__pyx_v_raw_size); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 161; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 161; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_data);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_data);
  __Pyx_GIVEREF(__pyx_v_data);
  __pyx_t_2 = 0;
  __pyx_r = ((PyObject *)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.PySound.readRawData", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_data);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":168
 *     cdef XAL.Player *_pointer
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         raise RuntimeError("PyPlayer Can not be initialized from python")
 * 
 */

static int __pyx_pf_6_PyXAL_8PyPlayer___init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pf_6_PyXAL_8PyPlayer___init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__");
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;

  /* "_PyXAL.pyx":169
 * 
 *     def __init__(self):
 *         raise RuntimeError("PyPlayer Can not be initialized from python")             # <<<<<<<<<<<<<<
 * 
 *     def isXALInitialized(self):
 */
  __pyx_t_1 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_21), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 169; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  {__pyx_filename = __pyx_f[0]; __pyx_lineno = 169; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_PyXAL.PyPlayer.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":171
 *         raise RuntimeError("PyPlayer Can not be initialized from python")
 * 
 *     def isXALInitialized(self):             # <<<<<<<<<<<<<<
 *         if XAL.mgr != NULL:
 *             return True
 */

static PyObject *__pyx_pf_6_PyXAL_8PyPlayer_1isXALInitialized(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pf_6_PyXAL_8PyPlayer_1isXALInitialized(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("isXALInitialized");

  /* "_PyXAL.pyx":172
 * 
 *     def isXALInitialized(self):
 *         if XAL.mgr != NULL:             # <<<<<<<<<<<<<<
 *             return True
 *         else:
 */
  __pyx_t_1 = (xal::mgr != NULL);
  if (__pyx_t_1) {

    /* "_PyXAL.pyx":173
 *     def isXALInitialized(self):
 *         if XAL.mgr != NULL:
 *             return True             # <<<<<<<<<<<<<<
 *         else:
 *             return False
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyBool_FromLong(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 173; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
    goto __pyx_L5;
  }
  /*else*/ {

    /* "_PyXAL.pyx":175
 *             return True
 *         else:
 *             return False             # <<<<<<<<<<<<<<
 * 
 *     def getGain(self):
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyBool_FromLong(0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 175; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
  }
  __pyx_L5:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.PyPlayer.isXALInitialized", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":177
 *             return False
 * 
 *     def getGain(self):             # <<<<<<<<<<<<<<
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 */

static PyObject *__pyx_pf_6_PyXAL_8PyPlayer_2getGain(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pf_6_PyXAL_8PyPlayer_2getGain(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  float __pyx_v_gain;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  float __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getGain");

  /* "_PyXAL.pyx":178
 * 
 *     def getGain(self):
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         cdef float gain = self._pointer.getGain()
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 178; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 178; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 178; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = (!__pyx_t_3);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":179
 *     def getGain(self):
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         cdef float gain = self._pointer.getGain()
 *         return gain
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_22), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 179; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 179; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "_PyXAL.pyx":180
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         cdef float gain = self._pointer.getGain()             # <<<<<<<<<<<<<<
 *         return gain
 * 
 */
  try {__pyx_t_5 = ((struct __pyx_obj_6_PyXAL_PyPlayer *)__pyx_v_self)->_pointer->getGain();} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 180; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}
  __pyx_v_gain = __pyx_t_5;

  /* "_PyXAL.pyx":181
 *             raise RuntimeError("XAL is not Initialized")
 *         cdef float gain = self._pointer.getGain()
 *         return gain             # <<<<<<<<<<<<<<
 * 
 *     def setGain(self, float value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_gain); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 181; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.PyPlayer.getGain", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":183
 *         return gain
 * 
 *     def setGain(self, float value):             # <<<<<<<<<<<<<<
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 */

static PyObject *__pyx_pf_6_PyXAL_8PyPlayer_3setGain(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static PyObject *__pyx_pf_6_PyXAL_8PyPlayer_3setGain(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  float __pyx_v_value;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setGain");
  assert(__pyx_arg_value); {
    __pyx_v_value = __pyx_PyFloat_AsDouble(__pyx_arg_value); if (unlikely((__pyx_v_value == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 183; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("_PyXAL.PyPlayer.setGain", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "_PyXAL.pyx":184
 * 
 *     def setGain(self, float value):
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         self._pointer.setGain(value)
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 184; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 184; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 184; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = (!__pyx_t_3);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":185
 *     def setGain(self, float value):
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         self._pointer.setGain(value)
 * 
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_23), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 185; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 185; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "_PyXAL.pyx":186
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         self._pointer.setGain(value)             # <<<<<<<<<<<<<<
 * 
 *     def getOffset(self):
 */
  try {((struct __pyx_obj_6_PyXAL_PyPlayer *)__pyx_v_self)->_pointer->setGain(__pyx_v_value);} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 186; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.PyPlayer.setGain", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":188
 *         self._pointer.setGain(value)
 * 
 *     def getOffset(self):             # <<<<<<<<<<<<<<
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 */

static PyObject *__pyx_pf_6_PyXAL_8PyPlayer_4getOffset(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pf_6_PyXAL_8PyPlayer_4getOffset(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  float __pyx_v_offset;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  float __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getOffset");

  /* "_PyXAL.pyx":189
 * 
 *     def getOffset(self):
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         cdef float offset = self._pointer.getOffset()
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 189; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 189; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 189; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = (!__pyx_t_3);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":190
 *     def getOffset(self):
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         cdef float offset = self._pointer.getOffset()
 *         return offset
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_24), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 190; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 190; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "_PyXAL.pyx":191
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         cdef float offset = self._pointer.getOffset()             # <<<<<<<<<<<<<<
 *         return offset
 * 
 */
  try {__pyx_t_5 = ((struct __pyx_obj_6_PyXAL_PyPlayer *)__pyx_v_self)->_pointer->getOffset();} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 191; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}
  __pyx_v_offset = __pyx_t_5;

  /* "_PyXAL.pyx":192
 *             raise RuntimeError("XAL is not Initialized")
 *         cdef float offset = self._pointer.getOffset()
 *         return offset             # <<<<<<<<<<<<<<
 * 
 *     def getSound(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_offset); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 192; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.PyPlayer.getOffset", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":194
 *         return offset
 * 
 *     def getSound(self):             # <<<<<<<<<<<<<<
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 */

static PyObject *__pyx_pf_6_PyXAL_8PyPlayer_5getSound(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pf_6_PyXAL_8PyPlayer_5getSound(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  xal::Sound *__pyx_v_sound;
  struct __pyx_obj_6_PyXAL_PySound *__pyx_v_pysound = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  xal::Sound *__pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getSound");

  /* "_PyXAL.pyx":195
 * 
 *     def getSound(self):
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         cdef XAL.Sound* sound = self._pointer.getSound()
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 195; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 195; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 195; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = (!__pyx_t_3);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":196
 *     def getSound(self):
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         cdef XAL.Sound* sound = self._pointer.getSound()
 *         cdef PySound pysound = PySound()
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_25), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 196; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 196; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "_PyXAL.pyx":197
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         cdef XAL.Sound* sound = self._pointer.getSound()             # <<<<<<<<<<<<<<
 *         cdef PySound pysound = PySound()
 *         pysound._pointer = sound
 */
  try {__pyx_t_5 = ((struct __pyx_obj_6_PyXAL_PyPlayer *)__pyx_v_self)->_pointer->getSound();} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 197; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}
  __pyx_v_sound = __pyx_t_5;

  /* "_PyXAL.pyx":198
 *             raise RuntimeError("XAL is not Initialized")
 *         cdef XAL.Sound* sound = self._pointer.getSound()
 *         cdef PySound pysound = PySound()             # <<<<<<<<<<<<<<
 *         pysound._pointer = sound
 *         return pysound
 */
  __pyx_t_2 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_6_PyXAL_PySound)), ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 198; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_pysound = ((struct __pyx_obj_6_PyXAL_PySound *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "_PyXAL.pyx":199
 *         cdef XAL.Sound* sound = self._pointer.getSound()
 *         cdef PySound pysound = PySound()
 *         pysound._pointer = sound             # <<<<<<<<<<<<<<
 *         return pysound
 * 
 */
  __pyx_v_pysound->_pointer = __pyx_v_sound;

  /* "_PyXAL.pyx":200
 *         cdef PySound pysound = PySound()
 *         pysound._pointer = sound
 *         return pysound             # <<<<<<<<<<<<<<
 * 
 *     def getName(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_pysound));
  __pyx_r = ((PyObject *)__pyx_v_pysound);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.PyPlayer.getSound", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_pysound);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":202
 *         return pysound
 * 
 *     def getName(self):             # <<<<<<<<<<<<<<
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 */

static PyObject *__pyx_pf_6_PyXAL_8PyPlayer_6getName(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pf_6_PyXAL_8PyPlayer_6getName(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  hltypes::String __pyx_v_hl_name;
  const char* __pyx_v_name;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  hltypes::String __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getName");

  /* "_PyXAL.pyx":203
 * 
 *     def getName(self):
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         cdef String hl_name = self._pointer.getName()
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 203; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 203; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 203; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = (!__pyx_t_3);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":204
 *     def getName(self):
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         cdef String hl_name = self._pointer.getName()
 *         cdef const_char_ptr name = hl_name.c_str()
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_26), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 204; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 204; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "_PyXAL.pyx":205
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         cdef String hl_name = self._pointer.getName()             # <<<<<<<<<<<<<<
 *         cdef const_char_ptr name = hl_name.c_str()
 *         return name
 */
  try {__pyx_t_5 = ((struct __pyx_obj_6_PyXAL_PyPlayer *)__pyx_v_self)->_pointer->getName();} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 205; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}
  __pyx_v_hl_name = __pyx_t_5;

  /* "_PyXAL.pyx":206
 *             raise RuntimeError("XAL is not Initialized")
 *         cdef String hl_name = self._pointer.getName()
 *         cdef const_char_ptr name = hl_name.c_str()             # <<<<<<<<<<<<<<
 *         return name
 * 
 */
  __pyx_v_name = __pyx_v_hl_name.c_str();

  /* "_PyXAL.pyx":207
 *         cdef String hl_name = self._pointer.getName()
 *         cdef const_char_ptr name = hl_name.c_str()
 *         return name             # <<<<<<<<<<<<<<
 * 
 *     def getFilename(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyBytes_FromString(__pyx_v_name); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 207; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  __pyx_r = ((PyObject *)__pyx_t_2);
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.PyPlayer.getName", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":209
 *         return name
 * 
 *     def getFilename(self):             # <<<<<<<<<<<<<<
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 */

static PyObject *__pyx_pf_6_PyXAL_8PyPlayer_7getFilename(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pf_6_PyXAL_8PyPlayer_7getFilename(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  hltypes::String __pyx_v_hl_name;
  const char* __pyx_v_name;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  hltypes::String __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getFilename");

  /* "_PyXAL.pyx":210
 * 
 *     def getFilename(self):
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         cdef String hl_name = self._pointer.getFilename()
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 210; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 210; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 210; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = (!__pyx_t_3);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":211
 *     def getFilename(self):
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         cdef String hl_name = self._pointer.getFilename()
 *         cdef const_char_ptr name = hl_name.c_str()
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_27), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 211; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 211; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "_PyXAL.pyx":212
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         cdef String hl_name = self._pointer.getFilename()             # <<<<<<<<<<<<<<
 *         cdef const_char_ptr name = hl_name.c_str()
 *         return name
 */
  try {__pyx_t_5 = ((struct __pyx_obj_6_PyXAL_PyPlayer *)__pyx_v_self)->_pointer->getFilename();} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 212; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}
  __pyx_v_hl_name = __pyx_t_5;

  /* "_PyXAL.pyx":213
 *             raise RuntimeError("XAL is not Initialized")
 *         cdef String hl_name = self._pointer.getFilename()
 *         cdef const_char_ptr name = hl_name.c_str()             # <<<<<<<<<<<<<<
 *         return name
 * 
 */
  __pyx_v_name = __pyx_v_hl_name.c_str();

  /* "_PyXAL.pyx":214
 *         cdef String hl_name = self._pointer.getFilename()
 *         cdef const_char_ptr name = hl_name.c_str()
 *         return name             # <<<<<<<<<<<<<<
 * 
 *     def getRealFilename(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyBytes_FromString(__pyx_v_name); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 214; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  __pyx_r = ((PyObject *)__pyx_t_2);
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.PyPlayer.getFilename", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":216
 *         return name
 * 
 *     def getRealFilename(self):             # <<<<<<<<<<<<<<
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 */

static PyObject *__pyx_pf_6_PyXAL_8PyPlayer_8getRealFilename(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pf_6_PyXAL_8PyPlayer_8getRealFilename(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  hltypes::String __pyx_v_hl_name;
  const char* __pyx_v_name;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  hltypes::String __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getRealFilename");

  /* "_PyXAL.pyx":217
 * 
 *     def getRealFilename(self):
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         cdef String hl_name = self._pointer.getRealFilename()
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 217; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 217; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 217; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = (!__pyx_t_3);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":218
 *     def getRealFilename(self):
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         cdef String hl_name = self._pointer.getRealFilename()
 *         cdef const_char_ptr name = hl_name.c_str()
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_28), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 218; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 218; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "_PyXAL.pyx":219
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         cdef String hl_name = self._pointer.getRealFilename()             # <<<<<<<<<<<<<<
 *         cdef const_char_ptr name = hl_name.c_str()
 *         return name
 */
  try {__pyx_t_5 = ((struct __pyx_obj_6_PyXAL_PyPlayer *)__pyx_v_self)->_pointer->getRealFilename();} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 219; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}
  __pyx_v_hl_name = __pyx_t_5;

  /* "_PyXAL.pyx":220
 *             raise RuntimeError("XAL is not Initialized")
 *         cdef String hl_name = self._pointer.getRealFilename()
 *         cdef const_char_ptr name = hl_name.c_str()             # <<<<<<<<<<<<<<
 *         return name
 * 
 */
  __pyx_v_name = __pyx_v_hl_name.c_str();

  /* "_PyXAL.pyx":221
 *         cdef String hl_name = self._pointer.getRealFilename()
 *         cdef const_char_ptr name = hl_name.c_str()
 *         return name             # <<<<<<<<<<<<<<
 * 
 *     def getDuration(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyBytes_FromString(__pyx_v_name); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 221; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  __pyx_r = ((PyObject *)__pyx_t_2);
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.PyPlayer.getRealFilename", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":223
 *         return name
 * 
 *     def getDuration(self):             # <<<<<<<<<<<<<<
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 */

static PyObject *__pyx_pf_6_PyXAL_8PyPlayer_9getDuration(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pf_6_PyXAL_8PyPlayer_9getDuration(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  float __pyx_v_duration;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  float __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getDuration");

  /* "_PyXAL.pyx":224
 * 
 *     def getDuration(self):
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         cdef float duration = self._pointer.getDuration()
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 224; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 224; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 224; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = (!__pyx_t_3);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":225
 *     def getDuration(self):
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         cdef float duration = self._pointer.getDuration()
 *         return duration
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_29), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 225; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 225; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "_PyXAL.pyx":226
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         cdef float duration = self._pointer.getDuration()             # <<<<<<<<<<<<<<
 *         return duration
 * 
 */
  try {__pyx_t_5 = ((struct __pyx_obj_6_PyXAL_PyPlayer *)__pyx_v_self)->_pointer->getDuration();} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 226; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}
  __pyx_v_duration = __pyx_t_5;

  /* "_PyXAL.pyx":227
 *             raise RuntimeError("XAL is not Initialized")
 *         cdef float duration = self._pointer.getDuration()
 *         return duration             # <<<<<<<<<<<<<<
 * 
 *     def getSize(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_duration); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 227; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.PyPlayer.getDuration", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":229
 *         return duration
 * 
 *     def getSize(self):             # <<<<<<<<<<<<<<
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 */

static PyObject *__pyx_pf_6_PyXAL_8PyPlayer_10getSize(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pf_6_PyXAL_8PyPlayer_10getSize(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  int __pyx_v_size;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getSize");

  /* "_PyXAL.pyx":230
 * 
 *     def getSize(self):
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         cdef int size = self._pointer.getSize()
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 230; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 230; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 230; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = (!__pyx_t_3);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":231
 *     def getSize(self):
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         cdef int size = self._pointer.getSize()
 *         return size
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_30), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 231; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 231; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "_PyXAL.pyx":232
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         cdef int size = self._pointer.getSize()             # <<<<<<<<<<<<<<
 *         return size
 * 
 */
  try {__pyx_t_5 = ((struct __pyx_obj_6_PyXAL_PyPlayer *)__pyx_v_self)->_pointer->getSize();} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 232; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}
  __pyx_v_size = __pyx_t_5;

  /* "_PyXAL.pyx":233
 *             raise RuntimeError("XAL is not Initialized")
 *         cdef int size = self._pointer.getSize()
 *         return size             # <<<<<<<<<<<<<<
 * 
 *     def isPlaying(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyInt_FromLong(__pyx_v_size); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 233; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.PyPlayer.getSize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":235
 *         return size
 * 
 *     def isPlaying(self):             # <<<<<<<<<<<<<<
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 */

static PyObject *__pyx_pf_6_PyXAL_8PyPlayer_11isPlaying(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pf_6_PyXAL_8PyPlayer_11isPlaying(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  bool __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("isPlaying");

  /* "_PyXAL.pyx":236
 * 
 *     def isPlaying(self):
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         return self._pointer.isPlaying()
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 236; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 236; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 236; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = (!__pyx_t_3);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":237
 *     def isPlaying(self):
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         return self._pointer.isPlaying()
 * 
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_31), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 237; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 237; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "_PyXAL.pyx":238
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         return self._pointer.isPlaying()             # <<<<<<<<<<<<<<
 * 
 *     def isPaused(self):
 */
  __Pyx_XDECREF(__pyx_r);
  try {__pyx_t_5 = ((struct __pyx_obj_6_PyXAL_PyPlayer *)__pyx_v_self)->_pointer->isPlaying();} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 238; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_t_5); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 238; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.PyPlayer.isPlaying", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":240
 *         return self._pointer.isPlaying()
 * 
 *     def isPaused(self):             # <<<<<<<<<<<<<<
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 */

static PyObject *__pyx_pf_6_PyXAL_8PyPlayer_12isPaused(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pf_6_PyXAL_8PyPlayer_12isPaused(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  bool __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("isPaused");

  /* "_PyXAL.pyx":241
 * 
 *     def isPaused(self):
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         return self._pointer.isPaused()
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 241; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 241; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 241; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = (!__pyx_t_3);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":242
 *     def isPaused(self):
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         return self._pointer.isPaused()
 * 
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_32), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 242; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 242; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "_PyXAL.pyx":243
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         return self._pointer.isPaused()             # <<<<<<<<<<<<<<
 * 
 *     def isFading(self):
 */
  __Pyx_XDECREF(__pyx_r);
  try {__pyx_t_5 = ((struct __pyx_obj_6_PyXAL_PyPlayer *)__pyx_v_self)->_pointer->isPaused();} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 243; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_t_5); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 243; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.PyPlayer.isPaused", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":245
 *         return self._pointer.isPaused()
 * 
 *     def isFading(self):             # <<<<<<<<<<<<<<
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 */

static PyObject *__pyx_pf_6_PyXAL_8PyPlayer_13isFading(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pf_6_PyXAL_8PyPlayer_13isFading(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  bool __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("isFading");

  /* "_PyXAL.pyx":246
 * 
 *     def isFading(self):
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         return self._pointer.isFading()
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 246; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 246; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 246; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = (!__pyx_t_3);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":247
 *     def isFading(self):
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         return self._pointer.isFading()
 * 
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_33), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 247; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 247; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "_PyXAL.pyx":248
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         return self._pointer.isFading()             # <<<<<<<<<<<<<<
 * 
 *     def isFadingIn(self):
 */
  __Pyx_XDECREF(__pyx_r);
  try {__pyx_t_5 = ((struct __pyx_obj_6_PyXAL_PyPlayer *)__pyx_v_self)->_pointer->isFading();} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 248; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_t_5); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 248; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.PyPlayer.isFading", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":250
 *         return self._pointer.isFading()
 * 
 *     def isFadingIn(self):             # <<<<<<<<<<<<<<
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 */

static PyObject *__pyx_pf_6_PyXAL_8PyPlayer_14isFadingIn(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pf_6_PyXAL_8PyPlayer_14isFadingIn(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  bool __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("isFadingIn");

  /* "_PyXAL.pyx":251
 * 
 *     def isFadingIn(self):
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         return self._pointer.isFadingIn()
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 251; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 251; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 251; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = (!__pyx_t_3);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":252
 *     def isFadingIn(self):
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         return self._pointer.isFadingIn()
 * 
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_34), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 252; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 252; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "_PyXAL.pyx":253
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         return self._pointer.isFadingIn()             # <<<<<<<<<<<<<<
 * 
 *     def isFadingOut(self):
 */
  __Pyx_XDECREF(__pyx_r);
  try {__pyx_t_5 = ((struct __pyx_obj_6_PyXAL_PyPlayer *)__pyx_v_self)->_pointer->isFadingIn();} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 253; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_t_5); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 253; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.PyPlayer.isFadingIn", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":255
 *         return self._pointer.isFadingIn()
 * 
 *     def isFadingOut(self):             # <<<<<<<<<<<<<<
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 */

static PyObject *__pyx_pf_6_PyXAL_8PyPlayer_15isFadingOut(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pf_6_PyXAL_8PyPlayer_15isFadingOut(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  bool __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("isFadingOut");

  /* "_PyXAL.pyx":256
 * 
 *     def isFadingOut(self):
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         return self._pointer.isFadingOut()
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 256; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 256; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 256; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = (!__pyx_t_3);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":257
 *     def isFadingOut(self):
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         return self._pointer.isFadingOut()
 * 
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_35), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 257; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 257; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "_PyXAL.pyx":258
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         return self._pointer.isFadingOut()             # <<<<<<<<<<<<<<
 * 
 *     def isLooping(self):
 */
  __Pyx_XDECREF(__pyx_r);
  try {__pyx_t_5 = ((struct __pyx_obj_6_PyXAL_PyPlayer *)__pyx_v_self)->_pointer->isFadingOut();} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 258; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_t_5); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 258; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.PyPlayer.isFadingOut", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":260
 *         return self._pointer.isFadingOut()
 * 
 *     def isLooping(self):             # <<<<<<<<<<<<<<
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 */

static PyObject *__pyx_pf_6_PyXAL_8PyPlayer_16isLooping(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pf_6_PyXAL_8PyPlayer_16isLooping(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  bool __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("isLooping");

  /* "_PyXAL.pyx":261
 * 
 *     def isLooping(self):
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         return self._pointer.isLooping()
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 261; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 261; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 261; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = (!__pyx_t_3);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":262
 *     def isLooping(self):
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         return self._pointer.isLooping()
 * 
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_36), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 262; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 262; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "_PyXAL.pyx":263
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         return self._pointer.isLooping()             # <<<<<<<<<<<<<<
 * 
 *     def play(self, float fadeTime = 0.0, bool looping = False):
 */
  __Pyx_XDECREF(__pyx_r);
  try {__pyx_t_5 = ((struct __pyx_obj_6_PyXAL_PyPlayer *)__pyx_v_self)->_pointer->isLooping();} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 263; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_t_5); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 263; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.PyPlayer.isLooping", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":265
 *         return self._pointer.isLooping()
 * 
 *     def play(self, float fadeTime = 0.0, bool looping = False):             # <<<<<<<<<<<<<<
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 */

static PyObject *__pyx_pf_6_PyXAL_8PyPlayer_17play(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pf_6_PyXAL_8PyPlayer_17play(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  float __pyx_v_fadeTime;
  bool __pyx_v_looping;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__fadeTime,&__pyx_n_s__looping,0};
  __Pyx_RefNannySetupContext("play");
  {
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__fadeTime);
          if (value) { values[0] = value; kw_args--; }
        }
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__looping);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "play") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 265; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_fadeTime = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_fadeTime == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 265; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_fadeTime = ((float)0.0);
    }
    if (values[1]) {
      __pyx_v_looping = __Pyx_PyObject_IsTrue(values[1]); if (unlikely((__pyx_v_looping == (bool)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 265; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_looping = ((bool)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("play", 0, 0, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 265; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("_PyXAL.PyPlayer.play", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "_PyXAL.pyx":266
 * 
 *     def play(self, float fadeTime = 0.0, bool looping = False):
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         self._pointer.play(fadeTime, looping)
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 266; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 266; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 266; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = (!__pyx_t_3);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":267
 *     def play(self, float fadeTime = 0.0, bool looping = False):
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         self._pointer.play(fadeTime, looping)
 * 
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_37), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 267; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 267; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "_PyXAL.pyx":268
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         self._pointer.play(fadeTime, looping)             # <<<<<<<<<<<<<<
 * 
 *     def stop(self, float fadeTime = 0.0):
 */
  try {((struct __pyx_obj_6_PyXAL_PyPlayer *)__pyx_v_self)->_pointer->play(__pyx_v_fadeTime, __pyx_v_looping);} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 268; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.PyPlayer.play", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":270
 *         self._pointer.play(fadeTime, looping)
 * 
 *     def stop(self, float fadeTime = 0.0):             # <<<<<<<<<<<<<<
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 */

static PyObject *__pyx_pf_6_PyXAL_8PyPlayer_18stop(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pf_6_PyXAL_8PyPlayer_18stop(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  float __pyx_v_fadeTime;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__fadeTime,0};
  __Pyx_RefNannySetupContext("stop");
  {
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__fadeTime);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "stop") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 270; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_fadeTime = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_fadeTime == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 270; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_fadeTime = ((float)0.0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("stop", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 270; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("_PyXAL.PyPlayer.stop", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "_PyXAL.pyx":271
 * 
 *     def stop(self, float fadeTime = 0.0):
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         self._pointer.stop(fadeTime)
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 271; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 271; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 271; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = (!__pyx_t_3);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":272
 *     def stop(self, float fadeTime = 0.0):
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         self._pointer.stop(fadeTime)
 * 
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_38), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 272; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 272; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "_PyXAL.pyx":273
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         self._pointer.stop(fadeTime)             # <<<<<<<<<<<<<<
 * 
 *     def pause(self, float fadeTime = 0.0):
 */
  try {((struct __pyx_obj_6_PyXAL_PyPlayer *)__pyx_v_self)->_pointer->stop(__pyx_v_fadeTime);} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 273; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.PyPlayer.stop", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":275
 *         self._pointer.stop(fadeTime)
 * 
 *     def pause(self, float fadeTime = 0.0):             # <<<<<<<<<<<<<<
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 */

static PyObject *__pyx_pf_6_PyXAL_8PyPlayer_19pause(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pf_6_PyXAL_8PyPlayer_19pause(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  float __pyx_v_fadeTime;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__fadeTime,0};
  __Pyx_RefNannySetupContext("pause");
  {
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__fadeTime);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "pause") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 275; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_fadeTime = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_fadeTime == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 275; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_fadeTime = ((float)0.0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("pause", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 275; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("_PyXAL.PyPlayer.pause", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "_PyXAL.pyx":276
 * 
 *     def pause(self, float fadeTime = 0.0):
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         self._pointer.pause(fadeTime)
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 276; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 276; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 276; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = (!__pyx_t_3);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":277
 *     def pause(self, float fadeTime = 0.0):
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         self._pointer.pause(fadeTime)
 * 
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_39), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 277; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 277; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "_PyXAL.pyx":278
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         self._pointer.pause(fadeTime)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {((struct __pyx_obj_6_PyXAL_PyPlayer *)__pyx_v_self)->_pointer->pause(__pyx_v_fadeTime);} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 278; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.PyPlayer.pause", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":287
 *     cdef XAL.Category *_category
 * 
 *     def __init__(self, char* systemname, int backendId, bint threaded = False, float updateTime = 0.01, char* deviceName = ""):             # <<<<<<<<<<<<<<
 *         global Mgr
 *         if Mgr is not None:
 */

static int __pyx_pf_6_PyXAL_10XALManager___init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pf_6_PyXAL_10XALManager___init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  char *__pyx_v_systemname;
  int __pyx_v_backendId;
  int __pyx_v_threaded;
  float __pyx_v_updateTime;
  char *__pyx_v_deviceName;
  hltypes::String *__pyx_v_name;
  hltypes::String *__pyx_v_dname;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__systemname,&__pyx_n_s__backendId,&__pyx_n_s__threaded,&__pyx_n_s__updateTime,&__pyx_n_s__deviceName,0};
  __Pyx_RefNannySetupContext("__init__");
  {
    PyObject* values[5] = {0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__systemname);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__backendId);
        if (likely(values[1])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 2, 5, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 287; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__threaded);
          if (value) { values[2] = value; kw_args--; }
        }
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__updateTime);
          if (value) { values[3] = value; kw_args--; }
        }
        case  4:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__deviceName);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "__init__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 287; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_systemname = PyBytes_AsString(values[0]); if (unlikely((!__pyx_v_systemname) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 287; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_backendId = __Pyx_PyInt_AsInt(values[1]); if (unlikely((__pyx_v_backendId == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 287; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    if (values[2]) {
      __pyx_v_threaded = __Pyx_PyObject_IsTrue(values[2]); if (unlikely((__pyx_v_threaded == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 287; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_threaded = ((int)0);
    }
    if (values[3]) {
      __pyx_v_updateTime = __pyx_PyFloat_AsDouble(values[3]); if (unlikely((__pyx_v_updateTime == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 287; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_updateTime = ((float)0.01);
    }
    if (values[4]) {
      __pyx_v_deviceName = PyBytes_AsString(values[4]); if (unlikely((!__pyx_v_deviceName) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 287; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_deviceName = ((char *)__pyx_k_1);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 2, 5, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 287; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("_PyXAL.XALManager.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;

  /* "_PyXAL.pyx":289
 *     def __init__(self, char* systemname, int backendId, bint threaded = False, float updateTime = 0.01, char* deviceName = ""):
 *         global Mgr
 *         if Mgr is not None:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("Only one XALManager interface allowed at a time, use the one at PyXAL.Mgr")
 *         self.CATEGORY_STR = "default"
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__Mgr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 289; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__pyx_t_1 != Py_None);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "_PyXAL.pyx":290
 *         global Mgr
 *         if Mgr is not None:
 *             raise RuntimeError("Only one XALManager interface allowed at a time, use the one at PyXAL.Mgr")             # <<<<<<<<<<<<<<
 *         self.CATEGORY_STR = "default"
 *         cdef String* name = new String(systemname)
 */
    __pyx_t_1 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_41), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 290; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 290; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "_PyXAL.pyx":291
 *         if Mgr is not None:
 *             raise RuntimeError("Only one XALManager interface allowed at a time, use the one at PyXAL.Mgr")
 *         self.CATEGORY_STR = "default"             # <<<<<<<<<<<<<<
 *         cdef String* name = new String(systemname)
 *         cdef String* dname = new String(deviceName)
 */
  ((struct __pyx_obj_6_PyXAL_XALManager *)__pyx_v_self)->CATEGORY_STR = __pyx_k__default;

  /* "_PyXAL.pyx":292
 *             raise RuntimeError("Only one XALManager interface allowed at a time, use the one at PyXAL.Mgr")
 *         self.CATEGORY_STR = "default"
 *         cdef String* name = new String(systemname)             # <<<<<<<<<<<<<<
 *         cdef String* dname = new String(deviceName)
 *         self.DestroyXAL()
 */
  __pyx_v_name = new hltypes::String(__pyx_v_systemname);

  /* "_PyXAL.pyx":293
 *         self.CATEGORY_STR = "default"
 *         cdef String* name = new String(systemname)
 *         cdef String* dname = new String(deviceName)             # <<<<<<<<<<<<<<
 *         self.DestroyXAL()
 *         XAL.init(name[0], backendId, threaded, updateTime, dname[0])
 */
  __pyx_v_dname = new hltypes::String(__pyx_v_deviceName);

  /* "_PyXAL.pyx":294
 *         cdef String* name = new String(systemname)
 *         cdef String* dname = new String(deviceName)
 *         self.DestroyXAL()             # <<<<<<<<<<<<<<
 *         XAL.init(name[0], backendId, threaded, updateTime, dname[0])
 *         self.inited = True
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__DestroyXAL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 294; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 294; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "_PyXAL.pyx":295
 *         cdef String* dname = new String(deviceName)
 *         self.DestroyXAL()
 *         XAL.init(name[0], backendId, threaded, updateTime, dname[0])             # <<<<<<<<<<<<<<
 *         self.inited = True
 *         self.destroyed = False
 */
  try {xal::init((__pyx_v_name[0]), __pyx_v_backendId, __pyx_v_threaded, __pyx_v_updateTime, (__pyx_v_dname[0]));} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 295; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}

  /* "_PyXAL.pyx":296
 *         self.DestroyXAL()
 *         XAL.init(name[0], backendId, threaded, updateTime, dname[0])
 *         self.inited = True             # <<<<<<<<<<<<<<
 *         self.destroyed = False
 *         self.SetupXAL()
 */
  ((struct __pyx_obj_6_PyXAL_XALManager *)__pyx_v_self)->inited = 1;

  /* "_PyXAL.pyx":297
 *         XAL.init(name[0], backendId, threaded, updateTime, dname[0])
 *         self.inited = True
 *         self.destroyed = False             # <<<<<<<<<<<<<<
 *         self.SetupXAL()
 *         del name
 */
  ((struct __pyx_obj_6_PyXAL_XALManager *)__pyx_v_self)->destroyed = 0;

  /* "_PyXAL.pyx":298
 *         self.inited = True
 *         self.destroyed = False
 *         self.SetupXAL()             # <<<<<<<<<<<<<<
 *         del name
 *         del dname
 */
  __pyx_t_3 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__SetupXAL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 298; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = PyObject_Call(__pyx_t_3, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 298; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "_PyXAL.pyx":299
 *         self.destroyed = False
 *         self.SetupXAL()
 *         del name             # <<<<<<<<<<<<<<
 *         del dname
 * 
 */
  delete __pyx_v_name;

  /* "_PyXAL.pyx":300
 *         self.SetupXAL()
 *         del name
 *         del dname             # <<<<<<<<<<<<<<
 * 
 *     def isXALInitialized(self):
 */
  delete __pyx_v_dname;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("_PyXAL.XALManager.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":302
 *         del dname
 * 
 *     def isXALInitialized(self):             # <<<<<<<<<<<<<<
 *         if XAL.mgr != NULL:
 *             return True
 */

static PyObject *__pyx_pf_6_PyXAL_10XALManager_1isXALInitialized(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pf_6_PyXAL_10XALManager_1isXALInitialized(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("isXALInitialized");

  /* "_PyXAL.pyx":303
 * 
 *     def isXALInitialized(self):
 *         if XAL.mgr != NULL:             # <<<<<<<<<<<<<<
 *             return True
 *         else:
 */
  __pyx_t_1 = (xal::mgr != NULL);
  if (__pyx_t_1) {

    /* "_PyXAL.pyx":304
 *     def isXALInitialized(self):
 *         if XAL.mgr != NULL:
 *             return True             # <<<<<<<<<<<<<<
 *         else:
 *             return False
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyBool_FromLong(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 304; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
    goto __pyx_L5;
  }
  /*else*/ {

    /* "_PyXAL.pyx":306
 *             return True
 *         else:
 *             return False             # <<<<<<<<<<<<<<
 * 
 *     def SetupXAL(self):
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyBool_FromLong(0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 306; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
  }
  __pyx_L5:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.XALManager.isXALInitialized", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":308
 *             return False
 * 
 *     def SetupXAL(self):             # <<<<<<<<<<<<<<
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 */

static PyObject *__pyx_pf_6_PyXAL_10XALManager_2SetupXAL(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pf_6_PyXAL_10XALManager_2SetupXAL(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  hltypes::String *__pyx_v_category;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  xal::Category *__pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("SetupXAL");

  /* "_PyXAL.pyx":309
 * 
 *     def SetupXAL(self):
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         cdef String* category = new String(self.CATEGORY_STR)
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 309; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 309; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 309; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = (!__pyx_t_3);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":310
 *     def SetupXAL(self):
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         cdef String* category = new String(self.CATEGORY_STR)
 *         self._category = XAL.mgr.createCategory(category[0], FULL, FULL)
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_42), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 310; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 310; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "_PyXAL.pyx":311
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         cdef String* category = new String(self.CATEGORY_STR)             # <<<<<<<<<<<<<<
 *         self._category = XAL.mgr.createCategory(category[0], FULL, FULL)
 * 
 */
  __pyx_v_category = new hltypes::String(((struct __pyx_obj_6_PyXAL_XALManager *)__pyx_v_self)->CATEGORY_STR);

  /* "_PyXAL.pyx":312
 *             raise RuntimeError("XAL is not Initialized")
 *         cdef String* category = new String(self.CATEGORY_STR)
 *         self._category = XAL.mgr.createCategory(category[0], FULL, FULL)             # <<<<<<<<<<<<<<
 * 
 *     def __del__(self):
 */
  try {__pyx_t_5 = xal::mgr->createCategory((__pyx_v_category[0]), __pyx_v_6_PyXAL_FULL, __pyx_v_6_PyXAL_FULL);} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 312; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}
  ((struct __pyx_obj_6_PyXAL_XALManager *)__pyx_v_self)->_category = __pyx_t_5;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.XALManager.SetupXAL", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":314
 *         self._category = XAL.mgr.createCategory(category[0], FULL, FULL)
 * 
 *     def __del__(self):             # <<<<<<<<<<<<<<
 *         if XAL.mgr != NULL:
 *             print "del XALManger"
 */

static PyObject *__pyx_pf_6_PyXAL_10XALManager_3__del__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pf_6_PyXAL_10XALManager_3__del__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  double __pyx_v_fade;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__del__");

  /* "_PyXAL.pyx":315
 * 
 *     def __del__(self):
 *         if XAL.mgr != NULL:             # <<<<<<<<<<<<<<
 *             print "del XALManger"
 *             fade = 0.0
 */
  __pyx_t_1 = (xal::mgr != NULL);
  if (__pyx_t_1) {

    /* "_PyXAL.pyx":316
 *     def __del__(self):
 *         if XAL.mgr != NULL:
 *             print "del XALManger"             # <<<<<<<<<<<<<<
 *             fade = 0.0
 *             XAL.mgr.stopAll(fade)
 */
    if (__Pyx_PrintOne(0, ((PyObject *)__pyx_kp_s_43)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 316; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "_PyXAL.pyx":317
 *         if XAL.mgr != NULL:
 *             print "del XALManger"
 *             fade = 0.0             # <<<<<<<<<<<<<<
 *             XAL.mgr.stopAll(fade)
 *             XAL.destroy()
 */
    __pyx_v_fade = 0.0;

    /* "_PyXAL.pyx":318
 *             print "del XALManger"
 *             fade = 0.0
 *             XAL.mgr.stopAll(fade)             # <<<<<<<<<<<<<<
 *             XAL.destroy()
 * 
 */
    try {xal::mgr->stopAll(__pyx_v_fade);} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 318; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}

    /* "_PyXAL.pyx":319
 *             fade = 0.0
 *             XAL.mgr.stopAll(fade)
 *             XAL.destroy()             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
    try {xal::destroy();} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 319; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}
    goto __pyx_L5;
  }
  __pyx_L5:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_PyXAL.XALManager.__del__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":321
 *             XAL.destroy()
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if XAL.mgr != NULL:
 *             print "dealloc XALManger"
 */

static void __pyx_pf_6_PyXAL_10XALManager_4__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pf_6_PyXAL_10XALManager_4__dealloc__(PyObject *__pyx_v_self) {
  double __pyx_v_fade;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__dealloc__");

  /* "_PyXAL.pyx":322
 * 
 *     def __dealloc__(self):
 *         if XAL.mgr != NULL:             # <<<<<<<<<<<<<<
 *             print "dealloc XALManger"
 *             fade = 0.0
 */
  __pyx_t_1 = (xal::mgr != NULL);
  if (__pyx_t_1) {

    /* "_PyXAL.pyx":323
 *     def __dealloc__(self):
 *         if XAL.mgr != NULL:
 *             print "dealloc XALManger"             # <<<<<<<<<<<<<<
 *             fade = 0.0
 *             XAL.mgr.stopAll(fade)
 */
    if (__Pyx_PrintOne(0, ((PyObject *)__pyx_kp_s_44)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 323; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "_PyXAL.pyx":324
 *         if XAL.mgr != NULL:
 *             print "dealloc XALManger"
 *             fade = 0.0             # <<<<<<<<<<<<<<
 *             XAL.mgr.stopAll(fade)
 *             XAL.destroy()
 */
    __pyx_v_fade = 0.0;

    /* "_PyXAL.pyx":325
 *             print "dealloc XALManger"
 *             fade = 0.0
 *             XAL.mgr.stopAll(fade)             # <<<<<<<<<<<<<<
 *             XAL.destroy()
 * 
 */
    try {xal::mgr->stopAll(__pyx_v_fade);} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 325; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}

    /* "_PyXAL.pyx":326
 *             fade = 0.0
 *             XAL.mgr.stopAll(fade)
 *             XAL.destroy()             # <<<<<<<<<<<<<<
 * 
 *     def DestroyXAL(self):
 */
    try {xal::destroy();} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 326; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}
    goto __pyx_L5;
  }
  __pyx_L5:;

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_PyXAL.XALManager.__dealloc__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "_PyXAL.pyx":328
 *             XAL.destroy()
 * 
 *     def DestroyXAL(self):             # <<<<<<<<<<<<<<
 *         if self.isXALInitialized():
 *             print "DestroyXAL XALManger"
 */

static PyObject *__pyx_pf_6_PyXAL_10XALManager_5DestroyXAL(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pf_6_PyXAL_10XALManager_5DestroyXAL(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  double __pyx_v_fade;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("DestroyXAL");

  /* "_PyXAL.pyx":329
 * 
 *     def DestroyXAL(self):
 *         if self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             print "DestroyXAL XALManger"
 *             fade = 0.0
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 329; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 329; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 329; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "_PyXAL.pyx":330
 *     def DestroyXAL(self):
 *         if self.isXALInitialized():
 *             print "DestroyXAL XALManger"             # <<<<<<<<<<<<<<
 *             fade = 0.0
 *             XAL.mgr.stopAll(fade)
 */
    if (__Pyx_PrintOne(0, ((PyObject *)__pyx_kp_s_45)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 330; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "_PyXAL.pyx":331
 *         if self.isXALInitialized():
 *             print "DestroyXAL XALManger"
 *             fade = 0.0             # <<<<<<<<<<<<<<
 *             XAL.mgr.stopAll(fade)
 *             XAL.destroy()
 */
    __pyx_v_fade = 0.0;

    /* "_PyXAL.pyx":332
 *             print "DestroyXAL XALManger"
 *             fade = 0.0
 *             XAL.mgr.stopAll(fade)             # <<<<<<<<<<<<<<
 *             XAL.destroy()
 * 
 */
    try {xal::mgr->stopAll(__pyx_v_fade);} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 332; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}

    /* "_PyXAL.pyx":333
 *             fade = 0.0
 *             XAL.mgr.stopAll(fade)
 *             XAL.destroy()             # <<<<<<<<<<<<<<
 * 
 *     def clear(self):
 */
    try {xal::destroy();} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 333; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}
    goto __pyx_L5;
  }
  __pyx_L5:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.XALManager.DestroyXAL", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":335
 *             XAL.destroy()
 * 
 *     def clear(self):             # <<<<<<<<<<<<<<
 *         if self.isXALInitialized():
 *             print "clear XALManager"
 */

static PyObject *__pyx_pf_6_PyXAL_10XALManager_6clear(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pf_6_PyXAL_10XALManager_6clear(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  double __pyx_v_fade;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("clear");

  /* "_PyXAL.pyx":336
 * 
 *     def clear(self):
 *         if self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             print "clear XALManager"
 *             fade = 0.0
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 336; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 336; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 336; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "_PyXAL.pyx":337
 *     def clear(self):
 *         if self.isXALInitialized():
 *             print "clear XALManager"             # <<<<<<<<<<<<<<
 *             fade = 0.0
 *             XAL.mgr.stopAll(fade)
 */
    if (__Pyx_PrintOne(0, ((PyObject *)__pyx_kp_s_46)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 337; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "_PyXAL.pyx":338
 *         if self.isXALInitialized():
 *             print "clear XALManager"
 *             fade = 0.0             # <<<<<<<<<<<<<<
 *             XAL.mgr.stopAll(fade)
 *             XAL.mgr.clear()
 */
    __pyx_v_fade = 0.0;

    /* "_PyXAL.pyx":339
 *             print "clear XALManager"
 *             fade = 0.0
 *             XAL.mgr.stopAll(fade)             # <<<<<<<<<<<<<<
 *             XAL.mgr.clear()
 * 
 */
    try {xal::mgr->stopAll(__pyx_v_fade);} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 339; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}

    /* "_PyXAL.pyx":340
 *             fade = 0.0
 *             XAL.mgr.stopAll(fade)
 *             XAL.mgr.clear()             # <<<<<<<<<<<<<<
 * 
 *     def createSound(self, bytes filename):
 */
    xal::mgr->clear();
    goto __pyx_L5;
  }
  __pyx_L5:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.XALManager.clear", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":342
 *             XAL.mgr.clear()
 * 
 *     def createSound(self, bytes filename):             # <<<<<<<<<<<<<<
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 */

static PyObject *__pyx_pf_6_PyXAL_10XALManager_7createSound(PyObject *__pyx_v_self, PyObject *__pyx_v_filename); /*proto*/
static PyObject *__pyx_pf_6_PyXAL_10XALManager_7createSound(PyObject *__pyx_v_self, PyObject *__pyx_v_filename) {
  char *__pyx_v_file;
  PyObject *__pyx_v_s = NULL;
  char *__pyx_v_path;
  hltypes::String *__pyx_v_file_str;
  hltypes::String *__pyx_v_path_str;
  hltypes::String *__pyx_v_category;
  xal::Sound *__pyx_v_sound;
  struct __pyx_obj_6_PyXAL_PySound *__pyx_v_pysound = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  char *__pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  xal::Sound *__pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("createSound");
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_filename), (&PyBytes_Type), 1, "filename", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 342; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_PyXAL.pyx":343
 * 
 *     def createSound(self, bytes filename):
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         cdef char* file = filename
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 343; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 343; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 343; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = (!__pyx_t_3);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":344
 *     def createSound(self, bytes filename):
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         cdef char* file = filename
 *         s = os.path.split(filename)[0]
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_47), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 344; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 344; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "_PyXAL.pyx":345
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         cdef char* file = filename             # <<<<<<<<<<<<<<
 *         s = os.path.split(filename)[0]
 *         cdef char* path = s
 */
  __pyx_t_5 = PyBytes_AsString(((PyObject *)__pyx_v_filename)); if (unlikely((!__pyx_t_5) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 345; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_file = __pyx_t_5;

  /* "_PyXAL.pyx":346
 *             raise RuntimeError("XAL is not Initialized")
 *         cdef char* file = filename
 *         s = os.path.split(filename)[0]             # <<<<<<<<<<<<<<
 *         cdef char* path = s
 *         cdef String* file_str = new String(file)
 */
  __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__os); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 346; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__path); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 346; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_GetAttr(__pyx_t_1, __pyx_n_s__split); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 346; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 346; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __Pyx_INCREF(((PyObject *)__pyx_v_filename));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_filename));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_filename));
  __pyx_t_6 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 346; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_6, 0, sizeof(long), PyInt_FromLong); if (!__pyx_t_1) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 346; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_v_s = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "_PyXAL.pyx":347
 *         cdef char* file = filename
 *         s = os.path.split(filename)[0]
 *         cdef char* path = s             # <<<<<<<<<<<<<<
 *         cdef String* file_str = new String(file)
 *         cdef String* path_str = new String(path)
 */
  __pyx_t_5 = PyBytes_AsString(__pyx_v_s); if (unlikely((!__pyx_t_5) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 347; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_path = __pyx_t_5;

  /* "_PyXAL.pyx":348
 *         s = os.path.split(filename)[0]
 *         cdef char* path = s
 *         cdef String* file_str = new String(file)             # <<<<<<<<<<<<<<
 *         cdef String* path_str = new String(path)
 *         cdef String* category = new String(self.CATEGORY_STR)
 */
  __pyx_v_file_str = new hltypes::String(__pyx_v_file);

  /* "_PyXAL.pyx":349
 *         cdef char* path = s
 *         cdef String* file_str = new String(file)
 *         cdef String* path_str = new String(path)             # <<<<<<<<<<<<<<
 *         cdef String* category = new String(self.CATEGORY_STR)
 *         cdef XAL.Sound* sound
 */
  __pyx_v_path_str = new hltypes::String(__pyx_v_path);

  /* "_PyXAL.pyx":350
 *         cdef String* file_str = new String(file)
 *         cdef String* path_str = new String(path)
 *         cdef String* category = new String(self.CATEGORY_STR)             # <<<<<<<<<<<<<<
 *         cdef XAL.Sound* sound
 *         sound = XAL.mgr.createSound(file_str[0], category[0], path_str[0])
 */
  __pyx_v_category = new hltypes::String(((struct __pyx_obj_6_PyXAL_XALManager *)__pyx_v_self)->CATEGORY_STR);

  /* "_PyXAL.pyx":352
 *         cdef String* category = new String(self.CATEGORY_STR)
 *         cdef XAL.Sound* sound
 *         sound = XAL.mgr.createSound(file_str[0], category[0], path_str[0])             # <<<<<<<<<<<<<<
 *         if sound == NULL:
 *             raise RuntimeError("XAL Failed to load file %s" % filename)
 */
  try {__pyx_t_7 = xal::mgr->createSound((__pyx_v_file_str[0]), (__pyx_v_category[0]), (__pyx_v_path_str[0]));} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 352; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}
  __pyx_v_sound = __pyx_t_7;

  /* "_PyXAL.pyx":353
 *         cdef XAL.Sound* sound
 *         sound = XAL.mgr.createSound(file_str[0], category[0], path_str[0])
 *         if sound == NULL:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL Failed to load file %s" % filename)
 *         cdef PySound pysound = PySound.__new__(PySound)
 */
  __pyx_t_4 = (__pyx_v_sound == NULL);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":354
 *         sound = XAL.mgr.createSound(file_str[0], category[0], path_str[0])
 *         if sound == NULL:
 *             raise RuntimeError("XAL Failed to load file %s" % filename)             # <<<<<<<<<<<<<<
 *         cdef PySound pysound = PySound.__new__(PySound)
 *         pysound._pointer = sound
 */
    __pyx_t_1 = PyNumber_Remainder(((PyObject *)__pyx_kp_s_48), ((PyObject *)__pyx_v_filename)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 354; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_1));
    __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 354; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_6));
    PyTuple_SET_ITEM(__pyx_t_6, 0, ((PyObject *)__pyx_t_1));
    __Pyx_GIVEREF(((PyObject *)__pyx_t_1));
    __pyx_t_1 = 0;
    __pyx_t_1 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_t_6), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 354; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(((PyObject *)__pyx_t_6)); __pyx_t_6 = 0;
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 354; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "_PyXAL.pyx":355
 *         if sound == NULL:
 *             raise RuntimeError("XAL Failed to load file %s" % filename)
 *         cdef PySound pysound = PySound.__new__(PySound)             # <<<<<<<<<<<<<<
 *         pysound._pointer = sound
 *         del file_str
 */
  __pyx_t_1 = __Pyx_tp_new(((PyObject*)__pyx_ptype_6_PyXAL_PySound)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 355; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_6_PyXAL_PySound)))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 355; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_pysound = ((struct __pyx_obj_6_PyXAL_PySound *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "_PyXAL.pyx":356
 *             raise RuntimeError("XAL Failed to load file %s" % filename)
 *         cdef PySound pysound = PySound.__new__(PySound)
 *         pysound._pointer = sound             # <<<<<<<<<<<<<<
 *         del file_str
 *         del path_str
 */
  __pyx_v_pysound->_pointer = __pyx_v_sound;

  /* "_PyXAL.pyx":357
 *         cdef PySound pysound = PySound.__new__(PySound)
 *         pysound._pointer = sound
 *         del file_str             # <<<<<<<<<<<<<<
 *         del path_str
 *         del category
 */
  delete __pyx_v_file_str;

  /* "_PyXAL.pyx":358
 *         pysound._pointer = sound
 *         del file_str
 *         del path_str             # <<<<<<<<<<<<<<
 *         del category
 *         return pysound
 */
  delete __pyx_v_path_str;

  /* "_PyXAL.pyx":359
 *         del file_str
 *         del path_str
 *         del category             # <<<<<<<<<<<<<<
 *         return pysound
 * 
 */
  delete __pyx_v_category;

  /* "_PyXAL.pyx":360
 *         del path_str
 *         del category
 *         return pysound             # <<<<<<<<<<<<<<
 * 
 *     def createPlayer(self, PySound sound):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_pysound));
  __pyx_r = ((PyObject *)__pyx_v_pysound);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("_PyXAL.XALManager.createSound", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_s);
  __Pyx_XDECREF((PyObject *)__pyx_v_pysound);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":362
 *         return pysound
 * 
 *     def createPlayer(self, PySound sound):             # <<<<<<<<<<<<<<
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 */

static PyObject *__pyx_pf_6_PyXAL_10XALManager_8createPlayer(PyObject *__pyx_v_self, PyObject *__pyx_v_sound); /*proto*/
static PyObject *__pyx_pf_6_PyXAL_10XALManager_8createPlayer(PyObject *__pyx_v_self, PyObject *__pyx_v_sound) {
  PyObject *__pyx_v_sound_name = NULL;
  char *__pyx_v_name;
  hltypes::String *__pyx_v_hl_name;
  xal::Player *__pyx_v_player;
  struct __pyx_obj_6_PyXAL_PyPlayer *__pyx_v_pyplayer = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  char *__pyx_t_5;
  xal::Player *__pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("createPlayer");
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sound), __pyx_ptype_6_PyXAL_PySound, 1, "sound", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 362; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_PyXAL.pyx":363
 * 
 *     def createPlayer(self, PySound sound):
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         sound_name = sound.getName()
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 363; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 363; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 363; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = (!__pyx_t_3);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":364
 *     def createPlayer(self, PySound sound):
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         sound_name = sound.getName()
 *         cdef char* name = sound_name
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_49), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 364; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 364; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "_PyXAL.pyx":365
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         sound_name = sound.getName()             # <<<<<<<<<<<<<<
 *         cdef char* name = sound_name
 *         cdef String* hl_name = new String(name)
 */
  __pyx_t_2 = PyObject_GetAttr(__pyx_v_sound, __pyx_n_s__getName); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 365; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 365; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_sound_name = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "_PyXAL.pyx":366
 *             raise RuntimeError("XAL is not Initialized")
 *         sound_name = sound.getName()
 *         cdef char* name = sound_name             # <<<<<<<<<<<<<<
 *         cdef String* hl_name = new String(name)
 *         cdef XAL.Player* player
 */
  __pyx_t_5 = PyBytes_AsString(__pyx_v_sound_name); if (unlikely((!__pyx_t_5) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 366; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_name = __pyx_t_5;

  /* "_PyXAL.pyx":367
 *         sound_name = sound.getName()
 *         cdef char* name = sound_name
 *         cdef String* hl_name = new String(name)             # <<<<<<<<<<<<<<
 *         cdef XAL.Player* player
 *         player = XAL.mgr.createPlayer(hl_name[0])
 */
  __pyx_v_hl_name = new hltypes::String(__pyx_v_name);

  /* "_PyXAL.pyx":369
 *         cdef String* hl_name = new String(name)
 *         cdef XAL.Player* player
 *         player = XAL.mgr.createPlayer(hl_name[0])             # <<<<<<<<<<<<<<
 *         if player == NULL:
 *             raise RuntimeError("XAL Failed to create a player for %s" % sound_name)
 */
  try {__pyx_t_6 = xal::mgr->createPlayer((__pyx_v_hl_name[0]));} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 369; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}
  __pyx_v_player = __pyx_t_6;

  /* "_PyXAL.pyx":370
 *         cdef XAL.Player* player
 *         player = XAL.mgr.createPlayer(hl_name[0])
 *         if player == NULL:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL Failed to create a player for %s" % sound_name)
 *         cdef PyPlayer pyplayer = PyPlayer.__new__(PyPlayer)
 */
  __pyx_t_4 = (__pyx_v_player == NULL);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":371
 *         player = XAL.mgr.createPlayer(hl_name[0])
 *         if player == NULL:
 *             raise RuntimeError("XAL Failed to create a player for %s" % sound_name)             # <<<<<<<<<<<<<<
 *         cdef PyPlayer pyplayer = PyPlayer.__new__(PyPlayer)
 *         pyplayer._pointer = player
 */
    __pyx_t_1 = PyNumber_Remainder(((PyObject *)__pyx_kp_s_50), __pyx_v_sound_name); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 371; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_1));
    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 371; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_2));
    PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_t_1));
    __Pyx_GIVEREF(((PyObject *)__pyx_t_1));
    __pyx_t_1 = 0;
    __pyx_t_1 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 371; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 371; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "_PyXAL.pyx":372
 *         if player == NULL:
 *             raise RuntimeError("XAL Failed to create a player for %s" % sound_name)
 *         cdef PyPlayer pyplayer = PyPlayer.__new__(PyPlayer)             # <<<<<<<<<<<<<<
 *         pyplayer._pointer = player
 *         del hl_name
 */
  __pyx_t_1 = __Pyx_tp_new(((PyObject*)__pyx_ptype_6_PyXAL_PyPlayer)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 372; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_6_PyXAL_PyPlayer)))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 372; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_pyplayer = ((struct __pyx_obj_6_PyXAL_PyPlayer *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "_PyXAL.pyx":373
 *             raise RuntimeError("XAL Failed to create a player for %s" % sound_name)
 *         cdef PyPlayer pyplayer = PyPlayer.__new__(PyPlayer)
 *         pyplayer._pointer = player             # <<<<<<<<<<<<<<
 *         del hl_name
 *         return pyplayer
 */
  __pyx_v_pyplayer->_pointer = __pyx_v_player;

  /* "_PyXAL.pyx":374
 *         cdef PyPlayer pyplayer = PyPlayer.__new__(PyPlayer)
 *         pyplayer._pointer = player
 *         del hl_name             # <<<<<<<<<<<<<<
 *         return pyplayer
 * 
 */
  delete __pyx_v_hl_name;

  /* "_PyXAL.pyx":375
 *         pyplayer._pointer = player
 *         del hl_name
 *         return pyplayer             # <<<<<<<<<<<<<<
 * 
 *     def destroyPlayer(self, PyPlayer pyplayer):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_pyplayer));
  __pyx_r = ((PyObject *)__pyx_v_pyplayer);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.XALManager.createPlayer", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_sound_name);
  __Pyx_XDECREF((PyObject *)__pyx_v_pyplayer);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":377
 *         return pyplayer
 * 
 *     def destroyPlayer(self, PyPlayer pyplayer):             # <<<<<<<<<<<<<<
 *         if pyplayer is None:
 *             raise RuntimeError("destroyPlayer Passed a None object")
 */

static PyObject *__pyx_pf_6_PyXAL_10XALManager_9destroyPlayer(PyObject *__pyx_v_self, PyObject *__pyx_v_pyplayer); /*proto*/
static PyObject *__pyx_pf_6_PyXAL_10XALManager_9destroyPlayer(PyObject *__pyx_v_self, PyObject *__pyx_v_pyplayer) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("destroyPlayer");
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_pyplayer), __pyx_ptype_6_PyXAL_PyPlayer, 1, "pyplayer", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 377; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_PyXAL.pyx":378
 * 
 *     def destroyPlayer(self, PyPlayer pyplayer):
 *         if pyplayer is None:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("destroyPlayer Passed a None object")
 *         if not self.isXALInitialized():
 */
  __pyx_t_1 = (__pyx_v_pyplayer == Py_None);
  if (__pyx_t_1) {

    /* "_PyXAL.pyx":379
 *     def destroyPlayer(self, PyPlayer pyplayer):
 *         if pyplayer is None:
 *             raise RuntimeError("destroyPlayer Passed a None object")             # <<<<<<<<<<<<<<
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_52), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 379; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 379; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "_PyXAL.pyx":380
 *         if pyplayer is None:
 *             raise RuntimeError("destroyPlayer Passed a None object")
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         XAL.mgr.destroyPlayer(pyplayer._pointer)
 */
  __pyx_t_2 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__isXALInitialized); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 380; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 380; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 380; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_4 = (!__pyx_t_1);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":381
 *             raise RuntimeError("destroyPlayer Passed a None object")
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         XAL.mgr.destroyPlayer(pyplayer._pointer)
 * 
 */
    __pyx_t_3 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_53), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 381; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 381; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "_PyXAL.pyx":382
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         XAL.mgr.destroyPlayer(pyplayer._pointer)             # <<<<<<<<<<<<<<
 * 
 *     def destroySound(self, PySound pysound):
 */
  try {xal::mgr->destroyPlayer(((struct __pyx_obj_6_PyXAL_PyPlayer *)__pyx_v_pyplayer)->_pointer);} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 382; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("_PyXAL.XALManager.destroyPlayer", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":384
 *         XAL.mgr.destroyPlayer(pyplayer._pointer)
 * 
 *     def destroySound(self, PySound pysound):             # <<<<<<<<<<<<<<
 *         if pysound is None:
 *             raise RuntimeError("destroySound Passed a None object")
 */

static PyObject *__pyx_pf_6_PyXAL_10XALManager_10destroySound(PyObject *__pyx_v_self, PyObject *__pyx_v_pysound); /*proto*/
static PyObject *__pyx_pf_6_PyXAL_10XALManager_10destroySound(PyObject *__pyx_v_self, PyObject *__pyx_v_pysound) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("destroySound");
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_pysound), __pyx_ptype_6_PyXAL_PySound, 1, "pysound", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 384; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_PyXAL.pyx":385
 * 
 *     def destroySound(self, PySound pysound):
 *         if pysound is None:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("destroySound Passed a None object")
 *         if not self.isXALInitialized():
 */
  __pyx_t_1 = (__pyx_v_pysound == Py_None);
  if (__pyx_t_1) {

    /* "_PyXAL.pyx":386
 *     def destroySound(self, PySound pysound):
 *         if pysound is None:
 *             raise RuntimeError("destroySound Passed a None object")             # <<<<<<<<<<<<<<
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_55), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 386; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 386; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "_PyXAL.pyx":387
 *         if pysound is None:
 *             raise RuntimeError("destroySound Passed a None object")
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         XAL.mgr.destroySound(pysound._pointer)
 */
  __pyx_t_2 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__isXALInitialized); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 387; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 387; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 387; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_4 = (!__pyx_t_1);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":388
 *             raise RuntimeError("destroySound Passed a None object")
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         XAL.mgr.destroySound(pysound._pointer)
 * 
 */
    __pyx_t_3 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_56), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 388; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 388; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "_PyXAL.pyx":389
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         XAL.mgr.destroySound(pysound._pointer)             # <<<<<<<<<<<<<<
 * 
 *     def findPlayer(self, bytes name):
 */
  try {xal::mgr->destroySound(((struct __pyx_obj_6_PyXAL_PySound *)__pyx_v_pysound)->_pointer);} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 389; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("_PyXAL.XALManager.destroySound", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":391
 *         XAL.mgr.destroySound(pysound._pointer)
 * 
 *     def findPlayer(self, bytes name):             # <<<<<<<<<<<<<<
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 */

static PyObject *__pyx_pf_6_PyXAL_10XALManager_11findPlayer(PyObject *__pyx_v_self, PyObject *__pyx_v_name); /*proto*/
static PyObject *__pyx_pf_6_PyXAL_10XALManager_11findPlayer(PyObject *__pyx_v_self, PyObject *__pyx_v_name) {
  char *__pyx_v_name_str;
  hltypes::String *__pyx_v_hl_name;
  xal::Player *__pyx_v_player;
  struct __pyx_obj_6_PyXAL_PyPlayer *__pyx_v_pyplayer = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  char *__pyx_t_5;
  xal::Player *__pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("findPlayer");
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_name), (&PyBytes_Type), 1, "name", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 391; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_PyXAL.pyx":392
 * 
 *     def findPlayer(self, bytes name):
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         cdef char* name_str = name
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 392; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 392; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 392; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = (!__pyx_t_3);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":393
 *     def findPlayer(self, bytes name):
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         cdef char* name_str = name
 *         cdef String* hl_name = new String(name_str)
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_57), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 393; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 393; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "_PyXAL.pyx":394
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         cdef char* name_str = name             # <<<<<<<<<<<<<<
 *         cdef String* hl_name = new String(name_str)
 *         cdef XAL.Player* player
 */
  __pyx_t_5 = PyBytes_AsString(((PyObject *)__pyx_v_name)); if (unlikely((!__pyx_t_5) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 394; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_name_str = __pyx_t_5;

  /* "_PyXAL.pyx":395
 *             raise RuntimeError("XAL is not Initialized")
 *         cdef char* name_str = name
 *         cdef String* hl_name = new String(name_str)             # <<<<<<<<<<<<<<
 *         cdef XAL.Player* player
 *         player = XAL.mgr.findPlayer(hl_name[0])
 */
  __pyx_v_hl_name = new hltypes::String(__pyx_v_name_str);

  /* "_PyXAL.pyx":397
 *         cdef String* hl_name = new String(name_str)
 *         cdef XAL.Player* player
 *         player = XAL.mgr.findPlayer(hl_name[0])             # <<<<<<<<<<<<<<
 *         if player == NULL:
 *             raise RuntimeError("XAL Failed to find a player for %s" % name)
 */
  try {__pyx_t_6 = xal::mgr->findPlayer((__pyx_v_hl_name[0]));} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 397; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}
  __pyx_v_player = __pyx_t_6;

  /* "_PyXAL.pyx":398
 *         cdef XAL.Player* player
 *         player = XAL.mgr.findPlayer(hl_name[0])
 *         if player == NULL:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL Failed to find a player for %s" % name)
 *         cdef PyPlayer pyplayer = PyPlayer.__new__(PyPlayer)
 */
  __pyx_t_4 = (__pyx_v_player == NULL);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":399
 *         player = XAL.mgr.findPlayer(hl_name[0])
 *         if player == NULL:
 *             raise RuntimeError("XAL Failed to find a player for %s" % name)             # <<<<<<<<<<<<<<
 *         cdef PyPlayer pyplayer = PyPlayer.__new__(PyPlayer)
 *         pyplayer._pointer = player
 */
    __pyx_t_2 = PyNumber_Remainder(((PyObject *)__pyx_kp_s_58), ((PyObject *)__pyx_v_name)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 399; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_2));
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 399; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_1));
    PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_t_2));
    __Pyx_GIVEREF(((PyObject *)__pyx_t_2));
    __pyx_t_2 = 0;
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 399; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 399; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "_PyXAL.pyx":400
 *         if player == NULL:
 *             raise RuntimeError("XAL Failed to find a player for %s" % name)
 *         cdef PyPlayer pyplayer = PyPlayer.__new__(PyPlayer)             # <<<<<<<<<<<<<<
 *         pyplayer._pointer = player
 *         del hl_name
 */
  __pyx_t_2 = __Pyx_tp_new(((PyObject*)__pyx_ptype_6_PyXAL_PyPlayer)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 400; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (!(likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_6_PyXAL_PyPlayer)))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 400; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_pyplayer = ((struct __pyx_obj_6_PyXAL_PyPlayer *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "_PyXAL.pyx":401
 *             raise RuntimeError("XAL Failed to find a player for %s" % name)
 *         cdef PyPlayer pyplayer = PyPlayer.__new__(PyPlayer)
 *         pyplayer._pointer = player             # <<<<<<<<<<<<<<
 *         del hl_name
 *         return pyplayer
 */
  __pyx_v_pyplayer->_pointer = __pyx_v_player;

  /* "_PyXAL.pyx":402
 *         cdef PyPlayer pyplayer = PyPlayer.__new__(PyPlayer)
 *         pyplayer._pointer = player
 *         del hl_name             # <<<<<<<<<<<<<<
 *         return pyplayer
 * 
 */
  delete __pyx_v_hl_name;

  /* "_PyXAL.pyx":403
 *         pyplayer._pointer = player
 *         del hl_name
 *         return pyplayer             # <<<<<<<<<<<<<<
 * 
 *     def play(self, bytes name, float fadeTime = 0.0, bool looping = False, float gain = 1.0):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_pyplayer));
  __pyx_r = ((PyObject *)__pyx_v_pyplayer);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.XALManager.findPlayer", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_pyplayer);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":405
 *         return pyplayer
 * 
 *     def play(self, bytes name, float fadeTime = 0.0, bool looping = False, float gain = 1.0):             # <<<<<<<<<<<<<<
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 */

static PyObject *__pyx_pf_6_PyXAL_10XALManager_12play(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pf_6_PyXAL_10XALManager_12play(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_name = 0;
  float __pyx_v_fadeTime;
  bool __pyx_v_looping;
  float __pyx_v_gain;
  char *__pyx_v_name_str;
  hltypes::String *__pyx_v_hl_name;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  char *__pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__name,&__pyx_n_s__fadeTime,&__pyx_n_s__looping,&__pyx_n_s__gain,0};
  __Pyx_RefNannySetupContext("play");
  {
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__name);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__fadeTime);
          if (value) { values[1] = value; kw_args--; }
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__looping);
          if (value) { values[2] = value; kw_args--; }
        }
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__gain);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "play") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 405; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_name = ((PyObject*)values[0]);
    if (values[1]) {
      __pyx_v_fadeTime = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_fadeTime == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 405; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_fadeTime = ((float)0.0);
    }
    if (values[2]) {
      __pyx_v_looping = __Pyx_PyObject_IsTrue(values[2]); if (unlikely((__pyx_v_looping == (bool)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 405; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_looping = ((bool)0);
    }
    if (values[3]) {
      __pyx_v_gain = __pyx_PyFloat_AsDouble(values[3]); if (unlikely((__pyx_v_gain == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 405; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_gain = ((float)1.0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("play", 0, 1, 4, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 405; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("_PyXAL.XALManager.play", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_name), (&PyBytes_Type), 1, "name", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 405; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_PyXAL.pyx":406
 * 
 *     def play(self, bytes name, float fadeTime = 0.0, bool looping = False, float gain = 1.0):
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         cdef char* name_str = name
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 406; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 406; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 406; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = (!__pyx_t_3);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":407
 *     def play(self, bytes name, float fadeTime = 0.0, bool looping = False, float gain = 1.0):
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         cdef char* name_str = name
 *         cdef String* hl_name = new String(name_str)
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_59), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 407; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 407; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "_PyXAL.pyx":408
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         cdef char* name_str = name             # <<<<<<<<<<<<<<
 *         cdef String* hl_name = new String(name_str)
 *         XAL.mgr.play(hl_name[0], fadeTime, looping, gain)
 */
  __pyx_t_5 = PyBytes_AsString(((PyObject *)__pyx_v_name)); if (unlikely((!__pyx_t_5) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 408; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_name_str = __pyx_t_5;

  /* "_PyXAL.pyx":409
 *             raise RuntimeError("XAL is not Initialized")
 *         cdef char* name_str = name
 *         cdef String* hl_name = new String(name_str)             # <<<<<<<<<<<<<<
 *         XAL.mgr.play(hl_name[0], fadeTime, looping, gain)
 *         del hl_name
 */
  __pyx_v_hl_name = new hltypes::String(__pyx_v_name_str);

  /* "_PyXAL.pyx":410
 *         cdef char* name_str = name
 *         cdef String* hl_name = new String(name_str)
 *         XAL.mgr.play(hl_name[0], fadeTime, looping, gain)             # <<<<<<<<<<<<<<
 *         del hl_name
 * 
 */
  try {xal::mgr->play((__pyx_v_hl_name[0]), __pyx_v_fadeTime, __pyx_v_looping, __pyx_v_gain);} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 410; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}

  /* "_PyXAL.pyx":411
 *         cdef String* hl_name = new String(name_str)
 *         XAL.mgr.play(hl_name[0], fadeTime, looping, gain)
 *         del hl_name             # <<<<<<<<<<<<<<
 * 
 *     def stop(self, bytes name, float fadeTime = 0.0):
 */
  delete __pyx_v_hl_name;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.XALManager.play", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":413
 *         del hl_name
 * 
 *     def stop(self, bytes name, float fadeTime = 0.0):             # <<<<<<<<<<<<<<
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 */

static PyObject *__pyx_pf_6_PyXAL_10XALManager_13stop(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pf_6_PyXAL_10XALManager_13stop(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_name = 0;
  float __pyx_v_fadeTime;
  char *__pyx_v_name_str;
  hltypes::String *__pyx_v_hl_name;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  char *__pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__name,&__pyx_n_s__fadeTime,0};
  __Pyx_RefNannySetupContext("stop");
  {
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__name);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__fadeTime);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "stop") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 413; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_name = ((PyObject*)values[0]);
    if (values[1]) {
      __pyx_v_fadeTime = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_fadeTime == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 413; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_fadeTime = ((float)0.0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("stop", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 413; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("_PyXAL.XALManager.stop", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_name), (&PyBytes_Type), 1, "name", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 413; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_PyXAL.pyx":414
 * 
 *     def stop(self, bytes name, float fadeTime = 0.0):
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         cdef char* name_str = name
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 414; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 414; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 414; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = (!__pyx_t_3);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":415
 *     def stop(self, bytes name, float fadeTime = 0.0):
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         cdef char* name_str = name
 *         cdef String* hl_name = new String(name_str)
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_60), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 415; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 415; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "_PyXAL.pyx":416
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         cdef char* name_str = name             # <<<<<<<<<<<<<<
 *         cdef String* hl_name = new String(name_str)
 *         XAL.mgr.stop(hl_name[0], fadeTime)
 */
  __pyx_t_5 = PyBytes_AsString(((PyObject *)__pyx_v_name)); if (unlikely((!__pyx_t_5) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 416; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_name_str = __pyx_t_5;

  /* "_PyXAL.pyx":417
 *             raise RuntimeError("XAL is not Initialized")
 *         cdef char* name_str = name
 *         cdef String* hl_name = new String(name_str)             # <<<<<<<<<<<<<<
 *         XAL.mgr.stop(hl_name[0], fadeTime)
 *         del hl_name
 */
  __pyx_v_hl_name = new hltypes::String(__pyx_v_name_str);

  /* "_PyXAL.pyx":418
 *         cdef char* name_str = name
 *         cdef String* hl_name = new String(name_str)
 *         XAL.mgr.stop(hl_name[0], fadeTime)             # <<<<<<<<<<<<<<
 *         del hl_name
 * 
 */
  try {xal::mgr->stop((__pyx_v_hl_name[0]), __pyx_v_fadeTime);} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 418; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}

  /* "_PyXAL.pyx":419
 *         cdef String* hl_name = new String(name_str)
 *         XAL.mgr.stop(hl_name[0], fadeTime)
 *         del hl_name             # <<<<<<<<<<<<<<
 * 
 *     def stopFirst(self, bytes name, float fadeTime = 0.0):
 */
  delete __pyx_v_hl_name;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.XALManager.stop", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":421
 *         del hl_name
 * 
 *     def stopFirst(self, bytes name, float fadeTime = 0.0):             # <<<<<<<<<<<<<<
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 */

static PyObject *__pyx_pf_6_PyXAL_10XALManager_14stopFirst(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pf_6_PyXAL_10XALManager_14stopFirst(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_name = 0;
  float __pyx_v_fadeTime;
  char *__pyx_v_name_str;
  hltypes::String *__pyx_v_hl_name;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  char *__pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__name,&__pyx_n_s__fadeTime,0};
  __Pyx_RefNannySetupContext("stopFirst");
  {
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__name);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__fadeTime);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "stopFirst") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 421; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_name = ((PyObject*)values[0]);
    if (values[1]) {
      __pyx_v_fadeTime = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_fadeTime == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 421; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_fadeTime = ((float)0.0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("stopFirst", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 421; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("_PyXAL.XALManager.stopFirst", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_name), (&PyBytes_Type), 1, "name", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 421; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_PyXAL.pyx":422
 * 
 *     def stopFirst(self, bytes name, float fadeTime = 0.0):
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         cdef char* name_str = name
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 422; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 422; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 422; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = (!__pyx_t_3);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":423
 *     def stopFirst(self, bytes name, float fadeTime = 0.0):
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         cdef char* name_str = name
 *         cdef String* hl_name = new String(name_str)
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_61), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 423; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 423; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "_PyXAL.pyx":424
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         cdef char* name_str = name             # <<<<<<<<<<<<<<
 *         cdef String* hl_name = new String(name_str)
 *         XAL.mgr.stopFirst(hl_name[0], fadeTime)
 */
  __pyx_t_5 = PyBytes_AsString(((PyObject *)__pyx_v_name)); if (unlikely((!__pyx_t_5) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 424; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_name_str = __pyx_t_5;

  /* "_PyXAL.pyx":425
 *             raise RuntimeError("XAL is not Initialized")
 *         cdef char* name_str = name
 *         cdef String* hl_name = new String(name_str)             # <<<<<<<<<<<<<<
 *         XAL.mgr.stopFirst(hl_name[0], fadeTime)
 *         del hl_name
 */
  __pyx_v_hl_name = new hltypes::String(__pyx_v_name_str);

  /* "_PyXAL.pyx":426
 *         cdef char* name_str = name
 *         cdef String* hl_name = new String(name_str)
 *         XAL.mgr.stopFirst(hl_name[0], fadeTime)             # <<<<<<<<<<<<<<
 *         del hl_name
 * 
 */
  try {xal::mgr->stopFirst((__pyx_v_hl_name[0]), __pyx_v_fadeTime);} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 426; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}

  /* "_PyXAL.pyx":427
 *         cdef String* hl_name = new String(name_str)
 *         XAL.mgr.stopFirst(hl_name[0], fadeTime)
 *         del hl_name             # <<<<<<<<<<<<<<
 * 
 *     def stopAll(self, float fadeTime = 0.0):
 */
  delete __pyx_v_hl_name;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.XALManager.stopFirst", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":429
 *         del hl_name
 * 
 *     def stopAll(self, float fadeTime = 0.0):             # <<<<<<<<<<<<<<
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 */

static PyObject *__pyx_pf_6_PyXAL_10XALManager_15stopAll(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pf_6_PyXAL_10XALManager_15stopAll(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  float __pyx_v_fadeTime;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__fadeTime,0};
  __Pyx_RefNannySetupContext("stopAll");
  {
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__fadeTime);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "stopAll") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 429; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_fadeTime = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_fadeTime == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 429; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_fadeTime = ((float)0.0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("stopAll", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 429; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("_PyXAL.XALManager.stopAll", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "_PyXAL.pyx":430
 * 
 *     def stopAll(self, float fadeTime = 0.0):
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         XAL.mgr.stopAll(fadeTime)
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 430; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 430; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 430; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = (!__pyx_t_3);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":431
 *     def stopAll(self, float fadeTime = 0.0):
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         XAL.mgr.stopAll(fadeTime)
 * 
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_62), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 431; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 431; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "_PyXAL.pyx":432
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         XAL.mgr.stopAll(fadeTime)             # <<<<<<<<<<<<<<
 * 
 *     def pauseAll(self, float fadeTime = 0.0):
 */
  try {xal::mgr->stopAll(__pyx_v_fadeTime);} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 432; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.XALManager.stopAll", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":434
 *         XAL.mgr.stopAll(fadeTime)
 * 
 *     def pauseAll(self, float fadeTime = 0.0):             # <<<<<<<<<<<<<<
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 */

static PyObject *__pyx_pf_6_PyXAL_10XALManager_16pauseAll(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pf_6_PyXAL_10XALManager_16pauseAll(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  float __pyx_v_fadeTime;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__fadeTime,0};
  __Pyx_RefNannySetupContext("pauseAll");
  {
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__fadeTime);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "pauseAll") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 434; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_fadeTime = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_fadeTime == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 434; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_fadeTime = ((float)0.0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("pauseAll", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 434; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("_PyXAL.XALManager.pauseAll", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "_PyXAL.pyx":435
 * 
 *     def pauseAll(self, float fadeTime = 0.0):
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         XAL.mgr.pauseAll(fadeTime)
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 435; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 435; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 435; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = (!__pyx_t_3);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":436
 *     def pauseAll(self, float fadeTime = 0.0):
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         XAL.mgr.pauseAll(fadeTime)
 * 
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_63), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 436; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 436; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "_PyXAL.pyx":437
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         XAL.mgr.pauseAll(fadeTime)             # <<<<<<<<<<<<<<
 * 
 *     def resumeAll(self, float fadeTime = 0.0):
 */
  try {xal::mgr->pauseAll(__pyx_v_fadeTime);} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 437; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.XALManager.pauseAll", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":439
 *         XAL.mgr.pauseAll(fadeTime)
 * 
 *     def resumeAll(self, float fadeTime = 0.0):             # <<<<<<<<<<<<<<
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 */

static PyObject *__pyx_pf_6_PyXAL_10XALManager_17resumeAll(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pf_6_PyXAL_10XALManager_17resumeAll(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  float __pyx_v_fadeTime;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__fadeTime,0};
  __Pyx_RefNannySetupContext("resumeAll");
  {
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__fadeTime);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "resumeAll") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 439; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_fadeTime = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_fadeTime == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 439; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_fadeTime = ((float)0.0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("resumeAll", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 439; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("_PyXAL.XALManager.resumeAll", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "_PyXAL.pyx":440
 * 
 *     def resumeAll(self, float fadeTime = 0.0):
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         XAL.mgr.resumeAll(fadeTime)
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 440; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 440; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 440; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = (!__pyx_t_3);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":441
 *     def resumeAll(self, float fadeTime = 0.0):
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         XAL.mgr.resumeAll(fadeTime)
 * 
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_64), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 441; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 441; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "_PyXAL.pyx":442
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         XAL.mgr.resumeAll(fadeTime)             # <<<<<<<<<<<<<<
 * 
 *     def isAnyPlaying(self, bytes name):
 */
  try {xal::mgr->resumeAll(__pyx_v_fadeTime);} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 442; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.XALManager.resumeAll", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":444
 *         XAL.mgr.resumeAll(fadeTime)
 * 
 *     def isAnyPlaying(self, bytes name):             # <<<<<<<<<<<<<<
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 */

static PyObject *__pyx_pf_6_PyXAL_10XALManager_18isAnyPlaying(PyObject *__pyx_v_self, PyObject *__pyx_v_name); /*proto*/
static PyObject *__pyx_pf_6_PyXAL_10XALManager_18isAnyPlaying(PyObject *__pyx_v_self, PyObject *__pyx_v_name) {
  char *__pyx_v_name_str;
  hltypes::String *__pyx_v_hl_name;
  int __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  char *__pyx_t_5;
  bool __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("isAnyPlaying");
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_name), (&PyBytes_Type), 1, "name", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 444; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_PyXAL.pyx":445
 * 
 *     def isAnyPlaying(self, bytes name):
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         cdef char* name_str = name
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 445; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 445; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 445; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = (!__pyx_t_3);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":446
 *     def isAnyPlaying(self, bytes name):
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         cdef char* name_str = name
 *         cdef String* hl_name = new String(name_str)
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_65), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 446; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 446; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "_PyXAL.pyx":447
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         cdef char* name_str = name             # <<<<<<<<<<<<<<
 *         cdef String* hl_name = new String(name_str)
 *         cdef bint result = XAL.mgr.isAnyPlaying(hl_name[0])
 */
  __pyx_t_5 = PyBytes_AsString(((PyObject *)__pyx_v_name)); if (unlikely((!__pyx_t_5) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 447; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_name_str = __pyx_t_5;

  /* "_PyXAL.pyx":448
 *             raise RuntimeError("XAL is not Initialized")
 *         cdef char* name_str = name
 *         cdef String* hl_name = new String(name_str)             # <<<<<<<<<<<<<<
 *         cdef bint result = XAL.mgr.isAnyPlaying(hl_name[0])
 *         del hl_name
 */
  __pyx_v_hl_name = new hltypes::String(__pyx_v_name_str);

  /* "_PyXAL.pyx":449
 *         cdef char* name_str = name
 *         cdef String* hl_name = new String(name_str)
 *         cdef bint result = XAL.mgr.isAnyPlaying(hl_name[0])             # <<<<<<<<<<<<<<
 *         del hl_name
 *         return result
 */
  try {__pyx_t_6 = xal::mgr->isAnyPlaying((__pyx_v_hl_name[0]));} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 449; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}
  __pyx_v_result = __pyx_t_6;

  /* "_PyXAL.pyx":450
 *         cdef String* hl_name = new String(name_str)
 *         cdef bint result = XAL.mgr.isAnyPlaying(hl_name[0])
 *         del hl_name             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  delete __pyx_v_hl_name;

  /* "_PyXAL.pyx":451
 *         cdef bint result = XAL.mgr.isAnyPlaying(hl_name[0])
 *         del hl_name
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     def isAnyFading(self, bytes name):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_result); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 451; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.XALManager.isAnyPlaying", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":453
 *         return result
 * 
 *     def isAnyFading(self, bytes name):             # <<<<<<<<<<<<<<
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 */

static PyObject *__pyx_pf_6_PyXAL_10XALManager_19isAnyFading(PyObject *__pyx_v_self, PyObject *__pyx_v_name); /*proto*/
static PyObject *__pyx_pf_6_PyXAL_10XALManager_19isAnyFading(PyObject *__pyx_v_self, PyObject *__pyx_v_name) {
  char *__pyx_v_name_str;
  hltypes::String *__pyx_v_hl_name;
  int __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  char *__pyx_t_5;
  bool __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("isAnyFading");
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_name), (&PyBytes_Type), 1, "name", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 453; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_PyXAL.pyx":454
 * 
 *     def isAnyFading(self, bytes name):
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         cdef char* name_str = name
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 454; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 454; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 454; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = (!__pyx_t_3);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":455
 *     def isAnyFading(self, bytes name):
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         cdef char* name_str = name
 *         cdef String* hl_name = new String(name_str)
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_66), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 455; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 455; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "_PyXAL.pyx":456
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         cdef char* name_str = name             # <<<<<<<<<<<<<<
 *         cdef String* hl_name = new String(name_str)
 *         cdef bint result = XAL.mgr.isAnyFading(hl_name[0])
 */
  __pyx_t_5 = PyBytes_AsString(((PyObject *)__pyx_v_name)); if (unlikely((!__pyx_t_5) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 456; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_name_str = __pyx_t_5;

  /* "_PyXAL.pyx":457
 *             raise RuntimeError("XAL is not Initialized")
 *         cdef char* name_str = name
 *         cdef String* hl_name = new String(name_str)             # <<<<<<<<<<<<<<
 *         cdef bint result = XAL.mgr.isAnyFading(hl_name[0])
 *         del hl_name
 */
  __pyx_v_hl_name = new hltypes::String(__pyx_v_name_str);

  /* "_PyXAL.pyx":458
 *         cdef char* name_str = name
 *         cdef String* hl_name = new String(name_str)
 *         cdef bint result = XAL.mgr.isAnyFading(hl_name[0])             # <<<<<<<<<<<<<<
 *         del hl_name
 *         return result
 */
  try {__pyx_t_6 = xal::mgr->isAnyFading((__pyx_v_hl_name[0]));} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 458; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}
  __pyx_v_result = __pyx_t_6;

  /* "_PyXAL.pyx":459
 *         cdef String* hl_name = new String(name_str)
 *         cdef bint result = XAL.mgr.isAnyFading(hl_name[0])
 *         del hl_name             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  delete __pyx_v_hl_name;

  /* "_PyXAL.pyx":460
 *         cdef bint result = XAL.mgr.isAnyFading(hl_name[0])
 *         del hl_name
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     def isAnyFadingIn(self, bytes name):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_result); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 460; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.XALManager.isAnyFading", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":462
 *         return result
 * 
 *     def isAnyFadingIn(self, bytes name):             # <<<<<<<<<<<<<<
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 */

static PyObject *__pyx_pf_6_PyXAL_10XALManager_20isAnyFadingIn(PyObject *__pyx_v_self, PyObject *__pyx_v_name); /*proto*/
static PyObject *__pyx_pf_6_PyXAL_10XALManager_20isAnyFadingIn(PyObject *__pyx_v_self, PyObject *__pyx_v_name) {
  char *__pyx_v_name_str;
  hltypes::String *__pyx_v_hl_name;
  int __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  char *__pyx_t_5;
  bool __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("isAnyFadingIn");
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_name), (&PyBytes_Type), 1, "name", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 462; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_PyXAL.pyx":463
 * 
 *     def isAnyFadingIn(self, bytes name):
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         cdef char* name_str = name
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 463; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 463; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 463; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = (!__pyx_t_3);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":464
 *     def isAnyFadingIn(self, bytes name):
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         cdef char* name_str = name
 *         cdef String* hl_name = new String(name_str)
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_67), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 464; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 464; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "_PyXAL.pyx":465
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         cdef char* name_str = name             # <<<<<<<<<<<<<<
 *         cdef String* hl_name = new String(name_str)
 *         cdef bint result = XAL.mgr.isAnyFadingIn(hl_name[0])
 */
  __pyx_t_5 = PyBytes_AsString(((PyObject *)__pyx_v_name)); if (unlikely((!__pyx_t_5) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 465; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_name_str = __pyx_t_5;

  /* "_PyXAL.pyx":466
 *             raise RuntimeError("XAL is not Initialized")
 *         cdef char* name_str = name
 *         cdef String* hl_name = new String(name_str)             # <<<<<<<<<<<<<<
 *         cdef bint result = XAL.mgr.isAnyFadingIn(hl_name[0])
 *         del hl_name
 */
  __pyx_v_hl_name = new hltypes::String(__pyx_v_name_str);

  /* "_PyXAL.pyx":467
 *         cdef char* name_str = name
 *         cdef String* hl_name = new String(name_str)
 *         cdef bint result = XAL.mgr.isAnyFadingIn(hl_name[0])             # <<<<<<<<<<<<<<
 *         del hl_name
 *         return result
 */
  try {__pyx_t_6 = xal::mgr->isAnyFadingIn((__pyx_v_hl_name[0]));} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 467; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}
  __pyx_v_result = __pyx_t_6;

  /* "_PyXAL.pyx":468
 *         cdef String* hl_name = new String(name_str)
 *         cdef bint result = XAL.mgr.isAnyFadingIn(hl_name[0])
 *         del hl_name             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  delete __pyx_v_hl_name;

  /* "_PyXAL.pyx":469
 *         cdef bint result = XAL.mgr.isAnyFadingIn(hl_name[0])
 *         del hl_name
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     def isAnyFadingOut(self, bytes name):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_result); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 469; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.XALManager.isAnyFadingIn", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":471
 *         return result
 * 
 *     def isAnyFadingOut(self, bytes name):             # <<<<<<<<<<<<<<
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 */

static PyObject *__pyx_pf_6_PyXAL_10XALManager_21isAnyFadingOut(PyObject *__pyx_v_self, PyObject *__pyx_v_name); /*proto*/
static PyObject *__pyx_pf_6_PyXAL_10XALManager_21isAnyFadingOut(PyObject *__pyx_v_self, PyObject *__pyx_v_name) {
  char *__pyx_v_name_str;
  hltypes::String *__pyx_v_hl_name;
  int __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  char *__pyx_t_5;
  bool __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("isAnyFadingOut");
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_name), (&PyBytes_Type), 1, "name", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 471; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_PyXAL.pyx":472
 * 
 *     def isAnyFadingOut(self, bytes name):
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         cdef char* name_str = name
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 472; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 472; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 472; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = (!__pyx_t_3);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":473
 *     def isAnyFadingOut(self, bytes name):
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         cdef char* name_str = name
 *         cdef String* hl_name = new String(name_str)
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_68), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 473; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 473; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "_PyXAL.pyx":474
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         cdef char* name_str = name             # <<<<<<<<<<<<<<
 *         cdef String* hl_name = new String(name_str)
 *         cdef bint result = XAL.mgr.isAnyFadingOut(hl_name[0])
 */
  __pyx_t_5 = PyBytes_AsString(((PyObject *)__pyx_v_name)); if (unlikely((!__pyx_t_5) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 474; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_name_str = __pyx_t_5;

  /* "_PyXAL.pyx":475
 *             raise RuntimeError("XAL is not Initialized")
 *         cdef char* name_str = name
 *         cdef String* hl_name = new String(name_str)             # <<<<<<<<<<<<<<
 *         cdef bint result = XAL.mgr.isAnyFadingOut(hl_name[0])
 *         del hl_name
 */
  __pyx_v_hl_name = new hltypes::String(__pyx_v_name_str);

  /* "_PyXAL.pyx":476
 *         cdef char* name_str = name
 *         cdef String* hl_name = new String(name_str)
 *         cdef bint result = XAL.mgr.isAnyFadingOut(hl_name[0])             # <<<<<<<<<<<<<<
 *         del hl_name
 *         return result
 */
  try {__pyx_t_6 = xal::mgr->isAnyFadingOut((__pyx_v_hl_name[0]));} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 476; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}
  __pyx_v_result = __pyx_t_6;

  /* "_PyXAL.pyx":477
 *         cdef String* hl_name = new String(name_str)
 *         cdef bint result = XAL.mgr.isAnyFadingOut(hl_name[0])
 *         del hl_name             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  delete __pyx_v_hl_name;

  /* "_PyXAL.pyx":478
 *         cdef bint result = XAL.mgr.isAnyFadingOut(hl_name[0])
 *         del hl_name
 *         return result             # <<<<<<<<<<<<<<
 * 
 * def Init(int backendId, bint threaded = True):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_result); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 478; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.XALManager.isAnyFadingOut", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":480
 *         return result
 * 
 * def Init(int backendId, bint threaded = True):             # <<<<<<<<<<<<<<
 *     global Mgr
 *     if Mgr is None:
 */

static PyObject *__pyx_pf_6_PyXAL_2Init(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_6_PyXAL_2Init = {__Pyx_NAMESTR("Init"), (PyCFunction)__pyx_pf_6_PyXAL_2Init, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)};
static PyObject *__pyx_pf_6_PyXAL_2Init(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_backendId;
  int __pyx_v_threaded;
  double __pyx_v_fade;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__backendId,&__pyx_n_s__threaded,0};
  __Pyx_RefNannySetupContext("Init");
  __pyx_self = __pyx_self;
  {
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__backendId);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__threaded);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "Init") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 480; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_backendId = __Pyx_PyInt_AsInt(values[0]); if (unlikely((__pyx_v_backendId == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 480; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    if (values[1]) {
      __pyx_v_threaded = __Pyx_PyObject_IsTrue(values[1]); if (unlikely((__pyx_v_threaded == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 480; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_threaded = ((int)1);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("Init", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 480; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("_PyXAL.Init", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "_PyXAL.pyx":482
 * def Init(int backendId, bint threaded = True):
 *     global Mgr
 *     if Mgr is None:             # <<<<<<<<<<<<<<
 *         if XAL.mgr != NULL:
 *             print "Init XAL"
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__Mgr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 482; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__pyx_t_1 == Py_None);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "_PyXAL.pyx":483
 *     global Mgr
 *     if Mgr is None:
 *         if XAL.mgr != NULL:             # <<<<<<<<<<<<<<
 *             print "Init XAL"
 *             fade = 0.0
 */
    __pyx_t_2 = (xal::mgr != NULL);
    if (__pyx_t_2) {

      /* "_PyXAL.pyx":484
 *     if Mgr is None:
 *         if XAL.mgr != NULL:
 *             print "Init XAL"             # <<<<<<<<<<<<<<
 *             fade = 0.0
 *             XAL.mgr.stopAll(fade)
 */
      if (__Pyx_PrintOne(0, ((PyObject *)__pyx_kp_s_69)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 484; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

      /* "_PyXAL.pyx":485
 *         if XAL.mgr != NULL:
 *             print "Init XAL"
 *             fade = 0.0             # <<<<<<<<<<<<<<
 *             XAL.mgr.stopAll(fade)
 *             XAL.destroy()
 */
      __pyx_v_fade = 0.0;

      /* "_PyXAL.pyx":486
 *             print "Init XAL"
 *             fade = 0.0
 *             XAL.mgr.stopAll(fade)             # <<<<<<<<<<<<<<
 *             XAL.destroy()
 *         Mgr = XALManager(XAL_AS_DEFAULT, backendId, threaded)
 */
      try {xal::mgr->stopAll(__pyx_v_fade);} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 486; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}

      /* "_PyXAL.pyx":487
 *             fade = 0.0
 *             XAL.mgr.stopAll(fade)
 *             XAL.destroy()             # <<<<<<<<<<<<<<
 *         Mgr = XALManager(XAL_AS_DEFAULT, backendId, threaded)
 * 
 */
      try {xal::destroy();} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 487; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}
      goto __pyx_L7;
    }
    __pyx_L7:;

    /* "_PyXAL.pyx":488
 *             XAL.mgr.stopAll(fade)
 *             XAL.destroy()
 *         Mgr = XALManager(XAL_AS_DEFAULT, backendId, threaded)             # <<<<<<<<<<<<<<
 * 
 * def Destroy():
 */
    __pyx_t_1 = PyBytes_FromString(__pyx_v_6_PyXAL_XAL_AS_DEFAULT); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 488; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_1));
    __pyx_t_3 = PyInt_FromLong(__pyx_v_backendId); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 488; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_v_threaded); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 488; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 488; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_5));
    PyTuple_SET_ITEM(__pyx_t_5, 0, ((PyObject *)__pyx_t_1));
    __Pyx_GIVEREF(((PyObject *)__pyx_t_1));
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_1 = 0;
    __pyx_t_3 = 0;
    __pyx_t_4 = 0;
    __pyx_t_4 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_6_PyXAL_XALManager)), ((PyObject *)__pyx_t_5), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 488; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(((PyObject *)__pyx_t_5)); __pyx_t_5 = 0;
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s__Mgr, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 488; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    goto __pyx_L6;
  }
  __pyx_L6:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("_PyXAL.Init", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":490
 *         Mgr = XALManager(XAL_AS_DEFAULT, backendId, threaded)
 * 
 * def Destroy():             # <<<<<<<<<<<<<<
 *     global Mgr
 *     if XAL.mgr != NULL:
 */

static PyObject *__pyx_pf_6_PyXAL_3Destroy(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyMethodDef __pyx_mdef_6_PyXAL_3Destroy = {__Pyx_NAMESTR("Destroy"), (PyCFunction)__pyx_pf_6_PyXAL_3Destroy, METH_NOARGS, __Pyx_DOCSTR(0)};
static PyObject *__pyx_pf_6_PyXAL_3Destroy(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  double __pyx_v_fade;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("Destroy");
  __pyx_self = __pyx_self;

  /* "_PyXAL.pyx":492
 * def Destroy():
 *     global Mgr
 *     if XAL.mgr != NULL:             # <<<<<<<<<<<<<<
 *         print "XAL Destroy"
 *         fade = 0.0
 */
  __pyx_t_1 = (xal::mgr != NULL);
  if (__pyx_t_1) {

    /* "_PyXAL.pyx":493
 *     global Mgr
 *     if XAL.mgr != NULL:
 *         print "XAL Destroy"             # <<<<<<<<<<<<<<
 *         fade = 0.0
 *         XAL.mgr.stopAll(fade)
 */
    if (__Pyx_PrintOne(0, ((PyObject *)__pyx_kp_s_70)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 493; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "_PyXAL.pyx":494
 *     if XAL.mgr != NULL:
 *         print "XAL Destroy"
 *         fade = 0.0             # <<<<<<<<<<<<<<
 *         XAL.mgr.stopAll(fade)
 *         XAL.destroy()
 */
    __pyx_v_fade = 0.0;

    /* "_PyXAL.pyx":495
 *         print "XAL Destroy"
 *         fade = 0.0
 *         XAL.mgr.stopAll(fade)             # <<<<<<<<<<<<<<
 *         XAL.destroy()
 *     Mgr = None
 */
    try {xal::mgr->stopAll(__pyx_v_fade);} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 495; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}

    /* "_PyXAL.pyx":496
 *         fade = 0.0
 *         XAL.mgr.stopAll(fade)
 *         XAL.destroy()             # <<<<<<<<<<<<<<
 *     Mgr = None
 */
    try {xal::destroy();} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 496; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "_PyXAL.pyx":497
 *         XAL.mgr.stopAll(fade)
 *         XAL.destroy()
 *     Mgr = None             # <<<<<<<<<<<<<<
 */
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__Mgr, Py_None) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 497; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_PyXAL.Destroy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_tp_new_6_PyXAL_XALManager(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = (*t->tp_alloc)(t, 0);
  if (!o) return 0;
  return o;
}

static void __pyx_tp_dealloc_6_PyXAL_XALManager(PyObject *o) {
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pf_6_PyXAL_10XALManager_4__dealloc__(o);
    if (PyErr_Occurred()) PyErr_WriteUnraisable(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_6_PyXAL_XALManager[] = {
  {__Pyx_NAMESTR("isXALInitialized"), (PyCFunction)__pyx_pf_6_PyXAL_10XALManager_1isXALInitialized, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("SetupXAL"), (PyCFunction)__pyx_pf_6_PyXAL_10XALManager_2SetupXAL, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("__del__"), (PyCFunction)__pyx_pf_6_PyXAL_10XALManager_3__del__, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("DestroyXAL"), (PyCFunction)__pyx_pf_6_PyXAL_10XALManager_5DestroyXAL, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("clear"), (PyCFunction)__pyx_pf_6_PyXAL_10XALManager_6clear, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("createSound"), (PyCFunction)__pyx_pf_6_PyXAL_10XALManager_7createSound, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("createPlayer"), (PyCFunction)__pyx_pf_6_PyXAL_10XALManager_8createPlayer, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("destroyPlayer"), (PyCFunction)__pyx_pf_6_PyXAL_10XALManager_9destroyPlayer, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("destroySound"), (PyCFunction)__pyx_pf_6_PyXAL_10XALManager_10destroySound, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("findPlayer"), (PyCFunction)__pyx_pf_6_PyXAL_10XALManager_11findPlayer, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("play"), (PyCFunction)__pyx_pf_6_PyXAL_10XALManager_12play, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("stop"), (PyCFunction)__pyx_pf_6_PyXAL_10XALManager_13stop, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("stopFirst"), (PyCFunction)__pyx_pf_6_PyXAL_10XALManager_14stopFirst, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("stopAll"), (PyCFunction)__pyx_pf_6_PyXAL_10XALManager_15stopAll, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("pauseAll"), (PyCFunction)__pyx_pf_6_PyXAL_10XALManager_16pauseAll, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("resumeAll"), (PyCFunction)__pyx_pf_6_PyXAL_10XALManager_17resumeAll, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("isAnyPlaying"), (PyCFunction)__pyx_pf_6_PyXAL_10XALManager_18isAnyPlaying, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("isAnyFading"), (PyCFunction)__pyx_pf_6_PyXAL_10XALManager_19isAnyFading, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("isAnyFadingIn"), (PyCFunction)__pyx_pf_6_PyXAL_10XALManager_20isAnyFadingIn, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("isAnyFadingOut"), (PyCFunction)__pyx_pf_6_PyXAL_10XALManager_21isAnyFadingOut, METH_O, __Pyx_DOCSTR(0)},
  {0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_XALManager = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_XALManager = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_XALManager = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_XALManager = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

static PyTypeObject __pyx_type_6_PyXAL_XALManager = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("_PyXAL.XALManager"), /*tp_name*/
  sizeof(struct __pyx_obj_6_PyXAL_XALManager), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6_PyXAL_XALManager, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_XALManager, /*tp_as_number*/
  &__pyx_tp_as_sequence_XALManager, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_XALManager, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_XALManager, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6_PyXAL_XALManager, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pf_6_PyXAL_10XALManager___init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6_PyXAL_XALManager, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};

static PyObject *__pyx_tp_new_6_PyXAL_PyAudioManager(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = (*t->tp_alloc)(t, 0);
  if (!o) return 0;
  return o;
}

static void __pyx_tp_dealloc_6_PyXAL_PyAudioManager(PyObject *o) {
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_6_PyXAL_PyAudioManager[] = {
  {0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_PyAudioManager = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_PyAudioManager = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_PyAudioManager = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_PyAudioManager = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

static PyTypeObject __pyx_type_6_PyXAL_PyAudioManager = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("_PyXAL.PyAudioManager"), /*tp_name*/
  sizeof(struct __pyx_obj_6_PyXAL_PyAudioManager), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6_PyXAL_PyAudioManager, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_PyAudioManager, /*tp_as_number*/
  &__pyx_tp_as_sequence_PyAudioManager, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_PyAudioManager, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_PyAudioManager, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6_PyXAL_PyAudioManager, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pf_6_PyXAL_14PyAudioManager___init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6_PyXAL_PyAudioManager, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};

static PyObject *__pyx_tp_new_6_PyXAL_PySound(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = (*t->tp_alloc)(t, 0);
  if (!o) return 0;
  return o;
}

static void __pyx_tp_dealloc_6_PyXAL_PySound(PyObject *o) {
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_6_PyXAL_PySound[] = {
  {__Pyx_NAMESTR("isXALInitialized"), (PyCFunction)__pyx_pf_6_PyXAL_7PySound_1isXALInitialized, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("getName"), (PyCFunction)__pyx_pf_6_PyXAL_7PySound_2getName, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("getFilename"), (PyCFunction)__pyx_pf_6_PyXAL_7PySound_3getFilename, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("getRealFilename"), (PyCFunction)__pyx_pf_6_PyXAL_7PySound_4getRealFilename, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("getSize"), (PyCFunction)__pyx_pf_6_PyXAL_7PySound_5getSize, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("getChannels"), (PyCFunction)__pyx_pf_6_PyXAL_7PySound_6getChannels, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("getSamplingRate"), (PyCFunction)__pyx_pf_6_PyXAL_7PySound_7getSamplingRate, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("getBitsPerSample"), (PyCFunction)__pyx_pf_6_PyXAL_7PySound_8getBitsPerSample, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("getDuration"), (PyCFunction)__pyx_pf_6_PyXAL_7PySound_9getDuration, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("getFormat"), (PyCFunction)__pyx_pf_6_PyXAL_7PySound_10getFormat, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("isStreamed"), (PyCFunction)__pyx_pf_6_PyXAL_7PySound_11isStreamed, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("readRawData"), (PyCFunction)__pyx_pf_6_PyXAL_7PySound_12readRawData, METH_NOARGS, __Pyx_DOCSTR(0)},
  {0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_PySound = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_PySound = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_PySound = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_PySound = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

static PyTypeObject __pyx_type_6_PyXAL_PySound = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("_PyXAL.PySound"), /*tp_name*/
  sizeof(struct __pyx_obj_6_PyXAL_PySound), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6_PyXAL_PySound, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_PySound, /*tp_as_number*/
  &__pyx_tp_as_sequence_PySound, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_PySound, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_PySound, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6_PyXAL_PySound, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pf_6_PyXAL_7PySound___init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6_PyXAL_PySound, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};

static PyObject *__pyx_tp_new_6_PyXAL_PyPlayer(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = (*t->tp_alloc)(t, 0);
  if (!o) return 0;
  return o;
}

static void __pyx_tp_dealloc_6_PyXAL_PyPlayer(PyObject *o) {
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_6_PyXAL_PyPlayer[] = {
  {__Pyx_NAMESTR("isXALInitialized"), (PyCFunction)__pyx_pf_6_PyXAL_8PyPlayer_1isXALInitialized, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("getGain"), (PyCFunction)__pyx_pf_6_PyXAL_8PyPlayer_2getGain, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("setGain"), (PyCFunction)__pyx_pf_6_PyXAL_8PyPlayer_3setGain, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("getOffset"), (PyCFunction)__pyx_pf_6_PyXAL_8PyPlayer_4getOffset, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("getSound"), (PyCFunction)__pyx_pf_6_PyXAL_8PyPlayer_5getSound, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("getName"), (PyCFunction)__pyx_pf_6_PyXAL_8PyPlayer_6getName, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("getFilename"), (PyCFunction)__pyx_pf_6_PyXAL_8PyPlayer_7getFilename, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("getRealFilename"), (PyCFunction)__pyx_pf_6_PyXAL_8PyPlayer_8getRealFilename, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("getDuration"), (PyCFunction)__pyx_pf_6_PyXAL_8PyPlayer_9getDuration, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("getSize"), (PyCFunction)__pyx_pf_6_PyXAL_8PyPlayer_10getSize, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("isPlaying"), (PyCFunction)__pyx_pf_6_PyXAL_8PyPlayer_11isPlaying, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("isPaused"), (PyCFunction)__pyx_pf_6_PyXAL_8PyPlayer_12isPaused, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("isFading"), (PyCFunction)__pyx_pf_6_PyXAL_8PyPlayer_13isFading, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("isFadingIn"), (PyCFunction)__pyx_pf_6_PyXAL_8PyPlayer_14isFadingIn, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("isFadingOut"), (PyCFunction)__pyx_pf_6_PyXAL_8PyPlayer_15isFadingOut, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("isLooping"), (PyCFunction)__pyx_pf_6_PyXAL_8PyPlayer_16isLooping, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("play"), (PyCFunction)__pyx_pf_6_PyXAL_8PyPlayer_17play, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("stop"), (PyCFunction)__pyx_pf_6_PyXAL_8PyPlayer_18stop, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("pause"), (PyCFunction)__pyx_pf_6_PyXAL_8PyPlayer_19pause, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_PyPlayer = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_PyPlayer = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_PyPlayer = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_PyPlayer = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

static PyTypeObject __pyx_type_6_PyXAL_PyPlayer = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("_PyXAL.PyPlayer"), /*tp_name*/
  sizeof(struct __pyx_obj_6_PyXAL_PyPlayer), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6_PyXAL_PyPlayer, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_PyPlayer, /*tp_as_number*/
  &__pyx_tp_as_sequence_PyPlayer, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_PyPlayer, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_PyPlayer, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6_PyXAL_PyPlayer, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pf_6_PyXAL_8PyPlayer___init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6_PyXAL_PyPlayer, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {__Pyx_NAMESTR("SetLogPath"), (PyCFunction)__pyx_pf_6_PyXAL_SetLogPath, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("EnableLogging"), (PyCFunction)__pyx_pf_6_PyXAL_1EnableLogging, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    __Pyx_NAMESTR("_PyXAL"),
    0, /* m_doc */
    -1, /* m_size */
    __pyx_methods /* m_methods */,
    NULL, /* m_reload */
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_kp_s_1, __pyx_k_1, sizeof(__pyx_k_1), 0, 0, 1, 0},
  {&__pyx_kp_s_20, __pyx_k_20, sizeof(__pyx_k_20), 0, 0, 1, 0},
  {&__pyx_kp_s_3, __pyx_k_3, sizeof(__pyx_k_3), 0, 0, 1, 0},
  {&__pyx_kp_s_4, __pyx_k_4, sizeof(__pyx_k_4), 0, 0, 1, 0},
  {&__pyx_kp_s_40, __pyx_k_40, sizeof(__pyx_k_40), 0, 0, 1, 0},
  {&__pyx_kp_s_43, __pyx_k_43, sizeof(__pyx_k_43), 0, 0, 1, 0},
  {&__pyx_kp_s_44, __pyx_k_44, sizeof(__pyx_k_44), 0, 0, 1, 0},
  {&__pyx_kp_s_45, __pyx_k_45, sizeof(__pyx_k_45), 0, 0, 1, 0},
  {&__pyx_kp_s_46, __pyx_k_46, sizeof(__pyx_k_46), 0, 0, 1, 0},
  {&__pyx_kp_s_48, __pyx_k_48, sizeof(__pyx_k_48), 0, 0, 1, 0},
  {&__pyx_kp_s_50, __pyx_k_50, sizeof(__pyx_k_50), 0, 0, 1, 0},
  {&__pyx_kp_s_51, __pyx_k_51, sizeof(__pyx_k_51), 0, 0, 1, 0},
  {&__pyx_kp_s_54, __pyx_k_54, sizeof(__pyx_k_54), 0, 0, 1, 0},
  {&__pyx_kp_s_58, __pyx_k_58, sizeof(__pyx_k_58), 0, 0, 1, 0},
  {&__pyx_kp_s_6, __pyx_k_6, sizeof(__pyx_k_6), 0, 0, 1, 0},
  {&__pyx_kp_s_69, __pyx_k_69, sizeof(__pyx_k_69), 0, 0, 1, 0},
  {&__pyx_kp_s_70, __pyx_k_70, sizeof(__pyx_k_70), 0, 0, 1, 0},
  {&__pyx_kp_s_8, __pyx_k_8, sizeof(__pyx_k_8), 0, 0, 1, 0},
  {&__pyx_n_s__Destroy, __pyx_k__Destroy, sizeof(__pyx_k__Destroy), 0, 0, 1, 1},
  {&__pyx_n_s__DestroyXAL, __pyx_k__DestroyXAL, sizeof(__pyx_k__DestroyXAL), 0, 0, 1, 1},
  {&__pyx_n_s__Init, __pyx_k__Init, sizeof(__pyx_k__Init), 0, 0, 1, 1},
  {&__pyx_n_s__Mgr, __pyx_k__Mgr, sizeof(__pyx_k__Mgr), 0, 0, 1, 1},
  {&__pyx_n_s__RuntimeError, __pyx_k__RuntimeError, sizeof(__pyx_k__RuntimeError), 0, 0, 1, 1},
  {&__pyx_n_s__SetupXAL, __pyx_k__SetupXAL, sizeof(__pyx_k__SetupXAL), 0, 0, 1, 1},
  {&__pyx_n_s___PyXAL, __pyx_k___PyXAL, sizeof(__pyx_k___PyXAL), 0, 0, 1, 1},
  {&__pyx_n_s____main__, __pyx_k____main__, sizeof(__pyx_k____main__), 0, 0, 1, 1},
  {&__pyx_n_s____test__, __pyx_k____test__, sizeof(__pyx_k____test__), 0, 0, 1, 1},
  {&__pyx_n_s__ab, __pyx_k__ab, sizeof(__pyx_k__ab), 0, 0, 1, 1},
  {&__pyx_n_s__backendId, __pyx_k__backendId, sizeof(__pyx_k__backendId), 0, 0, 1, 1},
  {&__pyx_n_s__close, __pyx_k__close, sizeof(__pyx_k__close), 0, 0, 1, 1},
  {&__pyx_n_s__deviceName, __pyx_k__deviceName, sizeof(__pyx_k__deviceName), 0, 0, 1, 1},
  {&__pyx_n_s__exists, __pyx_k__exists, sizeof(__pyx_k__exists), 0, 0, 1, 1},
  {&__pyx_n_s__fadeTime, __pyx_k__fadeTime, sizeof(__pyx_k__fadeTime), 0, 0, 1, 1},
  {&__pyx_n_s__gain, __pyx_k__gain, sizeof(__pyx_k__gain), 0, 0, 1, 1},
  {&__pyx_n_s__getName, __pyx_k__getName, sizeof(__pyx_k__getName), 0, 0, 1, 1},
  {&__pyx_n_s__isXALInitialized, __pyx_k__isXALInitialized, sizeof(__pyx_k__isXALInitialized), 0, 0, 1, 1},
  {&__pyx_n_s__isdir, __pyx_k__isdir, sizeof(__pyx_k__isdir), 0, 0, 1, 1},
  {&__pyx_n_s__join, __pyx_k__join, sizeof(__pyx_k__join), 0, 0, 1, 1},
  {&__pyx_n_s__looping, __pyx_k__looping, sizeof(__pyx_k__looping), 0, 0, 1, 1},
  {&__pyx_n_s__makedirs, __pyx_k__makedirs, sizeof(__pyx_k__makedirs), 0, 0, 1, 1},
  {&__pyx_n_s__name, __pyx_k__name, sizeof(__pyx_k__name), 0, 0, 1, 1},
  {&__pyx_n_s__open, __pyx_k__open, sizeof(__pyx_k__open), 0, 0, 1, 1},
  {&__pyx_n_s__os, __pyx_k__os, sizeof(__pyx_k__os), 0, 0, 1, 1},
  {&__pyx_n_s__path, __pyx_k__path, sizeof(__pyx_k__path), 0, 0, 1, 1},
  {&__pyx_n_s__split, __pyx_k__split, sizeof(__pyx_k__split), 0, 0, 1, 1},
  {&__pyx_n_s__state, __pyx_k__state, sizeof(__pyx_k__state), 0, 0, 1, 1},
  {&__pyx_n_s__systemname, __pyx_k__systemname, sizeof(__pyx_k__systemname), 0, 0, 1, 1},
  {&__pyx_n_s__threaded, __pyx_k__threaded, sizeof(__pyx_k__threaded), 0, 0, 1, 1},
  {&__pyx_n_s__updateTime, __pyx_k__updateTime, sizeof(__pyx_k__updateTime), 0, 0, 1, 1},
  {&__pyx_n_s__write, __pyx_k__write, sizeof(__pyx_k__write), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_open = __Pyx_GetName(__pyx_b, __pyx_n_s__open); if (!__pyx_builtin_open) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 54; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_RuntimeError = __Pyx_GetName(__pyx_b, __pyx_n_s__RuntimeError); if (!__pyx_builtin_RuntimeError) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 71; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants");

  /* "_PyXAL.pyx":71
 * 
 *     def __init__(self):
 *         raise RuntimeError("PyAudioManager Can not be initialized from python")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_k_tuple_5 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 71; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_5));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_4));
  PyTuple_SET_ITEM(__pyx_k_tuple_5, 0, ((PyObject *)__pyx_kp_s_4));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_4));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_5));

  /* "_PyXAL.pyx":79
 * 
 *     def __init__(self):
 *         raise RuntimeError("PySound Can not be initialized from python")             # <<<<<<<<<<<<<<
 * 
 *     def isXALInitialized(self):
 */
  __pyx_k_tuple_7 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 79; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_7));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_6));
  PyTuple_SET_ITEM(__pyx_k_tuple_7, 0, ((PyObject *)__pyx_kp_s_6));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_6));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_7));

  /* "_PyXAL.pyx":89
 *     def getName(self):
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         cdef String hl_name = self._pointer.getName()
 *         cdef const_char_ptr name = hl_name.c_str()
 */
  __pyx_k_tuple_9 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 89; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_9));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_8));
  PyTuple_SET_ITEM(__pyx_k_tuple_9, 0, ((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_9));

  /* "_PyXAL.pyx":96
 *     def getFilename(self):
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         cdef String hl_name = self._pointer.getFilename()
 *         cdef const_char_ptr name = hl_name.c_str()
 */
  __pyx_k_tuple_10 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 96; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_10));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_8));
  PyTuple_SET_ITEM(__pyx_k_tuple_10, 0, ((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_10));

  /* "_PyXAL.pyx":103
 *     def getRealFilename(self):
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         cdef String hl_name = self._pointer.getRealFilename()
 *         cdef const_char_ptr name = hl_name.c_str()
 */
  __pyx_k_tuple_11 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 103; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_11));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_8));
  PyTuple_SET_ITEM(__pyx_k_tuple_11, 0, ((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_11));

  /* "_PyXAL.pyx":110
 *     def getSize(self):
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         cdef int size = self._pointer.getSize()
 *         return size
 */
  __pyx_k_tuple_12 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 110; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_12));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_8));
  PyTuple_SET_ITEM(__pyx_k_tuple_12, 0, ((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_12));

  /* "_PyXAL.pyx":116
 *     def getChannels(self):
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         cdef int channels = self._pointer.getChannels()
 *         return channels
 */
  __pyx_k_tuple_13 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_13)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 116; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_13));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_8));
  PyTuple_SET_ITEM(__pyx_k_tuple_13, 0, ((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_13));

  /* "_PyXAL.pyx":122
 *     def getSamplingRate(self):
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         cdef int rate = self._pointer.getSamplingRate()
 *         return rate
 */
  __pyx_k_tuple_14 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_14)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 122; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_14));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_8));
  PyTuple_SET_ITEM(__pyx_k_tuple_14, 0, ((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_14));

  /* "_PyXAL.pyx":128
 *     def getBitsPerSample(self):
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         cdef int rate = self._pointer.getBitsPerSample()
 *         return rate
 */
  __pyx_k_tuple_15 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_15)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 128; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_15));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_8));
  PyTuple_SET_ITEM(__pyx_k_tuple_15, 0, ((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_15));

  /* "_PyXAL.pyx":134
 *     def getDuration(self):
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         cdef float duration = self._pointer.getDuration()
 *         return duration
 */
  __pyx_k_tuple_16 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_16)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 134; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_16));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_8));
  PyTuple_SET_ITEM(__pyx_k_tuple_16, 0, ((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_16));

  /* "_PyXAL.pyx":140
 *     def getFormat(self):
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         cdef int format = self._pointer.getFormat()
 *         return format
 */
  __pyx_k_tuple_17 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_17)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 140; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_17));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_8));
  PyTuple_SET_ITEM(__pyx_k_tuple_17, 0, ((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_17));

  /* "_PyXAL.pyx":146
 *     def isStreamed(self):
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         cdef bint streamed = self._pointer.isStreamed()
 *         return streamed
 */
  __pyx_k_tuple_18 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_18)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 146; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_18));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_8));
  PyTuple_SET_ITEM(__pyx_k_tuple_18, 0, ((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_18));

  /* "_PyXAL.pyx":152
 *     def readRawData(self):
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         cdef unsigned char* raw_data
 *         cdef int raw_size
 */
  __pyx_k_tuple_19 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_19)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 152; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_19));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_8));
  PyTuple_SET_ITEM(__pyx_k_tuple_19, 0, ((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_19));

  /* "_PyXAL.pyx":169
 * 
 *     def __init__(self):
 *         raise RuntimeError("PyPlayer Can not be initialized from python")             # <<<<<<<<<<<<<<
 * 
 *     def isXALInitialized(self):
 */
  __pyx_k_tuple_21 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_21)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 169; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_21));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_20));
  PyTuple_SET_ITEM(__pyx_k_tuple_21, 0, ((PyObject *)__pyx_kp_s_20));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_20));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_21));

  /* "_PyXAL.pyx":179
 *     def getGain(self):
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         cdef float gain = self._pointer.getGain()
 *         return gain
 */
  __pyx_k_tuple_22 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_22)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 179; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_22));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_8));
  PyTuple_SET_ITEM(__pyx_k_tuple_22, 0, ((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_22));

  /* "_PyXAL.pyx":185
 *     def setGain(self, float value):
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         self._pointer.setGain(value)
 * 
 */
  __pyx_k_tuple_23 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_23)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 185; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_23));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_8));
  PyTuple_SET_ITEM(__pyx_k_tuple_23, 0, ((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_23));

  /* "_PyXAL.pyx":190
 *     def getOffset(self):
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         cdef float offset = self._pointer.getOffset()
 *         return offset
 */
  __pyx_k_tuple_24 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_24)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 190; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_24));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_8));
  PyTuple_SET_ITEM(__pyx_k_tuple_24, 0, ((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_24));

  /* "_PyXAL.pyx":196
 *     def getSound(self):
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         cdef XAL.Sound* sound = self._pointer.getSound()
 *         cdef PySound pysound = PySound()
 */
  __pyx_k_tuple_25 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_25)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 196; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_25));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_8));
  PyTuple_SET_ITEM(__pyx_k_tuple_25, 0, ((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_25));

  /* "_PyXAL.pyx":204
 *     def getName(self):
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         cdef String hl_name = self._pointer.getName()
 *         cdef const_char_ptr name = hl_name.c_str()
 */
  __pyx_k_tuple_26 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_26)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 204; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_26));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_8));
  PyTuple_SET_ITEM(__pyx_k_tuple_26, 0, ((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_26));

  /* "_PyXAL.pyx":211
 *     def getFilename(self):
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         cdef String hl_name = self._pointer.getFilename()
 *         cdef const_char_ptr name = hl_name.c_str()
 */
  __pyx_k_tuple_27 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_27)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 211; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_27));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_8));
  PyTuple_SET_ITEM(__pyx_k_tuple_27, 0, ((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_27));

  /* "_PyXAL.pyx":218
 *     def getRealFilename(self):
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         cdef String hl_name = self._pointer.getRealFilename()
 *         cdef const_char_ptr name = hl_name.c_str()
 */
  __pyx_k_tuple_28 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_28)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 218; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_28));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_8));
  PyTuple_SET_ITEM(__pyx_k_tuple_28, 0, ((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_28));

  /* "_PyXAL.pyx":225
 *     def getDuration(self):
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         cdef float duration = self._pointer.getDuration()
 *         return duration
 */
  __pyx_k_tuple_29 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_29)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 225; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_29));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_8));
  PyTuple_SET_ITEM(__pyx_k_tuple_29, 0, ((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_29));

  /* "_PyXAL.pyx":231
 *     def getSize(self):
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         cdef int size = self._pointer.getSize()
 *         return size
 */
  __pyx_k_tuple_30 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_30)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 231; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_30));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_8));
  PyTuple_SET_ITEM(__pyx_k_tuple_30, 0, ((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_30));

  /* "_PyXAL.pyx":237
 *     def isPlaying(self):
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         return self._pointer.isPlaying()
 * 
 */
  __pyx_k_tuple_31 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_31)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 237; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_31));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_8));
  PyTuple_SET_ITEM(__pyx_k_tuple_31, 0, ((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_31));

  /* "_PyXAL.pyx":242
 *     def isPaused(self):
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         return self._pointer.isPaused()
 * 
 */
  __pyx_k_tuple_32 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_32)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 242; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_32));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_8));
  PyTuple_SET_ITEM(__pyx_k_tuple_32, 0, ((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_32));

  /* "_PyXAL.pyx":247
 *     def isFading(self):
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         return self._pointer.isFading()
 * 
 */
  __pyx_k_tuple_33 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_33)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 247; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_33));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_8));
  PyTuple_SET_ITEM(__pyx_k_tuple_33, 0, ((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_33));

  /* "_PyXAL.pyx":252
 *     def isFadingIn(self):
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         return self._pointer.isFadingIn()
 * 
 */
  __pyx_k_tuple_34 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_34)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 252; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_34));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_8));
  PyTuple_SET_ITEM(__pyx_k_tuple_34, 0, ((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_34));

  /* "_PyXAL.pyx":257
 *     def isFadingOut(self):
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         return self._pointer.isFadingOut()
 * 
 */
  __pyx_k_tuple_35 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_35)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 257; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_35));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_8));
  PyTuple_SET_ITEM(__pyx_k_tuple_35, 0, ((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_35));

  /* "_PyXAL.pyx":262
 *     def isLooping(self):
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         return self._pointer.isLooping()
 * 
 */
  __pyx_k_tuple_36 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_36)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 262; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_36));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_8));
  PyTuple_SET_ITEM(__pyx_k_tuple_36, 0, ((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_36));

  /* "_PyXAL.pyx":267
 *     def play(self, float fadeTime = 0.0, bool looping = False):
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         self._pointer.play(fadeTime, looping)
 * 
 */
  __pyx_k_tuple_37 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_37)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 267; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_37));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_8));
  PyTuple_SET_ITEM(__pyx_k_tuple_37, 0, ((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_37));

  /* "_PyXAL.pyx":272
 *     def stop(self, float fadeTime = 0.0):
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         self._pointer.stop(fadeTime)
 * 
 */
  __pyx_k_tuple_38 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_38)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 272; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_38));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_8));
  PyTuple_SET_ITEM(__pyx_k_tuple_38, 0, ((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_38));

  /* "_PyXAL.pyx":277
 *     def pause(self, float fadeTime = 0.0):
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         self._pointer.pause(fadeTime)
 * 
 */
  __pyx_k_tuple_39 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_39)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 277; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_39));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_8));
  PyTuple_SET_ITEM(__pyx_k_tuple_39, 0, ((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_39));

  /* "_PyXAL.pyx":290
 *         global Mgr
 *         if Mgr is not None:
 *             raise RuntimeError("Only one XALManager interface allowed at a time, use the one at PyXAL.Mgr")             # <<<<<<<<<<<<<<
 *         self.CATEGORY_STR = "default"
 *         cdef String* name = new String(systemname)
 */
  __pyx_k_tuple_41 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_41)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 290; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_41));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_40));
  PyTuple_SET_ITEM(__pyx_k_tuple_41, 0, ((PyObject *)__pyx_kp_s_40));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_40));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_41));

  /* "_PyXAL.pyx":310
 *     def SetupXAL(self):
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         cdef String* category = new String(self.CATEGORY_STR)
 *         self._category = XAL.mgr.createCategory(category[0], FULL, FULL)
 */
  __pyx_k_tuple_42 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_42)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 310; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_42));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_8));
  PyTuple_SET_ITEM(__pyx_k_tuple_42, 0, ((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_42));

  /* "_PyXAL.pyx":344
 *     def createSound(self, bytes filename):
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         cdef char* file = filename
 *         s = os.path.split(filename)[0]
 */
  __pyx_k_tuple_47 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_47)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 344; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_47));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_8));
  PyTuple_SET_ITEM(__pyx_k_tuple_47, 0, ((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_47));

  /* "_PyXAL.pyx":364
 *     def createPlayer(self, PySound sound):
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         sound_name = sound.getName()
 *         cdef char* name = sound_name
 */
  __pyx_k_tuple_49 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_49)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 364; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_49));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_8));
  PyTuple_SET_ITEM(__pyx_k_tuple_49, 0, ((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_49));

  /* "_PyXAL.pyx":379
 *     def destroyPlayer(self, PyPlayer pyplayer):
 *         if pyplayer is None:
 *             raise RuntimeError("destroyPlayer Passed a None object")             # <<<<<<<<<<<<<<
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 */
  __pyx_k_tuple_52 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_52)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 379; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_52));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_51));
  PyTuple_SET_ITEM(__pyx_k_tuple_52, 0, ((PyObject *)__pyx_kp_s_51));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_51));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_52));

  /* "_PyXAL.pyx":381
 *             raise RuntimeError("destroyPlayer Passed a None object")
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         XAL.mgr.destroyPlayer(pyplayer._pointer)
 * 
 */
  __pyx_k_tuple_53 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_53)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 381; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_53));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_8));
  PyTuple_SET_ITEM(__pyx_k_tuple_53, 0, ((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_53));

  /* "_PyXAL.pyx":386
 *     def destroySound(self, PySound pysound):
 *         if pysound is None:
 *             raise RuntimeError("destroySound Passed a None object")             # <<<<<<<<<<<<<<
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 */
  __pyx_k_tuple_55 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_55)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 386; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_55));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_54));
  PyTuple_SET_ITEM(__pyx_k_tuple_55, 0, ((PyObject *)__pyx_kp_s_54));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_54));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_55));

  /* "_PyXAL.pyx":388
 *             raise RuntimeError("destroySound Passed a None object")
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         XAL.mgr.destroySound(pysound._pointer)
 * 
 */
  __pyx_k_tuple_56 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_56)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 388; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_56));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_8));
  PyTuple_SET_ITEM(__pyx_k_tuple_56, 0, ((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_56));

  /* "_PyXAL.pyx":393
 *     def findPlayer(self, bytes name):
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         cdef char* name_str = name
 *         cdef String* hl_name = new String(name_str)
 */
  __pyx_k_tuple_57 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_57)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 393; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_57));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_8));
  PyTuple_SET_ITEM(__pyx_k_tuple_57, 0, ((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_57));

  /* "_PyXAL.pyx":407
 *     def play(self, bytes name, float fadeTime = 0.0, bool looping = False, float gain = 1.0):
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         cdef char* name_str = name
 *         cdef String* hl_name = new String(name_str)
 */
  __pyx_k_tuple_59 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_59)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 407; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_59));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_8));
  PyTuple_SET_ITEM(__pyx_k_tuple_59, 0, ((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_59));

  /* "_PyXAL.pyx":415
 *     def stop(self, bytes name, float fadeTime = 0.0):
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         cdef char* name_str = name
 *         cdef String* hl_name = new String(name_str)
 */
  __pyx_k_tuple_60 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_60)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 415; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_60));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_8));
  PyTuple_SET_ITEM(__pyx_k_tuple_60, 0, ((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_60));

  /* "_PyXAL.pyx":423
 *     def stopFirst(self, bytes name, float fadeTime = 0.0):
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         cdef char* name_str = name
 *         cdef String* hl_name = new String(name_str)
 */
  __pyx_k_tuple_61 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_61)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 423; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_61));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_8));
  PyTuple_SET_ITEM(__pyx_k_tuple_61, 0, ((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_61));

  /* "_PyXAL.pyx":431
 *     def stopAll(self, float fadeTime = 0.0):
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         XAL.mgr.stopAll(fadeTime)
 * 
 */
  __pyx_k_tuple_62 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_62)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 431; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_62));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_8));
  PyTuple_SET_ITEM(__pyx_k_tuple_62, 0, ((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_62));

  /* "_PyXAL.pyx":436
 *     def pauseAll(self, float fadeTime = 0.0):
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         XAL.mgr.pauseAll(fadeTime)
 * 
 */
  __pyx_k_tuple_63 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_63)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 436; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_63));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_8));
  PyTuple_SET_ITEM(__pyx_k_tuple_63, 0, ((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_63));

  /* "_PyXAL.pyx":441
 *     def resumeAll(self, float fadeTime = 0.0):
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         XAL.mgr.resumeAll(fadeTime)
 * 
 */
  __pyx_k_tuple_64 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_64)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 441; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_64));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_8));
  PyTuple_SET_ITEM(__pyx_k_tuple_64, 0, ((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_64));

  /* "_PyXAL.pyx":446
 *     def isAnyPlaying(self, bytes name):
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         cdef char* name_str = name
 *         cdef String* hl_name = new String(name_str)
 */
  __pyx_k_tuple_65 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_65)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 446; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_65));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_8));
  PyTuple_SET_ITEM(__pyx_k_tuple_65, 0, ((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_65));

  /* "_PyXAL.pyx":455
 *     def isAnyFading(self, bytes name):
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         cdef char* name_str = name
 *         cdef String* hl_name = new String(name_str)
 */
  __pyx_k_tuple_66 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_66)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 455; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_66));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_8));
  PyTuple_SET_ITEM(__pyx_k_tuple_66, 0, ((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_66));

  /* "_PyXAL.pyx":464
 *     def isAnyFadingIn(self, bytes name):
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         cdef char* name_str = name
 *         cdef String* hl_name = new String(name_str)
 */
  __pyx_k_tuple_67 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_67)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 464; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_67));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_8));
  PyTuple_SET_ITEM(__pyx_k_tuple_67, 0, ((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_67));

  /* "_PyXAL.pyx":473
 *     def isAnyFadingOut(self, bytes name):
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         cdef char* name_str = name
 *         cdef String* hl_name = new String(name_str)
 */
  __pyx_k_tuple_68 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_68)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 473; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_68));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_8));
  PyTuple_SET_ITEM(__pyx_k_tuple_68, 0, ((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_68));
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  return 0;
  __pyx_L1_error:;
  return -1;
}

#if PY_MAJOR_VERSION < 3
PyMODINIT_FUNC init_PyXAL(void); /*proto*/
PyMODINIT_FUNC init_PyXAL(void)
#else
PyMODINIT_FUNC PyInit__PyXAL(void); /*proto*/
PyMODINIT_FUNC PyInit__PyXAL(void)
#endif
{
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannyDeclarations
  #if CYTHON_REFNANNY
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
  if (!__Pyx_RefNanny) {
      PyErr_Clear();
      __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
      if (!__Pyx_RefNanny)
          Py_FatalError("failed to import 'refnanny' module");
  }
  #endif
  __Pyx_RefNannySetupContext("PyMODINIT_FUNC PyInit__PyXAL(void)");
  if ( __Pyx_check_binary_version() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #ifdef __pyx_binding_PyCFunctionType_USED
  if (__pyx_binding_PyCFunctionType_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4(__Pyx_NAMESTR("_PyXAL"), __pyx_methods, 0, 0, PYTHON_API_VERSION);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (!__pyx_m) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  #if PY_MAJOR_VERSION < 3
  Py_INCREF(__pyx_m);
  #endif
  __pyx_b = PyImport_AddModule(__Pyx_NAMESTR(__Pyx_BUILTIN_MODULE_NAME));
  if (!__pyx_b) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  if (__Pyx_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  /*--- Initialize various global constants etc. ---*/
  if (unlikely(__Pyx_InitGlobals() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_module_is_main__PyXAL) {
    if (__Pyx_SetAttrString(__pyx_m, "__name__", __pyx_n_s____main__) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  }
  /*--- Builtin init code ---*/
  if (unlikely(__Pyx_InitCachedBuiltins() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Constants init code ---*/
  if (unlikely(__Pyx_InitCachedConstants() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Global init code ---*/
  __pyx_v_6_PyXAL_LOG_PATH = ((PyObject*)Py_None); Py_INCREF(Py_None);
  /*--- Variable export code ---*/
  /*--- Function export code ---*/
  /*--- Type init code ---*/
  if (PyType_Ready(&__pyx_type_6_PyXAL_XALManager) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 281; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "XALManager", (PyObject *)&__pyx_type_6_PyXAL_XALManager) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 281; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_6_PyXAL_XALManager = &__pyx_type_6_PyXAL_XALManager;
  if (PyType_Ready(&__pyx_type_6_PyXAL_PyAudioManager) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 66; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "PyAudioManager", (PyObject *)&__pyx_type_6_PyXAL_PyAudioManager) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 66; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_6_PyXAL_PyAudioManager = &__pyx_type_6_PyXAL_PyAudioManager;
  if (PyType_Ready(&__pyx_type_6_PyXAL_PySound) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 74; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "PySound", (PyObject *)&__pyx_type_6_PyXAL_PySound) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 74; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_6_PyXAL_PySound = &__pyx_type_6_PyXAL_PySound;
  if (PyType_Ready(&__pyx_type_6_PyXAL_PyPlayer) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 164; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "PyPlayer", (PyObject *)&__pyx_type_6_PyXAL_PyPlayer) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 164; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_6_PyXAL_PyPlayer = &__pyx_type_6_PyXAL_PyPlayer;
  /*--- Type import code ---*/
  /*--- Variable import code ---*/
  /*--- Function import code ---*/
  /*--- Execution code ---*/

  /* "_PyXAL.pyx":7
 * cimport XAL
 * 
 * import os             # <<<<<<<<<<<<<<
 * 
 * cdef char* XAL_AS_DIRECTSOUND = "DirectSound"
 */
  __pyx_t_1 = __Pyx_Import(((PyObject *)__pyx_n_s__os), 0, -1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 7; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__os, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 7; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "_PyXAL.pyx":9
 * import os
 * 
 * cdef char* XAL_AS_DIRECTSOUND = "DirectSound"             # <<<<<<<<<<<<<<
 * cdef char* XAL_AS_OPENAL = "OpenAL"
 * cdef char* XAL_AS_SDL = "SDL"
 */
  __pyx_v_6_PyXAL_XAL_AS_DIRECTSOUND = __pyx_k__DirectSound;

  /* "_PyXAL.pyx":10
 * 
 * cdef char* XAL_AS_DIRECTSOUND = "DirectSound"
 * cdef char* XAL_AS_OPENAL = "OpenAL"             # <<<<<<<<<<<<<<
 * cdef char* XAL_AS_SDL = "SDL"
 * cdef char* XAL_AS_AVFOUNDATION = "AVFoundation"
 */
  __pyx_v_6_PyXAL_XAL_AS_OPENAL = __pyx_k__OpenAL;

  /* "_PyXAL.pyx":11
 * cdef char* XAL_AS_DIRECTSOUND = "DirectSound"
 * cdef char* XAL_AS_OPENAL = "OpenAL"
 * cdef char* XAL_AS_SDL = "SDL"             # <<<<<<<<<<<<<<
 * cdef char* XAL_AS_AVFOUNDATION = "AVFoundation"
 * cdef char* XAL_AS_COREAUDIO = "CoreAudio"
 */
  __pyx_v_6_PyXAL_XAL_AS_SDL = __pyx_k__SDL;

  /* "_PyXAL.pyx":12
 * cdef char* XAL_AS_OPENAL = "OpenAL"
 * cdef char* XAL_AS_SDL = "SDL"
 * cdef char* XAL_AS_AVFOUNDATION = "AVFoundation"             # <<<<<<<<<<<<<<
 * cdef char* XAL_AS_COREAUDIO = "CoreAudio"
 * cdef char* XAL_AS_DISABLED = "Disabled"
 */
  __pyx_v_6_PyXAL_XAL_AS_AVFOUNDATION = __pyx_k__AVFoundation;

  /* "_PyXAL.pyx":13
 * cdef char* XAL_AS_SDL = "SDL"
 * cdef char* XAL_AS_AVFOUNDATION = "AVFoundation"
 * cdef char* XAL_AS_COREAUDIO = "CoreAudio"             # <<<<<<<<<<<<<<
 * cdef char* XAL_AS_DISABLED = "Disabled"
 * cdef char* XAL_AS_DEFAULT = ""
 */
  __pyx_v_6_PyXAL_XAL_AS_COREAUDIO = __pyx_k__CoreAudio;

  /* "_PyXAL.pyx":14
 * cdef char* XAL_AS_AVFOUNDATION = "AVFoundation"
 * cdef char* XAL_AS_COREAUDIO = "CoreAudio"
 * cdef char* XAL_AS_DISABLED = "Disabled"             # <<<<<<<<<<<<<<
 * cdef char* XAL_AS_DEFAULT = ""
 * 
 */
  __pyx_v_6_PyXAL_XAL_AS_DISABLED = __pyx_k__Disabled;

  /* "_PyXAL.pyx":15
 * cdef char* XAL_AS_COREAUDIO = "CoreAudio"
 * cdef char* XAL_AS_DISABLED = "Disabled"
 * cdef char* XAL_AS_DEFAULT = ""             # <<<<<<<<<<<<<<
 * 
 * cdef XAL.HandlingMode FULL = XAL.FULL
 */
  __pyx_v_6_PyXAL_XAL_AS_DEFAULT = __pyx_k_1;

  /* "_PyXAL.pyx":17
 * cdef char* XAL_AS_DEFAULT = ""
 * 
 * cdef XAL.HandlingMode FULL = XAL.FULL             # <<<<<<<<<<<<<<
 * cdef XAL.HandlingMode LAZY = XAL.LAZY
 * cdef XAL.HandlingMode ON_DEMAND = XAL.ON_DEMAND
 */
  __pyx_v_6_PyXAL_FULL = xal::FULL;

  /* "_PyXAL.pyx":18
 * 
 * cdef XAL.HandlingMode FULL = XAL.FULL
 * cdef XAL.HandlingMode LAZY = XAL.LAZY             # <<<<<<<<<<<<<<
 * cdef XAL.HandlingMode ON_DEMAND = XAL.ON_DEMAND
 * cdef XAL.HandlingMode STREAMED = XAL.ON_DEMAND
 */
  __pyx_v_6_PyXAL_LAZY = xal::LAZY;

  /* "_PyXAL.pyx":19
 * cdef XAL.HandlingMode FULL = XAL.FULL
 * cdef XAL.HandlingMode LAZY = XAL.LAZY
 * cdef XAL.HandlingMode ON_DEMAND = XAL.ON_DEMAND             # <<<<<<<<<<<<<<
 * cdef XAL.HandlingMode STREAMED = XAL.ON_DEMAND
 * 
 */
  __pyx_v_6_PyXAL_ON_DEMAND = xal::ON_DEMAND;

  /* "_PyXAL.pyx":20
 * cdef XAL.HandlingMode LAZY = XAL.LAZY
 * cdef XAL.HandlingMode ON_DEMAND = XAL.ON_DEMAND
 * cdef XAL.HandlingMode STREAMED = XAL.ON_DEMAND             # <<<<<<<<<<<<<<
 * 
 * cdef extern from *:
 */
  __pyx_v_6_PyXAL_STREAMED = xal::ON_DEMAND;

  /* "_PyXAL.pyx":27
 *     ctypedef String& chstr "chstr"
 * 
 * cdef str LOG_PATH = ""             # <<<<<<<<<<<<<<
 * cdef bool LOG_ENABLED = False
 * 
 */
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_1));
  __Pyx_XGOTREF(((PyObject *)__pyx_v_6_PyXAL_LOG_PATH));
  __Pyx_DECREF(((PyObject *)__pyx_v_6_PyXAL_LOG_PATH));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_1));
  __pyx_v_6_PyXAL_LOG_PATH = __pyx_kp_s_1;

  /* "_PyXAL.pyx":28
 * 
 * cdef str LOG_PATH = ""
 * cdef bool LOG_ENABLED = False             # <<<<<<<<<<<<<<
 * 
 * cpdef SetLogPath(str path):
 */
  __pyx_v_6_PyXAL_LOG_ENABLED = 0;

  /* "_PyXAL.pyx":58
 *         file.close()
 * 
 * XAL.setLogFunction(Log)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {xal::setLogFunction(__pyx_f_6_PyXAL_Log);} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 58; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}

  /* "_PyXAL.pyx":63
 * cdef class XALManager
 * 
 * Mgr = None             # <<<<<<<<<<<<<<
 * 
 * 
 */
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__Mgr, Py_None) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 63; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_PyXAL.pyx":480
 *         return result
 * 
 * def Init(int backendId, bint threaded = True):             # <<<<<<<<<<<<<<
 *     global Mgr
 *     if Mgr is None:
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6_PyXAL_2Init, NULL, __pyx_n_s___PyXAL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 480; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__Init, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 480; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "_PyXAL.pyx":490
 *         Mgr = XALManager(XAL_AS_DEFAULT, backendId, threaded)
 * 
 * def Destroy():             # <<<<<<<<<<<<<<
 *     global Mgr
 *     if XAL.mgr != NULL:
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6_PyXAL_3Destroy, NULL, __pyx_n_s___PyXAL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 490; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__Destroy, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 490; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "_PyXAL.pyx":1
 * from cython.operator cimport dereference as deref             # <<<<<<<<<<<<<<
 * from libcpp cimport bool
 * from hltypes cimport Array, String
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s____test__, ((PyObject *)__pyx_t_1)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  if (__pyx_m) {
    __Pyx_AddTraceback("init _PyXAL", __pyx_clineno, __pyx_lineno, __pyx_filename);
    Py_DECREF(__pyx_m); __pyx_m = 0;
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init _PyXAL");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if PY_MAJOR_VERSION < 3
  return;
  #else
  return __pyx_m;
  #endif
}

/* Runtime support code */

#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule((char *)modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif /* CYTHON_REFNANNY */

static PyObject *__Pyx_GetName(PyObject *dict, PyObject *name) {
    PyObject *result;
    result = PyObject_GetAttr(dict, name);
    if (!result) {
        if (dict != __pyx_b) {
            PyErr_Clear();
            result = PyObject_GetAttr(__pyx_b, name);
        }
        if (!result) {
            PyErr_SetObject(PyExc_NameError, name);
        }
    }
    return result;
}

static int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact)
{
    if (!type) {
        PyErr_Format(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (none_allowed && obj == Py_None) return 1;
    else if (exact) {
        if (Py_TYPE(obj) == type) return 1;
    }
    else {
        if (PyObject_TypeCheck(obj, type)) return 1;
    }
    PyErr_Format(PyExc_TypeError,
        "Argument '%s' has incorrect type (expected %s, got %s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
    return 0;
}

static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AS_STRING(kw_name));
        #endif
}

static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;

    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
        } else {
            #if PY_MAJOR_VERSION < 3
            if (unlikely(!PyString_CheckExact(key)) && unlikely(!PyString_Check(key))) {
            #else
            if (unlikely(!PyUnicode_CheckExact(key)) && unlikely(!PyUnicode_Check(key))) {
            #endif
                goto invalid_keyword_type;
            } else {
                for (name = first_kw_arg; *name; name++) {
                    #if PY_MAJOR_VERSION >= 3
                    if (PyUnicode_GET_SIZE(**name) == PyUnicode_GET_SIZE(key) &&
                        PyUnicode_Compare(**name, key) == 0) break;
                    #else
                    if (PyString_GET_SIZE(**name) == PyString_GET_SIZE(key) &&
                        _PyString_Eq(**name, key)) break;
                    #endif
                }
                if (*name) {
                    values[name-argnames] = value;
                } else {
                    /* unexpected keyword found */
                    for (name=argnames; name != first_kw_arg; name++) {
                        if (**name == key) goto arg_passed_twice;
                        #if PY_MAJOR_VERSION >= 3
                        if (PyUnicode_GET_SIZE(**name) == PyUnicode_GET_SIZE(key) &&
                            PyUnicode_Compare(**name, key) == 0) goto arg_passed_twice;
                        #else
                        if (PyString_GET_SIZE(**name) == PyString_GET_SIZE(key) &&
                            _PyString_Eq(**name, key)) goto arg_passed_twice;
                        #endif
                    }
                    if (kwds2) {
                        if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
                    } else {
                        goto invalid_keyword;
                    }
                }
            }
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, **name);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%s() got an unexpected keyword argument '%s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;

    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%s() takes %s %"PY_FORMAT_SIZE_T"d positional argument%s (%"PY_FORMAT_SIZE_T"d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

static CYTHON_INLINE int __Pyx_CheckKeywordStrings(
    PyObject *kwdict,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
    while (PyDict_Next(kwdict, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_CheckExact(key)) && unlikely(!PyString_Check(key)))
        #else
        if (unlikely(!PyUnicode_CheckExact(key)) && unlikely(!PyUnicode_Check(key)))
        #endif
            goto invalid_keyword_type;
    }
    if ((!kw_allowed) && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%s() keywords must be strings", function_name);
    return 0;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%s() got an unexpected keyword argument '%s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}

static CYTHON_INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyThreadState *tstate = PyThreadState_GET();

    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}

static CYTHON_INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb) {
    PyThreadState *tstate = PyThreadState_GET();
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;

    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}


#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    /* cause is unused */
    Py_XINCREF(type);
    Py_XINCREF(value);
    Py_XINCREF(tb);
    /* First, check the traceback argument, replacing None with NULL. */
    if (tb == Py_None) {
        Py_DECREF(tb);
        tb = 0;
    }
    else if (tb != NULL && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto raise_error;
    }
    /* Next, replace a missing value with None */
    if (value == NULL) {
        value = Py_None;
        Py_INCREF(value);
    }
    #if PY_VERSION_HEX < 0x02050000
    if (!PyClass_Check(type))
    #else
    if (!PyType_Check(type))
    #endif
    {
        /* Raising an instance.  The value should be a dummy. */
        if (value != Py_None) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        /* Normalize to raise <class>, <instance> */
        Py_DECREF(value);
        value = type;
        #if PY_VERSION_HEX < 0x02050000
            if (PyInstance_Check(type)) {
                type = (PyObject*) ((PyInstanceObject*)type)->in_class;
                Py_INCREF(type);
            }
            else {
                type = 0;
                PyErr_SetString(PyExc_TypeError,
                    "raise: exception must be an old-style class or instance");
                goto raise_error;
            }
        #else
            type = (PyObject*) Py_TYPE(type);
            Py_INCREF(type);
            if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
                PyErr_SetString(PyExc_TypeError,
                    "raise: exception class must be a subclass of BaseException");
                goto raise_error;
            }
        #endif
    }

    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}

#else /* Python 3+ */

static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;

    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (!PyExceptionClass_Check(type)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }

    if (cause) {
        PyObject *fixed_cause;
        if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        }
        else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        }
        else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        if (!value) {
            value = PyObject_CallObject(type, NULL);
        }
        PyException_SetCause(value, fixed_cause);
    }

    PyErr_SetObject(type, value);

    if (tb) {
        PyThreadState *tstate = PyThreadState_GET();
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
    }

bad:
    return;
}
#endif


static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    if (unlikely(!type)) {
        PyErr_Format(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(PyObject_TypeCheck(obj, type)))
        return 1;
    PyErr_Format(PyExc_TypeError, "Cannot convert %.200s to %.200s",
                 Py_TYPE(obj)->tp_name, type->tp_name);
    return 0;
}

static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, long level) {
    PyObject *py_import = 0;
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    py_import = __Pyx_GetAttrString(__pyx_b, "__import__");
    if (!py_import)
        goto bad;
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    #if PY_VERSION_HEX >= 0x02050000
    {
        PyObject *py_level = PyInt_FromLong(level);
        if (!py_level)
            goto bad;
        module = PyObject_CallFunctionObjArgs(py_import,
            name, global_dict, empty_dict, list, py_level, NULL);
        Py_DECREF(py_level);
    }
    #else
    if (level>0) {
        PyErr_SetString(PyExc_RuntimeError, "Relative import is not supported for Python <=2.4.");
        goto bad;
    }
    module = PyObject_CallFunctionObjArgs(py_import,
        name, global_dict, empty_dict, list, NULL);
    #endif
bad:
    Py_XDECREF(empty_list);
    Py_XDECREF(py_import);
    Py_XDECREF(empty_dict);
    return module;
}

static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals) {
    if (s1 == s2) {   /* as done by PyObject_RichCompareBool(); also catches the (interned) empty string */
        return (equals == Py_EQ);
    } else if (PyBytes_CheckExact(s1) & PyBytes_CheckExact(s2)) {
        if (PyBytes_GET_SIZE(s1) != PyBytes_GET_SIZE(s2)) {
            return (equals == Py_NE);
        } else if (PyBytes_GET_SIZE(s1) == 1) {
            if (equals == Py_EQ)
                return (PyBytes_AS_STRING(s1)[0] == PyBytes_AS_STRING(s2)[0]);
            else
                return (PyBytes_AS_STRING(s1)[0] != PyBytes_AS_STRING(s2)[0]);
        } else {
            int result = memcmp(PyBytes_AS_STRING(s1), PyBytes_AS_STRING(s2), (size_t)PyBytes_GET_SIZE(s1));
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & PyBytes_CheckExact(s2)) {
        return (equals == Py_NE);
    } else if ((s2 == Py_None) & PyBytes_CheckExact(s1)) {
        return (equals == Py_NE);
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
}

static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals) {
    if (s1 == s2) {   /* as done by PyObject_RichCompareBool(); also catches the (interned) empty string */
        return (equals == Py_EQ);
    } else if (PyUnicode_CheckExact(s1) & PyUnicode_CheckExact(s2)) {
        if (PyUnicode_GET_SIZE(s1) != PyUnicode_GET_SIZE(s2)) {
            return (equals == Py_NE);
        } else if (PyUnicode_GET_SIZE(s1) == 1) {
            if (equals == Py_EQ)
                return (PyUnicode_AS_UNICODE(s1)[0] == PyUnicode_AS_UNICODE(s2)[0]);
            else
                return (PyUnicode_AS_UNICODE(s1)[0] != PyUnicode_AS_UNICODE(s2)[0]);
        } else {
            int result = PyUnicode_Compare(s1, s2);
            if ((result == -1) && unlikely(PyErr_Occurred()))
                return -1;
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & PyUnicode_CheckExact(s2)) {
        return (equals == Py_NE);
    } else if ((s2 == Py_None) & PyUnicode_CheckExact(s1)) {
        return (equals == Py_NE);
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
}

#if PY_MAJOR_VERSION < 3
static PyObject *__Pyx_GetStdout(void) {
    PyObject *f = PySys_GetObject((char *)"stdout");
    if (!f) {
        PyErr_SetString(PyExc_RuntimeError, "lost sys.stdout");
    }
    return f;
}

static int __Pyx_Print(PyObject* f, PyObject *arg_tuple, int newline) {
    PyObject* v;
    int i;

    if (!f) {
        if (!(f = __Pyx_GetStdout()))
            return -1;
    }
    for (i=0; i < PyTuple_GET_SIZE(arg_tuple); i++) {
        if (PyFile_SoftSpace(f, 1)) {
            if (PyFile_WriteString(" ", f) < 0)
                return -1;
        }
        v = PyTuple_GET_ITEM(arg_tuple, i);
        if (PyFile_WriteObject(v, f, Py_PRINT_RAW) < 0)
            return -1;
        if (PyString_Check(v)) {
            char *s = PyString_AsString(v);
            Py_ssize_t len = PyString_Size(v);
            if (len > 0 &&
                isspace(Py_CHARMASK(s[len-1])) &&
                s[len-1] != ' ')
                    PyFile_SoftSpace(f, 0);
        }
    }
    if (newline) {
        if (PyFile_WriteString("\n", f) < 0)
            return -1;
        PyFile_SoftSpace(f, 0);
    }
    return 0;
}

#else /* Python 3 has a print function */

static int __Pyx_Print(PyObject* stream, PyObject *arg_tuple, int newline) {
    PyObject* kwargs = 0;
    PyObject* result = 0;
    PyObject* end_string;
    if (unlikely(!__pyx_print)) {
        __pyx_print = __Pyx_GetAttrString(__pyx_b, "print");
        if (!__pyx_print)
            return -1;
    }
    if (stream) {
        kwargs = PyDict_New();
        if (unlikely(!kwargs))
            return -1;
        if (unlikely(PyDict_SetItemString(kwargs, "file", stream) < 0))
            goto bad;
        if (!newline) {
            end_string = PyUnicode_FromStringAndSize(" ", 1);
            if (unlikely(!end_string))
                goto bad;
            if (PyDict_SetItemString(kwargs, "end", end_string) < 0) {
                Py_DECREF(end_string);
                goto bad;
            }
            Py_DECREF(end_string);
        }
    } else if (!newline) {
        if (unlikely(!__pyx_print_kwargs)) {
            __pyx_print_kwargs = PyDict_New();
            if (unlikely(!__pyx_print_kwargs))
                return -1;
            end_string = PyUnicode_FromStringAndSize(" ", 1);
            if (unlikely(!end_string))
                return -1;
            if (PyDict_SetItemString(__pyx_print_kwargs, "end", end_string) < 0) {
                Py_DECREF(end_string);
                return -1;
            }
            Py_DECREF(end_string);
        }
        kwargs = __pyx_print_kwargs;
    }
    result = PyObject_Call(__pyx_print, arg_tuple, kwargs);
    if (unlikely(kwargs) && (kwargs != __pyx_print_kwargs))
        Py_DECREF(kwargs);
    if (!result)
        return -1;
    Py_DECREF(result);
    return 0;
bad:
    if (kwargs != __pyx_print_kwargs)
        Py_XDECREF(kwargs);
    return -1;
}

#endif

#if PY_MAJOR_VERSION < 3

static int __Pyx_PrintOne(PyObject* f, PyObject *o) {
    if (!f) {
        if (!(f = __Pyx_GetStdout()))
            return -1;
    }
    if (PyFile_SoftSpace(f, 0)) {
        if (PyFile_WriteString(" ", f) < 0)
            return -1;
    }
    if (PyFile_WriteObject(o, f, Py_PRINT_RAW) < 0)
        return -1;
    if (PyFile_WriteString("\n", f) < 0)
        return -1;
    return 0;
    /* the line below is just to avoid compiler
     * compiler warnings about unused functions */
    return __Pyx_Print(f, NULL, 0);
}

#else /* Python 3 has a print function */

static int __Pyx_PrintOne(PyObject* stream, PyObject *o) {
    int res;
    PyObject* arg_tuple = PyTuple_New(1);
    if (unlikely(!arg_tuple))
        return -1;
    Py_INCREF(o);
    PyTuple_SET_ITEM(arg_tuple, 0, o);
    res = __Pyx_Print(stream, arg_tuple, 1);
    Py_DECREF(arg_tuple);
    return res;
}

#endif

static CYTHON_INLINE unsigned char __Pyx_PyInt_AsUnsignedChar(PyObject* x) {
    const unsigned char neg_one = (unsigned char)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(unsigned char) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(unsigned char)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to unsigned char" :
                    "value too large to convert to unsigned char");
            }
            return (unsigned char)-1;
        }
        return (unsigned char)val;
    }
    return (unsigned char)__Pyx_PyInt_AsUnsignedLong(x);
}

static CYTHON_INLINE unsigned short __Pyx_PyInt_AsUnsignedShort(PyObject* x) {
    const unsigned short neg_one = (unsigned short)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(unsigned short) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(unsigned short)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to unsigned short" :
                    "value too large to convert to unsigned short");
            }
            return (unsigned short)-1;
        }
        return (unsigned short)val;
    }
    return (unsigned short)__Pyx_PyInt_AsUnsignedLong(x);
}

static CYTHON_INLINE unsigned int __Pyx_PyInt_AsUnsignedInt(PyObject* x) {
    const unsigned int neg_one = (unsigned int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(unsigned int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(unsigned int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to unsigned int" :
                    "value too large to convert to unsigned int");
            }
            return (unsigned int)-1;
        }
        return (unsigned int)val;
    }
    return (unsigned int)__Pyx_PyInt_AsUnsignedLong(x);
}

static CYTHON_INLINE char __Pyx_PyInt_AsChar(PyObject* x) {
    const char neg_one = (char)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(char) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(char)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to char" :
                    "value too large to convert to char");
            }
            return (char)-1;
        }
        return (char)val;
    }
    return (char)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE short __Pyx_PyInt_AsShort(PyObject* x) {
    const short neg_one = (short)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(short) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(short)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to short" :
                    "value too large to convert to short");
            }
            return (short)-1;
        }
        return (short)val;
    }
    return (short)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE int __Pyx_PyInt_AsInt(PyObject* x) {
    const int neg_one = (int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to int" :
                    "value too large to convert to int");
            }
            return (int)-1;
        }
        return (int)val;
    }
    return (int)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE signed char __Pyx_PyInt_AsSignedChar(PyObject* x) {
    const signed char neg_one = (signed char)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(signed char) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(signed char)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to signed char" :
                    "value too large to convert to signed char");
            }
            return (signed char)-1;
        }
        return (signed char)val;
    }
    return (signed char)__Pyx_PyInt_AsSignedLong(x);
}

static CYTHON_INLINE signed short __Pyx_PyInt_AsSignedShort(PyObject* x) {
    const signed short neg_one = (signed short)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(signed short) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(signed short)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to signed short" :
                    "value too large to convert to signed short");
            }
            return (signed short)-1;
        }
        return (signed short)val;
    }
    return (signed short)__Pyx_PyInt_AsSignedLong(x);
}

static CYTHON_INLINE signed int __Pyx_PyInt_AsSignedInt(PyObject* x) {
    const signed int neg_one = (signed int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(signed int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(signed int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to signed int" :
                    "value too large to convert to signed int");
            }
            return (signed int)-1;
        }
        return (signed int)val;
    }
    return (signed int)__Pyx_PyInt_AsSignedLong(x);
}

static CYTHON_INLINE int __Pyx_PyInt_AsLongDouble(PyObject* x) {
    const int neg_one = (int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to int" :
                    "value too large to convert to int");
            }
            return (int)-1;
        }
        return (int)val;
    }
    return (int)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE unsigned long __Pyx_PyInt_AsUnsignedLong(PyObject* x) {
    const unsigned long neg_one = (unsigned long)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to unsigned long");
            return (unsigned long)-1;
        }
        return (unsigned long)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to unsigned long");
                return (unsigned long)-1;
            }
            return (unsigned long)PyLong_AsUnsignedLong(x);
        } else {
            return (unsigned long)PyLong_AsLong(x);
        }
    } else {
        unsigned long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (unsigned long)-1;
        val = __Pyx_PyInt_AsUnsignedLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE unsigned PY_LONG_LONG __Pyx_PyInt_AsUnsignedLongLong(PyObject* x) {
    const unsigned PY_LONG_LONG neg_one = (unsigned PY_LONG_LONG)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to unsigned PY_LONG_LONG");
            return (unsigned PY_LONG_LONG)-1;
        }
        return (unsigned PY_LONG_LONG)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to unsigned PY_LONG_LONG");
                return (unsigned PY_LONG_LONG)-1;
            }
            return (unsigned PY_LONG_LONG)PyLong_AsUnsignedLongLong(x);
        } else {
            return (unsigned PY_LONG_LONG)PyLong_AsLongLong(x);
        }
    } else {
        unsigned PY_LONG_LONG val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (unsigned PY_LONG_LONG)-1;
        val = __Pyx_PyInt_AsUnsignedLongLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE long __Pyx_PyInt_AsLong(PyObject* x) {
    const long neg_one = (long)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to long");
            return (long)-1;
        }
        return (long)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to long");
                return (long)-1;
            }
            return (long)PyLong_AsUnsignedLong(x);
        } else {
            return (long)PyLong_AsLong(x);
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (long)-1;
        val = __Pyx_PyInt_AsLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE PY_LONG_LONG __Pyx_PyInt_AsLongLong(PyObject* x) {
    const PY_LONG_LONG neg_one = (PY_LONG_LONG)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to PY_LONG_LONG");
            return (PY_LONG_LONG)-1;
        }
        return (PY_LONG_LONG)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to PY_LONG_LONG");
                return (PY_LONG_LONG)-1;
            }
            return (PY_LONG_LONG)PyLong_AsUnsignedLongLong(x);
        } else {
            return (PY_LONG_LONG)PyLong_AsLongLong(x);
        }
    } else {
        PY_LONG_LONG val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (PY_LONG_LONG)-1;
        val = __Pyx_PyInt_AsLongLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE signed long __Pyx_PyInt_AsSignedLong(PyObject* x) {
    const signed long neg_one = (signed long)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to signed long");
            return (signed long)-1;
        }
        return (signed long)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to signed long");
                return (signed long)-1;
            }
            return (signed long)PyLong_AsUnsignedLong(x);
        } else {
            return (signed long)PyLong_AsLong(x);
        }
    } else {
        signed long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (signed long)-1;
        val = __Pyx_PyInt_AsSignedLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE signed PY_LONG_LONG __Pyx_PyInt_AsSignedLongLong(PyObject* x) {
    const signed PY_LONG_LONG neg_one = (signed PY_LONG_LONG)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to signed PY_LONG_LONG");
            return (signed PY_LONG_LONG)-1;
        }
        return (signed PY_LONG_LONG)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to signed PY_LONG_LONG");
                return (signed PY_LONG_LONG)-1;
            }
            return (signed PY_LONG_LONG)PyLong_AsUnsignedLongLong(x);
        } else {
            return (signed PY_LONG_LONG)PyLong_AsLongLong(x);
        }
    } else {
        signed PY_LONG_LONG val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (signed PY_LONG_LONG)-1;
        val = __Pyx_PyInt_AsSignedLongLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
}

static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        #if PY_VERSION_HEX < 0x02050000
        return PyErr_Warn(NULL, message);
        #else
        return PyErr_WarnEx(NULL, message, 1);
        #endif
    }
    return 0;
}

#include "compile.h"
#include "frameobject.h"
#include "traceback.h"

static void __Pyx_AddTraceback(const char *funcname, int __pyx_clineno,
                               int __pyx_lineno, const char *__pyx_filename) {
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    PyObject *py_globals = 0;
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;

    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(__pyx_filename);
    #else
    py_srcfile = PyUnicode_FromString(__pyx_filename);
    #endif
    if (!py_srcfile) goto bad;
    if (__pyx_clineno) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, __pyx_clineno);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, __pyx_clineno);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_globals = PyModule_GetDict(__pyx_m);
    if (!py_globals) goto bad;
    py_code = PyCode_New(
        0,            /*int argcount,*/
        #if PY_MAJOR_VERSION >= 3
        0,            /*int kwonlyargcount,*/
        #endif
        0,            /*int nlocals,*/
        0,            /*int stacksize,*/
        0,            /*int flags,*/
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple,  /*PyObject *consts,*/
        __pyx_empty_tuple,  /*PyObject *names,*/
        __pyx_empty_tuple,  /*PyObject *varnames,*/
        __pyx_empty_tuple,  /*PyObject *freevars,*/
        __pyx_empty_tuple,  /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        __pyx_lineno,   /*int firstlineno,*/
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    if (!py_code) goto bad;
    py_frame = PyFrame_New(
        PyThreadState_GET(), /*PyThreadState *tstate,*/
        py_code,             /*PyCodeObject *code,*/
        py_globals,          /*PyObject *globals,*/
        0                    /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    py_frame->f_lineno = __pyx_lineno;
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else  /* Python 3+ has unicode identifiers */
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        ++t;
    }
    return 0;
}

/* Type Conversion Functions */

static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}

static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x) {
  PyNumberMethods *m;
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_VERSION_HEX < 0x03000000
  if (PyInt_Check(x) || PyLong_Check(x))
#else
  if (PyLong_Check(x))
#endif
    return Py_INCREF(x), x;
  m = Py_TYPE(x)->tp_as_number;
#if PY_VERSION_HEX < 0x03000000
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = PyNumber_Long(x);
  }
#else
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Long(x);
  }
#endif
  if (res) {
#if PY_VERSION_HEX < 0x03000000
    if (!PyInt_Check(res) && !PyLong_Check(res)) {
#else
    if (!PyLong_Check(res)) {
#endif
      PyErr_Format(PyExc_TypeError,
                   "__%s__ returned non-%s (type %.200s)",
                   name, name, Py_TYPE(res)->tp_name);
      Py_DECREF(res);
      return NULL;
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}

static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject* x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}

static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
#if PY_VERSION_HEX < 0x02050000
   if (ival <= LONG_MAX)
       return PyInt_FromLong((long)ival);
   else {
       unsigned char *bytes = (unsigned char *) &ival;
       int one = 1; int little = (int)*(unsigned char*)&one;
       return _PyLong_FromByteArray(bytes, sizeof(size_t), little, 0);
   }
#else
   return PyInt_FromSize_t(ival);
#endif
}

static CYTHON_INLINE size_t __Pyx_PyInt_AsSize_t(PyObject* x) {
   unsigned PY_LONG_LONG val = __Pyx_PyInt_AsUnsignedLongLong(x);
   if (unlikely(val == (unsigned PY_LONG_LONG)-1 && PyErr_Occurred())) {
       return (size_t)-1;
   } else if (unlikely(val != (unsigned PY_LONG_LONG)(size_t)val)) {
       PyErr_SetString(PyExc_OverflowError,
                       "value too large to convert to size_t");
       return (size_t)-1;
   }
   return (size_t)val;
}


#endif /* Py_PYTHON_H */
