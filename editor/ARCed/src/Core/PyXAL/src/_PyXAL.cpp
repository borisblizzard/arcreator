/* Generated by Cython 0.15.1 on Thu May 24 11:33:12 2012 */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#else

#include <stddef.h> /* For offsetof */
#ifndef offsetof
#define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif

#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif

#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif

#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif

#if PY_VERSION_HEX < 0x02040000
  #define METH_COEXIST 0
  #define PyDict_CheckExact(op) (Py_TYPE(op) == &PyDict_Type)
  #define PyDict_Contains(d,o)   PySequence_Contains(d,o)
#endif

#if PY_VERSION_HEX < 0x02050000
  typedef int Py_ssize_t;
  #define PY_SSIZE_T_MAX INT_MAX
  #define PY_SSIZE_T_MIN INT_MIN
  #define PY_FORMAT_SIZE_T ""
  #define PyInt_FromSsize_t(z) PyInt_FromLong(z)
  #define PyInt_AsSsize_t(o)   __Pyx_PyInt_AsInt(o)
  #define PyNumber_Index(o)    PyNumber_Int(o)
  #define PyIndex_Check(o)     PyNumber_Check(o)
  #define PyErr_WarnEx(category, message, stacklevel) PyErr_Warn(category, message)
#endif

#if PY_VERSION_HEX < 0x02060000
  #define Py_REFCNT(ob) (((PyObject*)(ob))->ob_refcnt)
  #define Py_TYPE(ob)   (((PyObject*)(ob))->ob_type)
  #define Py_SIZE(ob)   (((PyVarObject*)(ob))->ob_size)
  #define PyVarObject_HEAD_INIT(type, size) \
          PyObject_HEAD_INIT(type) size,
  #define PyType_Modified(t)

  typedef struct {
     void *buf;
     PyObject *obj;
     Py_ssize_t len;
     Py_ssize_t itemsize;
     int readonly;
     int ndim;
     char *format;
     Py_ssize_t *shape;
     Py_ssize_t *strides;
     Py_ssize_t *suboffsets;
     void *internal;
  } Py_buffer;

  #define PyBUF_SIMPLE 0
  #define PyBUF_WRITABLE 0x0001
  #define PyBUF_FORMAT 0x0004
  #define PyBUF_ND 0x0008
  #define PyBUF_STRIDES (0x0010 | PyBUF_ND)
  #define PyBUF_C_CONTIGUOUS (0x0020 | PyBUF_STRIDES)
  #define PyBUF_F_CONTIGUOUS (0x0040 | PyBUF_STRIDES)
  #define PyBUF_ANY_CONTIGUOUS (0x0080 | PyBUF_STRIDES)
  #define PyBUF_INDIRECT (0x0100 | PyBUF_STRIDES)

#endif

#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
#endif

#if PY_MAJOR_VERSION >= 3
  #define Py_TPFLAGS_CHECKTYPES 0
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif

#if (PY_VERSION_HEX < 0x02060000) || (PY_MAJOR_VERSION >= 3)
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif

#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#endif

#if PY_VERSION_HEX < 0x02060000
  #define PyBytesObject                PyStringObject
  #define PyBytes_Type                 PyString_Type
  #define PyBytes_Check                PyString_Check
  #define PyBytes_CheckExact           PyString_CheckExact
  #define PyBytes_FromString           PyString_FromString
  #define PyBytes_FromStringAndSize    PyString_FromStringAndSize
  #define PyBytes_FromFormat           PyString_FromFormat
  #define PyBytes_DecodeEscape         PyString_DecodeEscape
  #define PyBytes_AsString             PyString_AsString
  #define PyBytes_AsStringAndSize      PyString_AsStringAndSize
  #define PyBytes_Size                 PyString_Size
  #define PyBytes_AS_STRING            PyString_AS_STRING
  #define PyBytes_GET_SIZE             PyString_GET_SIZE
  #define PyBytes_Repr                 PyString_Repr
  #define PyBytes_Concat               PyString_Concat
  #define PyBytes_ConcatAndDel         PyString_ConcatAndDel
#endif

#if PY_VERSION_HEX < 0x02060000
  #define PySet_Check(obj)             PyObject_TypeCheck(obj, &PySet_Type)
  #define PyFrozenSet_Check(obj)       PyObject_TypeCheck(obj, &PyFrozenSet_Type)
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif

#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)

#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
#endif

#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif

#if PY_VERSION_HEX < 0x03020000
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif


#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif

#if (PY_MAJOR_VERSION < 3) || (PY_VERSION_HEX >= 0x03010300)
  #define __Pyx_PySequence_GetSlice(obj, a, b) PySequence_GetSlice(obj, a, b)
  #define __Pyx_PySequence_SetSlice(obj, a, b, value) PySequence_SetSlice(obj, a, b, value)
  #define __Pyx_PySequence_DelSlice(obj, a, b) PySequence_DelSlice(obj, a, b)
#else
  #define __Pyx_PySequence_GetSlice(obj, a, b) (unlikely(!(obj)) ? \
        (PyErr_SetString(PyExc_SystemError, "null argument to internal routine"), (PyObject*)0) : \
        (likely((obj)->ob_type->tp_as_mapping) ? (PySequence_GetSlice(obj, a, b)) : \
            (PyErr_Format(PyExc_TypeError, "'%.200s' object is unsliceable", (obj)->ob_type->tp_name), (PyObject*)0)))
  #define __Pyx_PySequence_SetSlice(obj, a, b, value) (unlikely(!(obj)) ? \
        (PyErr_SetString(PyExc_SystemError, "null argument to internal routine"), -1) : \
        (likely((obj)->ob_type->tp_as_mapping) ? (PySequence_SetSlice(obj, a, b, value)) : \
            (PyErr_Format(PyExc_TypeError, "'%.200s' object doesn't support slice assignment", (obj)->ob_type->tp_name), -1)))
  #define __Pyx_PySequence_DelSlice(obj, a, b) (unlikely(!(obj)) ? \
        (PyErr_SetString(PyExc_SystemError, "null argument to internal routine"), -1) : \
        (likely((obj)->ob_type->tp_as_mapping) ? (PySequence_DelSlice(obj, a, b)) : \
            (PyErr_Format(PyExc_TypeError, "'%.200s' object doesn't support slice deletion", (obj)->ob_type->tp_name), -1)))
#endif

#if PY_MAJOR_VERSION >= 3
  #define PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : PyInstanceMethod_New(func))
#endif

#if PY_VERSION_HEX < 0x02050000
  #define __Pyx_GetAttrString(o,n)   PyObject_GetAttrString((o),((char *)(n)))
  #define __Pyx_SetAttrString(o,n,a) PyObject_SetAttrString((o),((char *)(n)),(a))
  #define __Pyx_DelAttrString(o,n)   PyObject_DelAttrString((o),((char *)(n)))
#else
  #define __Pyx_GetAttrString(o,n)   PyObject_GetAttrString((o),(n))
  #define __Pyx_SetAttrString(o,n,a) PyObject_SetAttrString((o),(n),(a))
  #define __Pyx_DelAttrString(o,n)   PyObject_DelAttrString((o),(n))
#endif

#if PY_VERSION_HEX < 0x02050000
  #define __Pyx_NAMESTR(n) ((char *)(n))
  #define __Pyx_DOCSTR(n)  ((char *)(n))
#else
  #define __Pyx_NAMESTR(n) (n)
  #define __Pyx_DOCSTR(n)  (n)
#endif

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
#define _USE_MATH_DEFINES
#endif
#include <math.h>
#define __PYX_HAVE___PyXAL
#define __PYX_HAVE_API___PyXAL
#include "stdlib.h"
#include <hltypes/hstring.h>
#include <hltypes/harray.h>
#include <xal/AudioManager.h>
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <xal/Sound.h>
#include <xal/Category.h>
#include <xal/Player.h>
#include <xal/Buffer.h>
#include <xal/xal.h>
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#ifdef PYREX_WITHOUT_ASSERTIONS
#define CYTHON_WITHOUT_ASSERTIONS
#endif


/* inline attribute */
#ifndef CYTHON_INLINE
  #if defined(__GNUC__)
    #define CYTHON_INLINE __inline__
  #elif defined(_MSC_VER)
    #define CYTHON_INLINE __inline
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_INLINE inline
  #else
    #define CYTHON_INLINE
  #endif
#endif

/* unused attribute */
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || defined(__INTEL_COMPILER)
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif

typedef struct {PyObject **p; char *s; const long n; const char* encoding; const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry; /*proto*/


/* Type Conversion Predeclarations */

#define __Pyx_PyBytes_FromUString(s) PyBytes_FromString((char*)s)
#define __Pyx_PyBytes_AsUString(s)   ((unsigned char*) PyBytes_AsString(s))

#define __Pyx_Owned_Py_None(b) (Py_INCREF(Py_None), Py_None)
#define __Pyx_PyBool_FromLong(b) ((b) ? (Py_INCREF(Py_True), Py_True) : (Py_INCREF(Py_False), Py_False))
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x);

static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
static CYTHON_INLINE size_t __Pyx_PyInt_AsSize_t(PyObject*);

#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))


#ifdef __GNUC__
  /* Test for GCC > 2.95 */
  #if __GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95))
    #define likely(x)   __builtin_expect(!!(x), 1)
    #define unlikely(x) __builtin_expect(!!(x), 0)
  #else /* __GNUC__ > 2 ... */
    #define likely(x)   (x)
    #define unlikely(x) (x)
  #endif /* __GNUC__ > 2 ... */
#else /* __GNUC__ */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
    
static PyObject *__pyx_m;
static PyObject *__pyx_b;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "_PyXAL.pyx",
};

/*--- Type declarations ---*/
struct __pyx_obj_6_PyXAL_PyAudioManager;
struct __pyx_obj_6_PyXAL_PlayerWrapper;
struct __pyx_obj_6_PyXAL_SoundWrapper;
struct __pyx_obj_6_PyXAL_XALManagerWrapper;
struct __pyx_opt_args_6_PyXAL_EnableLogging;

/* "_PyXAL.pyx":64
 *     return result
 * 
 * cpdef EnableLogging(bool state = True, str path = ""):             # <<<<<<<<<<<<<<
 *     '''
 *     sets the logging state of PyXAL by default it is off
 */
struct __pyx_opt_args_6_PyXAL_EnableLogging {
  int __pyx_n;
  bool state;
  PyObject *path;
};

/* "_PyXAL.pyx":104
 * 
 * 
 * cdef class PyAudioManager:             # <<<<<<<<<<<<<<
 *     '''
 *     A wrapper for the C++ xal::AudioManager class. it is currently not used
 */
struct __pyx_obj_6_PyXAL_PyAudioManager {
  PyObject_HEAD
  xal::AudioManager *_pointer;
  bool destroyed;
};


/* "_PyXAL.pyx":293
 * 
 * 
 * cdef class PlayerWrapper:             # <<<<<<<<<<<<<<
 *     '''
 *     a wraper for the C++ class xal::Player. it is retuned by the XALManager.createPlayer method
 */
struct __pyx_obj_6_PyXAL_PlayerWrapper {
  PyObject_HEAD
  xal::Player *_pointer;
  bool destroyed;
};


/* "_PyXAL.pyx":120
 * 
 * 
 * cdef class SoundWrapper:             # <<<<<<<<<<<<<<
 *     '''
 *     A wrapper class for the C++ xal::Sound class. it is returned by the XALManager.createSound and PyPlayer.getSound methods
 */
struct __pyx_obj_6_PyXAL_SoundWrapper {
  PyObject_HEAD
  xal::Sound *_pointer;
  bool destroyed;
};


/* "_PyXAL.pyx":986
 * 
 * 
 * cdef class XALManagerWrapper(object):             # <<<<<<<<<<<<<<
 *     '''
 *     a wrapper for the xal::mgr object which is a xal::AudioManager. in other words this is the main interface to XAL you SHOLD NOT create an instance of the class yourself.
 */
struct __pyx_obj_6_PyXAL_XALManagerWrapper {
  PyObject_HEAD
  int destroyed;
  int inited;
  xal::Category *_category;
  char *CATEGORY_STR;
};


#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif

#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname); /*proto*/
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
  #define __Pyx_RefNannySetupContext(name)           __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
  #define __Pyx_RefNannyFinishContext()           __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif /* CYTHON_REFNANNY */

static PyObject *__Pyx_GetName(PyObject *dict, PyObject *name); /*proto*/

static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb); /*proto*/

static int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact); /*proto*/

static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name, PyObject* kw_name); /*proto*/

static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],     PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,     const char* function_name); /*proto*/

static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found); /*proto*/

static CYTHON_INLINE int __Pyx_CheckKeywordStrings(PyObject *kwdict,
    const char* function_name, int kw_allowed); /*proto*/

static CYTHON_INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb); /*proto*/
static CYTHON_INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb); /*proto*/

static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause); /*proto*/


static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}


#define __Pyx_GetItemInt_List(o, i, size, to_py_func) (((size) <= sizeof(Py_ssize_t)) ? \
                                                    __Pyx_GetItemInt_List_Fast(o, i) : \
                                                    __Pyx_GetItemInt_Generic(o, to_py_func(i)))

static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i) {
    if (likely(o != Py_None)) {
        if (likely((0 <= i) & (i < PyList_GET_SIZE(o)))) {
            PyObject *r = PyList_GET_ITEM(o, i);
            Py_INCREF(r);
            return r;
        }
        else if ((-PyList_GET_SIZE(o) <= i) & (i < 0)) {
            PyObject *r = PyList_GET_ITEM(o, PyList_GET_SIZE(o) + i);
            Py_INCREF(r);
            return r;
        }
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

#define __Pyx_GetItemInt_Tuple(o, i, size, to_py_func) (((size) <= sizeof(Py_ssize_t)) ? \
                                                    __Pyx_GetItemInt_Tuple_Fast(o, i) : \
                                                    __Pyx_GetItemInt_Generic(o, to_py_func(i)))

static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i) {
    if (likely(o != Py_None)) {
        if (likely((0 <= i) & (i < PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, i);
            Py_INCREF(r);
            return r;
        }
        else if ((-PyTuple_GET_SIZE(o) <= i) & (i < 0)) {
            PyObject *r = PyTuple_GET_ITEM(o, PyTuple_GET_SIZE(o) + i);
            Py_INCREF(r);
            return r;
        }
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}


#define __Pyx_GetItemInt(o, i, size, to_py_func) (((size) <= sizeof(Py_ssize_t)) ? \
                                                    __Pyx_GetItemInt_Fast(o, i) : \
                                                    __Pyx_GetItemInt_Generic(o, to_py_func(i)))

static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i) {
    PyObject *r;
    if (PyList_CheckExact(o) && ((0 <= i) & (i < PyList_GET_SIZE(o)))) {
        r = PyList_GET_ITEM(o, i);
        Py_INCREF(r);
    }
    else if (PyTuple_CheckExact(o) && ((0 <= i) & (i < PyTuple_GET_SIZE(o)))) {
        r = PyTuple_GET_ITEM(o, i);
        Py_INCREF(r);
    }
    else if (Py_TYPE(o)->tp_as_sequence && Py_TYPE(o)->tp_as_sequence->sq_item && (likely(i >= 0))) {
        r = PySequence_GetItem(o, i);
    }
    else {
        r = __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
    }
    return r;
}

static CYTHON_INLINE PyObject* __Pyx_tp_new(PyObject* type_obj) {
    return (PyObject*) (((PyTypeObject*)(type_obj))->tp_new(
        (PyTypeObject*)(type_obj), __pyx_empty_tuple, NULL));
}

static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type); /*proto*/

static CYTHON_INLINE int __Pyx_NegateNonNeg(int b) { 
    return unlikely(b < 0) ? b : !b; 
}
static CYTHON_INLINE PyObject* __Pyx_PyBoolOrNull_FromLong(long b) {
    return unlikely(b < 0) ? NULL : __Pyx_PyBool_FromLong(b);
}

static CYTHON_INLINE PyObject* __Pyx_PyObject_Append(PyObject* L, PyObject* x) {
    if (likely(PyList_CheckExact(L))) {
        if (PyList_Append(L, x) < 0) return NULL;
        Py_INCREF(Py_None);
        return Py_None; /* this is just to have an accurate signature */
    }
    else {
        PyObject *r, *m;
        m = __Pyx_GetAttrString(L, "append");
        if (!m) return NULL;
        r = PyObject_CallFunctionObjArgs(m, x, NULL);
        Py_DECREF(m);
        return r;
    }
}

static CYTHON_INLINE void __Pyx_ExceptionSave(PyObject **type, PyObject **value, PyObject **tb); /*proto*/
static void __Pyx_ExceptionReset(PyObject *type, PyObject *value, PyObject *tb); /*proto*/

static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, long level); /*proto*/

#ifndef __Pyx_CppExn2PyErr
static void __Pyx_CppExn2PyErr() {
  // Catch a handful of different errors here and turn them into the
  // equivalent Python errors.
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::bad_alloc& exn) {
    PyErr_SetString(PyExc_MemoryError, exn.what());
  } catch (const std::bad_cast& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::domain_error& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::invalid_argument& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::ios_base::failure& exn) {
    // Unfortunately, in standard C++ we have no way of distinguishing EOF
    // from other errors here; be careful with the exception mask
    PyErr_SetString(PyExc_IOError, exn.what());
  } catch (const std::out_of_range& exn) {
    // Change out_of_range to IndexError
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::overflow_error& exn) {
    PyErr_SetString(PyExc_OverflowError, exn.what());
  } catch (const std::range_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::underflow_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

static PyObject *__Pyx_FindPy2Metaclass(PyObject *bases); /*proto*/

static PyObject *__Pyx_CreateClass(PyObject *bases, PyObject *dict, PyObject *name,
                                   PyObject *modname); /*proto*/

#define __pyx_binding_PyCFunctionType_USED 1

typedef struct {
    PyCFunctionObject func;
} __pyx_binding_PyCFunctionType_object;

static PyTypeObject __pyx_binding_PyCFunctionType_type;
static PyTypeObject *__pyx_binding_PyCFunctionType = NULL;

static PyObject *__pyx_binding_PyCFunctionType_NewEx(PyMethodDef *ml, PyObject *self, PyObject *module); /* proto */
#define __pyx_binding_PyCFunctionType_New(ml, self) __pyx_binding_PyCFunctionType_NewEx(ml, self, NULL)

static int __pyx_binding_PyCFunctionType_init(void); /* proto */

#include <string.h>

static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals); /*proto*/

static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals); /*proto*/

#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyString_Equals __Pyx_PyUnicode_Equals
#else
#define __Pyx_PyString_Equals __Pyx_PyBytes_Equals
#endif

static CYTHON_INLINE unsigned char __Pyx_PyInt_AsUnsignedChar(PyObject *);

static CYTHON_INLINE unsigned short __Pyx_PyInt_AsUnsignedShort(PyObject *);

static CYTHON_INLINE unsigned int __Pyx_PyInt_AsUnsignedInt(PyObject *);

static CYTHON_INLINE char __Pyx_PyInt_AsChar(PyObject *);

static CYTHON_INLINE short __Pyx_PyInt_AsShort(PyObject *);

static CYTHON_INLINE int __Pyx_PyInt_AsInt(PyObject *);

static CYTHON_INLINE signed char __Pyx_PyInt_AsSignedChar(PyObject *);

static CYTHON_INLINE signed short __Pyx_PyInt_AsSignedShort(PyObject *);

static CYTHON_INLINE signed int __Pyx_PyInt_AsSignedInt(PyObject *);

static CYTHON_INLINE int __Pyx_PyInt_AsLongDouble(PyObject *);

static CYTHON_INLINE unsigned long __Pyx_PyInt_AsUnsignedLong(PyObject *);

static CYTHON_INLINE unsigned PY_LONG_LONG __Pyx_PyInt_AsUnsignedLongLong(PyObject *);

static CYTHON_INLINE long __Pyx_PyInt_AsLong(PyObject *);

static CYTHON_INLINE PY_LONG_LONG __Pyx_PyInt_AsLongLong(PyObject *);

static CYTHON_INLINE signed long __Pyx_PyInt_AsSignedLong(PyObject *);

static CYTHON_INLINE signed PY_LONG_LONG __Pyx_PyInt_AsSignedLongLong(PyObject *);

static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename); /*proto*/

static int __Pyx_check_binary_version(void);

static void __Pyx_AddTraceback(const char *funcname, int __pyx_clineno,
                               int __pyx_lineno, const char *__pyx_filename); /*proto*/

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t); /*proto*/

/* Module declarations from 'libc.stdlib' */

/* Module declarations from 'libcpp' */

/* Module declarations from 'hltypes' */

/* Module declarations from 'XAL' */

/* Module declarations from '_PyXAL' */
static PyTypeObject *__pyx_ptype_6_PyXAL_PyAudioManager = 0;
static PyTypeObject *__pyx_ptype_6_PyXAL_SoundWrapper = 0;
static PyTypeObject *__pyx_ptype_6_PyXAL_PlayerWrapper = 0;
static PyTypeObject *__pyx_ptype_6_PyXAL_XALManagerWrapper = 0;
static char *__pyx_v_6_PyXAL_XAL_AS_ANDROID;
static char *__pyx_v_6_PyXAL_XAL_AS_DIRECTSOUND;
static char *__pyx_v_6_PyXAL_XAL_AS_OPENAL;
static char *__pyx_v_6_PyXAL_XAL_AS_SDL;
static char *__pyx_v_6_PyXAL_XAL_AS_AVFOUNDATION;
static char *__pyx_v_6_PyXAL_XAL_AS_COREAUDIO;
static char *__pyx_v_6_PyXAL_XAL_AS_DISABLED;
static char *__pyx_v_6_PyXAL_XAL_AS_DEFAULT;
static enum xal::BufferMode __pyx_v_6_PyXAL_FULL;
static enum xal::BufferMode __pyx_v_6_PyXAL_LAZY;
static enum xal::BufferMode __pyx_v_6_PyXAL_MANAGED;
static enum xal::BufferMode __pyx_v_6_PyXAL_ON_DEMAND;
static enum xal::BufferMode __pyx_v_6_PyXAL_STREAMED;
static enum xal::SourceMode __pyx_v_6_PyXAL_DISK;
static enum xal::SourceMode __pyx_v_6_PyXAL_RAM;
static enum xal::Format __pyx_v_6_PyXAL_FLAC;
static enum xal::Format __pyx_v_6_PyXAL_M4A;
static enum xal::Format __pyx_v_6_PyXAL_OGG;
static enum xal::Format __pyx_v_6_PyXAL_SPX;
static enum xal::Format __pyx_v_6_PyXAL_WAV;
static enum xal::Format __pyx_v_6_PyXAL_UNKNOWN;
static PyObject *__pyx_v_6_PyXAL_LOG_PATH = 0;
static bool __pyx_v_6_PyXAL_LOG_ENABLED;
static PyObject *__pyx_f_6_PyXAL_SetLogPath(PyObject *, int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_6_PyXAL_EnableLogging(int __pyx_skip_dispatch, struct __pyx_opt_args_6_PyXAL_EnableLogging *__pyx_optional_args); /*proto*/
static void __pyx_f_6_PyXAL_Log(chstr); /*proto*/
#define __Pyx_MODULE_NAME "_PyXAL"
int __pyx_module_is_main__PyXAL = 0;

/* Implementation of '_PyXAL' */
static PyObject *__pyx_builtin_object;
static PyObject *__pyx_builtin_Exception;
static PyObject *__pyx_builtin_open;
static PyObject *__pyx_builtin_RuntimeError;
static PyObject *__pyx_builtin_TypeError;
static char __pyx_k_1[] = "";
static char __pyx_k_2[] = "\n";
static char __pyx_k_3[] = "XAL.log";
static char __pyx_k_4[] = "PyAudioManager Can not be initialized from python";
static char __pyx_k_6[] = "PySound Can not be initialized from python";
static char __pyx_k_8[] = "XAL is not Initialized";
static char __pyx_k_10[] = "the C++ interface for this object has been destroyed";
static char __pyx_k_32[] = "PyPlayer Can not be initialized from python";
static char __pyx_k_75[] = "XAL Failed to load file %s";
static char __pyx_k_99[] = "Expected argument 1 to be of type PySound got %s";
static char __pyx_k_100[] = "XAL Failed to create a player for %s";
static char __pyx_k_141[] = "Only one XALManager interface allowed at a time, use the one at PyXAL.Mgr";
static char __pyx_k_148[] = "Expected argument 1 to be of type PyPlayer got %s";
static char __pyx_k_161[] = "\n    a interface for the wrapper of the xal::Sound class\n    ";
static char __pyx_k_162[] = "\n    a interface for the C++ wrapper\n    ";
static char __pyx_k_163[] = "\n    a wrapper for the xal::mgr object which is a xal::AudioManager. in other words this is the main interface to XAL you SHOLD NOT create an instance of the class yourself.\n    call PyXAL.Init to set up XAL. an instance of this class will be made avalable at PyXAL.Mgr\n    ";
static char __pyx_k__ab[] = "ab";
static char __pyx_k__os[] = "os";
static char __pyx_k__Mgr[] = "Mgr";
static char __pyx_k__SDL[] = "SDL";
static char __pyx_k__Init[] = "Init";
static char __pyx_k__gain[] = "gain";
static char __pyx_k__join[] = "join";
static char __pyx_k__name[] = "name";
static char __pyx_k__open[] = "open";
static char __pyx_k__path[] = "path";
static char __pyx_k__play[] = "play";
static char __pyx_k__self[] = "self";
static char __pyx_k__stop[] = "stop";
static char __pyx_k__clear[] = "clear";
static char __pyx_k__close[] = "close";
static char __pyx_k__isdir[] = "isdir";
static char __pyx_k__pause[] = "pause";
static char __pyx_k__sound[] = "sound";
static char __pyx_k__split[] = "split";
static char __pyx_k__state[] = "state";
static char __pyx_k__value[] = "value";
static char __pyx_k__write[] = "write";
static char __pyx_k__OpenAL[] = "OpenAL";
static char __pyx_k___PyXAL[] = "_PyXAL";
static char __pyx_k___sound[] = "_sound";
static char __pyx_k__exists[] = "exists";
static char __pyx_k__inited[] = "inited";
static char __pyx_k__object[] = "object";
static char __pyx_k__player[] = "player";
static char __pyx_k__remove[] = "remove";
static char __pyx_k__Android[] = "Android";
static char __pyx_k__Destroy[] = "Destroy";
static char __pyx_k__PySound[] = "PySound";
static char __pyx_k____del__[] = "__del__";
static char __pyx_k___player[] = "_player";
static char __pyx_k__default[] = "default";
static char __pyx_k__getGain[] = "getGain";
static char __pyx_k__getName[] = "getName";
static char __pyx_k__getSize[] = "getSize";
static char __pyx_k__has_key[] = "has_key";
static char __pyx_k__looping[] = "looping";
static char __pyx_k__players[] = "players";
static char __pyx_k__setGain[] = "setGain";
static char __pyx_k__stopAll[] = "stopAll";
static char __pyx_k__Disabled[] = "Disabled";
static char __pyx_k__PyPlayer[] = "PyPlayer";
static char __pyx_k__SetupXAL[] = "SetupXAL";
static char __pyx_k____init__[] = "__init__";
static char __pyx_k____main__[] = "__main__";
static char __pyx_k____test__[] = "__test__";
static char __pyx_k___destroy[] = "_destroy";
static char __pyx_k___players[] = "_players";
static char __pyx_k___wrapper[] = "_wrapper";
static char __pyx_k__fadeTime[] = "fadeTime";
static char __pyx_k__filename[] = "filename";
static char __pyx_k__getPitch[] = "getPitch";
static char __pyx_k__getSound[] = "getSound";
static char __pyx_k__isFading[] = "isFading";
static char __pyx_k__isPaused[] = "isPaused";
static char __pyx_k__makedirs[] = "makedirs";
static char __pyx_k__setPitch[] = "setPitch";
static char __pyx_k__threaded[] = "threaded";
static char __pyx_k__CoreAudio[] = "CoreAudio";
static char __pyx_k__Exception[] = "Exception";
static char __pyx_k__TypeError[] = "TypeError";
static char __pyx_k__backendId[] = "backendId";
static char __pyx_k__destroyed[] = "destroyed";
static char __pyx_k__getFormat[] = "getFormat";
static char __pyx_k__isLooping[] = "isLooping";
static char __pyx_k__isPlaying[] = "isPlaying";
static char __pyx_k__stopFirst[] = "stopFirst";
static char __pyx_k__XALManager[] = "XALManager";
static char __pyx_k__deviceName[] = "deviceName";
static char __pyx_k__findPlayer[] = "findPlayer";
static char __pyx_k__isFadingIn[] = "isFadingIn";
static char __pyx_k__isStreamed[] = "isStreamed";
static char __pyx_k__systemname[] = "systemname";
static char __pyx_k__updateTime[] = "updateTime";
static char __pyx_k__DirectSound[] = "DirectSound";
static char __pyx_k___destroyXAL[] = "_destroyXAL";
static char __pyx_k__createSound[] = "createSound";
static char __pyx_k__getChannels[] = "getChannels";
static char __pyx_k__getDuration[] = "getDuration";
static char __pyx_k__getFilename[] = "getFilename";
static char __pyx_k__isAnyFading[] = "isAnyFading";
static char __pyx_k__isFadingOut[] = "isFadingOut";
static char __pyx_k__readPcmData[] = "readPcmData";
static char __pyx_k__resumeAudio[] = "resumeAudio";
static char __pyx_k__AVFoundation[] = "AVFoundation";
static char __pyx_k__CATEGORY_STR[] = "CATEGORY_STR";
static char __pyx_k__RuntimeError[] = "RuntimeError";
static char __pyx_k__createPlayer[] = "createPlayer";
static char __pyx_k__destroySound[] = "destroySound";
static char __pyx_k__isAnyPlaying[] = "isAnyPlaying";
static char __pyx_k__suspendAudio[] = "suspendAudio";
static char __pyx_k__destroyPlayer[] = "destroyPlayer";
static char __pyx_k__isAnyFadingIn[] = "isAnyFadingIn";
static char __pyx_k__isAnyFadingOut[] = "isAnyFadingOut";
static char __pyx_k__getRealFilename[] = "getRealFilename";
static char __pyx_k__getSamplingRate[] = "getSamplingRate";
static char __pyx_k__getTimePosition[] = "getTimePosition";
static char __pyx_k__getBitsPerSample[] = "getBitsPerSample";
static char __pyx_k__isXALInitialized[] = "isXALInitialized";
static char __pyx_k__getSamplePosition[] = "getSamplePosition";
static PyObject *__pyx_kp_s_1;
static PyObject *__pyx_kp_s_10;
static PyObject *__pyx_kp_s_100;
static PyObject *__pyx_kp_s_141;
static PyObject *__pyx_kp_s_148;
static PyObject *__pyx_kp_s_161;
static PyObject *__pyx_kp_s_162;
static PyObject *__pyx_kp_s_163;
static PyObject *__pyx_kp_s_3;
static PyObject *__pyx_kp_s_32;
static PyObject *__pyx_kp_s_4;
static PyObject *__pyx_kp_s_6;
static PyObject *__pyx_kp_s_75;
static PyObject *__pyx_kp_s_8;
static PyObject *__pyx_kp_s_99;
static PyObject *__pyx_n_s__CATEGORY_STR;
static PyObject *__pyx_n_s__Destroy;
static PyObject *__pyx_n_s__Exception;
static PyObject *__pyx_n_s__Init;
static PyObject *__pyx_n_s__Mgr;
static PyObject *__pyx_n_s__PyPlayer;
static PyObject *__pyx_n_s__PySound;
static PyObject *__pyx_n_s__RuntimeError;
static PyObject *__pyx_n_s__SetupXAL;
static PyObject *__pyx_n_s__TypeError;
static PyObject *__pyx_n_s__XALManager;
static PyObject *__pyx_n_s___PyXAL;
static PyObject *__pyx_n_s____del__;
static PyObject *__pyx_n_s____init__;
static PyObject *__pyx_n_s____main__;
static PyObject *__pyx_n_s____test__;
static PyObject *__pyx_n_s___destroy;
static PyObject *__pyx_n_s___destroyXAL;
static PyObject *__pyx_n_s___player;
static PyObject *__pyx_n_s___players;
static PyObject *__pyx_n_s___sound;
static PyObject *__pyx_n_s___wrapper;
static PyObject *__pyx_n_s__ab;
static PyObject *__pyx_n_s__backendId;
static PyObject *__pyx_n_s__clear;
static PyObject *__pyx_n_s__close;
static PyObject *__pyx_n_s__createPlayer;
static PyObject *__pyx_n_s__createSound;
static PyObject *__pyx_n_s__default;
static PyObject *__pyx_n_s__destroyPlayer;
static PyObject *__pyx_n_s__destroySound;
static PyObject *__pyx_n_s__destroyed;
static PyObject *__pyx_n_s__deviceName;
static PyObject *__pyx_n_s__exists;
static PyObject *__pyx_n_s__fadeTime;
static PyObject *__pyx_n_s__filename;
static PyObject *__pyx_n_s__findPlayer;
static PyObject *__pyx_n_s__gain;
static PyObject *__pyx_n_s__getBitsPerSample;
static PyObject *__pyx_n_s__getChannels;
static PyObject *__pyx_n_s__getDuration;
static PyObject *__pyx_n_s__getFilename;
static PyObject *__pyx_n_s__getFormat;
static PyObject *__pyx_n_s__getGain;
static PyObject *__pyx_n_s__getName;
static PyObject *__pyx_n_s__getPitch;
static PyObject *__pyx_n_s__getRealFilename;
static PyObject *__pyx_n_s__getSamplePosition;
static PyObject *__pyx_n_s__getSamplingRate;
static PyObject *__pyx_n_s__getSize;
static PyObject *__pyx_n_s__getSound;
static PyObject *__pyx_n_s__getTimePosition;
static PyObject *__pyx_n_s__has_key;
static PyObject *__pyx_n_s__inited;
static PyObject *__pyx_n_s__isAnyFading;
static PyObject *__pyx_n_s__isAnyFadingIn;
static PyObject *__pyx_n_s__isAnyFadingOut;
static PyObject *__pyx_n_s__isAnyPlaying;
static PyObject *__pyx_n_s__isFading;
static PyObject *__pyx_n_s__isFadingIn;
static PyObject *__pyx_n_s__isFadingOut;
static PyObject *__pyx_n_s__isLooping;
static PyObject *__pyx_n_s__isPaused;
static PyObject *__pyx_n_s__isPlaying;
static PyObject *__pyx_n_s__isStreamed;
static PyObject *__pyx_n_s__isXALInitialized;
static PyObject *__pyx_n_s__isdir;
static PyObject *__pyx_n_s__join;
static PyObject *__pyx_n_s__looping;
static PyObject *__pyx_n_s__makedirs;
static PyObject *__pyx_n_s__name;
static PyObject *__pyx_n_s__object;
static PyObject *__pyx_n_s__open;
static PyObject *__pyx_n_s__os;
static PyObject *__pyx_n_s__path;
static PyObject *__pyx_n_s__pause;
static PyObject *__pyx_n_s__play;
static PyObject *__pyx_n_s__player;
static PyObject *__pyx_n_s__players;
static PyObject *__pyx_n_s__readPcmData;
static PyObject *__pyx_n_s__remove;
static PyObject *__pyx_n_s__resumeAudio;
static PyObject *__pyx_n_s__self;
static PyObject *__pyx_n_s__setGain;
static PyObject *__pyx_n_s__setPitch;
static PyObject *__pyx_n_s__sound;
static PyObject *__pyx_n_s__split;
static PyObject *__pyx_n_s__state;
static PyObject *__pyx_n_s__stop;
static PyObject *__pyx_n_s__stopAll;
static PyObject *__pyx_n_s__stopFirst;
static PyObject *__pyx_n_s__suspendAudio;
static PyObject *__pyx_n_s__systemname;
static PyObject *__pyx_n_s__threaded;
static PyObject *__pyx_n_s__updateTime;
static PyObject *__pyx_n_s__value;
static PyObject *__pyx_n_s__write;
static PyObject *__pyx_k_tuple_5;
static PyObject *__pyx_k_tuple_7;
static PyObject *__pyx_k_tuple_9;
static PyObject *__pyx_k_tuple_11;
static PyObject *__pyx_k_tuple_12;
static PyObject *__pyx_k_tuple_13;
static PyObject *__pyx_k_tuple_14;
static PyObject *__pyx_k_tuple_15;
static PyObject *__pyx_k_tuple_16;
static PyObject *__pyx_k_tuple_17;
static PyObject *__pyx_k_tuple_18;
static PyObject *__pyx_k_tuple_19;
static PyObject *__pyx_k_tuple_20;
static PyObject *__pyx_k_tuple_21;
static PyObject *__pyx_k_tuple_22;
static PyObject *__pyx_k_tuple_23;
static PyObject *__pyx_k_tuple_24;
static PyObject *__pyx_k_tuple_25;
static PyObject *__pyx_k_tuple_26;
static PyObject *__pyx_k_tuple_27;
static PyObject *__pyx_k_tuple_28;
static PyObject *__pyx_k_tuple_29;
static PyObject *__pyx_k_tuple_30;
static PyObject *__pyx_k_tuple_31;
static PyObject *__pyx_k_tuple_33;
static PyObject *__pyx_k_tuple_34;
static PyObject *__pyx_k_tuple_35;
static PyObject *__pyx_k_tuple_36;
static PyObject *__pyx_k_tuple_37;
static PyObject *__pyx_k_tuple_38;
static PyObject *__pyx_k_tuple_39;
static PyObject *__pyx_k_tuple_40;
static PyObject *__pyx_k_tuple_41;
static PyObject *__pyx_k_tuple_42;
static PyObject *__pyx_k_tuple_43;
static PyObject *__pyx_k_tuple_44;
static PyObject *__pyx_k_tuple_45;
static PyObject *__pyx_k_tuple_46;
static PyObject *__pyx_k_tuple_47;
static PyObject *__pyx_k_tuple_48;
static PyObject *__pyx_k_tuple_49;
static PyObject *__pyx_k_tuple_50;
static PyObject *__pyx_k_tuple_51;
static PyObject *__pyx_k_tuple_52;
static PyObject *__pyx_k_tuple_53;
static PyObject *__pyx_k_tuple_54;
static PyObject *__pyx_k_tuple_55;
static PyObject *__pyx_k_tuple_56;
static PyObject *__pyx_k_tuple_57;
static PyObject *__pyx_k_tuple_58;
static PyObject *__pyx_k_tuple_59;
static PyObject *__pyx_k_tuple_60;
static PyObject *__pyx_k_tuple_61;
static PyObject *__pyx_k_tuple_62;
static PyObject *__pyx_k_tuple_63;
static PyObject *__pyx_k_tuple_64;
static PyObject *__pyx_k_tuple_65;
static PyObject *__pyx_k_tuple_66;
static PyObject *__pyx_k_tuple_67;
static PyObject *__pyx_k_tuple_68;
static PyObject *__pyx_k_tuple_69;
static PyObject *__pyx_k_tuple_70;
static PyObject *__pyx_k_tuple_71;
static PyObject *__pyx_k_tuple_72;
static PyObject *__pyx_k_tuple_73;
static PyObject *__pyx_k_tuple_74;
static PyObject *__pyx_k_tuple_76;
static PyObject *__pyx_k_tuple_77;
static PyObject *__pyx_k_tuple_78;
static PyObject *__pyx_k_tuple_79;
static PyObject *__pyx_k_tuple_80;
static PyObject *__pyx_k_tuple_81;
static PyObject *__pyx_k_tuple_82;
static PyObject *__pyx_k_tuple_83;
static PyObject *__pyx_k_tuple_84;
static PyObject *__pyx_k_tuple_85;
static PyObject *__pyx_k_tuple_86;
static PyObject *__pyx_k_tuple_87;
static PyObject *__pyx_k_tuple_88;
static PyObject *__pyx_k_tuple_89;
static PyObject *__pyx_k_tuple_90;
static PyObject *__pyx_k_tuple_91;
static PyObject *__pyx_k_tuple_92;
static PyObject *__pyx_k_tuple_93;
static PyObject *__pyx_k_tuple_94;
static PyObject *__pyx_k_tuple_95;
static PyObject *__pyx_k_tuple_96;
static PyObject *__pyx_k_tuple_97;
static PyObject *__pyx_k_tuple_98;
static PyObject *__pyx_k_tuple_101;
static PyObject *__pyx_k_tuple_102;
static PyObject *__pyx_k_tuple_103;
static PyObject *__pyx_k_tuple_104;
static PyObject *__pyx_k_tuple_105;
static PyObject *__pyx_k_tuple_106;
static PyObject *__pyx_k_tuple_107;
static PyObject *__pyx_k_tuple_108;
static PyObject *__pyx_k_tuple_109;
static PyObject *__pyx_k_tuple_110;
static PyObject *__pyx_k_tuple_111;
static PyObject *__pyx_k_tuple_112;
static PyObject *__pyx_k_tuple_113;
static PyObject *__pyx_k_tuple_114;
static PyObject *__pyx_k_tuple_115;
static PyObject *__pyx_k_tuple_116;
static PyObject *__pyx_k_tuple_117;
static PyObject *__pyx_k_tuple_118;
static PyObject *__pyx_k_tuple_119;
static PyObject *__pyx_k_tuple_120;
static PyObject *__pyx_k_tuple_121;
static PyObject *__pyx_k_tuple_122;
static PyObject *__pyx_k_tuple_123;
static PyObject *__pyx_k_tuple_124;
static PyObject *__pyx_k_tuple_125;
static PyObject *__pyx_k_tuple_126;
static PyObject *__pyx_k_tuple_127;
static PyObject *__pyx_k_tuple_128;
static PyObject *__pyx_k_tuple_129;
static PyObject *__pyx_k_tuple_130;
static PyObject *__pyx_k_tuple_131;
static PyObject *__pyx_k_tuple_132;
static PyObject *__pyx_k_tuple_133;
static PyObject *__pyx_k_tuple_134;
static PyObject *__pyx_k_tuple_135;
static PyObject *__pyx_k_tuple_136;
static PyObject *__pyx_k_tuple_137;
static PyObject *__pyx_k_tuple_138;
static PyObject *__pyx_k_tuple_139;
static PyObject *__pyx_k_tuple_140;
static PyObject *__pyx_k_tuple_142;
static PyObject *__pyx_k_tuple_143;
static PyObject *__pyx_k_tuple_144;
static PyObject *__pyx_k_tuple_145;
static PyObject *__pyx_k_tuple_146;
static PyObject *__pyx_k_tuple_147;
static PyObject *__pyx_k_tuple_149;
static PyObject *__pyx_k_tuple_150;
static PyObject *__pyx_k_tuple_151;
static PyObject *__pyx_k_tuple_152;
static PyObject *__pyx_k_tuple_153;
static PyObject *__pyx_k_tuple_154;
static PyObject *__pyx_k_tuple_155;
static PyObject *__pyx_k_tuple_156;
static PyObject *__pyx_k_tuple_157;
static PyObject *__pyx_k_tuple_158;
static PyObject *__pyx_k_tuple_159;
static PyObject *__pyx_k_tuple_160;

/* "_PyXAL.pyx":43
 * cdef bool LOG_ENABLED = False
 * 
 * cpdef SetLogPath(str path):             # <<<<<<<<<<<<<<
 *     '''
 *     Sets the path where XAL should create a log file.
 */

static PyObject *__pyx_pf_6_PyXAL_SetLogPath(PyObject *__pyx_self, PyObject *__pyx_v_path); /*proto*/
static PyObject *__pyx_f_6_PyXAL_SetLogPath(PyObject *__pyx_v_path, int __pyx_skip_dispatch) {
  PyObject *__pyx_v_blank = 0;
  int __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("SetLogPath");

  /* "_PyXAL.pyx":53
 *     '''
 *     global LOG_PATH
 *     cdef str blank = ""             # <<<<<<<<<<<<<<
 *     cdef bint result = False
 *     if not LOG_PATH == blank and not os.path.exists(path) or not os.path.isdir(path):
 */
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_1));
  __pyx_v_blank = __pyx_kp_s_1;

  /* "_PyXAL.pyx":54
 *     global LOG_PATH
 *     cdef str blank = ""
 *     cdef bint result = False             # <<<<<<<<<<<<<<
 *     if not LOG_PATH == blank and not os.path.exists(path) or not os.path.isdir(path):
 *         try:
 */
  __pyx_v_result = 0;

  /* "_PyXAL.pyx":55
 *     cdef str blank = ""
 *     cdef bint result = False
 *     if not LOG_PATH == blank and not os.path.exists(path) or not os.path.isdir(path):             # <<<<<<<<<<<<<<
 *         try:
 *             os.makedirs(path)
 */
  __pyx_t_1 = __Pyx_PyString_Equals(((PyObject *)__pyx_v_6_PyXAL_LOG_PATH), ((PyObject *)__pyx_v_blank), Py_EQ); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 55; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (!__pyx_t_1);
  if (__pyx_t_2) {
    __pyx_t_3 = __Pyx_GetName(__pyx_m, __pyx_n_s__os); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 55; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyObject_GetAttr(__pyx_t_3, __pyx_n_s__path); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 55; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyObject_GetAttr(__pyx_t_4, __pyx_n_s__exists); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 55; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 55; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_4));
    __Pyx_INCREF(((PyObject *)__pyx_v_path));
    PyTuple_SET_ITEM(__pyx_t_4, 0, ((PyObject *)__pyx_v_path));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_path));
    __pyx_t_5 = PyObject_Call(__pyx_t_3, ((PyObject *)__pyx_t_4), NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 55; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 55; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_6 = (!__pyx_t_1);
    __pyx_t_1 = __pyx_t_6;
  } else {
    __pyx_t_1 = __pyx_t_2;
  }
  if (!__pyx_t_1) {
    __pyx_t_5 = __Pyx_GetName(__pyx_m, __pyx_n_s__os); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 55; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = PyObject_GetAttr(__pyx_t_5, __pyx_n_s__path); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 55; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyObject_GetAttr(__pyx_t_4, __pyx_n_s__isdir); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 55; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 55; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_4));
    __Pyx_INCREF(((PyObject *)__pyx_v_path));
    PyTuple_SET_ITEM(__pyx_t_4, 0, ((PyObject *)__pyx_v_path));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_path));
    __pyx_t_3 = PyObject_Call(__pyx_t_5, ((PyObject *)__pyx_t_4), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 55; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 55; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_6 = (!__pyx_t_2);
    __pyx_t_2 = __pyx_t_6;
  } else {
    __pyx_t_2 = __pyx_t_1;
  }
  if (__pyx_t_2) {

    /* "_PyXAL.pyx":56
 *     cdef bint result = False
 *     if not LOG_PATH == blank and not os.path.exists(path) or not os.path.isdir(path):
 *         try:             # <<<<<<<<<<<<<<
 *             os.makedirs(path)
 *         except Exception:
 */
    {
      __Pyx_ExceptionSave(&__pyx_t_7, &__pyx_t_8, &__pyx_t_9);
      __Pyx_XGOTREF(__pyx_t_7);
      __Pyx_XGOTREF(__pyx_t_8);
      __Pyx_XGOTREF(__pyx_t_9);
      /*try:*/ {

        /* "_PyXAL.pyx":57
 *     if not LOG_PATH == blank and not os.path.exists(path) or not os.path.isdir(path):
 *         try:
 *             os.makedirs(path)             # <<<<<<<<<<<<<<
 *         except Exception:
 *             return result
 */
        __pyx_t_3 = __Pyx_GetName(__pyx_m, __pyx_n_s__os); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 57; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_4 = PyObject_GetAttr(__pyx_t_3, __pyx_n_s__makedirs); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 57; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 57; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
        __Pyx_GOTREF(((PyObject *)__pyx_t_3));
        __Pyx_INCREF(((PyObject *)__pyx_v_path));
        PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_v_path));
        __Pyx_GIVEREF(((PyObject *)__pyx_v_path));
        __pyx_t_5 = PyObject_Call(__pyx_t_4, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 57; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      }
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      goto __pyx_L11_try_end;
      __pyx_L4_error:;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;

      /* "_PyXAL.pyx":58
 *         try:
 *             os.makedirs(path)
 *         except Exception:             # <<<<<<<<<<<<<<
 *             return result
 *     LOG_PATH = path
 */
      __pyx_t_10 = PyErr_ExceptionMatches(__pyx_builtin_Exception);
      if (__pyx_t_10) {
        __Pyx_AddTraceback("_PyXAL.SetLogPath", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_3, &__pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 58; __pyx_clineno = __LINE__; goto __pyx_L6_except_error;}
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_GOTREF(__pyx_t_4);

        /* "_PyXAL.pyx":59
 *             os.makedirs(path)
 *         except Exception:
 *             return result             # <<<<<<<<<<<<<<
 *     LOG_PATH = path
 *     result = True
 */
        __Pyx_XDECREF(__pyx_r);
        __pyx_t_11 = __Pyx_PyBool_FromLong(__pyx_v_result); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 59; __pyx_clineno = __LINE__; goto __pyx_L6_except_error;}
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_r = __pyx_t_11;
        __pyx_t_11 = 0;
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        goto __pyx_L7_except_return;
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        goto __pyx_L5_exception_handled;
      }
      __pyx_L6_except_error:;
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_XGIVEREF(__pyx_t_8);
      __Pyx_XGIVEREF(__pyx_t_9);
      __Pyx_ExceptionReset(__pyx_t_7, __pyx_t_8, __pyx_t_9);
      goto __pyx_L1_error;
      __pyx_L7_except_return:;
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_XGIVEREF(__pyx_t_8);
      __Pyx_XGIVEREF(__pyx_t_9);
      __Pyx_ExceptionReset(__pyx_t_7, __pyx_t_8, __pyx_t_9);
      goto __pyx_L0;
      __pyx_L5_exception_handled:;
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_XGIVEREF(__pyx_t_8);
      __Pyx_XGIVEREF(__pyx_t_9);
      __Pyx_ExceptionReset(__pyx_t_7, __pyx_t_8, __pyx_t_9);
      __pyx_L11_try_end:;
    }
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "_PyXAL.pyx":60
 *         except Exception:
 *             return result
 *     LOG_PATH = path             # <<<<<<<<<<<<<<
 *     result = True
 *     return result
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_path));
  __Pyx_XGOTREF(((PyObject *)__pyx_v_6_PyXAL_LOG_PATH));
  __Pyx_DECREF(((PyObject *)__pyx_v_6_PyXAL_LOG_PATH));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_path));
  __pyx_v_6_PyXAL_LOG_PATH = __pyx_v_path;

  /* "_PyXAL.pyx":61
 *             return result
 *     LOG_PATH = path
 *     result = True             # <<<<<<<<<<<<<<
 *     return result
 * 
 */
  __pyx_v_result = 1;

  /* "_PyXAL.pyx":62
 *     LOG_PATH = path
 *     result = True
 *     return result             # <<<<<<<<<<<<<<
 * 
 * cpdef EnableLogging(bool state = True, str path = ""):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_v_result); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 62; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("_PyXAL.SetLogPath", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_blank);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":43
 * cdef bool LOG_ENABLED = False
 * 
 * cpdef SetLogPath(str path):             # <<<<<<<<<<<<<<
 *     '''
 *     Sets the path where XAL should create a log file.
 */

static PyObject *__pyx_pf_6_PyXAL_SetLogPath(PyObject *__pyx_self, PyObject *__pyx_v_path); /*proto*/
static char __pyx_doc_6_PyXAL_SetLogPath[] = "\n    Sets the path where XAL should create a log file. \n    the path should not include the file\n    PyXAL will try to create a folder at the path if the path doesn't exist and will save it's log in that folder as a file named XAL.log\n    \n    @param path: string path to the folder where the log should be made\n    @return: returns True or False if the path was set\n    ";
static PyObject *__pyx_pf_6_PyXAL_SetLogPath(PyObject *__pyx_self, PyObject *__pyx_v_path) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("SetLogPath");
  __pyx_self = __pyx_self;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_path), (&PyString_Type), 1, "path", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 43; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_6_PyXAL_SetLogPath(__pyx_v_path, 0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 43; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_PyXAL.SetLogPath", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":64
 *     return result
 * 
 * cpdef EnableLogging(bool state = True, str path = ""):             # <<<<<<<<<<<<<<
 *     '''
 *     sets the logging state of PyXAL by default it is off
 */

static PyObject *__pyx_pf_6_PyXAL_1EnableLogging(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_6_PyXAL_EnableLogging(int __pyx_skip_dispatch, struct __pyx_opt_args_6_PyXAL_EnableLogging *__pyx_optional_args) {
  bool __pyx_v_state = ((bool)1);
  PyObject *__pyx_v_path = ((PyObject*)__pyx_kp_s_1);
  int __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("EnableLogging");
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_state = __pyx_optional_args->state;
      if (__pyx_optional_args->__pyx_n > 1) {
        __pyx_v_path = __pyx_optional_args->path;
      }
    }
  }

  /* "_PyXAL.pyx":76
 *     '''
 *     global LOG_ENABLED
 *     LOG_ENABLED = state             # <<<<<<<<<<<<<<
 *     cdef bint result = False
 *     result = SetLogPath(path)
 */
  __pyx_v_6_PyXAL_LOG_ENABLED = __pyx_v_state;

  /* "_PyXAL.pyx":77
 *     global LOG_ENABLED
 *     LOG_ENABLED = state
 *     cdef bint result = False             # <<<<<<<<<<<<<<
 *     result = SetLogPath(path)
 *     return result
 */
  __pyx_v_result = 0;

  /* "_PyXAL.pyx":78
 *     LOG_ENABLED = state
 *     cdef bint result = False
 *     result = SetLogPath(path)             # <<<<<<<<<<<<<<
 *     return result
 * 
 */
  __pyx_t_1 = __pyx_f_6_PyXAL_SetLogPath(__pyx_v_path, 0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 78; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 78; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_result = __pyx_t_2;

  /* "_PyXAL.pyx":79
 *     cdef bint result = False
 *     result = SetLogPath(path)
 *     return result             # <<<<<<<<<<<<<<
 * 
 * cdef void Log(chstr logMessage):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_result); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 79; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_PyXAL.EnableLogging", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":64
 *     return result
 * 
 * cpdef EnableLogging(bool state = True, str path = ""):             # <<<<<<<<<<<<<<
 *     '''
 *     sets the logging state of PyXAL by default it is off
 */

static PyObject *__pyx_pf_6_PyXAL_1EnableLogging(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6_PyXAL_1EnableLogging[] = "\n    sets the logging state of PyXAL by default it is off\n    \n    @param state: bool True or False if XAL should be logging data default is True so calling\n        PyXAL.EnableLogging will turn logging on (by default PyXAL does not log)\n    @param path: string path to the folder where PyXAL should create the log \n        it is an empty string by default so that should mean the log will be made in the \n        current working directory. calling PyXAL.EnableLogging will set the path to an empty string if the paramater is not included\n    @return: returns True or False if the path was set\n    ";
static PyObject *__pyx_pf_6_PyXAL_1EnableLogging(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  bool __pyx_v_state;
  PyObject *__pyx_v_path = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  struct __pyx_opt_args_6_PyXAL_EnableLogging __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__state,&__pyx_n_s__path,0};
  __Pyx_RefNannySetupContext("EnableLogging");
  __pyx_self = __pyx_self;
  {
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject*)__pyx_kp_s_1);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__state);
          if (value) { values[0] = value; kw_args--; }
        }
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__path);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "EnableLogging") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_state = __Pyx_PyObject_IsTrue(values[0]); if (unlikely((__pyx_v_state == (bool)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_state = ((bool)1);
    }
    __pyx_v_path = ((PyObject*)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("EnableLogging", 0, 0, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("_PyXAL.EnableLogging", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_path), (&PyString_Type), 1, "path", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2.__pyx_n = 2;
  __pyx_t_2.state = __pyx_v_state;
  __pyx_t_2.path = __pyx_v_path;
  __pyx_t_1 = __pyx_f_6_PyXAL_EnableLogging(0, &__pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_PyXAL.EnableLogging", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":81
 *     return result
 * 
 * cdef void Log(chstr logMessage):             # <<<<<<<<<<<<<<
 *     global LOG_PATH
 *     global LOG_ENABLED
 */

static void __pyx_f_6_PyXAL_Log(chstr __pyx_v_logMessage) {
  const char* __pyx_v_message;
  const char* __pyx_v_line_end;
  PyObject *__pyx_v_pymessage = NULL;
  PyObject *__pyx_v_path = NULL;
  PyObject *__pyx_v_file = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("Log");

  /* "_PyXAL.pyx":84
 *     global LOG_PATH
 *     global LOG_ENABLED
 *     if not LOG_ENABLED:             # <<<<<<<<<<<<<<
 *         return
 *     cdef const_char_ptr message
 */
  __pyx_t_1 = (!__pyx_v_6_PyXAL_LOG_ENABLED);
  if (__pyx_t_1) {

    /* "_PyXAL.pyx":85
 *     global LOG_ENABLED
 *     if not LOG_ENABLED:
 *         return             # <<<<<<<<<<<<<<
 *     cdef const_char_ptr message
 *     cdef const_char_ptr line_end = "\n"
 */
    goto __pyx_L0;
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "_PyXAL.pyx":87
 *         return
 *     cdef const_char_ptr message
 *     cdef const_char_ptr line_end = "\n"             # <<<<<<<<<<<<<<
 *     message = logMessage.c_str()
 *     pymessage = message + line_end
 */
  __pyx_v_line_end = __pyx_k_2;

  /* "_PyXAL.pyx":88
 *     cdef const_char_ptr message
 *     cdef const_char_ptr line_end = "\n"
 *     message = logMessage.c_str()             # <<<<<<<<<<<<<<
 *     pymessage = message + line_end
 *     if os.path.exists(LOG_PATH):
 */
  __pyx_v_message = __pyx_v_logMessage.c_str();

  /* "_PyXAL.pyx":89
 *     cdef const_char_ptr line_end = "\n"
 *     message = logMessage.c_str()
 *     pymessage = message + line_end             # <<<<<<<<<<<<<<
 *     if os.path.exists(LOG_PATH):
 *         try:
 */
  __pyx_t_2 = PyBytes_FromString(__pyx_v_message); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 89; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  __pyx_t_3 = PyBytes_FromString(__pyx_v_line_end); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 89; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_3));
  __pyx_t_4 = PyNumber_Add(((PyObject *)__pyx_t_2), ((PyObject *)__pyx_t_3)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 89; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_4));
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
  __pyx_v_pymessage = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "_PyXAL.pyx":90
 *     message = logMessage.c_str()
 *     pymessage = message + line_end
 *     if os.path.exists(LOG_PATH):             # <<<<<<<<<<<<<<
 *         try:
 *             path = os.path.join(LOG_PATH, "XAL.log")
 */
  __pyx_t_4 = __Pyx_GetName(__pyx_m, __pyx_n_s__os); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 90; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = PyObject_GetAttr(__pyx_t_4, __pyx_n_s__path); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 90; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyObject_GetAttr(__pyx_t_3, __pyx_n_s__exists); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 90; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 90; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_3));
  __Pyx_INCREF(((PyObject *)__pyx_v_6_PyXAL_LOG_PATH));
  PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_v_6_PyXAL_LOG_PATH));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_6_PyXAL_LOG_PATH));
  __pyx_t_2 = PyObject_Call(__pyx_t_4, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 90; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 90; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_1) {

    /* "_PyXAL.pyx":91
 *     pymessage = message + line_end
 *     if os.path.exists(LOG_PATH):
 *         try:             # <<<<<<<<<<<<<<
 *             path = os.path.join(LOG_PATH, "XAL.log")
 *             file = open(path, "ab")
 */
    {
      __Pyx_ExceptionSave(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7);
      __Pyx_XGOTREF(__pyx_t_5);
      __Pyx_XGOTREF(__pyx_t_6);
      __Pyx_XGOTREF(__pyx_t_7);
      /*try:*/ {

        /* "_PyXAL.pyx":92
 *     if os.path.exists(LOG_PATH):
 *         try:
 *             path = os.path.join(LOG_PATH, "XAL.log")             # <<<<<<<<<<<<<<
 *             file = open(path, "ab")
 *             file.write(pymessage)
 */
        __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__os); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 92; __pyx_clineno = __LINE__; goto __pyx_L5_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_3 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__path); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 92; __pyx_clineno = __LINE__; goto __pyx_L5_error;}
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_2 = PyObject_GetAttr(__pyx_t_3, __pyx_n_s__join); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 92; __pyx_clineno = __LINE__; goto __pyx_L5_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 92; __pyx_clineno = __LINE__; goto __pyx_L5_error;}
        __Pyx_GOTREF(((PyObject *)__pyx_t_3));
        __Pyx_INCREF(((PyObject *)__pyx_v_6_PyXAL_LOG_PATH));
        PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_v_6_PyXAL_LOG_PATH));
        __Pyx_GIVEREF(((PyObject *)__pyx_v_6_PyXAL_LOG_PATH));
        __Pyx_INCREF(((PyObject *)__pyx_kp_s_3));
        PyTuple_SET_ITEM(__pyx_t_3, 1, ((PyObject *)__pyx_kp_s_3));
        __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_3));
        __pyx_t_4 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 92; __pyx_clineno = __LINE__; goto __pyx_L5_error;}
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
        __pyx_v_path = __pyx_t_4;
        __pyx_t_4 = 0;

        /* "_PyXAL.pyx":93
 *         try:
 *             path = os.path.join(LOG_PATH, "XAL.log")
 *             file = open(path, "ab")             # <<<<<<<<<<<<<<
 *             file.write(pymessage)
 *             file.close()
 */
        __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 93; __pyx_clineno = __LINE__; goto __pyx_L5_error;}
        __Pyx_GOTREF(((PyObject *)__pyx_t_4));
        __Pyx_INCREF(__pyx_v_path);
        PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_path);
        __Pyx_GIVEREF(__pyx_v_path);
        __Pyx_INCREF(((PyObject *)__pyx_n_s__ab));
        PyTuple_SET_ITEM(__pyx_t_4, 1, ((PyObject *)__pyx_n_s__ab));
        __Pyx_GIVEREF(((PyObject *)__pyx_n_s__ab));
        __pyx_t_3 = PyObject_Call(__pyx_builtin_open, ((PyObject *)__pyx_t_4), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 93; __pyx_clineno = __LINE__; goto __pyx_L5_error;}
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;
        __pyx_v_file = __pyx_t_3;
        __pyx_t_3 = 0;

        /* "_PyXAL.pyx":94
 *             path = os.path.join(LOG_PATH, "XAL.log")
 *             file = open(path, "ab")
 *             file.write(pymessage)             # <<<<<<<<<<<<<<
 *             file.close()
 *         except Exception:
 */
        __pyx_t_3 = PyObject_GetAttr(__pyx_v_file, __pyx_n_s__write); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 94; __pyx_clineno = __LINE__; goto __pyx_L5_error;}
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 94; __pyx_clineno = __LINE__; goto __pyx_L5_error;}
        __Pyx_GOTREF(((PyObject *)__pyx_t_4));
        __Pyx_INCREF(((PyObject *)__pyx_v_pymessage));
        PyTuple_SET_ITEM(__pyx_t_4, 0, ((PyObject *)__pyx_v_pymessage));
        __Pyx_GIVEREF(((PyObject *)__pyx_v_pymessage));
        __pyx_t_2 = PyObject_Call(__pyx_t_3, ((PyObject *)__pyx_t_4), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 94; __pyx_clineno = __LINE__; goto __pyx_L5_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

        /* "_PyXAL.pyx":95
 *             file = open(path, "ab")
 *             file.write(pymessage)
 *             file.close()             # <<<<<<<<<<<<<<
 *         except Exception:
 *             pass
 */
        __pyx_t_2 = PyObject_GetAttr(__pyx_v_file, __pyx_n_s__close); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 95; __pyx_clineno = __LINE__; goto __pyx_L5_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_4 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 95; __pyx_clineno = __LINE__; goto __pyx_L5_error;}
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      }
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      goto __pyx_L12_try_end;
      __pyx_L5_error:;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "_PyXAL.pyx":96
 *             file.write(pymessage)
 *             file.close()
 *         except Exception:             # <<<<<<<<<<<<<<
 *             pass
 * 
 */
      __pyx_t_8 = PyErr_ExceptionMatches(__pyx_builtin_Exception);
      if (__pyx_t_8) {
        PyErr_Restore(0,0,0);
        goto __pyx_L6_exception_handled;
      }
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_XGIVEREF(__pyx_t_6);
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_6, __pyx_t_7);
      goto __pyx_L1_error;
      __pyx_L6_exception_handled:;
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_XGIVEREF(__pyx_t_6);
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_6, __pyx_t_7);
      __pyx_L12_try_end:;
    }
    goto __pyx_L4;
  }
  __pyx_L4:;

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_WriteUnraisable("_PyXAL.Log", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_pymessage);
  __Pyx_XDECREF(__pyx_v_path);
  __Pyx_XDECREF(__pyx_v_file);
  __Pyx_RefNannyFinishContext();
}

/* "_PyXAL.pyx":112
 *     cdef bool destroyed
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         '''
 *         this is a wapper class for a C++ class . it should not be initialied outside of the PyXAL module as proper set up would be impossible.
 */

static int __pyx_pf_6_PyXAL_14PyAudioManager___init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6_PyXAL_14PyAudioManager___init__[] = "\n        this is a wapper class for a C++ class . it should not be initialied outside of the PyXAL module as proper set up would be impossible.\n        as such calling the __init__ method will raise a Runtime Error\n        ";
struct wrapperbase __pyx_wrapperbase_6_PyXAL_14PyAudioManager___init__;
static int __pyx_pf_6_PyXAL_14PyAudioManager___init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__");
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;

  /* "_PyXAL.pyx":117
 *         as such calling the __init__ method will raise a Runtime Error
 *         '''
 *         raise RuntimeError("PyAudioManager Can not be initialized from python")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_5), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 117; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  {__pyx_filename = __pyx_f[0]; __pyx_lineno = 117; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_PyXAL.PyAudioManager.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":128
 *     cdef bool destroyed
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         '''
 *         this is a wapper class for a C++ class . it should not be initialied outside of the PyXAL module as proper set up would be impossible.
 */

static int __pyx_pf_6_PyXAL_12SoundWrapper___init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6_PyXAL_12SoundWrapper___init__[] = "\n        this is a wapper class for a C++ class . it should not be initialied outside of the PyXAL module as proper set up would be impossible.\n        as such calling the __init__ method will raise a Runtime Error\n        ";
struct wrapperbase __pyx_wrapperbase_6_PyXAL_12SoundWrapper___init__;
static int __pyx_pf_6_PyXAL_12SoundWrapper___init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__");
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;

  /* "_PyXAL.pyx":133
 *         as such calling the __init__ method will raise a Runtime Error
 *         '''
 *         raise RuntimeError("PySound Can not be initialized from python")             # <<<<<<<<<<<<<<
 * 
 *     def _destroy(self):
 */
  __pyx_t_1 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_7), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 133; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  {__pyx_filename = __pyx_f[0]; __pyx_lineno = 133; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_PyXAL.SoundWrapper.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":135
 *         raise RuntimeError("PySound Can not be initialized from python")
 * 
 *     def _destroy(self):             # <<<<<<<<<<<<<<
 *         if self.isXALInitialized() and not self.destroyed :
 *             XAL.mgr.destroySound(self._pointer)
 */

static PyObject *__pyx_pf_6_PyXAL_12SoundWrapper_1_destroy(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pf_6_PyXAL_12SoundWrapper_1_destroy(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_destroy");

  /* "_PyXAL.pyx":136
 * 
 *     def _destroy(self):
 *         if self.isXALInitialized() and not self.destroyed :             # <<<<<<<<<<<<<<
 *             XAL.mgr.destroySound(self._pointer)
 *             self.destroyed = True
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 136; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 136; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 136; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {
    __pyx_t_4 = (!((struct __pyx_obj_6_PyXAL_SoundWrapper *)__pyx_v_self)->destroyed);
    __pyx_t_5 = __pyx_t_4;
  } else {
    __pyx_t_5 = __pyx_t_3;
  }
  if (__pyx_t_5) {

    /* "_PyXAL.pyx":137
 *     def _destroy(self):
 *         if self.isXALInitialized() and not self.destroyed :
 *             XAL.mgr.destroySound(self._pointer)             # <<<<<<<<<<<<<<
 *             self.destroyed = True
 * 
 */
    try {xal::mgr->destroySound(((struct __pyx_obj_6_PyXAL_SoundWrapper *)__pyx_v_self)->_pointer);} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 137; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}

    /* "_PyXAL.pyx":138
 *         if self.isXALInitialized() and not self.destroyed :
 *             XAL.mgr.destroySound(self._pointer)
 *             self.destroyed = True             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
    ((struct __pyx_obj_6_PyXAL_SoundWrapper *)__pyx_v_self)->destroyed = 1;
    goto __pyx_L5;
  }
  __pyx_L5:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.SoundWrapper._destroy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":140
 *             self.destroyed = True
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if (XAL.mgr != NULL) and (not self.destroyed):
 *             XAL.mgr.destroySound(self._pointer)
 */

static void __pyx_pf_6_PyXAL_12SoundWrapper_2__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pf_6_PyXAL_12SoundWrapper_2__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__dealloc__");

  /* "_PyXAL.pyx":141
 * 
 *     def __dealloc__(self):
 *         if (XAL.mgr != NULL) and (not self.destroyed):             # <<<<<<<<<<<<<<
 *             XAL.mgr.destroySound(self._pointer)
 *             self.destroyed = True
 */
  __pyx_t_1 = (xal::mgr != NULL);
  if (__pyx_t_1) {
    __pyx_t_2 = (!((struct __pyx_obj_6_PyXAL_SoundWrapper *)__pyx_v_self)->destroyed);
    __pyx_t_3 = __pyx_t_2;
  } else {
    __pyx_t_3 = __pyx_t_1;
  }
  if (__pyx_t_3) {

    /* "_PyXAL.pyx":142
 *     def __dealloc__(self):
 *         if (XAL.mgr != NULL) and (not self.destroyed):
 *             XAL.mgr.destroySound(self._pointer)             # <<<<<<<<<<<<<<
 *             self.destroyed = True
 * 
 */
    try {xal::mgr->destroySound(((struct __pyx_obj_6_PyXAL_SoundWrapper *)__pyx_v_self)->_pointer);} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 142; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}

    /* "_PyXAL.pyx":143
 *         if (XAL.mgr != NULL) and (not self.destroyed):
 *             XAL.mgr.destroySound(self._pointer)
 *             self.destroyed = True             # <<<<<<<<<<<<<<
 * 
 *     def isXALInitialized(self):
 */
    ((struct __pyx_obj_6_PyXAL_SoundWrapper *)__pyx_v_self)->destroyed = 1;
    goto __pyx_L5;
  }
  __pyx_L5:;

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_PyXAL.SoundWrapper.__dealloc__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "_PyXAL.pyx":145
 *             self.destroyed = True
 * 
 *     def isXALInitialized(self):             # <<<<<<<<<<<<<<
 *         '''
 *         returns true if the C++ side of the interface to XAL exists
 */

static PyObject *__pyx_pf_6_PyXAL_12SoundWrapper_3isXALInitialized(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6_PyXAL_12SoundWrapper_3isXALInitialized[] = "\n        returns true if the C++ side of the interface to XAL exists\n        ";
static PyObject *__pyx_pf_6_PyXAL_12SoundWrapper_3isXALInitialized(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("isXALInitialized");

  /* "_PyXAL.pyx":149
 *         returns true if the C++ side of the interface to XAL exists
 *         '''
 *         if XAL.mgr != NULL:             # <<<<<<<<<<<<<<
 *             return True
 *         else:
 */
  __pyx_t_1 = (xal::mgr != NULL);
  if (__pyx_t_1) {

    /* "_PyXAL.pyx":150
 *         '''
 *         if XAL.mgr != NULL:
 *             return True             # <<<<<<<<<<<<<<
 *         else:
 *             return False
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyBool_FromLong(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 150; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
    goto __pyx_L5;
  }
  /*else*/ {

    /* "_PyXAL.pyx":152
 *             return True
 *         else:
 *             return False             # <<<<<<<<<<<<<<
 * 
 *     def getName(self):
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyBool_FromLong(0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 152; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
  }
  __pyx_L5:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.SoundWrapper.isXALInitialized", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":154
 *             return False
 * 
 *     def getName(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: returns the string name of the sound. it is normal the full path of teh sound file with out the file extention
 */

static PyObject *__pyx_pf_6_PyXAL_12SoundWrapper_4getName(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6_PyXAL_12SoundWrapper_4getName[] = "\n        @return: returns the string name of the sound. it is normal the full path of teh sound file with out the file extention\n        ";
static PyObject *__pyx_pf_6_PyXAL_12SoundWrapper_4getName(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  hltypes::String __pyx_v_hl_name;
  const char* __pyx_v_name;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  hstr __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getName");

  /* "_PyXAL.pyx":158
 *         @return: returns the string name of the sound. it is normal the full path of teh sound file with out the file extention
 *         '''
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 158; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 158; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 158; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = (!__pyx_t_3);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":159
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_9), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 159; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 159; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "_PyXAL.pyx":160
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         cdef String hl_name = self._pointer.getName()
 */
  if (((struct __pyx_obj_6_PyXAL_SoundWrapper *)__pyx_v_self)->destroyed) {

    /* "_PyXAL.pyx":161
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         cdef String hl_name = self._pointer.getName()
 *         cdef const_char_ptr name = hl_name.c_str()
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_11), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 161; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 161; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "_PyXAL.pyx":162
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         cdef String hl_name = self._pointer.getName()             # <<<<<<<<<<<<<<
 *         cdef const_char_ptr name = hl_name.c_str()
 *         return name
 */
  try {__pyx_t_5 = ((struct __pyx_obj_6_PyXAL_SoundWrapper *)__pyx_v_self)->_pointer->getName();} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 162; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}
  __pyx_v_hl_name = __pyx_t_5;

  /* "_PyXAL.pyx":163
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         cdef String hl_name = self._pointer.getName()
 *         cdef const_char_ptr name = hl_name.c_str()             # <<<<<<<<<<<<<<
 *         return name
 * 
 */
  __pyx_v_name = __pyx_v_hl_name.c_str();

  /* "_PyXAL.pyx":164
 *         cdef String hl_name = self._pointer.getName()
 *         cdef const_char_ptr name = hl_name.c_str()
 *         return name             # <<<<<<<<<<<<<<
 * 
 *     def getFilename(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyBytes_FromString(__pyx_v_name); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 164; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  __pyx_r = ((PyObject *)__pyx_t_2);
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.SoundWrapper.getName", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":166
 *         return name
 * 
 *     def getFilename(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: returns a string containing the file name the sound was loaded from
 */

static PyObject *__pyx_pf_6_PyXAL_12SoundWrapper_5getFilename(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6_PyXAL_12SoundWrapper_5getFilename[] = "\n        @return: returns a string containing the file name the sound was loaded from\n        ";
static PyObject *__pyx_pf_6_PyXAL_12SoundWrapper_5getFilename(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  hltypes::String __pyx_v_hl_name;
  const char* __pyx_v_name;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  hstr __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getFilename");

  /* "_PyXAL.pyx":170
 *         @return: returns a string containing the file name the sound was loaded from
 *         '''
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 170; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 170; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 170; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = (!__pyx_t_3);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":171
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_12), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 171; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 171; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "_PyXAL.pyx":172
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         cdef String hl_name = self._pointer.getFilename()
 */
  if (((struct __pyx_obj_6_PyXAL_SoundWrapper *)__pyx_v_self)->destroyed) {

    /* "_PyXAL.pyx":173
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         cdef String hl_name = self._pointer.getFilename()
 *         cdef const_char_ptr name = hl_name.c_str()
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_13), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 173; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 173; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "_PyXAL.pyx":174
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         cdef String hl_name = self._pointer.getFilename()             # <<<<<<<<<<<<<<
 *         cdef const_char_ptr name = hl_name.c_str()
 *         return name
 */
  try {__pyx_t_5 = ((struct __pyx_obj_6_PyXAL_SoundWrapper *)__pyx_v_self)->_pointer->getFilename();} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 174; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}
  __pyx_v_hl_name = __pyx_t_5;

  /* "_PyXAL.pyx":175
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         cdef String hl_name = self._pointer.getFilename()
 *         cdef const_char_ptr name = hl_name.c_str()             # <<<<<<<<<<<<<<
 *         return name
 * 
 */
  __pyx_v_name = __pyx_v_hl_name.c_str();

  /* "_PyXAL.pyx":176
 *         cdef String hl_name = self._pointer.getFilename()
 *         cdef const_char_ptr name = hl_name.c_str()
 *         return name             # <<<<<<<<<<<<<<
 * 
 *     def getRealFilename(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyBytes_FromString(__pyx_v_name); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 176; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  __pyx_r = ((PyObject *)__pyx_t_2);
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.SoundWrapper.getFilename", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":178
 *         return name
 * 
 *     def getRealFilename(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: returns a string with the full path to the file the string was loaded from
 */

static PyObject *__pyx_pf_6_PyXAL_12SoundWrapper_6getRealFilename(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6_PyXAL_12SoundWrapper_6getRealFilename[] = "\n        @return: returns a string with the full path to the file the string was loaded from\n        ";
static PyObject *__pyx_pf_6_PyXAL_12SoundWrapper_6getRealFilename(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  hltypes::String __pyx_v_hl_name;
  const char* __pyx_v_name;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  hstr __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getRealFilename");

  /* "_PyXAL.pyx":182
 *         @return: returns a string with the full path to the file the string was loaded from
 *         '''
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 182; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 182; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 182; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = (!__pyx_t_3);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":183
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_14), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 183; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 183; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "_PyXAL.pyx":184
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         cdef String hl_name = self._pointer.getRealFilename()
 */
  if (((struct __pyx_obj_6_PyXAL_SoundWrapper *)__pyx_v_self)->destroyed) {

    /* "_PyXAL.pyx":185
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         cdef String hl_name = self._pointer.getRealFilename()
 *         cdef const_char_ptr name = hl_name.c_str()
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_15), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 185; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 185; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "_PyXAL.pyx":186
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         cdef String hl_name = self._pointer.getRealFilename()             # <<<<<<<<<<<<<<
 *         cdef const_char_ptr name = hl_name.c_str()
 *         return name
 */
  try {__pyx_t_5 = ((struct __pyx_obj_6_PyXAL_SoundWrapper *)__pyx_v_self)->_pointer->getRealFilename();} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 186; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}
  __pyx_v_hl_name = __pyx_t_5;

  /* "_PyXAL.pyx":187
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         cdef String hl_name = self._pointer.getRealFilename()
 *         cdef const_char_ptr name = hl_name.c_str()             # <<<<<<<<<<<<<<
 *         return name
 * 
 */
  __pyx_v_name = __pyx_v_hl_name.c_str();

  /* "_PyXAL.pyx":188
 *         cdef String hl_name = self._pointer.getRealFilename()
 *         cdef const_char_ptr name = hl_name.c_str()
 *         return name             # <<<<<<<<<<<<<<
 * 
 *     def getSize(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyBytes_FromString(__pyx_v_name); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 188; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  __pyx_r = ((PyObject *)__pyx_t_2);
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.SoundWrapper.getRealFilename", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":190
 *         return name
 * 
 *     def getSize(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: int the size of the sound data in bits not bytes
 */

static PyObject *__pyx_pf_6_PyXAL_12SoundWrapper_7getSize(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6_PyXAL_12SoundWrapper_7getSize[] = "\n        @return: int the size of the sound data in bits not bytes\n        ";
static PyObject *__pyx_pf_6_PyXAL_12SoundWrapper_7getSize(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  int __pyx_v_size;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getSize");

  /* "_PyXAL.pyx":194
 *         @return: int the size of the sound data in bits not bytes
 *         '''
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 194; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 194; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 194; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = (!__pyx_t_3);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":195
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_16), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 195; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 195; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "_PyXAL.pyx":196
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         cdef int size = self._pointer.getSize()
 */
  if (((struct __pyx_obj_6_PyXAL_SoundWrapper *)__pyx_v_self)->destroyed) {

    /* "_PyXAL.pyx":197
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         cdef int size = self._pointer.getSize()
 *         return size
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_17), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 197; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 197; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "_PyXAL.pyx":198
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         cdef int size = self._pointer.getSize()             # <<<<<<<<<<<<<<
 *         return size
 * 
 */
  try {__pyx_t_5 = ((struct __pyx_obj_6_PyXAL_SoundWrapper *)__pyx_v_self)->_pointer->getSize();} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 198; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}
  __pyx_v_size = __pyx_t_5;

  /* "_PyXAL.pyx":199
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         cdef int size = self._pointer.getSize()
 *         return size             # <<<<<<<<<<<<<<
 * 
 *     def getChannels(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyInt_FromLong(__pyx_v_size); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 199; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.SoundWrapper.getSize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":201
 *         return size
 * 
 *     def getChannels(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: int number of channels the sound has. 1 for mono or 2 for stereo
 */

static PyObject *__pyx_pf_6_PyXAL_12SoundWrapper_8getChannels(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6_PyXAL_12SoundWrapper_8getChannels[] = "\n        @return: int number of channels the sound has. 1 for mono or 2 for stereo \n        ";
static PyObject *__pyx_pf_6_PyXAL_12SoundWrapper_8getChannels(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  int __pyx_v_channels;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getChannels");

  /* "_PyXAL.pyx":205
 *         @return: int number of channels the sound has. 1 for mono or 2 for stereo
 *         '''
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 205; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 205; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 205; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = (!__pyx_t_3);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":206
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_18), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 206; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 206; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "_PyXAL.pyx":207
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         cdef int channels = self._pointer.getChannels()
 */
  if (((struct __pyx_obj_6_PyXAL_SoundWrapper *)__pyx_v_self)->destroyed) {

    /* "_PyXAL.pyx":208
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         cdef int channels = self._pointer.getChannels()
 *         return channels
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_19), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 208; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 208; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "_PyXAL.pyx":209
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         cdef int channels = self._pointer.getChannels()             # <<<<<<<<<<<<<<
 *         return channels
 * 
 */
  try {__pyx_t_5 = ((struct __pyx_obj_6_PyXAL_SoundWrapper *)__pyx_v_self)->_pointer->getChannels();} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 209; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}
  __pyx_v_channels = __pyx_t_5;

  /* "_PyXAL.pyx":210
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         cdef int channels = self._pointer.getChannels()
 *         return channels             # <<<<<<<<<<<<<<
 * 
 *     def getSamplingRate(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyInt_FromLong(__pyx_v_channels); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 210; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.SoundWrapper.getChannels", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":212
 *         return channels
 * 
 *     def getSamplingRate(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: int the sampeling rate for the sound in samples per second
 */

static PyObject *__pyx_pf_6_PyXAL_12SoundWrapper_9getSamplingRate(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6_PyXAL_12SoundWrapper_9getSamplingRate[] = "\n        @return: int the sampeling rate for the sound in samples per second\n        ";
static PyObject *__pyx_pf_6_PyXAL_12SoundWrapper_9getSamplingRate(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  int __pyx_v_rate;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getSamplingRate");

  /* "_PyXAL.pyx":216
 *         @return: int the sampeling rate for the sound in samples per second
 *         '''
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 216; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 216; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 216; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = (!__pyx_t_3);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":217
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_20), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 217; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 217; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "_PyXAL.pyx":218
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         cdef int rate = self._pointer.getSamplingRate()
 */
  if (((struct __pyx_obj_6_PyXAL_SoundWrapper *)__pyx_v_self)->destroyed) {

    /* "_PyXAL.pyx":219
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         cdef int rate = self._pointer.getSamplingRate()
 *         return rate
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_21), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 219; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 219; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "_PyXAL.pyx":220
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         cdef int rate = self._pointer.getSamplingRate()             # <<<<<<<<<<<<<<
 *         return rate
 * 
 */
  try {__pyx_t_5 = ((struct __pyx_obj_6_PyXAL_SoundWrapper *)__pyx_v_self)->_pointer->getSamplingRate();} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 220; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}
  __pyx_v_rate = __pyx_t_5;

  /* "_PyXAL.pyx":221
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         cdef int rate = self._pointer.getSamplingRate()
 *         return rate             # <<<<<<<<<<<<<<
 * 
 *     def getBitsPerSample(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyInt_FromLong(__pyx_v_rate); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 221; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.SoundWrapper.getSamplingRate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":223
 *         return rate
 * 
 *     def getBitsPerSample(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: int the bits per sample of data in the sound. usualy 8, 16, or 24, possibly 32 not sure
 */

static PyObject *__pyx_pf_6_PyXAL_12SoundWrapper_10getBitsPerSample(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6_PyXAL_12SoundWrapper_10getBitsPerSample[] = "\n        @return: int the bits per sample of data in the sound. usualy 8, 16, or 24, possibly 32 not sure\n        ";
static PyObject *__pyx_pf_6_PyXAL_12SoundWrapper_10getBitsPerSample(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  int __pyx_v_rate;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getBitsPerSample");

  /* "_PyXAL.pyx":227
 *         @return: int the bits per sample of data in the sound. usualy 8, 16, or 24, possibly 32 not sure
 *         '''
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 227; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 227; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 227; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = (!__pyx_t_3);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":228
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_22), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 228; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 228; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "_PyXAL.pyx":229
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         cdef int rate = self._pointer.getBitsPerSample()
 */
  if (((struct __pyx_obj_6_PyXAL_SoundWrapper *)__pyx_v_self)->destroyed) {

    /* "_PyXAL.pyx":230
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         cdef int rate = self._pointer.getBitsPerSample()
 *         return rate
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_23), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 230; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 230; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "_PyXAL.pyx":231
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         cdef int rate = self._pointer.getBitsPerSample()             # <<<<<<<<<<<<<<
 *         return rate
 * 
 */
  try {__pyx_t_5 = ((struct __pyx_obj_6_PyXAL_SoundWrapper *)__pyx_v_self)->_pointer->getBitsPerSample();} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 231; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}
  __pyx_v_rate = __pyx_t_5;

  /* "_PyXAL.pyx":232
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         cdef int rate = self._pointer.getBitsPerSample()
 *         return rate             # <<<<<<<<<<<<<<
 * 
 *     def getDuration(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyInt_FromLong(__pyx_v_rate); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 232; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.SoundWrapper.getBitsPerSample", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":234
 *         return rate
 * 
 *     def getDuration(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: float duration of the sound in seconds. it is a floating point number to acound for fractions of a second
 */

static PyObject *__pyx_pf_6_PyXAL_12SoundWrapper_11getDuration(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6_PyXAL_12SoundWrapper_11getDuration[] = "\n        @return: float duration of the sound in seconds. it is a floating point number to acound for fractions of a second\n        ";
static PyObject *__pyx_pf_6_PyXAL_12SoundWrapper_11getDuration(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  float __pyx_v_duration;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  float __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getDuration");

  /* "_PyXAL.pyx":238
 *         @return: float duration of the sound in seconds. it is a floating point number to acound for fractions of a second
 *         '''
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 238; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 238; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 238; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = (!__pyx_t_3);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":239
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_24), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 239; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 239; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "_PyXAL.pyx":240
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         cdef float duration = self._pointer.getDuration()
 */
  if (((struct __pyx_obj_6_PyXAL_SoundWrapper *)__pyx_v_self)->destroyed) {

    /* "_PyXAL.pyx":241
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         cdef float duration = self._pointer.getDuration()
 *         return duration
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_25), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 241; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 241; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "_PyXAL.pyx":242
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         cdef float duration = self._pointer.getDuration()             # <<<<<<<<<<<<<<
 *         return duration
 * 
 */
  try {__pyx_t_5 = ((struct __pyx_obj_6_PyXAL_SoundWrapper *)__pyx_v_self)->_pointer->getDuration();} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 242; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}
  __pyx_v_duration = __pyx_t_5;

  /* "_PyXAL.pyx":243
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         cdef float duration = self._pointer.getDuration()
 *         return duration             # <<<<<<<<<<<<<<
 * 
 *     def getFormat(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_duration); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 243; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.SoundWrapper.getDuration", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":245
 *         return duration
 * 
 *     def getFormat(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: int the intrnal designation of the sound format. coresponds to a file type but as of now there is no way to tell for certin which is which
 */

static PyObject *__pyx_pf_6_PyXAL_12SoundWrapper_12getFormat(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6_PyXAL_12SoundWrapper_12getFormat[] = "\n        @return: int the intrnal designation of the sound format. coresponds to a file type but as of now there is no way to tell for certin which is which \n            as the nubers will change depending on what formats are currently suported by XAL\n        ";
static PyObject *__pyx_pf_6_PyXAL_12SoundWrapper_12getFormat(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  int __pyx_v_format;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  enum xal::Format __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getFormat");

  /* "_PyXAL.pyx":250
 *             as the nubers will change depending on what formats are currently suported by XAL
 *         '''
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 250; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 250; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 250; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = (!__pyx_t_3);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":251
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_26), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 251; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 251; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "_PyXAL.pyx":252
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         cdef int format = <int>self._pointer.getFormat()
 */
  if (((struct __pyx_obj_6_PyXAL_SoundWrapper *)__pyx_v_self)->destroyed) {

    /* "_PyXAL.pyx":253
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         cdef int format = <int>self._pointer.getFormat()
 *         return format
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_27), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 253; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 253; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "_PyXAL.pyx":254
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         cdef int format = <int>self._pointer.getFormat()             # <<<<<<<<<<<<<<
 *         return format
 * 
 */
  try {__pyx_t_5 = ((struct __pyx_obj_6_PyXAL_SoundWrapper *)__pyx_v_self)->_pointer->getFormat();} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 254; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}
  __pyx_v_format = ((int)__pyx_t_5);

  /* "_PyXAL.pyx":255
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         cdef int format = <int>self._pointer.getFormat()
 *         return format             # <<<<<<<<<<<<<<
 * 
 *     def isStreamed(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyInt_FromLong(__pyx_v_format); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 255; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.SoundWrapper.getFormat", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":257
 *         return format
 * 
 *     def isStreamed(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: bool is the sound being streamed from it's file to the player? or is it comleatly loaded into memory.
 */

static PyObject *__pyx_pf_6_PyXAL_12SoundWrapper_13isStreamed(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6_PyXAL_12SoundWrapper_13isStreamed[] = "\n        @return: bool is the sound being streamed from it's file to the player? or is it comleatly loaded into memory. \n            should always return false in PyXAL as PyXAL uses full decoding mode\n        ";
static PyObject *__pyx_pf_6_PyXAL_12SoundWrapper_13isStreamed(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  int __pyx_v_streamed;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  bool __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("isStreamed");

  /* "_PyXAL.pyx":262
 *             should always return false in PyXAL as PyXAL uses full decoding mode
 *         '''
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 262; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 262; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 262; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = (!__pyx_t_3);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":263
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_28), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 263; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 263; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "_PyXAL.pyx":264
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         cdef bint streamed = self._pointer.isStreamed()
 */
  if (((struct __pyx_obj_6_PyXAL_SoundWrapper *)__pyx_v_self)->destroyed) {

    /* "_PyXAL.pyx":265
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         cdef bint streamed = self._pointer.isStreamed()
 *         return streamed
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_29), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 265; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 265; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "_PyXAL.pyx":266
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         cdef bint streamed = self._pointer.isStreamed()             # <<<<<<<<<<<<<<
 *         return streamed
 * 
 */
  try {__pyx_t_5 = ((struct __pyx_obj_6_PyXAL_SoundWrapper *)__pyx_v_self)->_pointer->isStreamed();} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 266; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}
  __pyx_v_streamed = __pyx_t_5;

  /* "_PyXAL.pyx":267
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         cdef bint streamed = self._pointer.isStreamed()
 *         return streamed             # <<<<<<<<<<<<<<
 * 
 *     def readPcmData(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_streamed); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 267; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.SoundWrapper.isStreamed", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":269
 *         return streamed
 * 
 *     def readPcmData(self):             # <<<<<<<<<<<<<<
 *         '''
 *         read the pcm data of the sound and return it the format of said data can be determined from the size, chanels, bits per sample and sampleling rate of the sound
 */

static PyObject *__pyx_pf_6_PyXAL_12SoundWrapper_14readPcmData(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6_PyXAL_12SoundWrapper_14readPcmData[] = "\n        read the pcm data of the sound and return it the format of said data can be determined from the size, chanels, bits per sample and sampleling rate of the sound\n        @return: a 2 tuple of (number of bits read, string of bytes read)\n        ";
static PyObject *__pyx_pf_6_PyXAL_12SoundWrapper_14readPcmData(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  unsigned char *__pyx_v_pcm_data;
  int __pyx_v_pcm_size;
  char *__pyx_v_c_data;
  PyObject *__pyx_v_data = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("readPcmData");

  /* "_PyXAL.pyx":274
 *         @return: a 2 tuple of (number of bits read, string of bytes read)
 *         '''
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 274; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 274; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 274; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = (!__pyx_t_3);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":275
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_30), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 275; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 275; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "_PyXAL.pyx":276
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         cdef unsigned char* pcm_data
 */
  if (((struct __pyx_obj_6_PyXAL_SoundWrapper *)__pyx_v_self)->destroyed) {

    /* "_PyXAL.pyx":277
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         cdef unsigned char* pcm_data
 *         cdef int pcm_size
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_31), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 277; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 277; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "_PyXAL.pyx":281
 *         cdef int pcm_size
 *         cdef char* c_data
 *         data = ""             # <<<<<<<<<<<<<<
 *         try:
 *             pcm_size = self._pointer.readPcmData(&pcm_data)
 */
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_1));
  __pyx_v_data = ((PyObject *)__pyx_kp_s_1);

  /* "_PyXAL.pyx":282
 *         cdef char* c_data
 *         data = ""
 *         try:             # <<<<<<<<<<<<<<
 *             pcm_size = self._pointer.readPcmData(&pcm_data)
 *             if pcm_size > 0:
 */
  /*try:*/ {

    /* "_PyXAL.pyx":283
 *         data = ""
 *         try:
 *             pcm_size = self._pointer.readPcmData(&pcm_data)             # <<<<<<<<<<<<<<
 *             if pcm_size > 0:
 *                 c_data = <char*>pcm_data
 */
    try {__pyx_t_5 = ((struct __pyx_obj_6_PyXAL_SoundWrapper *)__pyx_v_self)->_pointer->readPcmData((&__pyx_v_pcm_data));} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 283; __pyx_clineno = __LINE__; goto __pyx_L8;}}
    __pyx_v_pcm_size = __pyx_t_5;

    /* "_PyXAL.pyx":284
 *         try:
 *             pcm_size = self._pointer.readPcmData(&pcm_data)
 *             if pcm_size > 0:             # <<<<<<<<<<<<<<
 *                 c_data = <char*>pcm_data
 *                 data = c_data[:pcm_size]
 */
    __pyx_t_4 = (__pyx_v_pcm_size > 0);
    if (__pyx_t_4) {

      /* "_PyXAL.pyx":285
 *             pcm_size = self._pointer.readPcmData(&pcm_data)
 *             if pcm_size > 0:
 *                 c_data = <char*>pcm_data             # <<<<<<<<<<<<<<
 *                 data = c_data[:pcm_size]
 *         finally:
 */
      __pyx_v_c_data = ((char *)__pyx_v_pcm_data);

      /* "_PyXAL.pyx":286
 *             if pcm_size > 0:
 *                 c_data = <char*>pcm_data
 *                 data = c_data[:pcm_size]             # <<<<<<<<<<<<<<
 *         finally:
 *             free(pcm_data)
 */
      __pyx_t_2 = PyBytes_FromStringAndSize(__pyx_v_c_data + 0, __pyx_v_pcm_size - 0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 286; __pyx_clineno = __LINE__; goto __pyx_L8;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_2));
      __Pyx_DECREF(__pyx_v_data);
      __pyx_v_data = ((PyObject *)__pyx_t_2);
      __pyx_t_2 = 0;
      goto __pyx_L10;
    }
    __pyx_L10:;
  }

  /* "_PyXAL.pyx":288
 *                 data = c_data[:pcm_size]
 *         finally:
 *             free(pcm_data)             # <<<<<<<<<<<<<<
 *             pcm_data = NULL
 *         return (pcm_size, data)
 */
  /*finally:*/ {
    int __pyx_why;
    PyObject *__pyx_exc_type, *__pyx_exc_value, *__pyx_exc_tb;
    int __pyx_exc_lineno;
    __pyx_exc_type = 0; __pyx_exc_value = 0; __pyx_exc_tb = 0; __pyx_exc_lineno = 0;
    __pyx_why = 0; goto __pyx_L9;
    __pyx_L8: {
      __pyx_why = 4;
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_ErrFetch(&__pyx_exc_type, &__pyx_exc_value, &__pyx_exc_tb);
      __pyx_exc_lineno = __pyx_lineno;
      goto __pyx_L9;
    }
    __pyx_L9:;
    free(__pyx_v_pcm_data);

    /* "_PyXAL.pyx":289
 *         finally:
 *             free(pcm_data)
 *             pcm_data = NULL             # <<<<<<<<<<<<<<
 *         return (pcm_size, data)
 * 
 */
    __pyx_v_pcm_data = NULL;
    switch (__pyx_why) {
      case 4: {
        __Pyx_ErrRestore(__pyx_exc_type, __pyx_exc_value, __pyx_exc_tb);
        __pyx_lineno = __pyx_exc_lineno;
        __pyx_exc_type = 0;
        __pyx_exc_value = 0;
        __pyx_exc_tb = 0;
        goto __pyx_L1_error;
      }
    }
  }

  /* "_PyXAL.pyx":290
 *             free(pcm_data)
 *             pcm_data = NULL
 *         return (pcm_size, data)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyInt_FromLong(__pyx_v_pcm_size); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 290; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 290; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_data);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_data);
  __Pyx_GIVEREF(__pyx_v_data);
  __pyx_t_2 = 0;
  __pyx_r = ((PyObject *)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.SoundWrapper.readPcmData", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_data);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":301
 *     cdef bool destroyed
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         '''
 *         this is a wapper class for a C++ class . it should not be initialied outside of the PyXAL module as proper set up would be impossible.
 */

static int __pyx_pf_6_PyXAL_13PlayerWrapper___init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6_PyXAL_13PlayerWrapper___init__[] = "\n        this is a wapper class for a C++ class . it should not be initialied outside of the PyXAL module as proper set up would be impossible.\n        as such calling the __init__ method will raise a Runtime Error\n        ";
struct wrapperbase __pyx_wrapperbase_6_PyXAL_13PlayerWrapper___init__;
static int __pyx_pf_6_PyXAL_13PlayerWrapper___init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__");
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;

  /* "_PyXAL.pyx":306
 *         as such calling the __init__ method will raise a Runtime Error
 *         '''
 *         raise RuntimeError("PyPlayer Can not be initialized from python")             # <<<<<<<<<<<<<<
 * 
 *     def _destroy(self):
 */
  __pyx_t_1 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_33), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 306; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  {__pyx_filename = __pyx_f[0]; __pyx_lineno = 306; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_PyXAL.PlayerWrapper.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":308
 *         raise RuntimeError("PyPlayer Can not be initialized from python")
 * 
 *     def _destroy(self):             # <<<<<<<<<<<<<<
 *         if self.isXALInitialized() and not self.destroyed:
 *             XAL.mgr.destroyPlayer(self._pointer)
 */

static PyObject *__pyx_pf_6_PyXAL_13PlayerWrapper_1_destroy(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pf_6_PyXAL_13PlayerWrapper_1_destroy(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_destroy");

  /* "_PyXAL.pyx":309
 * 
 *     def _destroy(self):
 *         if self.isXALInitialized() and not self.destroyed:             # <<<<<<<<<<<<<<
 *             XAL.mgr.destroyPlayer(self._pointer)
 *             self.destroyed = True
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 309; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 309; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 309; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {
    __pyx_t_4 = (!((struct __pyx_obj_6_PyXAL_PlayerWrapper *)__pyx_v_self)->destroyed);
    __pyx_t_5 = __pyx_t_4;
  } else {
    __pyx_t_5 = __pyx_t_3;
  }
  if (__pyx_t_5) {

    /* "_PyXAL.pyx":310
 *     def _destroy(self):
 *         if self.isXALInitialized() and not self.destroyed:
 *             XAL.mgr.destroyPlayer(self._pointer)             # <<<<<<<<<<<<<<
 *             self.destroyed = True
 * 
 */
    try {xal::mgr->destroyPlayer(((struct __pyx_obj_6_PyXAL_PlayerWrapper *)__pyx_v_self)->_pointer);} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 310; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}

    /* "_PyXAL.pyx":311
 *         if self.isXALInitialized() and not self.destroyed:
 *             XAL.mgr.destroyPlayer(self._pointer)
 *             self.destroyed = True             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
    ((struct __pyx_obj_6_PyXAL_PlayerWrapper *)__pyx_v_self)->destroyed = 1;
    goto __pyx_L5;
  }
  __pyx_L5:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.PlayerWrapper._destroy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":313
 *             self.destroyed = True
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if (XAL.mgr != NULL) and (not self.destroyed):
 *             XAL.mgr.destroyPlayer(self._pointer)
 */

static void __pyx_pf_6_PyXAL_13PlayerWrapper_2__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pf_6_PyXAL_13PlayerWrapper_2__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__dealloc__");

  /* "_PyXAL.pyx":314
 * 
 *     def __dealloc__(self):
 *         if (XAL.mgr != NULL) and (not self.destroyed):             # <<<<<<<<<<<<<<
 *             XAL.mgr.destroyPlayer(self._pointer)
 *             self.destroyed = True
 */
  __pyx_t_1 = (xal::mgr != NULL);
  if (__pyx_t_1) {
    __pyx_t_2 = (!((struct __pyx_obj_6_PyXAL_PlayerWrapper *)__pyx_v_self)->destroyed);
    __pyx_t_3 = __pyx_t_2;
  } else {
    __pyx_t_3 = __pyx_t_1;
  }
  if (__pyx_t_3) {

    /* "_PyXAL.pyx":315
 *     def __dealloc__(self):
 *         if (XAL.mgr != NULL) and (not self.destroyed):
 *             XAL.mgr.destroyPlayer(self._pointer)             # <<<<<<<<<<<<<<
 *             self.destroyed = True
 * 
 */
    try {xal::mgr->destroyPlayer(((struct __pyx_obj_6_PyXAL_PlayerWrapper *)__pyx_v_self)->_pointer);} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 315; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}

    /* "_PyXAL.pyx":316
 *         if (XAL.mgr != NULL) and (not self.destroyed):
 *             XAL.mgr.destroyPlayer(self._pointer)
 *             self.destroyed = True             # <<<<<<<<<<<<<<
 * 
 *     def isXALInitialized(self):
 */
    ((struct __pyx_obj_6_PyXAL_PlayerWrapper *)__pyx_v_self)->destroyed = 1;
    goto __pyx_L5;
  }
  __pyx_L5:;

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_PyXAL.PlayerWrapper.__dealloc__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "_PyXAL.pyx":318
 *             self.destroyed = True
 * 
 *     def isXALInitialized(self):             # <<<<<<<<<<<<<<
 *         '''
 *         returns true if the C++ side of the interface to XAL exists
 */

static PyObject *__pyx_pf_6_PyXAL_13PlayerWrapper_3isXALInitialized(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6_PyXAL_13PlayerWrapper_3isXALInitialized[] = "\n        returns true if the C++ side of the interface to XAL exists\n        ";
static PyObject *__pyx_pf_6_PyXAL_13PlayerWrapper_3isXALInitialized(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("isXALInitialized");

  /* "_PyXAL.pyx":322
 *         returns true if the C++ side of the interface to XAL exists
 *         '''
 *         if XAL.mgr != NULL:             # <<<<<<<<<<<<<<
 *             return True
 *         else:
 */
  __pyx_t_1 = (xal::mgr != NULL);
  if (__pyx_t_1) {

    /* "_PyXAL.pyx":323
 *         '''
 *         if XAL.mgr != NULL:
 *             return True             # <<<<<<<<<<<<<<
 *         else:
 *             return False
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyBool_FromLong(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 323; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
    goto __pyx_L5;
  }
  /*else*/ {

    /* "_PyXAL.pyx":325
 *             return True
 *         else:
 *             return False             # <<<<<<<<<<<<<<
 * 
 *     def getGain(self):
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyBool_FromLong(0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 325; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
  }
  __pyx_L5:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.PlayerWrapper.isXALInitialized", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":327
 *             return False
 * 
 *     def getGain(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: float the current gain of the player (also knows as volume)
 */

static PyObject *__pyx_pf_6_PyXAL_13PlayerWrapper_4getGain(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6_PyXAL_13PlayerWrapper_4getGain[] = "\n        @return: float the current gain of the player (also knows as volume)\n        ";
static PyObject *__pyx_pf_6_PyXAL_13PlayerWrapper_4getGain(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  float __pyx_v_gain;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  float __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getGain");

  /* "_PyXAL.pyx":331
 *         @return: float the current gain of the player (also knows as volume)
 *         '''
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 331; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 331; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 331; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = (!__pyx_t_3);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":332
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_34), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 332; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 332; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "_PyXAL.pyx":333
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         cdef float gain = self._pointer.getGain()
 */
  if (((struct __pyx_obj_6_PyXAL_PlayerWrapper *)__pyx_v_self)->destroyed) {

    /* "_PyXAL.pyx":334
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         cdef float gain = self._pointer.getGain()
 *         return gain
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_35), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 334; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 334; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "_PyXAL.pyx":335
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         cdef float gain = self._pointer.getGain()             # <<<<<<<<<<<<<<
 *         return gain
 * 
 */
  try {__pyx_t_5 = ((struct __pyx_obj_6_PyXAL_PlayerWrapper *)__pyx_v_self)->_pointer->getGain();} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 335; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}
  __pyx_v_gain = __pyx_t_5;

  /* "_PyXAL.pyx":336
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         cdef float gain = self._pointer.getGain()
 *         return gain             # <<<<<<<<<<<<<<
 * 
 *     def setGain(self, float value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_gain); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 336; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.PlayerWrapper.getGain", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":338
 *         return gain
 * 
 *     def setGain(self, float value):             # <<<<<<<<<<<<<<
 *         '''
 *         set the gain of the player (also knows as volume)
 */

static PyObject *__pyx_pf_6_PyXAL_13PlayerWrapper_5setGain(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static char __pyx_doc_6_PyXAL_13PlayerWrapper_5setGain[] = "\n        set the gain of the player (also knows as volume)\n        @param value: float the value of the volume to set 1.0 is normal 2.0 is twice as loud 0.5 is half volume ect.\n        ";
static PyObject *__pyx_pf_6_PyXAL_13PlayerWrapper_5setGain(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  float __pyx_v_value;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setGain");
  assert(__pyx_arg_value); {
    __pyx_v_value = __pyx_PyFloat_AsDouble(__pyx_arg_value); if (unlikely((__pyx_v_value == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 338; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("_PyXAL.PlayerWrapper.setGain", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "_PyXAL.pyx":343
 *         @param value: float the value of the volume to set 1.0 is normal 2.0 is twice as loud 0.5 is half volume ect.
 *         '''
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 343; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 343; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 343; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = (!__pyx_t_3);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":344
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_36), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 344; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 344; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "_PyXAL.pyx":345
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         self._pointer.setGain(value)
 */
  if (((struct __pyx_obj_6_PyXAL_PlayerWrapper *)__pyx_v_self)->destroyed) {

    /* "_PyXAL.pyx":346
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         self._pointer.setGain(value)
 * 
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_37), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 346; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 346; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "_PyXAL.pyx":347
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         self._pointer.setGain(value)             # <<<<<<<<<<<<<<
 * 
 *     def getPitch(self):
 */
  try {((struct __pyx_obj_6_PyXAL_PlayerWrapper *)__pyx_v_self)->_pointer->setGain(__pyx_v_value);} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 347; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.PlayerWrapper.setGain", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":349
 *         self._pointer.setGain(value)
 * 
 *     def getPitch(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: float the current pitch of the player
 */

static PyObject *__pyx_pf_6_PyXAL_13PlayerWrapper_6getPitch(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6_PyXAL_13PlayerWrapper_6getPitch[] = "\n        @return: float the current pitch of the player\n        ";
static PyObject *__pyx_pf_6_PyXAL_13PlayerWrapper_6getPitch(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  float __pyx_v_offset;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  float __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getPitch");

  /* "_PyXAL.pyx":353
 *         @return: float the current pitch of the player
 *         '''
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 353; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 353; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 353; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = (!__pyx_t_3);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":354
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_38), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 354; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 354; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "_PyXAL.pyx":355
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         cdef float offset = self._pointer.getPitch()
 */
  if (((struct __pyx_obj_6_PyXAL_PlayerWrapper *)__pyx_v_self)->destroyed) {

    /* "_PyXAL.pyx":356
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         cdef float offset = self._pointer.getPitch()
 *         return offset
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_39), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 356; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 356; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "_PyXAL.pyx":357
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         cdef float offset = self._pointer.getPitch()             # <<<<<<<<<<<<<<
 *         return offset
 * 
 */
  try {__pyx_t_5 = ((struct __pyx_obj_6_PyXAL_PlayerWrapper *)__pyx_v_self)->_pointer->getPitch();} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 357; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}
  __pyx_v_offset = __pyx_t_5;

  /* "_PyXAL.pyx":358
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         cdef float offset = self._pointer.getPitch()
 *         return offset             # <<<<<<<<<<<<<<
 * 
 *     def setPitch(self, float value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_offset); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 358; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.PlayerWrapper.getPitch", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":360
 *         return offset
 * 
 *     def setPitch(self, float value):             # <<<<<<<<<<<<<<
 *         '''
 *         set the current pitch of the player
 */

static PyObject *__pyx_pf_6_PyXAL_13PlayerWrapper_7setPitch(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static char __pyx_doc_6_PyXAL_13PlayerWrapper_7setPitch[] = "\n        set the current pitch of the player\n        @param value: float the value of the pitch to set to set 1.0 is normal 2.0 is a 200% shift 0.5 is a 50% shift\n        ";
static PyObject *__pyx_pf_6_PyXAL_13PlayerWrapper_7setPitch(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  float __pyx_v_value;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setPitch");
  assert(__pyx_arg_value); {
    __pyx_v_value = __pyx_PyFloat_AsDouble(__pyx_arg_value); if (unlikely((__pyx_v_value == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 360; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("_PyXAL.PlayerWrapper.setPitch", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "_PyXAL.pyx":365
 *         @param value: float the value of the pitch to set to set 1.0 is normal 2.0 is a 200% shift 0.5 is a 50% shift
 *         '''
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 365; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 365; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 365; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = (!__pyx_t_3);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":366
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_40), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 366; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 366; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "_PyXAL.pyx":367
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         self._pointer.setPitch(value)
 */
  if (((struct __pyx_obj_6_PyXAL_PlayerWrapper *)__pyx_v_self)->destroyed) {

    /* "_PyXAL.pyx":368
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         self._pointer.setPitch(value)
 * 
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_41), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 368; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 368; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "_PyXAL.pyx":369
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         self._pointer.setPitch(value)             # <<<<<<<<<<<<<<
 * 
 *     def getName(self):
 */
  try {((struct __pyx_obj_6_PyXAL_PlayerWrapper *)__pyx_v_self)->_pointer->setPitch(__pyx_v_value);} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 369; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.PlayerWrapper.setPitch", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":371
 *         self._pointer.setPitch(value)
 * 
 *     def getName(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: returns the string name of the sound. it is normal the full path of teh sound file with out the file extention
 */

static PyObject *__pyx_pf_6_PyXAL_13PlayerWrapper_8getName(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6_PyXAL_13PlayerWrapper_8getName[] = "\n        @return: returns the string name of the sound. it is normal the full path of teh sound file with out the file extention\n        ";
static PyObject *__pyx_pf_6_PyXAL_13PlayerWrapper_8getName(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  hltypes::String __pyx_v_hl_name;
  const char* __pyx_v_name;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  hstr __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getName");

  /* "_PyXAL.pyx":375
 *         @return: returns the string name of the sound. it is normal the full path of teh sound file with out the file extention
 *         '''
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 375; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 375; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 375; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = (!__pyx_t_3);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":376
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_42), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 376; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 376; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "_PyXAL.pyx":377
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         cdef String hl_name = self._pointer.getName()
 */
  if (((struct __pyx_obj_6_PyXAL_PlayerWrapper *)__pyx_v_self)->destroyed) {

    /* "_PyXAL.pyx":378
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         cdef String hl_name = self._pointer.getName()
 *         cdef const_char_ptr name = hl_name.c_str()
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_43), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 378; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 378; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "_PyXAL.pyx":379
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         cdef String hl_name = self._pointer.getName()             # <<<<<<<<<<<<<<
 *         cdef const_char_ptr name = hl_name.c_str()
 *         return name
 */
  try {__pyx_t_5 = ((struct __pyx_obj_6_PyXAL_PlayerWrapper *)__pyx_v_self)->_pointer->getName();} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 379; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}
  __pyx_v_hl_name = __pyx_t_5;

  /* "_PyXAL.pyx":380
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         cdef String hl_name = self._pointer.getName()
 *         cdef const_char_ptr name = hl_name.c_str()             # <<<<<<<<<<<<<<
 *         return name
 * 
 */
  __pyx_v_name = __pyx_v_hl_name.c_str();

  /* "_PyXAL.pyx":381
 *         cdef String hl_name = self._pointer.getName()
 *         cdef const_char_ptr name = hl_name.c_str()
 *         return name             # <<<<<<<<<<<<<<
 * 
 *     def getFilename(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyBytes_FromString(__pyx_v_name); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 381; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  __pyx_r = ((PyObject *)__pyx_t_2);
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.PlayerWrapper.getName", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":383
 *         return name
 * 
 *     def getFilename(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: returns a string containing the file name the sound was loaded from
 */

static PyObject *__pyx_pf_6_PyXAL_13PlayerWrapper_9getFilename(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6_PyXAL_13PlayerWrapper_9getFilename[] = "\n        @return: returns a string containing the file name the sound was loaded from\n        ";
static PyObject *__pyx_pf_6_PyXAL_13PlayerWrapper_9getFilename(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  hltypes::String __pyx_v_hl_name;
  const char* __pyx_v_name;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  hstr __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getFilename");

  /* "_PyXAL.pyx":387
 *         @return: returns a string containing the file name the sound was loaded from
 *         '''
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 387; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 387; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 387; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = (!__pyx_t_3);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":388
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_44), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 388; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 388; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "_PyXAL.pyx":389
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         cdef String hl_name = self._pointer.getFilename()
 */
  if (((struct __pyx_obj_6_PyXAL_PlayerWrapper *)__pyx_v_self)->destroyed) {

    /* "_PyXAL.pyx":390
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         cdef String hl_name = self._pointer.getFilename()
 *         cdef const_char_ptr name = hl_name.c_str()
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_45), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 390; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 390; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "_PyXAL.pyx":391
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         cdef String hl_name = self._pointer.getFilename()             # <<<<<<<<<<<<<<
 *         cdef const_char_ptr name = hl_name.c_str()
 *         return name
 */
  try {__pyx_t_5 = ((struct __pyx_obj_6_PyXAL_PlayerWrapper *)__pyx_v_self)->_pointer->getFilename();} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 391; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}
  __pyx_v_hl_name = __pyx_t_5;

  /* "_PyXAL.pyx":392
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         cdef String hl_name = self._pointer.getFilename()
 *         cdef const_char_ptr name = hl_name.c_str()             # <<<<<<<<<<<<<<
 *         return name
 * 
 */
  __pyx_v_name = __pyx_v_hl_name.c_str();

  /* "_PyXAL.pyx":393
 *         cdef String hl_name = self._pointer.getFilename()
 *         cdef const_char_ptr name = hl_name.c_str()
 *         return name             # <<<<<<<<<<<<<<
 * 
 *     def getRealFilename(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyBytes_FromString(__pyx_v_name); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 393; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  __pyx_r = ((PyObject *)__pyx_t_2);
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.PlayerWrapper.getFilename", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":395
 *         return name
 * 
 *     def getRealFilename(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: returns a string with the full path to the file the string was loaded from
 */

static PyObject *__pyx_pf_6_PyXAL_13PlayerWrapper_10getRealFilename(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6_PyXAL_13PlayerWrapper_10getRealFilename[] = "\n        @return: returns a string with the full path to the file the string was loaded from\n        ";
static PyObject *__pyx_pf_6_PyXAL_13PlayerWrapper_10getRealFilename(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  hltypes::String __pyx_v_hl_name;
  const char* __pyx_v_name;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  hstr __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getRealFilename");

  /* "_PyXAL.pyx":399
 *         @return: returns a string with the full path to the file the string was loaded from
 *         '''
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 399; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 399; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 399; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = (!__pyx_t_3);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":400
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_46), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 400; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 400; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "_PyXAL.pyx":401
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         cdef String hl_name = self._pointer.getRealFilename()
 */
  if (((struct __pyx_obj_6_PyXAL_PlayerWrapper *)__pyx_v_self)->destroyed) {

    /* "_PyXAL.pyx":402
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         cdef String hl_name = self._pointer.getRealFilename()
 *         cdef const_char_ptr name = hl_name.c_str()
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_47), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 402; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 402; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "_PyXAL.pyx":403
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         cdef String hl_name = self._pointer.getRealFilename()             # <<<<<<<<<<<<<<
 *         cdef const_char_ptr name = hl_name.c_str()
 *         return name
 */
  try {__pyx_t_5 = ((struct __pyx_obj_6_PyXAL_PlayerWrapper *)__pyx_v_self)->_pointer->getRealFilename();} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 403; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}
  __pyx_v_hl_name = __pyx_t_5;

  /* "_PyXAL.pyx":404
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         cdef String hl_name = self._pointer.getRealFilename()
 *         cdef const_char_ptr name = hl_name.c_str()             # <<<<<<<<<<<<<<
 *         return name
 * 
 */
  __pyx_v_name = __pyx_v_hl_name.c_str();

  /* "_PyXAL.pyx":405
 *         cdef String hl_name = self._pointer.getRealFilename()
 *         cdef const_char_ptr name = hl_name.c_str()
 *         return name             # <<<<<<<<<<<<<<
 * 
 *     def getDuration(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyBytes_FromString(__pyx_v_name); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 405; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  __pyx_r = ((PyObject *)__pyx_t_2);
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.PlayerWrapper.getRealFilename", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":407
 *         return name
 * 
 *     def getDuration(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: float duration of the sound in seconds. it is a floating point number to acound for fractions of a second
 */

static PyObject *__pyx_pf_6_PyXAL_13PlayerWrapper_11getDuration(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6_PyXAL_13PlayerWrapper_11getDuration[] = "\n        @return: float duration of the sound in seconds. it is a floating point number to acound for fractions of a second\n        ";
static PyObject *__pyx_pf_6_PyXAL_13PlayerWrapper_11getDuration(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  float __pyx_v_duration;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  float __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getDuration");

  /* "_PyXAL.pyx":411
 *         @return: float duration of the sound in seconds. it is a floating point number to acound for fractions of a second
 *         '''
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 411; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 411; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 411; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = (!__pyx_t_3);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":412
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_48), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 412; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 412; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "_PyXAL.pyx":413
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         cdef float duration = self._pointer.getDuration()
 */
  if (((struct __pyx_obj_6_PyXAL_PlayerWrapper *)__pyx_v_self)->destroyed) {

    /* "_PyXAL.pyx":414
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         cdef float duration = self._pointer.getDuration()
 *         return duration
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_49), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 414; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 414; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "_PyXAL.pyx":415
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         cdef float duration = self._pointer.getDuration()             # <<<<<<<<<<<<<<
 *         return duration
 * 
 */
  try {__pyx_t_5 = ((struct __pyx_obj_6_PyXAL_PlayerWrapper *)__pyx_v_self)->_pointer->getDuration();} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 415; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}
  __pyx_v_duration = __pyx_t_5;

  /* "_PyXAL.pyx":416
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         cdef float duration = self._pointer.getDuration()
 *         return duration             # <<<<<<<<<<<<<<
 * 
 *     def getSize(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_duration); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 416; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.PlayerWrapper.getDuration", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":418
 *         return duration
 * 
 *     def getSize(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: int the size of the sound data in bits not bytes
 */

static PyObject *__pyx_pf_6_PyXAL_13PlayerWrapper_12getSize(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6_PyXAL_13PlayerWrapper_12getSize[] = "\n        @return: int the size of the sound data in bits not bytes\n        ";
static PyObject *__pyx_pf_6_PyXAL_13PlayerWrapper_12getSize(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  int __pyx_v_size;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getSize");

  /* "_PyXAL.pyx":422
 *         @return: int the size of the sound data in bits not bytes
 *         '''
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 422; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 422; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 422; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = (!__pyx_t_3);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":423
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_50), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 423; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 423; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "_PyXAL.pyx":424
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         cdef int size = self._pointer.getSize()
 */
  if (((struct __pyx_obj_6_PyXAL_PlayerWrapper *)__pyx_v_self)->destroyed) {

    /* "_PyXAL.pyx":425
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         cdef int size = self._pointer.getSize()
 *         return size
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_51), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 425; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 425; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "_PyXAL.pyx":426
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         cdef int size = self._pointer.getSize()             # <<<<<<<<<<<<<<
 *         return size
 * 
 */
  try {__pyx_t_5 = ((struct __pyx_obj_6_PyXAL_PlayerWrapper *)__pyx_v_self)->_pointer->getSize();} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 426; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}
  __pyx_v_size = __pyx_t_5;

  /* "_PyXAL.pyx":427
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         cdef int size = self._pointer.getSize()
 *         return size             # <<<<<<<<<<<<<<
 * 
 *     def getTimePosition(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyInt_FromLong(__pyx_v_size); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 427; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.PlayerWrapper.getSize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":429
 *         return size
 * 
 *     def getTimePosition(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: float the time position in seconds
 */

static PyObject *__pyx_pf_6_PyXAL_13PlayerWrapper_13getTimePosition(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6_PyXAL_13PlayerWrapper_13getTimePosition[] = "\n        @return: float the time position in seconds\n        ";
static PyObject *__pyx_pf_6_PyXAL_13PlayerWrapper_13getTimePosition(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  float __pyx_v_size;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  float __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getTimePosition");

  /* "_PyXAL.pyx":433
 *         @return: float the time position in seconds
 *         '''
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 433; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 433; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 433; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = (!__pyx_t_3);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":434
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_52), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 434; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 434; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "_PyXAL.pyx":435
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         cdef float size = self._pointer.getTimePosition()
 */
  if (((struct __pyx_obj_6_PyXAL_PlayerWrapper *)__pyx_v_self)->destroyed) {

    /* "_PyXAL.pyx":436
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         cdef float size = self._pointer.getTimePosition()
 *         return size
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_53), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 436; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 436; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "_PyXAL.pyx":437
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         cdef float size = self._pointer.getTimePosition()             # <<<<<<<<<<<<<<
 *         return size
 * 
 */
  try {__pyx_t_5 = ((struct __pyx_obj_6_PyXAL_PlayerWrapper *)__pyx_v_self)->_pointer->getTimePosition();} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 437; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}
  __pyx_v_size = __pyx_t_5;

  /* "_PyXAL.pyx":438
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         cdef float size = self._pointer.getTimePosition()
 *         return size             # <<<<<<<<<<<<<<
 * 
 *     def getSamplePosition(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_size); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 438; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.PlayerWrapper.getTimePosition", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":440
 *         return size
 * 
 *     def getSamplePosition(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: unsigned int the position in the buffer
 */

static PyObject *__pyx_pf_6_PyXAL_13PlayerWrapper_14getSamplePosition(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6_PyXAL_13PlayerWrapper_14getSamplePosition[] = "\n        @return: unsigned int the position in the buffer\n        ";
static PyObject *__pyx_pf_6_PyXAL_13PlayerWrapper_14getSamplePosition(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  unsigned int __pyx_v_size;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  unsigned int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getSamplePosition");

  /* "_PyXAL.pyx":444
 *         @return: unsigned int the position in the buffer
 *         '''
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 444; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 444; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 444; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = (!__pyx_t_3);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":445
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_54), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 445; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 445; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "_PyXAL.pyx":446
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         cdef unsigned int size = self._pointer.getSamplePosition()
 */
  if (((struct __pyx_obj_6_PyXAL_PlayerWrapper *)__pyx_v_self)->destroyed) {

    /* "_PyXAL.pyx":447
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         cdef unsigned int size = self._pointer.getSamplePosition()
 *         return size
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_55), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 447; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 447; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "_PyXAL.pyx":448
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         cdef unsigned int size = self._pointer.getSamplePosition()             # <<<<<<<<<<<<<<
 *         return size
 * 
 */
  try {__pyx_t_5 = ((struct __pyx_obj_6_PyXAL_PlayerWrapper *)__pyx_v_self)->_pointer->getSamplePosition();} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 448; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}
  __pyx_v_size = __pyx_t_5;

  /* "_PyXAL.pyx":449
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         cdef unsigned int size = self._pointer.getSamplePosition()
 *         return size             # <<<<<<<<<<<<<<
 * 
 *     def isPlaying(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyLong_FromUnsignedLong(__pyx_v_size); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 449; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.PlayerWrapper.getSamplePosition", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":451
 *         return size
 * 
 *     def isPlaying(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: bool True of the sound is playing
 */

static PyObject *__pyx_pf_6_PyXAL_13PlayerWrapper_15isPlaying(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6_PyXAL_13PlayerWrapper_15isPlaying[] = "\n        @return: bool True of the sound is playing\n        ";
static PyObject *__pyx_pf_6_PyXAL_13PlayerWrapper_15isPlaying(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  bool __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("isPlaying");

  /* "_PyXAL.pyx":455
 *         @return: bool True of the sound is playing
 *         '''
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 455; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 455; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 455; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = (!__pyx_t_3);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":456
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_56), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 456; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 456; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "_PyXAL.pyx":457
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         return self._pointer.isPlaying()
 */
  if (((struct __pyx_obj_6_PyXAL_PlayerWrapper *)__pyx_v_self)->destroyed) {

    /* "_PyXAL.pyx":458
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         return self._pointer.isPlaying()
 * 
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_57), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 458; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 458; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "_PyXAL.pyx":459
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         return self._pointer.isPlaying()             # <<<<<<<<<<<<<<
 * 
 *     def isPaused(self):
 */
  __Pyx_XDECREF(__pyx_r);
  try {__pyx_t_5 = ((struct __pyx_obj_6_PyXAL_PlayerWrapper *)__pyx_v_self)->_pointer->isPlaying();} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 459; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_t_5); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 459; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.PlayerWrapper.isPlaying", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":461
 *         return self._pointer.isPlaying()
 * 
 *     def isPaused(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: bool True if the sound is paused
 */

static PyObject *__pyx_pf_6_PyXAL_13PlayerWrapper_16isPaused(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6_PyXAL_13PlayerWrapper_16isPaused[] = "\n        @return: bool True if the sound is paused\n        ";
static PyObject *__pyx_pf_6_PyXAL_13PlayerWrapper_16isPaused(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  bool __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("isPaused");

  /* "_PyXAL.pyx":465
 *         @return: bool True if the sound is paused
 *         '''
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 465; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 465; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 465; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = (!__pyx_t_3);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":466
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_58), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 466; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 466; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "_PyXAL.pyx":467
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         return self._pointer.isPaused()
 */
  if (((struct __pyx_obj_6_PyXAL_PlayerWrapper *)__pyx_v_self)->destroyed) {

    /* "_PyXAL.pyx":468
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         return self._pointer.isPaused()
 * 
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_59), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 468; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 468; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "_PyXAL.pyx":469
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         return self._pointer.isPaused()             # <<<<<<<<<<<<<<
 * 
 *     def isFading(self):
 */
  __Pyx_XDECREF(__pyx_r);
  try {__pyx_t_5 = ((struct __pyx_obj_6_PyXAL_PlayerWrapper *)__pyx_v_self)->_pointer->isPaused();} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 469; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_t_5); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 469; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.PlayerWrapper.isPaused", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":471
 *         return self._pointer.isPaused()
 * 
 *     def isFading(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: bool True if the sound is fading in or out
 */

static PyObject *__pyx_pf_6_PyXAL_13PlayerWrapper_17isFading(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6_PyXAL_13PlayerWrapper_17isFading[] = "\n        @return: bool True if the sound is fading in or out\n        ";
static PyObject *__pyx_pf_6_PyXAL_13PlayerWrapper_17isFading(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  bool __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("isFading");

  /* "_PyXAL.pyx":475
 *         @return: bool True if the sound is fading in or out
 *         '''
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 475; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 475; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 475; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = (!__pyx_t_3);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":476
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_60), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 476; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 476; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "_PyXAL.pyx":477
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         return self._pointer.isFading()
 */
  if (((struct __pyx_obj_6_PyXAL_PlayerWrapper *)__pyx_v_self)->destroyed) {

    /* "_PyXAL.pyx":478
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         return self._pointer.isFading()
 * 
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_61), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 478; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 478; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "_PyXAL.pyx":479
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         return self._pointer.isFading()             # <<<<<<<<<<<<<<
 * 
 *     def isFadingIn(self):
 */
  __Pyx_XDECREF(__pyx_r);
  try {__pyx_t_5 = ((struct __pyx_obj_6_PyXAL_PlayerWrapper *)__pyx_v_self)->_pointer->isFading();} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 479; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_t_5); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 479; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.PlayerWrapper.isFading", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":481
 *         return self._pointer.isFading()
 * 
 *     def isFadingIn(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: bool True if the sound is fading in
 */

static PyObject *__pyx_pf_6_PyXAL_13PlayerWrapper_18isFadingIn(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6_PyXAL_13PlayerWrapper_18isFadingIn[] = "\n        @return: bool True if the sound is fading in\n        ";
static PyObject *__pyx_pf_6_PyXAL_13PlayerWrapper_18isFadingIn(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  bool __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("isFadingIn");

  /* "_PyXAL.pyx":485
 *         @return: bool True if the sound is fading in
 *         '''
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 485; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 485; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 485; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = (!__pyx_t_3);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":486
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_62), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 486; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 486; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "_PyXAL.pyx":487
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         return self._pointer.isFadingIn()
 */
  if (((struct __pyx_obj_6_PyXAL_PlayerWrapper *)__pyx_v_self)->destroyed) {

    /* "_PyXAL.pyx":488
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         return self._pointer.isFadingIn()
 * 
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_63), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 488; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 488; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "_PyXAL.pyx":489
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         return self._pointer.isFadingIn()             # <<<<<<<<<<<<<<
 * 
 *     def isFadingOut(self):
 */
  __Pyx_XDECREF(__pyx_r);
  try {__pyx_t_5 = ((struct __pyx_obj_6_PyXAL_PlayerWrapper *)__pyx_v_self)->_pointer->isFadingIn();} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 489; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_t_5); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 489; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.PlayerWrapper.isFadingIn", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":491
 *         return self._pointer.isFadingIn()
 * 
 *     def isFadingOut(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: bool True if teh sound is fading out
 */

static PyObject *__pyx_pf_6_PyXAL_13PlayerWrapper_19isFadingOut(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6_PyXAL_13PlayerWrapper_19isFadingOut[] = "\n        @return: bool True if teh sound is fading out\n        ";
static PyObject *__pyx_pf_6_PyXAL_13PlayerWrapper_19isFadingOut(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  bool __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("isFadingOut");

  /* "_PyXAL.pyx":495
 *         @return: bool True if teh sound is fading out
 *         '''
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 495; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 495; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 495; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = (!__pyx_t_3);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":496
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_64), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 496; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 496; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "_PyXAL.pyx":497
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         return self._pointer.isFadingOut()
 */
  if (((struct __pyx_obj_6_PyXAL_PlayerWrapper *)__pyx_v_self)->destroyed) {

    /* "_PyXAL.pyx":498
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         return self._pointer.isFadingOut()
 * 
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_65), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 498; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 498; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "_PyXAL.pyx":499
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         return self._pointer.isFadingOut()             # <<<<<<<<<<<<<<
 * 
 *     def isLooping(self):
 */
  __Pyx_XDECREF(__pyx_r);
  try {__pyx_t_5 = ((struct __pyx_obj_6_PyXAL_PlayerWrapper *)__pyx_v_self)->_pointer->isFadingOut();} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 499; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_t_5); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 499; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.PlayerWrapper.isFadingOut", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":501
 *         return self._pointer.isFadingOut()
 * 
 *     def isLooping(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: bool True of the sound is looping
 */

static PyObject *__pyx_pf_6_PyXAL_13PlayerWrapper_20isLooping(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6_PyXAL_13PlayerWrapper_20isLooping[] = "\n        @return: bool True of the sound is looping\n        ";
static PyObject *__pyx_pf_6_PyXAL_13PlayerWrapper_20isLooping(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  bool __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("isLooping");

  /* "_PyXAL.pyx":505
 *         @return: bool True of the sound is looping
 *         '''
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 505; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 505; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 505; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = (!__pyx_t_3);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":506
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_66), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 506; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 506; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "_PyXAL.pyx":507
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         return self._pointer.isLooping()
 */
  if (((struct __pyx_obj_6_PyXAL_PlayerWrapper *)__pyx_v_self)->destroyed) {

    /* "_PyXAL.pyx":508
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         return self._pointer.isLooping()
 * 
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_67), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 508; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 508; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "_PyXAL.pyx":509
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         return self._pointer.isLooping()             # <<<<<<<<<<<<<<
 * 
 *     def play(self, float fadeTime = 0.0, bool looping = False):
 */
  __Pyx_XDECREF(__pyx_r);
  try {__pyx_t_5 = ((struct __pyx_obj_6_PyXAL_PlayerWrapper *)__pyx_v_self)->_pointer->isLooping();} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 509; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_t_5); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 509; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.PlayerWrapper.isLooping", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":511
 *         return self._pointer.isLooping()
 * 
 *     def play(self, float fadeTime = 0.0, bool looping = False):             # <<<<<<<<<<<<<<
 *         '''
 *         start the sound playing at it's current offset, the offset starts at 0.0 when teh sound is first loaded
 */

static PyObject *__pyx_pf_6_PyXAL_13PlayerWrapper_21play(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6_PyXAL_13PlayerWrapper_21play[] = "\n        start the sound playing at it's current offset, the offset starts at 0.0 when teh sound is first loaded\n        \n        @param fadeTime: float the time in seconds for the sound to fade in (0.0 by default)\n        @param looping: bool should the sound loop (False by default)\n        ";
static PyObject *__pyx_pf_6_PyXAL_13PlayerWrapper_21play(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  float __pyx_v_fadeTime;
  bool __pyx_v_looping;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__fadeTime,&__pyx_n_s__looping,0};
  __Pyx_RefNannySetupContext("play");
  {
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__fadeTime);
          if (value) { values[0] = value; kw_args--; }
        }
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__looping);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "play") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 511; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_fadeTime = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_fadeTime == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 511; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_fadeTime = ((float)0.0);
    }
    if (values[1]) {
      __pyx_v_looping = __Pyx_PyObject_IsTrue(values[1]); if (unlikely((__pyx_v_looping == (bool)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 511; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_looping = ((bool)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("play", 0, 0, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 511; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("_PyXAL.PlayerWrapper.play", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "_PyXAL.pyx":518
 *         @param looping: bool should the sound loop (False by default)
 *         '''
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 518; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 518; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 518; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = (!__pyx_t_3);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":519
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_68), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 519; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 519; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "_PyXAL.pyx":520
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         self._pointer.play(fadeTime, looping)
 */
  if (((struct __pyx_obj_6_PyXAL_PlayerWrapper *)__pyx_v_self)->destroyed) {

    /* "_PyXAL.pyx":521
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         self._pointer.play(fadeTime, looping)
 * 
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_69), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 521; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 521; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L7;
  }
  __pyx_L7:;

  /* "_PyXAL.pyx":522
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         self._pointer.play(fadeTime, looping)             # <<<<<<<<<<<<<<
 * 
 *     def stop(self, float fadeTime = 0.0):
 */
  try {((struct __pyx_obj_6_PyXAL_PlayerWrapper *)__pyx_v_self)->_pointer->play(__pyx_v_fadeTime, __pyx_v_looping);} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 522; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.PlayerWrapper.play", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":524
 *         self._pointer.play(fadeTime, looping)
 * 
 *     def stop(self, float fadeTime = 0.0):             # <<<<<<<<<<<<<<
 *         '''
 *         stop the sound playing and rest set it's offset to 0.0
 */

static PyObject *__pyx_pf_6_PyXAL_13PlayerWrapper_22stop(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6_PyXAL_13PlayerWrapper_22stop[] = "\n        stop the sound playing and rest set it's offset to 0.0\n        \n        @param fadeTime: float the time in seconds for the sound to fade out (0.0 by default)\n        ";
static PyObject *__pyx_pf_6_PyXAL_13PlayerWrapper_22stop(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  float __pyx_v_fadeTime;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__fadeTime,0};
  __Pyx_RefNannySetupContext("stop");
  {
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__fadeTime);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "stop") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 524; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_fadeTime = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_fadeTime == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 524; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_fadeTime = ((float)0.0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("stop", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 524; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("_PyXAL.PlayerWrapper.stop", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "_PyXAL.pyx":530
 *         @param fadeTime: float the time in seconds for the sound to fade out (0.0 by default)
 *         '''
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 530; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 530; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 530; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = (!__pyx_t_3);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":531
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_70), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 531; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 531; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "_PyXAL.pyx":532
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         self._pointer.stop(fadeTime)
 */
  if (((struct __pyx_obj_6_PyXAL_PlayerWrapper *)__pyx_v_self)->destroyed) {

    /* "_PyXAL.pyx":533
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         self._pointer.stop(fadeTime)
 * 
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_71), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 533; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 533; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L7;
  }
  __pyx_L7:;

  /* "_PyXAL.pyx":534
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         self._pointer.stop(fadeTime)             # <<<<<<<<<<<<<<
 * 
 *     def pause(self, float fadeTime = 0.0):
 */
  try {((struct __pyx_obj_6_PyXAL_PlayerWrapper *)__pyx_v_self)->_pointer->stop(__pyx_v_fadeTime);} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 534; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.PlayerWrapper.stop", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":536
 *         self._pointer.stop(fadeTime)
 * 
 *     def pause(self, float fadeTime = 0.0):             # <<<<<<<<<<<<<<
 *         '''
 *         stop the sound playing keeping the current offset of the sound
 */

static PyObject *__pyx_pf_6_PyXAL_13PlayerWrapper_23pause(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6_PyXAL_13PlayerWrapper_23pause[] = "\n        stop the sound playing keeping the current offset of the sound\n        \n        @param fadeTime: float the time in seconds for the sound to fade out (0.0 by default)\n        ";
static PyObject *__pyx_pf_6_PyXAL_13PlayerWrapper_23pause(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  float __pyx_v_fadeTime;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__fadeTime,0};
  __Pyx_RefNannySetupContext("pause");
  {
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__fadeTime);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "pause") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 536; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_fadeTime = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_fadeTime == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 536; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_fadeTime = ((float)0.0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("pause", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 536; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("_PyXAL.PlayerWrapper.pause", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "_PyXAL.pyx":542
 *         @param fadeTime: float the time in seconds for the sound to fade out (0.0 by default)
 *         '''
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 542; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 542; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 542; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = (!__pyx_t_3);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":543
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_72), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 543; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 543; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "_PyXAL.pyx":544
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         self._pointer.pause(fadeTime)
 */
  if (((struct __pyx_obj_6_PyXAL_PlayerWrapper *)__pyx_v_self)->destroyed) {

    /* "_PyXAL.pyx":545
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         self._pointer.pause(fadeTime)
 * 
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_73), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 545; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 545; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L7;
  }
  __pyx_L7:;

  /* "_PyXAL.pyx":546
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         self._pointer.pause(fadeTime)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {((struct __pyx_obj_6_PyXAL_PlayerWrapper *)__pyx_v_self)->_pointer->pause(__pyx_v_fadeTime);} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 546; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.PlayerWrapper.pause", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":558
 *     destroyed = False
 * 
 *     def __init__(self, bytes filename):             # <<<<<<<<<<<<<<
 *         '''
 *         this creates a sound object from a file name
 */

static PyObject *__pyx_pf_6_PyXAL_7PySound___init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6_PyXAL_7PySound___init__[] = "\n        this creates a sound object from a file name\n        ";
static PyMethodDef __pyx_mdef_6_PyXAL_7PySound___init__ = {__Pyx_NAMESTR("__init__"), (PyCFunction)__pyx_pf_6_PyXAL_7PySound___init__, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_7PySound___init__)};
static PyObject *__pyx_pf_6_PyXAL_7PySound___init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_filename = 0;
  char *__pyx_v_file;
  PyObject *__pyx_v_s = NULL;
  char *__pyx_v_path;
  char *__pyx_v_cat_str;
  hltypes::String __pyx_v_file_str;
  hltypes::String __pyx_v_path_str;
  hltypes::String __pyx_v_category;
  xal::Sound *__pyx_v_sound;
  struct __pyx_obj_6_PyXAL_SoundWrapper *__pyx_v_wrapper = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  char *__pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  xal::Sound *__pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__self,&__pyx_n_s__filename,0};
  __Pyx_RefNannySetupContext("__init__");
  __pyx_self = __pyx_self;
  {
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__self);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__filename);
        if (likely(values[1])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 558; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "__init__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 558; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_self = values[0];
    __pyx_v_filename = ((PyObject*)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 558; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("_PyXAL.PySound.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_filename), (&PyBytes_Type), 1, "filename", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 558; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_PyXAL.pyx":562
 *         this creates a sound object from a file name
 *         '''
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         cdef char* file = filename
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 562; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 562; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 562; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = (!__pyx_t_3);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":563
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         cdef char* file = filename
 *         s = os.path.split(filename)[0]
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_74), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 563; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 563; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "_PyXAL.pyx":564
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         cdef char* file = filename             # <<<<<<<<<<<<<<
 *         s = os.path.split(filename)[0]
 *         cdef char* path = s
 */
  __pyx_t_5 = PyBytes_AsString(((PyObject *)__pyx_v_filename)); if (unlikely((!__pyx_t_5) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 564; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_file = __pyx_t_5;

  /* "_PyXAL.pyx":565
 *             raise RuntimeError("XAL is not Initialized")
 *         cdef char* file = filename
 *         s = os.path.split(filename)[0]             # <<<<<<<<<<<<<<
 *         cdef char* path = s
 *         cdef char* cat_str = self.CATEGORY_STR
 */
  __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__os); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 565; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__path); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 565; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_GetAttr(__pyx_t_1, __pyx_n_s__split); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 565; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 565; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __Pyx_INCREF(((PyObject *)__pyx_v_filename));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_filename));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_filename));
  __pyx_t_6 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 565; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_6, 0, sizeof(long), PyInt_FromLong); if (!__pyx_t_1) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 565; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_v_s = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "_PyXAL.pyx":566
 *         cdef char* file = filename
 *         s = os.path.split(filename)[0]
 *         cdef char* path = s             # <<<<<<<<<<<<<<
 *         cdef char* cat_str = self.CATEGORY_STR
 *         cdef String file_str = String(file)
 */
  __pyx_t_5 = PyBytes_AsString(__pyx_v_s); if (unlikely((!__pyx_t_5) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 566; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_path = __pyx_t_5;

  /* "_PyXAL.pyx":567
 *         s = os.path.split(filename)[0]
 *         cdef char* path = s
 *         cdef char* cat_str = self.CATEGORY_STR             # <<<<<<<<<<<<<<
 *         cdef String file_str = String(file)
 *         cdef String path_str = String(path)
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__CATEGORY_STR); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 567; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = PyBytes_AsString(__pyx_t_1); if (unlikely((!__pyx_t_5) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 567; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_cat_str = __pyx_t_5;

  /* "_PyXAL.pyx":568
 *         cdef char* path = s
 *         cdef char* cat_str = self.CATEGORY_STR
 *         cdef String file_str = String(file)             # <<<<<<<<<<<<<<
 *         cdef String path_str = String(path)
 *         cdef String category = String(cat_str)
 */
  __pyx_v_file_str = hltypes::String(__pyx_v_file);

  /* "_PyXAL.pyx":569
 *         cdef char* cat_str = self.CATEGORY_STR
 *         cdef String file_str = String(file)
 *         cdef String path_str = String(path)             # <<<<<<<<<<<<<<
 *         cdef String category = String(cat_str)
 *         cdef XAL.Sound* sound
 */
  __pyx_v_path_str = hltypes::String(__pyx_v_path);

  /* "_PyXAL.pyx":570
 *         cdef String file_str = String(file)
 *         cdef String path_str = String(path)
 *         cdef String category = String(cat_str)             # <<<<<<<<<<<<<<
 *         cdef XAL.Sound* sound
 *         sound = XAL.mgr.createSound(file_str, category, path_str)
 */
  __pyx_v_category = hltypes::String(__pyx_v_cat_str);

  /* "_PyXAL.pyx":572
 *         cdef String category = String(cat_str)
 *         cdef XAL.Sound* sound
 *         sound = XAL.mgr.createSound(file_str, category, path_str)             # <<<<<<<<<<<<<<
 *         if sound == NULL:
 *             raise RuntimeError("XAL Failed to load file %s" % filename)
 */
  try {__pyx_t_7 = xal::mgr->createSound(__pyx_v_file_str, __pyx_v_category, __pyx_v_path_str);} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 572; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}
  __pyx_v_sound = __pyx_t_7;

  /* "_PyXAL.pyx":573
 *         cdef XAL.Sound* sound
 *         sound = XAL.mgr.createSound(file_str, category, path_str)
 *         if sound == NULL:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL Failed to load file %s" % filename)
 *         cdef SoundWrapper wrapper = SoundWrapper.__new__(SoundWrapper)
 */
  __pyx_t_4 = (__pyx_v_sound == NULL);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":574
 *         sound = XAL.mgr.createSound(file_str, category, path_str)
 *         if sound == NULL:
 *             raise RuntimeError("XAL Failed to load file %s" % filename)             # <<<<<<<<<<<<<<
 *         cdef SoundWrapper wrapper = SoundWrapper.__new__(SoundWrapper)
 *         wrapper._pointer = sound
 */
    __pyx_t_1 = PyNumber_Remainder(((PyObject *)__pyx_kp_s_75), ((PyObject *)__pyx_v_filename)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 574; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_1));
    __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 574; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_6));
    PyTuple_SET_ITEM(__pyx_t_6, 0, ((PyObject *)__pyx_t_1));
    __Pyx_GIVEREF(((PyObject *)__pyx_t_1));
    __pyx_t_1 = 0;
    __pyx_t_1 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_t_6), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 574; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(((PyObject *)__pyx_t_6)); __pyx_t_6 = 0;
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 574; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L7;
  }
  __pyx_L7:;

  /* "_PyXAL.pyx":575
 *         if sound == NULL:
 *             raise RuntimeError("XAL Failed to load file %s" % filename)
 *         cdef SoundWrapper wrapper = SoundWrapper.__new__(SoundWrapper)             # <<<<<<<<<<<<<<
 *         wrapper._pointer = sound
 *         wrapper.destroyed = False
 */
  __pyx_t_1 = __Pyx_tp_new(((PyObject*)__pyx_ptype_6_PyXAL_SoundWrapper)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 575; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_6_PyXAL_SoundWrapper)))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 575; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_wrapper = ((struct __pyx_obj_6_PyXAL_SoundWrapper *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "_PyXAL.pyx":576
 *             raise RuntimeError("XAL Failed to load file %s" % filename)
 *         cdef SoundWrapper wrapper = SoundWrapper.__new__(SoundWrapper)
 *         wrapper._pointer = sound             # <<<<<<<<<<<<<<
 *         wrapper.destroyed = False
 *         self._wrapper = wrapper
 */
  __pyx_v_wrapper->_pointer = __pyx_v_sound;

  /* "_PyXAL.pyx":577
 *         cdef SoundWrapper wrapper = SoundWrapper.__new__(SoundWrapper)
 *         wrapper._pointer = sound
 *         wrapper.destroyed = False             # <<<<<<<<<<<<<<
 *         self._wrapper = wrapper
 * 
 */
  __pyx_v_wrapper->destroyed = 0;

  /* "_PyXAL.pyx":578
 *         wrapper._pointer = sound
 *         wrapper.destroyed = False
 *         self._wrapper = wrapper             # <<<<<<<<<<<<<<
 * 
 *     def _destroy(self):
 */
  if (PyObject_SetAttr(__pyx_v_self, __pyx_n_s___wrapper, ((PyObject *)__pyx_v_wrapper)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 578; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("_PyXAL.PySound.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_s);
  __Pyx_XDECREF((PyObject *)__pyx_v_wrapper);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":580
 *         self._wrapper = wrapper
 * 
 *     def _destroy(self):             # <<<<<<<<<<<<<<
 *         if self.isXALInitialized() and not self.destroyed:
 *             self._wrapper._destroy()
 */

static PyObject *__pyx_pf_6_PyXAL_7PySound_1_destroy(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static PyMethodDef __pyx_mdef_6_PyXAL_7PySound_1_destroy = {__Pyx_NAMESTR("_destroy"), (PyCFunction)__pyx_pf_6_PyXAL_7PySound_1_destroy, METH_O, __Pyx_DOCSTR(0)};
static PyObject *__pyx_pf_6_PyXAL_7PySound_1_destroy(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_destroy");
  __pyx_self = __pyx_self;

  /* "_PyXAL.pyx":581
 * 
 *     def _destroy(self):
 *         if self.isXALInitialized() and not self.destroyed:             # <<<<<<<<<<<<<<
 *             self._wrapper._destroy()
 *             self.destroyed = True
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 581; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 581; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 581; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {
    __pyx_t_2 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__destroyed); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 581; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 581; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_5 = (!__pyx_t_4);
    __pyx_t_4 = __pyx_t_5;
  } else {
    __pyx_t_4 = __pyx_t_3;
  }
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":582
 *     def _destroy(self):
 *         if self.isXALInitialized() and not self.destroyed:
 *             self._wrapper._destroy()             # <<<<<<<<<<<<<<
 *             self.destroyed = True
 * 
 */
    __pyx_t_2 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s___wrapper); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 582; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s___destroy); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 582; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 582; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "_PyXAL.pyx":583
 *         if self.isXALInitialized() and not self.destroyed:
 *             self._wrapper._destroy()
 *             self.destroyed = True             # <<<<<<<<<<<<<<
 * 
 *     def __del__(self):
 */
    __pyx_t_2 = __Pyx_PyBool_FromLong(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 583; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    if (PyObject_SetAttr(__pyx_v_self, __pyx_n_s__destroyed, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 583; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    goto __pyx_L5;
  }
  __pyx_L5:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.PySound._destroy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":585
 *             self.destroyed = True
 * 
 *     def __del__(self):             # <<<<<<<<<<<<<<
 *         if self.isXALInitialized():
 *             self._destroy()
 */

static PyObject *__pyx_pf_6_PyXAL_7PySound_2__del__(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static PyMethodDef __pyx_mdef_6_PyXAL_7PySound_2__del__ = {__Pyx_NAMESTR("__del__"), (PyCFunction)__pyx_pf_6_PyXAL_7PySound_2__del__, METH_O, __Pyx_DOCSTR(0)};
static PyObject *__pyx_pf_6_PyXAL_7PySound_2__del__(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__del__");
  __pyx_self = __pyx_self;

  /* "_PyXAL.pyx":586
 * 
 *     def __del__(self):
 *         if self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             self._destroy()
 *         del self._wrapper
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 586; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 586; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 586; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "_PyXAL.pyx":587
 *     def __del__(self):
 *         if self.isXALInitialized():
 *             self._destroy()             # <<<<<<<<<<<<<<
 *         del self._wrapper
 * 
 */
    __pyx_t_2 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s___destroy); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 587; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 587; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "_PyXAL.pyx":588
 *         if self.isXALInitialized():
 *             self._destroy()
 *         del self._wrapper             # <<<<<<<<<<<<<<
 * 
 *     def isXALInitialized(self):
 */
  if (PyObject_DelAttr(__pyx_v_self, __pyx_n_s___wrapper) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 588; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.PySound.__del__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":590
 *         del self._wrapper
 * 
 *     def isXALInitialized(self):             # <<<<<<<<<<<<<<
 *         '''
 *         returns true if the C++ side of the interface to XAL exists
 */

static PyObject *__pyx_pf_6_PyXAL_7PySound_3isXALInitialized(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_6_PyXAL_7PySound_3isXALInitialized[] = "\n        returns true if the C++ side of the interface to XAL exists\n        ";
static PyMethodDef __pyx_mdef_6_PyXAL_7PySound_3isXALInitialized = {__Pyx_NAMESTR("isXALInitialized"), (PyCFunction)__pyx_pf_6_PyXAL_7PySound_3isXALInitialized, METH_O, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_7PySound_3isXALInitialized)};
static PyObject *__pyx_pf_6_PyXAL_7PySound_3isXALInitialized(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("isXALInitialized");
  __pyx_self = __pyx_self;

  /* "_PyXAL.pyx":594
 *         returns true if the C++ side of the interface to XAL exists
 *         '''
 *         if XAL.mgr != NULL:             # <<<<<<<<<<<<<<
 *             return True
 *         else:
 */
  __pyx_t_1 = (xal::mgr != NULL);
  if (__pyx_t_1) {

    /* "_PyXAL.pyx":595
 *         '''
 *         if XAL.mgr != NULL:
 *             return True             # <<<<<<<<<<<<<<
 *         else:
 *             return False
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyBool_FromLong(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 595; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
    goto __pyx_L5;
  }
  /*else*/ {

    /* "_PyXAL.pyx":597
 *             return True
 *         else:
 *             return False             # <<<<<<<<<<<<<<
 * 
 *     def getName(self):
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyBool_FromLong(0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 597; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
  }
  __pyx_L5:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.PySound.isXALInitialized", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":599
 *             return False
 * 
 *     def getName(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: returns the string name of the sound. it is normal the full path of teh sound file with out the file extention
 */

static PyObject *__pyx_pf_6_PyXAL_7PySound_4getName(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_6_PyXAL_7PySound_4getName[] = "\n        @return: returns the string name of the sound. it is normal the full path of teh sound file with out the file extention\n        ";
static PyMethodDef __pyx_mdef_6_PyXAL_7PySound_4getName = {__Pyx_NAMESTR("getName"), (PyCFunction)__pyx_pf_6_PyXAL_7PySound_4getName, METH_O, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_7PySound_4getName)};
static PyObject *__pyx_pf_6_PyXAL_7PySound_4getName(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getName");
  __pyx_self = __pyx_self;

  /* "_PyXAL.pyx":603
 *         @return: returns the string name of the sound. it is normal the full path of teh sound file with out the file extention
 *         '''
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 603; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 603; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 603; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = (!__pyx_t_3);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":604
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_76), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 604; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 604; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "_PyXAL.pyx":605
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         return self._wrapper.getName()
 */
  __pyx_t_2 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__destroyed); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 605; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 605; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":606
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         return self._wrapper.getName()
 * 
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_77), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 606; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 606; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "_PyXAL.pyx":607
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         return self._wrapper.getName()             # <<<<<<<<<<<<<<
 * 
 *     def getFilename(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s___wrapper); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 607; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__getName); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 607; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 607; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.PySound.getName", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":609
 *         return self._wrapper.getName()
 * 
 *     def getFilename(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: returns a string containing the file name the sound was loaded from
 */

static PyObject *__pyx_pf_6_PyXAL_7PySound_5getFilename(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_6_PyXAL_7PySound_5getFilename[] = "\n        @return: returns a string containing the file name the sound was loaded from\n        ";
static PyMethodDef __pyx_mdef_6_PyXAL_7PySound_5getFilename = {__Pyx_NAMESTR("getFilename"), (PyCFunction)__pyx_pf_6_PyXAL_7PySound_5getFilename, METH_O, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_7PySound_5getFilename)};
static PyObject *__pyx_pf_6_PyXAL_7PySound_5getFilename(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getFilename");
  __pyx_self = __pyx_self;

  /* "_PyXAL.pyx":613
 *         @return: returns a string containing the file name the sound was loaded from
 *         '''
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 613; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 613; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 613; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = (!__pyx_t_3);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":614
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_78), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 614; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 614; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "_PyXAL.pyx":615
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         return self._wrapper.getFilename()
 */
  __pyx_t_2 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__destroyed); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 615; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 615; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":616
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         return self._wrapper.getFilename()
 * 
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_79), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 616; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 616; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "_PyXAL.pyx":617
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         return self._wrapper.getFilename()             # <<<<<<<<<<<<<<
 * 
 *     def getRealFilename(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s___wrapper); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 617; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__getFilename); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 617; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 617; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.PySound.getFilename", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":619
 *         return self._wrapper.getFilename()
 * 
 *     def getRealFilename(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: returns a string with the full path to the file the string was loaded from
 */

static PyObject *__pyx_pf_6_PyXAL_7PySound_6getRealFilename(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_6_PyXAL_7PySound_6getRealFilename[] = "\n        @return: returns a string with the full path to the file the string was loaded from\n        ";
static PyMethodDef __pyx_mdef_6_PyXAL_7PySound_6getRealFilename = {__Pyx_NAMESTR("getRealFilename"), (PyCFunction)__pyx_pf_6_PyXAL_7PySound_6getRealFilename, METH_O, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_7PySound_6getRealFilename)};
static PyObject *__pyx_pf_6_PyXAL_7PySound_6getRealFilename(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getRealFilename");
  __pyx_self = __pyx_self;

  /* "_PyXAL.pyx":623
 *         @return: returns a string with the full path to the file the string was loaded from
 *         '''
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 623; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 623; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 623; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = (!__pyx_t_3);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":624
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_80), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 624; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 624; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "_PyXAL.pyx":625
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         return self._wrapper.getRealFilename()
 */
  __pyx_t_2 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__destroyed); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 625; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 625; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":626
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         return self._wrapper.getRealFilename()
 * 
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_81), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 626; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 626; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "_PyXAL.pyx":627
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         return self._wrapper.getRealFilename()             # <<<<<<<<<<<<<<
 * 
 *     def getSize(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s___wrapper); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 627; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__getRealFilename); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 627; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 627; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.PySound.getRealFilename", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":629
 *         return self._wrapper.getRealFilename()
 * 
 *     def getSize(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: int the size of the sound data in bits not bytes
 */

static PyObject *__pyx_pf_6_PyXAL_7PySound_7getSize(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_6_PyXAL_7PySound_7getSize[] = "\n        @return: int the size of the sound data in bits not bytes\n        ";
static PyMethodDef __pyx_mdef_6_PyXAL_7PySound_7getSize = {__Pyx_NAMESTR("getSize"), (PyCFunction)__pyx_pf_6_PyXAL_7PySound_7getSize, METH_O, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_7PySound_7getSize)};
static PyObject *__pyx_pf_6_PyXAL_7PySound_7getSize(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getSize");
  __pyx_self = __pyx_self;

  /* "_PyXAL.pyx":633
 *         @return: int the size of the sound data in bits not bytes
 *         '''
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 633; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 633; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 633; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = (!__pyx_t_3);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":634
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_82), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 634; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 634; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "_PyXAL.pyx":635
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         return self._wrapper.getSize()
 */
  __pyx_t_2 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__destroyed); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 635; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 635; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":636
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         return self._wrapper.getSize()
 * 
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_83), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 636; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 636; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "_PyXAL.pyx":637
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         return self._wrapper.getSize()             # <<<<<<<<<<<<<<
 * 
 *     def getChannels(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s___wrapper); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 637; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__getSize); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 637; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 637; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.PySound.getSize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":639
 *         return self._wrapper.getSize()
 * 
 *     def getChannels(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: int number of channels the sound has. 1 for mono or 2 for stereo
 */

static PyObject *__pyx_pf_6_PyXAL_7PySound_8getChannels(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_6_PyXAL_7PySound_8getChannels[] = "\n        @return: int number of channels the sound has. 1 for mono or 2 for stereo \n        ";
static PyMethodDef __pyx_mdef_6_PyXAL_7PySound_8getChannels = {__Pyx_NAMESTR("getChannels"), (PyCFunction)__pyx_pf_6_PyXAL_7PySound_8getChannels, METH_O, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_7PySound_8getChannels)};
static PyObject *__pyx_pf_6_PyXAL_7PySound_8getChannels(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getChannels");
  __pyx_self = __pyx_self;

  /* "_PyXAL.pyx":643
 *         @return: int number of channels the sound has. 1 for mono or 2 for stereo
 *         '''
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 643; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 643; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 643; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = (!__pyx_t_3);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":644
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_84), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 644; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 644; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "_PyXAL.pyx":645
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         return self._wrapper.getChannels()
 */
  __pyx_t_2 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__destroyed); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 645; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 645; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":646
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         return self._wrapper.getChannels()
 * 
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_85), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 646; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 646; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "_PyXAL.pyx":647
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         return self._wrapper.getChannels()             # <<<<<<<<<<<<<<
 * 
 *     def getSamplingRate(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s___wrapper); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 647; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__getChannels); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 647; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 647; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.PySound.getChannels", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":649
 *         return self._wrapper.getChannels()
 * 
 *     def getSamplingRate(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: int the sampeling rate for the sound in samples per second
 */

static PyObject *__pyx_pf_6_PyXAL_7PySound_9getSamplingRate(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_6_PyXAL_7PySound_9getSamplingRate[] = "\n        @return: int the sampeling rate for the sound in samples per second\n        ";
static PyMethodDef __pyx_mdef_6_PyXAL_7PySound_9getSamplingRate = {__Pyx_NAMESTR("getSamplingRate"), (PyCFunction)__pyx_pf_6_PyXAL_7PySound_9getSamplingRate, METH_O, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_7PySound_9getSamplingRate)};
static PyObject *__pyx_pf_6_PyXAL_7PySound_9getSamplingRate(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getSamplingRate");
  __pyx_self = __pyx_self;

  /* "_PyXAL.pyx":653
 *         @return: int the sampeling rate for the sound in samples per second
 *         '''
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 653; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 653; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 653; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = (!__pyx_t_3);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":654
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_86), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 654; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 654; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "_PyXAL.pyx":655
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         return self._wrapper.getSamplingRate()
 */
  __pyx_t_2 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__destroyed); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 655; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 655; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":656
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         return self._wrapper.getSamplingRate()
 * 
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_87), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 656; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 656; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "_PyXAL.pyx":657
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         return self._wrapper.getSamplingRate()             # <<<<<<<<<<<<<<
 * 
 *     def getBitsPerSample(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s___wrapper); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 657; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__getSamplingRate); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 657; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 657; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.PySound.getSamplingRate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":659
 *         return self._wrapper.getSamplingRate()
 * 
 *     def getBitsPerSample(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: int the bits per sample of data in the sound. usualy 8, 16, or 24, possibly 32 not sure
 */

static PyObject *__pyx_pf_6_PyXAL_7PySound_10getBitsPerSample(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_6_PyXAL_7PySound_10getBitsPerSample[] = "\n        @return: int the bits per sample of data in the sound. usualy 8, 16, or 24, possibly 32 not sure\n        ";
static PyMethodDef __pyx_mdef_6_PyXAL_7PySound_10getBitsPerSample = {__Pyx_NAMESTR("getBitsPerSample"), (PyCFunction)__pyx_pf_6_PyXAL_7PySound_10getBitsPerSample, METH_O, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_7PySound_10getBitsPerSample)};
static PyObject *__pyx_pf_6_PyXAL_7PySound_10getBitsPerSample(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getBitsPerSample");
  __pyx_self = __pyx_self;

  /* "_PyXAL.pyx":663
 *         @return: int the bits per sample of data in the sound. usualy 8, 16, or 24, possibly 32 not sure
 *         '''
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 663; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 663; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 663; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = (!__pyx_t_3);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":664
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_88), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 664; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 664; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "_PyXAL.pyx":665
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         return self._wrapper.getBitsPerSample()
 */
  __pyx_t_2 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__destroyed); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 665; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 665; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":666
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         return self._wrapper.getBitsPerSample()
 * 
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_89), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 666; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 666; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "_PyXAL.pyx":667
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         return self._wrapper.getBitsPerSample()             # <<<<<<<<<<<<<<
 * 
 *     def getDuration(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s___wrapper); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 667; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__getBitsPerSample); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 667; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 667; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.PySound.getBitsPerSample", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":669
 *         return self._wrapper.getBitsPerSample()
 * 
 *     def getDuration(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: float duration of the sound in seconds. it is a floating point number to acound for fractions of a second
 */

static PyObject *__pyx_pf_6_PyXAL_7PySound_11getDuration(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_6_PyXAL_7PySound_11getDuration[] = "\n        @return: float duration of the sound in seconds. it is a floating point number to acound for fractions of a second\n        ";
static PyMethodDef __pyx_mdef_6_PyXAL_7PySound_11getDuration = {__Pyx_NAMESTR("getDuration"), (PyCFunction)__pyx_pf_6_PyXAL_7PySound_11getDuration, METH_O, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_7PySound_11getDuration)};
static PyObject *__pyx_pf_6_PyXAL_7PySound_11getDuration(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getDuration");
  __pyx_self = __pyx_self;

  /* "_PyXAL.pyx":673
 *         @return: float duration of the sound in seconds. it is a floating point number to acound for fractions of a second
 *         '''
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 673; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 673; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 673; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = (!__pyx_t_3);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":674
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_90), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 674; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 674; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "_PyXAL.pyx":675
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         return self._wrapper.getDuration()
 */
  __pyx_t_2 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__destroyed); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 675; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 675; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":676
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         return self._wrapper.getDuration()
 * 
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_91), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 676; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 676; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "_PyXAL.pyx":677
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         return self._wrapper.getDuration()             # <<<<<<<<<<<<<<
 * 
 *     def getFormat(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s___wrapper); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 677; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__getDuration); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 677; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 677; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.PySound.getDuration", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":679
 *         return self._wrapper.getDuration()
 * 
 *     def getFormat(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: int the intrnal designation of the sound format. coresponds to a file type but as of now there is no way to tell for certin which is which
 */

static PyObject *__pyx_pf_6_PyXAL_7PySound_12getFormat(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_6_PyXAL_7PySound_12getFormat[] = "\n        @return: int the intrnal designation of the sound format. coresponds to a file type but as of now there is no way to tell for certin which is which \n            as the nubers will change depending on what formats are currently suported by XAL\n        ";
static PyMethodDef __pyx_mdef_6_PyXAL_7PySound_12getFormat = {__Pyx_NAMESTR("getFormat"), (PyCFunction)__pyx_pf_6_PyXAL_7PySound_12getFormat, METH_O, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_7PySound_12getFormat)};
static PyObject *__pyx_pf_6_PyXAL_7PySound_12getFormat(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getFormat");
  __pyx_self = __pyx_self;

  /* "_PyXAL.pyx":684
 *             as the nubers will change depending on what formats are currently suported by XAL
 *         '''
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 684; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 684; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 684; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = (!__pyx_t_3);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":685
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_92), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 685; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 685; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "_PyXAL.pyx":686
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         return self._wrapper.getFormat()
 */
  __pyx_t_2 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__destroyed); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 686; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 686; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":687
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         return self._wrapper.getFormat()
 * 
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_93), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 687; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 687; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "_PyXAL.pyx":688
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         return self._wrapper.getFormat()             # <<<<<<<<<<<<<<
 * 
 *     def isStreamed(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s___wrapper); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 688; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__getFormat); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 688; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 688; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.PySound.getFormat", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":690
 *         return self._wrapper.getFormat()
 * 
 *     def isStreamed(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: bool is the sound being streamed from it's file to the player? or is it comleatly loaded into memory.
 */

static PyObject *__pyx_pf_6_PyXAL_7PySound_13isStreamed(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_6_PyXAL_7PySound_13isStreamed[] = "\n        @return: bool is the sound being streamed from it's file to the player? or is it comleatly loaded into memory. \n            should always return false in PyXAL as PyXAL uses full decoding mode\n        ";
static PyMethodDef __pyx_mdef_6_PyXAL_7PySound_13isStreamed = {__Pyx_NAMESTR("isStreamed"), (PyCFunction)__pyx_pf_6_PyXAL_7PySound_13isStreamed, METH_O, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_7PySound_13isStreamed)};
static PyObject *__pyx_pf_6_PyXAL_7PySound_13isStreamed(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("isStreamed");
  __pyx_self = __pyx_self;

  /* "_PyXAL.pyx":695
 *             should always return false in PyXAL as PyXAL uses full decoding mode
 *         '''
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 695; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 695; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 695; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = (!__pyx_t_3);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":696
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_94), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 696; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 696; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "_PyXAL.pyx":697
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         return self._wrapper.isStreamed()
 */
  __pyx_t_2 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__destroyed); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 697; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 697; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":698
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         return self._wrapper.isStreamed()
 * 
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_95), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 698; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 698; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "_PyXAL.pyx":699
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         return self._wrapper.isStreamed()             # <<<<<<<<<<<<<<
 * 
 *     def readPcmData(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s___wrapper); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 699; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__isStreamed); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 699; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 699; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.PySound.isStreamed", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":701
 *         return self._wrapper.isStreamed()
 * 
 *     def readPcmData(self):             # <<<<<<<<<<<<<<
 *         '''
 *         read the raw data of the sound and return it the format of said data can be determined from the size, chanels, bits per sample and sampleling rate of the sound
 */

static PyObject *__pyx_pf_6_PyXAL_7PySound_14readPcmData(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_6_PyXAL_7PySound_14readPcmData[] = "\n        read the raw data of the sound and return it the format of said data can be determined from the size, chanels, bits per sample and sampleling rate of the sound\n        @return: a 2 tuple of (number of bits read, string of bytes read)\n        ";
static PyMethodDef __pyx_mdef_6_PyXAL_7PySound_14readPcmData = {__Pyx_NAMESTR("readPcmData"), (PyCFunction)__pyx_pf_6_PyXAL_7PySound_14readPcmData, METH_O, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_7PySound_14readPcmData)};
static PyObject *__pyx_pf_6_PyXAL_7PySound_14readPcmData(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("readPcmData");
  __pyx_self = __pyx_self;

  /* "_PyXAL.pyx":706
 *         @return: a 2 tuple of (number of bits read, string of bytes read)
 *         '''
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 706; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 706; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 706; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = (!__pyx_t_3);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":707
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_96), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 707; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 707; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "_PyXAL.pyx":708
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         return self._wrapper.readPcmData()
 */
  __pyx_t_2 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__destroyed); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 708; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 708; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":709
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         return self._wrapper.readPcmData()
 * 
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_97), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 709; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 709; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "_PyXAL.pyx":710
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         return self._wrapper.readPcmData()             # <<<<<<<<<<<<<<
 * 
 * class PyPlayer(object):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s___wrapper); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 710; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__readPcmData); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 710; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 710; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.PySound.readPcmData", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":721
 *     destroyed = False
 * 
 *     def __init__(self, sound):             # <<<<<<<<<<<<<<
 *         '''
 *         a PyPlayer object created by bassing a PySound to the __init__ method
 */

static PyObject *__pyx_pf_6_PyXAL_8PyPlayer___init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6_PyXAL_8PyPlayer___init__[] = "\n        a PyPlayer object created by bassing a PySound to the __init__ method\n        ";
static PyMethodDef __pyx_mdef_6_PyXAL_8PyPlayer___init__ = {__Pyx_NAMESTR("__init__"), (PyCFunction)__pyx_pf_6_PyXAL_8PyPlayer___init__, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_8PyPlayer___init__)};
static PyObject *__pyx_pf_6_PyXAL_8PyPlayer___init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_sound = 0;
  PyObject *__pyx_v_sound_name = NULL;
  char *__pyx_v_name;
  hltypes::String __pyx_v_hl_name;
  xal::Player *__pyx_v_player;
  struct __pyx_obj_6_PyXAL_PlayerWrapper *__pyx_v_wrapper = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  char *__pyx_t_5;
  xal::Player *__pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__self,&__pyx_n_s__sound,0};
  __Pyx_RefNannySetupContext("__init__");
  __pyx_self = __pyx_self;
  {
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__self);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__sound);
        if (likely(values[1])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 721; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "__init__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 721; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_self = values[0];
    __pyx_v_sound = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 721; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("_PyXAL.PyPlayer.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "_PyXAL.pyx":725
 *         a PyPlayer object created by bassing a PySound to the __init__ method
 *         '''
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         if not isinstance(sound, PySound):
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 725; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 725; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 725; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = (!__pyx_t_3);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":726
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if not isinstance(sound, PySound):
 *             raise TypeError("Expected argument 1 to be of type PySound got %s" % type(sound))
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_98), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 726; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 726; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "_PyXAL.pyx":727
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         if not isinstance(sound, PySound):             # <<<<<<<<<<<<<<
 *             raise TypeError("Expected argument 1 to be of type PySound got %s" % type(sound))
 *         sound_name = sound.getName()
 */
  __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__PySound); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 727; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = PyObject_IsInstance(__pyx_v_sound, __pyx_t_2); if (unlikely(__pyx_t_4 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 727; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_3 = (!__pyx_t_4);
  if (__pyx_t_3) {

    /* "_PyXAL.pyx":728
 *             raise RuntimeError("XAL is not Initialized")
 *         if not isinstance(sound, PySound):
 *             raise TypeError("Expected argument 1 to be of type PySound got %s" % type(sound))             # <<<<<<<<<<<<<<
 *         sound_name = sound.getName()
 *         cdef char* name = sound_name
 */
    __pyx_t_2 = PyNumber_Remainder(((PyObject *)__pyx_kp_s_99), ((PyObject *)Py_TYPE(__pyx_v_sound))); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 728; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_2));
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 728; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_1));
    PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_t_2));
    __Pyx_GIVEREF(((PyObject *)__pyx_t_2));
    __pyx_t_2 = 0;
    __pyx_t_2 = PyObject_Call(__pyx_builtin_TypeError, ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 728; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 728; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L7;
  }
  __pyx_L7:;

  /* "_PyXAL.pyx":729
 *         if not isinstance(sound, PySound):
 *             raise TypeError("Expected argument 1 to be of type PySound got %s" % type(sound))
 *         sound_name = sound.getName()             # <<<<<<<<<<<<<<
 *         cdef char* name = sound_name
 *         cdef String hl_name = String(name)
 */
  __pyx_t_2 = PyObject_GetAttr(__pyx_v_sound, __pyx_n_s__getName); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 729; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 729; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_sound_name = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "_PyXAL.pyx":730
 *             raise TypeError("Expected argument 1 to be of type PySound got %s" % type(sound))
 *         sound_name = sound.getName()
 *         cdef char* name = sound_name             # <<<<<<<<<<<<<<
 *         cdef String hl_name = String(name)
 *         cdef XAL.Player* player
 */
  __pyx_t_5 = PyBytes_AsString(__pyx_v_sound_name); if (unlikely((!__pyx_t_5) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 730; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_name = __pyx_t_5;

  /* "_PyXAL.pyx":731
 *         sound_name = sound.getName()
 *         cdef char* name = sound_name
 *         cdef String hl_name = String(name)             # <<<<<<<<<<<<<<
 *         cdef XAL.Player* player
 *         player = XAL.mgr.createPlayer(hl_name)
 */
  __pyx_v_hl_name = hltypes::String(__pyx_v_name);

  /* "_PyXAL.pyx":733
 *         cdef String hl_name = String(name)
 *         cdef XAL.Player* player
 *         player = XAL.mgr.createPlayer(hl_name)             # <<<<<<<<<<<<<<
 *         if player == NULL:
 *             raise RuntimeError("XAL Failed to create a player for %s" % sound_name)
 */
  try {__pyx_t_6 = xal::mgr->createPlayer(__pyx_v_hl_name);} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 733; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}
  __pyx_v_player = __pyx_t_6;

  /* "_PyXAL.pyx":734
 *         cdef XAL.Player* player
 *         player = XAL.mgr.createPlayer(hl_name)
 *         if player == NULL:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL Failed to create a player for %s" % sound_name)
 *         cdef PlayerWrapper wrapper = PlayerWrapper.__new__(PlayerWrapper)
 */
  __pyx_t_3 = (__pyx_v_player == NULL);
  if (__pyx_t_3) {

    /* "_PyXAL.pyx":735
 *         player = XAL.mgr.createPlayer(hl_name)
 *         if player == NULL:
 *             raise RuntimeError("XAL Failed to create a player for %s" % sound_name)             # <<<<<<<<<<<<<<
 *         cdef PlayerWrapper wrapper = PlayerWrapper.__new__(PlayerWrapper)
 *         wrapper._pointer = player
 */
    __pyx_t_1 = PyNumber_Remainder(((PyObject *)__pyx_kp_s_100), __pyx_v_sound_name); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 735; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_1));
    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 735; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_2));
    PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_t_1));
    __Pyx_GIVEREF(((PyObject *)__pyx_t_1));
    __pyx_t_1 = 0;
    __pyx_t_1 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 735; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 735; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L8;
  }
  __pyx_L8:;

  /* "_PyXAL.pyx":736
 *         if player == NULL:
 *             raise RuntimeError("XAL Failed to create a player for %s" % sound_name)
 *         cdef PlayerWrapper wrapper = PlayerWrapper.__new__(PlayerWrapper)             # <<<<<<<<<<<<<<
 *         wrapper._pointer = player
 *         wrapper.destroyed = False
 */
  __pyx_t_1 = __Pyx_tp_new(((PyObject*)__pyx_ptype_6_PyXAL_PlayerWrapper)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 736; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_6_PyXAL_PlayerWrapper)))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 736; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_wrapper = ((struct __pyx_obj_6_PyXAL_PlayerWrapper *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "_PyXAL.pyx":737
 *             raise RuntimeError("XAL Failed to create a player for %s" % sound_name)
 *         cdef PlayerWrapper wrapper = PlayerWrapper.__new__(PlayerWrapper)
 *         wrapper._pointer = player             # <<<<<<<<<<<<<<
 *         wrapper.destroyed = False
 *         self._wrapper = wrapper
 */
  __pyx_v_wrapper->_pointer = __pyx_v_player;

  /* "_PyXAL.pyx":738
 *         cdef PlayerWrapper wrapper = PlayerWrapper.__new__(PlayerWrapper)
 *         wrapper._pointer = player
 *         wrapper.destroyed = False             # <<<<<<<<<<<<<<
 *         self._wrapper = wrapper
 *         self._sound = sound
 */
  __pyx_v_wrapper->destroyed = 0;

  /* "_PyXAL.pyx":739
 *         wrapper._pointer = player
 *         wrapper.destroyed = False
 *         self._wrapper = wrapper             # <<<<<<<<<<<<<<
 *         self._sound = sound
 * 
 */
  if (PyObject_SetAttr(__pyx_v_self, __pyx_n_s___wrapper, ((PyObject *)__pyx_v_wrapper)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 739; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_PyXAL.pyx":740
 *         wrapper.destroyed = False
 *         self._wrapper = wrapper
 *         self._sound = sound             # <<<<<<<<<<<<<<
 * 
 *     def _destroy(self):
 */
  if (PyObject_SetAttr(__pyx_v_self, __pyx_n_s___sound, __pyx_v_sound) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 740; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.PyPlayer.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_sound_name);
  __Pyx_XDECREF((PyObject *)__pyx_v_wrapper);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":742
 *         self._sound = sound
 * 
 *     def _destroy(self):             # <<<<<<<<<<<<<<
 *         if self.isXALInitialized() and not self.destroyed:
 *             self._wrapper._destroy()
 */

static PyObject *__pyx_pf_6_PyXAL_8PyPlayer_1_destroy(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static PyMethodDef __pyx_mdef_6_PyXAL_8PyPlayer_1_destroy = {__Pyx_NAMESTR("_destroy"), (PyCFunction)__pyx_pf_6_PyXAL_8PyPlayer_1_destroy, METH_O, __Pyx_DOCSTR(0)};
static PyObject *__pyx_pf_6_PyXAL_8PyPlayer_1_destroy(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_destroy");
  __pyx_self = __pyx_self;

  /* "_PyXAL.pyx":743
 * 
 *     def _destroy(self):
 *         if self.isXALInitialized() and not self.destroyed:             # <<<<<<<<<<<<<<
 *             self._wrapper._destroy()
 *             self.destroyed = True
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 743; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 743; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 743; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {
    __pyx_t_2 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__destroyed); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 743; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 743; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_5 = (!__pyx_t_4);
    __pyx_t_4 = __pyx_t_5;
  } else {
    __pyx_t_4 = __pyx_t_3;
  }
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":744
 *     def _destroy(self):
 *         if self.isXALInitialized() and not self.destroyed:
 *             self._wrapper._destroy()             # <<<<<<<<<<<<<<
 *             self.destroyed = True
 * 
 */
    __pyx_t_2 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s___wrapper); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 744; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s___destroy); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 744; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 744; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "_PyXAL.pyx":745
 *         if self.isXALInitialized() and not self.destroyed:
 *             self._wrapper._destroy()
 *             self.destroyed = True             # <<<<<<<<<<<<<<
 * 
 *     def __del__(self):
 */
    __pyx_t_2 = __Pyx_PyBool_FromLong(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 745; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    if (PyObject_SetAttr(__pyx_v_self, __pyx_n_s__destroyed, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 745; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    goto __pyx_L5;
  }
  __pyx_L5:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.PyPlayer._destroy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":747
 *             self.destroyed = True
 * 
 *     def __del__(self):             # <<<<<<<<<<<<<<
 *         global Mgr
 *         if not self.destroyed:
 */

static PyObject *__pyx_pf_6_PyXAL_8PyPlayer_2__del__(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static PyMethodDef __pyx_mdef_6_PyXAL_8PyPlayer_2__del__ = {__Pyx_NAMESTR("__del__"), (PyCFunction)__pyx_pf_6_PyXAL_8PyPlayer_2__del__, METH_O, __Pyx_DOCSTR(0)};
static PyObject *__pyx_pf_6_PyXAL_8PyPlayer_2__del__(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__del__");
  __pyx_self = __pyx_self;

  /* "_PyXAL.pyx":749
 *     def __del__(self):
 *         global Mgr
 *         if not self.destroyed:             # <<<<<<<<<<<<<<
 *             if Mgr is not None:
 *                 if hasattr(Mgr, "_players"):
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__destroyed); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 749; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 749; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = (!__pyx_t_2);
  if (__pyx_t_3) {

    /* "_PyXAL.pyx":750
 *         global Mgr
 *         if not self.destroyed:
 *             if Mgr is not None:             # <<<<<<<<<<<<<<
 *                 if hasattr(Mgr, "_players"):
 *                     if Mgr._players.has_key(self.getName()):
 */
    __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__Mgr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 750; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = (__pyx_t_1 != Py_None);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (__pyx_t_3) {

      /* "_PyXAL.pyx":751
 *         if not self.destroyed:
 *             if Mgr is not None:
 *                 if hasattr(Mgr, "_players"):             # <<<<<<<<<<<<<<
 *                     if Mgr._players.has_key(self.getName()):
 *                         if self in Mgr._player[self.getName()]:
 */
      __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__Mgr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 751; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_4 = ((PyObject *)__pyx_n_s___players);
      __Pyx_INCREF(__pyx_t_4);
      __pyx_t_3 = PyObject_HasAttr(__pyx_t_1, __pyx_t_4); if (unlikely(__pyx_t_3 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 751; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_3) {

        /* "_PyXAL.pyx":752
 *             if Mgr is not None:
 *                 if hasattr(Mgr, "_players"):
 *                     if Mgr._players.has_key(self.getName()):             # <<<<<<<<<<<<<<
 *                         if self in Mgr._player[self.getName()]:
 *                             Mgr.players[self.getName()].remove(self)
 */
        __pyx_t_4 = __Pyx_GetName(__pyx_m, __pyx_n_s__Mgr); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 752; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_1 = PyObject_GetAttr(__pyx_t_4, __pyx_n_s___players); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 752; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_4 = PyObject_GetAttr(__pyx_t_1, __pyx_n_s__has_key); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 752; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__getName); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 752; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_5 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 752; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 752; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(((PyObject *)__pyx_t_1));
        PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_5);
        __Pyx_GIVEREF(__pyx_t_5);
        __pyx_t_5 = 0;
        __pyx_t_5 = PyObject_Call(__pyx_t_4, ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 752; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
        __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 752; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        if (__pyx_t_3) {

          /* "_PyXAL.pyx":753
 *                 if hasattr(Mgr, "_players"):
 *                     if Mgr._players.has_key(self.getName()):
 *                         if self in Mgr._player[self.getName()]:             # <<<<<<<<<<<<<<
 *                             Mgr.players[self.getName()].remove(self)
 *             if self.isXALInitialized():
 */
          __pyx_t_5 = __Pyx_GetName(__pyx_m, __pyx_n_s__Mgr); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 753; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_5);
          __pyx_t_1 = PyObject_GetAttr(__pyx_t_5, __pyx_n_s___player); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 753; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __pyx_t_5 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__getName); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 753; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_5);
          __pyx_t_4 = PyObject_Call(__pyx_t_5, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 753; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __pyx_t_5 = PyObject_GetItem(__pyx_t_1, __pyx_t_4); if (!__pyx_t_5) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 753; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __pyx_t_3 = ((PySequence_Contains(__pyx_t_5, __pyx_v_self))); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 753; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          if (__pyx_t_3) {

            /* "_PyXAL.pyx":754
 *                     if Mgr._players.has_key(self.getName()):
 *                         if self in Mgr._player[self.getName()]:
 *                             Mgr.players[self.getName()].remove(self)             # <<<<<<<<<<<<<<
 *             if self.isXALInitialized():
 *                 self._destroy()
 */
            __pyx_t_5 = __Pyx_GetName(__pyx_m, __pyx_n_s__Mgr); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 754; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_GOTREF(__pyx_t_5);
            __pyx_t_4 = PyObject_GetAttr(__pyx_t_5, __pyx_n_s__players); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 754; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_GOTREF(__pyx_t_4);
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            __pyx_t_5 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__getName); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 754; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_GOTREF(__pyx_t_5);
            __pyx_t_1 = PyObject_Call(__pyx_t_5, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 754; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_GOTREF(__pyx_t_1);
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            __pyx_t_5 = PyObject_GetItem(__pyx_t_4, __pyx_t_1); if (!__pyx_t_5) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 754; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_GOTREF(__pyx_t_5);
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
            __pyx_t_1 = PyObject_GetAttr(__pyx_t_5, __pyx_n_s__remove); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 754; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_GOTREF(__pyx_t_1);
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 754; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_GOTREF(((PyObject *)__pyx_t_5));
            __Pyx_INCREF(__pyx_v_self);
            PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_v_self);
            __Pyx_GIVEREF(__pyx_v_self);
            __pyx_t_4 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_5), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 754; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_GOTREF(__pyx_t_4);
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
            __Pyx_DECREF(((PyObject *)__pyx_t_5)); __pyx_t_5 = 0;
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            goto __pyx_L9;
          }
          __pyx_L9:;
          goto __pyx_L8;
        }
        __pyx_L8:;
        goto __pyx_L7;
      }
      __pyx_L7:;
      goto __pyx_L6;
    }
    __pyx_L6:;

    /* "_PyXAL.pyx":755
 *                         if self in Mgr._player[self.getName()]:
 *                             Mgr.players[self.getName()].remove(self)
 *             if self.isXALInitialized():             # <<<<<<<<<<<<<<
 *                 self._destroy()
 *         del self._wrapper
 */
    __pyx_t_4 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__isXALInitialized); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 755; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyObject_Call(__pyx_t_4, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 755; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 755; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__pyx_t_3) {

      /* "_PyXAL.pyx":756
 *                             Mgr.players[self.getName()].remove(self)
 *             if self.isXALInitialized():
 *                 self._destroy()             # <<<<<<<<<<<<<<
 *         del self._wrapper
 *         del self._sound
 */
      __pyx_t_5 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s___destroy); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 756; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_4 = PyObject_Call(__pyx_t_5, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 756; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      goto __pyx_L10;
    }
    __pyx_L10:;
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "_PyXAL.pyx":757
 *             if self.isXALInitialized():
 *                 self._destroy()
 *         del self._wrapper             # <<<<<<<<<<<<<<
 *         del self._sound
 * 
 */
  if (PyObject_DelAttr(__pyx_v_self, __pyx_n_s___wrapper) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 757; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_PyXAL.pyx":758
 *                 self._destroy()
 *         del self._wrapper
 *         del self._sound             # <<<<<<<<<<<<<<
 * 
 * 
 */
  if (PyObject_DelAttr(__pyx_v_self, __pyx_n_s___sound) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 758; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("_PyXAL.PyPlayer.__del__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":761
 * 
 * 
 *     def isXALInitialized(self):             # <<<<<<<<<<<<<<
 *         '''
 *         returns true if the C++ side of the interface to XAL exists
 */

static PyObject *__pyx_pf_6_PyXAL_8PyPlayer_3isXALInitialized(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_6_PyXAL_8PyPlayer_3isXALInitialized[] = "\n        returns true if the C++ side of the interface to XAL exists\n        ";
static PyMethodDef __pyx_mdef_6_PyXAL_8PyPlayer_3isXALInitialized = {__Pyx_NAMESTR("isXALInitialized"), (PyCFunction)__pyx_pf_6_PyXAL_8PyPlayer_3isXALInitialized, METH_O, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_8PyPlayer_3isXALInitialized)};
static PyObject *__pyx_pf_6_PyXAL_8PyPlayer_3isXALInitialized(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("isXALInitialized");
  __pyx_self = __pyx_self;

  /* "_PyXAL.pyx":765
 *         returns true if the C++ side of the interface to XAL exists
 *         '''
 *         if XAL.mgr != NULL:             # <<<<<<<<<<<<<<
 *             return True
 *         else:
 */
  __pyx_t_1 = (xal::mgr != NULL);
  if (__pyx_t_1) {

    /* "_PyXAL.pyx":766
 *         '''
 *         if XAL.mgr != NULL:
 *             return True             # <<<<<<<<<<<<<<
 *         else:
 *             return False
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyBool_FromLong(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 766; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
    goto __pyx_L5;
  }
  /*else*/ {

    /* "_PyXAL.pyx":768
 *             return True
 *         else:
 *             return False             # <<<<<<<<<<<<<<
 * 
 *     def getGain(self):
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyBool_FromLong(0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 768; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
  }
  __pyx_L5:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.PyPlayer.isXALInitialized", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":770
 *             return False
 * 
 *     def getGain(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: float the current gain of the player (also knows as volume)
 */

static PyObject *__pyx_pf_6_PyXAL_8PyPlayer_4getGain(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_6_PyXAL_8PyPlayer_4getGain[] = "\n        @return: float the current gain of the player (also knows as volume)\n        ";
static PyMethodDef __pyx_mdef_6_PyXAL_8PyPlayer_4getGain = {__Pyx_NAMESTR("getGain"), (PyCFunction)__pyx_pf_6_PyXAL_8PyPlayer_4getGain, METH_O, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_8PyPlayer_4getGain)};
static PyObject *__pyx_pf_6_PyXAL_8PyPlayer_4getGain(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getGain");
  __pyx_self = __pyx_self;

  /* "_PyXAL.pyx":774
 *         @return: float the current gain of the player (also knows as volume)
 *         '''
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 774; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 774; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 774; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = (!__pyx_t_3);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":775
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_101), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 775; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 775; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "_PyXAL.pyx":776
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         return self._wrapper.getGain()
 */
  __pyx_t_2 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__destroyed); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 776; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 776; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":777
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         return self._wrapper.getGain()
 * 
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_102), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 777; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 777; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "_PyXAL.pyx":778
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         return self._wrapper.getGain()             # <<<<<<<<<<<<<<
 * 
 *     def setGain(self, float value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s___wrapper); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 778; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__getGain); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 778; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 778; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.PyPlayer.getGain", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":780
 *         return self._wrapper.getGain()
 * 
 *     def setGain(self, float value):             # <<<<<<<<<<<<<<
 *         '''
 *         set the gain of the player (also knows as volume)
 */

static PyObject *__pyx_pf_6_PyXAL_8PyPlayer_5setGain(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6_PyXAL_8PyPlayer_5setGain[] = "\n        set the gain of the player (also knows as volume)\n        @param value: float the value of the volume to set 1.0 is normal 2.0 is twice as loud 0.5 is half volume ect.\n        ";
static PyMethodDef __pyx_mdef_6_PyXAL_8PyPlayer_5setGain = {__Pyx_NAMESTR("setGain"), (PyCFunction)__pyx_pf_6_PyXAL_8PyPlayer_5setGain, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_8PyPlayer_5setGain)};
static PyObject *__pyx_pf_6_PyXAL_8PyPlayer_5setGain(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  float __pyx_v_value;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__self,&__pyx_n_s__value,0};
  __Pyx_RefNannySetupContext("setGain");
  __pyx_self = __pyx_self;
  {
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__self);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__value);
        if (likely(values[1])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setGain", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 780; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "setGain") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 780; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_self = values[0];
    __pyx_v_value = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_value == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 780; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setGain", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 780; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("_PyXAL.PyPlayer.setGain", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "_PyXAL.pyx":785
 *         @param value: float the value of the volume to set 1.0 is normal 2.0 is twice as loud 0.5 is half volume ect.
 *         '''
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 785; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 785; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 785; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = (!__pyx_t_3);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":786
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_103), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 786; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 786; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "_PyXAL.pyx":787
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         self._wrapper.setGain(value)
 */
  __pyx_t_2 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__destroyed); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 787; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 787; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":788
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         self._wrapper.setGain(value)
 * 
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_104), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 788; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 788; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L7;
  }
  __pyx_L7:;

  /* "_PyXAL.pyx":789
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         self._wrapper.setGain(value)             # <<<<<<<<<<<<<<
 * 
 *     def getPitch(self):
 */
  __pyx_t_2 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s___wrapper); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 789; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__setGain); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 789; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_value); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 789; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 789; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_5));
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_5), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 789; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_5)); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("_PyXAL.PyPlayer.setGain", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":791
 *         self._wrapper.setGain(value)
 * 
 *     def getPitch(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: float the current pitch of the player
 */

static PyObject *__pyx_pf_6_PyXAL_8PyPlayer_6getPitch(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_6_PyXAL_8PyPlayer_6getPitch[] = "\n        @return: float the current pitch of the player\n        ";
static PyMethodDef __pyx_mdef_6_PyXAL_8PyPlayer_6getPitch = {__Pyx_NAMESTR("getPitch"), (PyCFunction)__pyx_pf_6_PyXAL_8PyPlayer_6getPitch, METH_O, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_8PyPlayer_6getPitch)};
static PyObject *__pyx_pf_6_PyXAL_8PyPlayer_6getPitch(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getPitch");
  __pyx_self = __pyx_self;

  /* "_PyXAL.pyx":795
 *         @return: float the current pitch of the player
 *         '''
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 795; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 795; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 795; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = (!__pyx_t_3);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":796
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_105), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 796; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 796; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "_PyXAL.pyx":797
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         return self._wrapper.getPitch()
 */
  __pyx_t_2 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__destroyed); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 797; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 797; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":798
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         return self._wrapper.getPitch()
 * 
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_106), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 798; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 798; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "_PyXAL.pyx":799
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         return self._wrapper.getPitch()             # <<<<<<<<<<<<<<
 * 
 *     def setPitch(self, float value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s___wrapper); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 799; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__getPitch); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 799; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 799; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.PyPlayer.getPitch", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":801
 *         return self._wrapper.getPitch()
 * 
 *     def setPitch(self, float value):             # <<<<<<<<<<<<<<
 *         '''
 *         set the current pitch of the player
 */

static PyObject *__pyx_pf_6_PyXAL_8PyPlayer_7setPitch(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6_PyXAL_8PyPlayer_7setPitch[] = "\n        set the current pitch of the player\n        @param value: float the value of the pitch to set to set 1.0 is normal 2.0 is a 200% shift 0.5 is a 50% shift\n        ";
static PyMethodDef __pyx_mdef_6_PyXAL_8PyPlayer_7setPitch = {__Pyx_NAMESTR("setPitch"), (PyCFunction)__pyx_pf_6_PyXAL_8PyPlayer_7setPitch, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_8PyPlayer_7setPitch)};
static PyObject *__pyx_pf_6_PyXAL_8PyPlayer_7setPitch(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  float __pyx_v_value;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__self,&__pyx_n_s__value,0};
  __Pyx_RefNannySetupContext("setPitch");
  __pyx_self = __pyx_self;
  {
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__self);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__value);
        if (likely(values[1])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setPitch", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 801; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "setPitch") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 801; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_self = values[0];
    __pyx_v_value = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_value == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 801; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setPitch", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 801; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("_PyXAL.PyPlayer.setPitch", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "_PyXAL.pyx":806
 *         @param value: float the value of the pitch to set to set 1.0 is normal 2.0 is a 200% shift 0.5 is a 50% shift
 *         '''
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 806; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 806; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 806; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = (!__pyx_t_3);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":807
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_107), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 807; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 807; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "_PyXAL.pyx":808
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         self._wrapper.setPitch(value)
 */
  __pyx_t_2 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__destroyed); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 808; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 808; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":809
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         self._wrapper.setPitch(value)
 * 
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_108), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 809; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 809; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L7;
  }
  __pyx_L7:;

  /* "_PyXAL.pyx":810
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         self._wrapper.setPitch(value)             # <<<<<<<<<<<<<<
 * 
 *     def getSound(self):
 */
  __pyx_t_2 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s___wrapper); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 810; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__setPitch); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 810; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_value); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 810; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 810; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_5));
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_5), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 810; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_5)); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("_PyXAL.PyPlayer.setPitch", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":812
 *         self._wrapper.setPitch(value)
 * 
 *     def getSound(self):             # <<<<<<<<<<<<<<
 *         '''
 *         return a PySound class wrapper for the sound object of the player
 */

static PyObject *__pyx_pf_6_PyXAL_8PyPlayer_8getSound(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_6_PyXAL_8PyPlayer_8getSound[] = "\n        return a PySound class wrapper for the sound object of the player\n        ";
static PyMethodDef __pyx_mdef_6_PyXAL_8PyPlayer_8getSound = {__Pyx_NAMESTR("getSound"), (PyCFunction)__pyx_pf_6_PyXAL_8PyPlayer_8getSound, METH_O, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_8PyPlayer_8getSound)};
static PyObject *__pyx_pf_6_PyXAL_8PyPlayer_8getSound(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getSound");
  __pyx_self = __pyx_self;

  /* "_PyXAL.pyx":816
 *         return a PySound class wrapper for the sound object of the player
 *         '''
 *         return self._sound             # <<<<<<<<<<<<<<
 * 
 *     def getName(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s___sound); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 816; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_PyXAL.PyPlayer.getSound", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":818
 *         return self._sound
 * 
 *     def getName(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: returns the string name of the sound. it is normal the full path of teh sound file with out the file extention
 */

static PyObject *__pyx_pf_6_PyXAL_8PyPlayer_9getName(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_6_PyXAL_8PyPlayer_9getName[] = "\n        @return: returns the string name of the sound. it is normal the full path of teh sound file with out the file extention\n        ";
static PyMethodDef __pyx_mdef_6_PyXAL_8PyPlayer_9getName = {__Pyx_NAMESTR("getName"), (PyCFunction)__pyx_pf_6_PyXAL_8PyPlayer_9getName, METH_O, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_8PyPlayer_9getName)};
static PyObject *__pyx_pf_6_PyXAL_8PyPlayer_9getName(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getName");
  __pyx_self = __pyx_self;

  /* "_PyXAL.pyx":822
 *         @return: returns the string name of the sound. it is normal the full path of teh sound file with out the file extention
 *         '''
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 822; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 822; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 822; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = (!__pyx_t_3);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":823
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_109), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 823; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 823; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "_PyXAL.pyx":824
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         return self._wrapper.getName()
 */
  __pyx_t_2 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__destroyed); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 824; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 824; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":825
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         return self._wrapper.getName()
 * 
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_110), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 825; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 825; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "_PyXAL.pyx":826
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         return self._wrapper.getName()             # <<<<<<<<<<<<<<
 * 
 *     def getFilename(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s___wrapper); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 826; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__getName); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 826; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 826; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.PyPlayer.getName", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":828
 *         return self._wrapper.getName()
 * 
 *     def getFilename(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: returns a string containing the file name the sound was loaded from
 */

static PyObject *__pyx_pf_6_PyXAL_8PyPlayer_10getFilename(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_6_PyXAL_8PyPlayer_10getFilename[] = "\n        @return: returns a string containing the file name the sound was loaded from\n        ";
static PyMethodDef __pyx_mdef_6_PyXAL_8PyPlayer_10getFilename = {__Pyx_NAMESTR("getFilename"), (PyCFunction)__pyx_pf_6_PyXAL_8PyPlayer_10getFilename, METH_O, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_8PyPlayer_10getFilename)};
static PyObject *__pyx_pf_6_PyXAL_8PyPlayer_10getFilename(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getFilename");
  __pyx_self = __pyx_self;

  /* "_PyXAL.pyx":832
 *         @return: returns a string containing the file name the sound was loaded from
 *         '''
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 832; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 832; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 832; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = (!__pyx_t_3);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":833
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_111), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 833; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 833; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "_PyXAL.pyx":834
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         return self._wrapper.getFilename()
 */
  __pyx_t_2 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__destroyed); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 834; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 834; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":835
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         return self._wrapper.getFilename()
 * 
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_112), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 835; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 835; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "_PyXAL.pyx":836
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         return self._wrapper.getFilename()             # <<<<<<<<<<<<<<
 * 
 *     def getRealFilename(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s___wrapper); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 836; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__getFilename); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 836; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 836; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.PyPlayer.getFilename", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":838
 *         return self._wrapper.getFilename()
 * 
 *     def getRealFilename(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: returns a string with the full path to the file the string was loaded from
 */

static PyObject *__pyx_pf_6_PyXAL_8PyPlayer_11getRealFilename(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_6_PyXAL_8PyPlayer_11getRealFilename[] = "\n        @return: returns a string with the full path to the file the string was loaded from\n        ";
static PyMethodDef __pyx_mdef_6_PyXAL_8PyPlayer_11getRealFilename = {__Pyx_NAMESTR("getRealFilename"), (PyCFunction)__pyx_pf_6_PyXAL_8PyPlayer_11getRealFilename, METH_O, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_8PyPlayer_11getRealFilename)};
static PyObject *__pyx_pf_6_PyXAL_8PyPlayer_11getRealFilename(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getRealFilename");
  __pyx_self = __pyx_self;

  /* "_PyXAL.pyx":842
 *         @return: returns a string with the full path to the file the string was loaded from
 *         '''
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 842; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 842; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 842; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = (!__pyx_t_3);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":843
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_113), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 843; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 843; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "_PyXAL.pyx":844
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         return self._wrapper.getRealFilename()
 */
  __pyx_t_2 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__destroyed); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 844; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 844; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":845
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         return self._wrapper.getRealFilename()
 * 
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_114), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 845; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 845; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "_PyXAL.pyx":846
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         return self._wrapper.getRealFilename()             # <<<<<<<<<<<<<<
 * 
 *     def getDuration(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s___wrapper); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 846; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__getRealFilename); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 846; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 846; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.PyPlayer.getRealFilename", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":848
 *         return self._wrapper.getRealFilename()
 * 
 *     def getDuration(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: float duration of the sound in seconds. it is a floating point number to acound for fractions of a second
 */

static PyObject *__pyx_pf_6_PyXAL_8PyPlayer_12getDuration(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_6_PyXAL_8PyPlayer_12getDuration[] = "\n        @return: float duration of the sound in seconds. it is a floating point number to acound for fractions of a second\n        ";
static PyMethodDef __pyx_mdef_6_PyXAL_8PyPlayer_12getDuration = {__Pyx_NAMESTR("getDuration"), (PyCFunction)__pyx_pf_6_PyXAL_8PyPlayer_12getDuration, METH_O, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_8PyPlayer_12getDuration)};
static PyObject *__pyx_pf_6_PyXAL_8PyPlayer_12getDuration(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getDuration");
  __pyx_self = __pyx_self;

  /* "_PyXAL.pyx":852
 *         @return: float duration of the sound in seconds. it is a floating point number to acound for fractions of a second
 *         '''
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 852; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 852; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 852; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = (!__pyx_t_3);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":853
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_115), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 853; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 853; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "_PyXAL.pyx":854
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         return self._wrapper.getDuration()
 */
  __pyx_t_2 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__destroyed); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 854; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 854; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":855
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         return self._wrapper.getDuration()
 * 
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_116), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 855; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 855; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "_PyXAL.pyx":856
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         return self._wrapper.getDuration()             # <<<<<<<<<<<<<<
 * 
 *     def getSize(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s___wrapper); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 856; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__getDuration); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 856; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 856; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.PyPlayer.getDuration", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":858
 *         return self._wrapper.getDuration()
 * 
 *     def getSize(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: int the size of the sound data in bits not bytes
 */

static PyObject *__pyx_pf_6_PyXAL_8PyPlayer_13getSize(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_6_PyXAL_8PyPlayer_13getSize[] = "\n        @return: int the size of the sound data in bits not bytes\n        ";
static PyMethodDef __pyx_mdef_6_PyXAL_8PyPlayer_13getSize = {__Pyx_NAMESTR("getSize"), (PyCFunction)__pyx_pf_6_PyXAL_8PyPlayer_13getSize, METH_O, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_8PyPlayer_13getSize)};
static PyObject *__pyx_pf_6_PyXAL_8PyPlayer_13getSize(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getSize");
  __pyx_self = __pyx_self;

  /* "_PyXAL.pyx":862
 *         @return: int the size of the sound data in bits not bytes
 *         '''
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 862; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 862; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 862; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = (!__pyx_t_3);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":863
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_117), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 863; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 863; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "_PyXAL.pyx":864
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         return self._wrapper.getSize()
 */
  __pyx_t_2 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__destroyed); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 864; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 864; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":865
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         return self._wrapper.getSize()
 * 
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_118), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 865; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 865; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "_PyXAL.pyx":866
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         return self._wrapper.getSize()             # <<<<<<<<<<<<<<
 * 
 *     def getTimePosition(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s___wrapper); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 866; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__getSize); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 866; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 866; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.PyPlayer.getSize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":868
 *         return self._wrapper.getSize()
 * 
 *     def getTimePosition(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: float the time position in seconds
 */

static PyObject *__pyx_pf_6_PyXAL_8PyPlayer_14getTimePosition(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_6_PyXAL_8PyPlayer_14getTimePosition[] = "\n        @return: float the time position in seconds\n        ";
static PyMethodDef __pyx_mdef_6_PyXAL_8PyPlayer_14getTimePosition = {__Pyx_NAMESTR("getTimePosition"), (PyCFunction)__pyx_pf_6_PyXAL_8PyPlayer_14getTimePosition, METH_O, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_8PyPlayer_14getTimePosition)};
static PyObject *__pyx_pf_6_PyXAL_8PyPlayer_14getTimePosition(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getTimePosition");
  __pyx_self = __pyx_self;

  /* "_PyXAL.pyx":872
 *         @return: float the time position in seconds
 *         '''
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 872; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 872; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 872; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = (!__pyx_t_3);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":873
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_119), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 873; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 873; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "_PyXAL.pyx":874
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         return self._wrapper.getTimePosition()
 */
  __pyx_t_2 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__destroyed); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 874; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 874; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":875
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         return self._wrapper.getTimePosition()
 * 
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_120), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 875; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 875; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "_PyXAL.pyx":876
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         return self._wrapper.getTimePosition()             # <<<<<<<<<<<<<<
 * 
 *     def getSamplePosition(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s___wrapper); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 876; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__getTimePosition); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 876; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 876; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.PyPlayer.getTimePosition", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":878
 *         return self._wrapper.getTimePosition()
 * 
 *     def getSamplePosition(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: unsigned int the position in the buffer
 */

static PyObject *__pyx_pf_6_PyXAL_8PyPlayer_15getSamplePosition(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_6_PyXAL_8PyPlayer_15getSamplePosition[] = "\n        @return: unsigned int the position in the buffer\n        ";
static PyMethodDef __pyx_mdef_6_PyXAL_8PyPlayer_15getSamplePosition = {__Pyx_NAMESTR("getSamplePosition"), (PyCFunction)__pyx_pf_6_PyXAL_8PyPlayer_15getSamplePosition, METH_O, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_8PyPlayer_15getSamplePosition)};
static PyObject *__pyx_pf_6_PyXAL_8PyPlayer_15getSamplePosition(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getSamplePosition");
  __pyx_self = __pyx_self;

  /* "_PyXAL.pyx":882
 *         @return: unsigned int the position in the buffer
 *         '''
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 882; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 882; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 882; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = (!__pyx_t_3);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":883
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_121), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 883; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 883; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "_PyXAL.pyx":884
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         return self._wrapper.getSamplePosition()
 */
  __pyx_t_2 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__destroyed); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 884; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 884; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":885
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         return self._wrapper.getSamplePosition()
 * 
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_122), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 885; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 885; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "_PyXAL.pyx":886
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         return self._wrapper.getSamplePosition()             # <<<<<<<<<<<<<<
 * 
 *     def isPlaying(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s___wrapper); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 886; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__getSamplePosition); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 886; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 886; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.PyPlayer.getSamplePosition", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":888
 *         return self._wrapper.getSamplePosition()
 * 
 *     def isPlaying(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: bool True of the sound is playing
 */

static PyObject *__pyx_pf_6_PyXAL_8PyPlayer_16isPlaying(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_6_PyXAL_8PyPlayer_16isPlaying[] = "\n        @return: bool True of the sound is playing\n        ";
static PyMethodDef __pyx_mdef_6_PyXAL_8PyPlayer_16isPlaying = {__Pyx_NAMESTR("isPlaying"), (PyCFunction)__pyx_pf_6_PyXAL_8PyPlayer_16isPlaying, METH_O, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_8PyPlayer_16isPlaying)};
static PyObject *__pyx_pf_6_PyXAL_8PyPlayer_16isPlaying(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("isPlaying");
  __pyx_self = __pyx_self;

  /* "_PyXAL.pyx":892
 *         @return: bool True of the sound is playing
 *         '''
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 892; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 892; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 892; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = (!__pyx_t_3);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":893
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_123), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 893; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 893; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "_PyXAL.pyx":894
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         return self._wrapper.isPlaying()
 */
  __pyx_t_2 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__destroyed); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 894; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 894; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":895
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         return self._wrapper.isPlaying()
 * 
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_124), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 895; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 895; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "_PyXAL.pyx":896
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         return self._wrapper.isPlaying()             # <<<<<<<<<<<<<<
 * 
 *     def isPaused(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s___wrapper); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 896; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__isPlaying); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 896; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 896; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.PyPlayer.isPlaying", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":898
 *         return self._wrapper.isPlaying()
 * 
 *     def isPaused(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: bool True if the sound is paused
 */

static PyObject *__pyx_pf_6_PyXAL_8PyPlayer_17isPaused(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_6_PyXAL_8PyPlayer_17isPaused[] = "\n        @return: bool True if the sound is paused\n        ";
static PyMethodDef __pyx_mdef_6_PyXAL_8PyPlayer_17isPaused = {__Pyx_NAMESTR("isPaused"), (PyCFunction)__pyx_pf_6_PyXAL_8PyPlayer_17isPaused, METH_O, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_8PyPlayer_17isPaused)};
static PyObject *__pyx_pf_6_PyXAL_8PyPlayer_17isPaused(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("isPaused");
  __pyx_self = __pyx_self;

  /* "_PyXAL.pyx":902
 *         @return: bool True if the sound is paused
 *         '''
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 902; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 902; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 902; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = (!__pyx_t_3);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":903
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_125), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 903; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 903; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "_PyXAL.pyx":904
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         return self._wrapper.isPaused()
 */
  __pyx_t_2 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__destroyed); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 904; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 904; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":905
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         return self._wrapper.isPaused()
 * 
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_126), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 905; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 905; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "_PyXAL.pyx":906
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         return self._wrapper.isPaused()             # <<<<<<<<<<<<<<
 * 
 *     def isFading(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s___wrapper); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 906; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__isPaused); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 906; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 906; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.PyPlayer.isPaused", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":908
 *         return self._wrapper.isPaused()
 * 
 *     def isFading(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: bool True if the sound is fading in or out
 */

static PyObject *__pyx_pf_6_PyXAL_8PyPlayer_18isFading(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_6_PyXAL_8PyPlayer_18isFading[] = "\n        @return: bool True if the sound is fading in or out\n        ";
static PyMethodDef __pyx_mdef_6_PyXAL_8PyPlayer_18isFading = {__Pyx_NAMESTR("isFading"), (PyCFunction)__pyx_pf_6_PyXAL_8PyPlayer_18isFading, METH_O, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_8PyPlayer_18isFading)};
static PyObject *__pyx_pf_6_PyXAL_8PyPlayer_18isFading(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("isFading");
  __pyx_self = __pyx_self;

  /* "_PyXAL.pyx":912
 *         @return: bool True if the sound is fading in or out
 *         '''
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 912; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 912; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 912; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = (!__pyx_t_3);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":913
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_127), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 913; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 913; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "_PyXAL.pyx":914
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         return self._wrapper.isFading()
 */
  __pyx_t_2 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__destroyed); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 914; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 914; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":915
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         return self._wrapper.isFading()
 * 
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_128), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 915; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 915; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "_PyXAL.pyx":916
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         return self._wrapper.isFading()             # <<<<<<<<<<<<<<
 * 
 *     def isFadingIn(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s___wrapper); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 916; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__isFading); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 916; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 916; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.PyPlayer.isFading", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":918
 *         return self._wrapper.isFading()
 * 
 *     def isFadingIn(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: bool True if the sound is fading in
 */

static PyObject *__pyx_pf_6_PyXAL_8PyPlayer_19isFadingIn(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_6_PyXAL_8PyPlayer_19isFadingIn[] = "\n        @return: bool True if the sound is fading in\n        ";
static PyMethodDef __pyx_mdef_6_PyXAL_8PyPlayer_19isFadingIn = {__Pyx_NAMESTR("isFadingIn"), (PyCFunction)__pyx_pf_6_PyXAL_8PyPlayer_19isFadingIn, METH_O, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_8PyPlayer_19isFadingIn)};
static PyObject *__pyx_pf_6_PyXAL_8PyPlayer_19isFadingIn(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("isFadingIn");
  __pyx_self = __pyx_self;

  /* "_PyXAL.pyx":922
 *         @return: bool True if the sound is fading in
 *         '''
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 922; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 922; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 922; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = (!__pyx_t_3);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":923
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_129), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 923; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 923; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "_PyXAL.pyx":924
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         return self._wrapper.isFadingIn()
 */
  __pyx_t_2 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__destroyed); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 924; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 924; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":925
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         return self._wrapper.isFadingIn()
 * 
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_130), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 925; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 925; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "_PyXAL.pyx":926
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         return self._wrapper.isFadingIn()             # <<<<<<<<<<<<<<
 * 
 *     def isFadingOut(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s___wrapper); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 926; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__isFadingIn); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 926; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 926; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.PyPlayer.isFadingIn", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":928
 *         return self._wrapper.isFadingIn()
 * 
 *     def isFadingOut(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: bool True if teh sound is fading out
 */

static PyObject *__pyx_pf_6_PyXAL_8PyPlayer_20isFadingOut(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_6_PyXAL_8PyPlayer_20isFadingOut[] = "\n        @return: bool True if teh sound is fading out\n        ";
static PyMethodDef __pyx_mdef_6_PyXAL_8PyPlayer_20isFadingOut = {__Pyx_NAMESTR("isFadingOut"), (PyCFunction)__pyx_pf_6_PyXAL_8PyPlayer_20isFadingOut, METH_O, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_8PyPlayer_20isFadingOut)};
static PyObject *__pyx_pf_6_PyXAL_8PyPlayer_20isFadingOut(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("isFadingOut");
  __pyx_self = __pyx_self;

  /* "_PyXAL.pyx":932
 *         @return: bool True if teh sound is fading out
 *         '''
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 932; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 932; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 932; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = (!__pyx_t_3);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":933
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_131), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 933; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 933; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "_PyXAL.pyx":934
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         return self._wrapper.isFadingOut()
 */
  __pyx_t_2 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__destroyed); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 934; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 934; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":935
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         return self._wrapper.isFadingOut()
 * 
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_132), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 935; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 935; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "_PyXAL.pyx":936
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         return self._wrapper.isFadingOut()             # <<<<<<<<<<<<<<
 * 
 *     def isLooping(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s___wrapper); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 936; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__isFadingOut); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 936; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 936; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.PyPlayer.isFadingOut", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":938
 *         return self._wrapper.isFadingOut()
 * 
 *     def isLooping(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: bool True of the sound is looping
 */

static PyObject *__pyx_pf_6_PyXAL_8PyPlayer_21isLooping(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_6_PyXAL_8PyPlayer_21isLooping[] = "\n        @return: bool True of the sound is looping\n        ";
static PyMethodDef __pyx_mdef_6_PyXAL_8PyPlayer_21isLooping = {__Pyx_NAMESTR("isLooping"), (PyCFunction)__pyx_pf_6_PyXAL_8PyPlayer_21isLooping, METH_O, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_8PyPlayer_21isLooping)};
static PyObject *__pyx_pf_6_PyXAL_8PyPlayer_21isLooping(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("isLooping");
  __pyx_self = __pyx_self;

  /* "_PyXAL.pyx":942
 *         @return: bool True of the sound is looping
 *         '''
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 942; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 942; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 942; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = (!__pyx_t_3);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":943
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_133), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 943; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 943; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "_PyXAL.pyx":944
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         return self._wrapper.isLooping()
 */
  __pyx_t_2 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__destroyed); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 944; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 944; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":945
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         return self._wrapper.isLooping()
 * 
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_134), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 945; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 945; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "_PyXAL.pyx":946
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         return self._wrapper.isLooping()             # <<<<<<<<<<<<<<
 * 
 *     def play(self, float fadeTime = 0.0, bool looping = False):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s___wrapper); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 946; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__isLooping); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 946; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 946; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.PyPlayer.isLooping", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":948
 *         return self._wrapper.isLooping()
 * 
 *     def play(self, float fadeTime = 0.0, bool looping = False):             # <<<<<<<<<<<<<<
 *         '''
 *         start the sound playing at it's current offset, the offset starts at 0.0 when teh sound is first loaded
 */

static PyObject *__pyx_pf_6_PyXAL_8PyPlayer_22play(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6_PyXAL_8PyPlayer_22play[] = "\n        start the sound playing at it's current offset, the offset starts at 0.0 when teh sound is first loaded\n        \n        @param fadeTime: float the time in seconds for the sound to fade in (0.0 by default)\n        @param looping: bool should the sound loop (False by default)\n        ";
static PyMethodDef __pyx_mdef_6_PyXAL_8PyPlayer_22play = {__Pyx_NAMESTR("play"), (PyCFunction)__pyx_pf_6_PyXAL_8PyPlayer_22play, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_8PyPlayer_22play)};
static PyObject *__pyx_pf_6_PyXAL_8PyPlayer_22play(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  float __pyx_v_fadeTime;
  bool __pyx_v_looping;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__self,&__pyx_n_s__fadeTime,&__pyx_n_s__looping,0};
  __Pyx_RefNannySetupContext("play");
  __pyx_self = __pyx_self;
  {
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__self);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__fadeTime);
          if (value) { values[1] = value; kw_args--; }
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__looping);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "play") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 948; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_self = values[0];
    if (values[1]) {
      __pyx_v_fadeTime = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_fadeTime == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 948; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_fadeTime = ((float)0.0);
    }
    if (values[2]) {
      __pyx_v_looping = __Pyx_PyObject_IsTrue(values[2]); if (unlikely((__pyx_v_looping == (bool)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 948; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_looping = ((bool)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("play", 0, 1, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 948; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("_PyXAL.PyPlayer.play", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "_PyXAL.pyx":955
 *         @param looping: bool should the sound loop (False by default)
 *         '''
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 955; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 955; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 955; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = (!__pyx_t_3);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":956
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_135), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 956; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 956; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "_PyXAL.pyx":957
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         self._wrapper.play(fadeTime, looping)
 */
  __pyx_t_2 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__destroyed); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 957; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 957; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":958
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         self._wrapper.play(fadeTime, looping)
 * 
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_136), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 958; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 958; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L7;
  }
  __pyx_L7:;

  /* "_PyXAL.pyx":959
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         self._wrapper.play(fadeTime, looping)             # <<<<<<<<<<<<<<
 * 
 *     def stop(self, float fadeTime = 0.0):
 */
  __pyx_t_2 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s___wrapper); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 959; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__play); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 959; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_fadeTime); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 959; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_PyBool_FromLong(__pyx_v_looping); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 959; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 959; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_6));
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  __pyx_t_2 = 0;
  __pyx_t_5 = 0;
  __pyx_t_5 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_6), NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 959; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_6)); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("_PyXAL.PyPlayer.play", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":961
 *         self._wrapper.play(fadeTime, looping)
 * 
 *     def stop(self, float fadeTime = 0.0):             # <<<<<<<<<<<<<<
 *         '''
 *         stop the sound playing and rest set it's offset to 0.0
 */

static PyObject *__pyx_pf_6_PyXAL_8PyPlayer_23stop(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6_PyXAL_8PyPlayer_23stop[] = "\n        stop the sound playing and rest set it's offset to 0.0\n        \n        @param fadeTime: float the time in seconds for the sound to fade out (0.0 by default)\n        ";
static PyMethodDef __pyx_mdef_6_PyXAL_8PyPlayer_23stop = {__Pyx_NAMESTR("stop"), (PyCFunction)__pyx_pf_6_PyXAL_8PyPlayer_23stop, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_8PyPlayer_23stop)};
static PyObject *__pyx_pf_6_PyXAL_8PyPlayer_23stop(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  float __pyx_v_fadeTime;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__self,&__pyx_n_s__fadeTime,0};
  __Pyx_RefNannySetupContext("stop");
  __pyx_self = __pyx_self;
  {
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__self);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__fadeTime);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "stop") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 961; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_self = values[0];
    if (values[1]) {
      __pyx_v_fadeTime = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_fadeTime == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 961; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_fadeTime = ((float)0.0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("stop", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 961; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("_PyXAL.PyPlayer.stop", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "_PyXAL.pyx":967
 *         @param fadeTime: float the time in seconds for the sound to fade out (0.0 by default)
 *         '''
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 967; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 967; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 967; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = (!__pyx_t_3);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":968
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_137), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 968; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 968; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "_PyXAL.pyx":969
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         self._wrapper.stop(fadeTime)
 */
  __pyx_t_2 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__destroyed); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 969; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 969; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":970
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         self._wrapper.stop(fadeTime)
 * 
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_138), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 970; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 970; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L7;
  }
  __pyx_L7:;

  /* "_PyXAL.pyx":971
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         self._wrapper.stop(fadeTime)             # <<<<<<<<<<<<<<
 * 
 *     def pause(self, float fadeTime = 0.0):
 */
  __pyx_t_2 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s___wrapper); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 971; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__stop); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 971; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_fadeTime); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 971; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 971; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_5));
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_5), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 971; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_5)); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("_PyXAL.PyPlayer.stop", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":973
 *         self._wrapper.stop(fadeTime)
 * 
 *     def pause(self, float fadeTime = 0.0):             # <<<<<<<<<<<<<<
 *         '''
 *         stop the sound playing keeping the current offset of the sound
 */

static PyObject *__pyx_pf_6_PyXAL_8PyPlayer_24pause(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6_PyXAL_8PyPlayer_24pause[] = "\n        stop the sound playing keeping the current offset of the sound\n        \n        @param fadeTime: float the time in seconds for the sound to fade out (0.0 by default)\n        ";
static PyMethodDef __pyx_mdef_6_PyXAL_8PyPlayer_24pause = {__Pyx_NAMESTR("pause"), (PyCFunction)__pyx_pf_6_PyXAL_8PyPlayer_24pause, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_8PyPlayer_24pause)};
static PyObject *__pyx_pf_6_PyXAL_8PyPlayer_24pause(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  float __pyx_v_fadeTime;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__self,&__pyx_n_s__fadeTime,0};
  __Pyx_RefNannySetupContext("pause");
  __pyx_self = __pyx_self;
  {
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__self);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__fadeTime);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "pause") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 973; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_self = values[0];
    if (values[1]) {
      __pyx_v_fadeTime = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_fadeTime == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 973; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_fadeTime = ((float)0.0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("pause", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 973; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("_PyXAL.PyPlayer.pause", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "_PyXAL.pyx":979
 *         @param fadeTime: float the time in seconds for the sound to fade out (0.0 by default)
 *         '''
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 979; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 979; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 979; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = (!__pyx_t_3);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":980
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_139), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 980; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 980; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "_PyXAL.pyx":981
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         self._wrapper.pause(fadeTime)
 */
  __pyx_t_2 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__destroyed); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 981; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 981; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":982
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         self._wrapper.pause(fadeTime)
 * 
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_140), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 982; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 982; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L7;
  }
  __pyx_L7:;

  /* "_PyXAL.pyx":983
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         self._wrapper.pause(fadeTime)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s___wrapper); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 983; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__pause); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 983; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_fadeTime); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 983; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 983; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_5));
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_5), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 983; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_5)); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("_PyXAL.PyPlayer.pause", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":996
 *     cdef char* CATEGORY_STR
 * 
 *     def __init__(self, char* systemname, int backendId, bint threaded = False, float updateTime = 0.01, char* deviceName = ""):             # <<<<<<<<<<<<<<
 *         '''
 *         sets up the interface and initializes XAL you SHOULD NOT BE CREATING THIS CLASS YOUR SELF call PyXAL.Init and use the object created at PyXAL.Mgr
 */

static int __pyx_pf_6_PyXAL_17XALManagerWrapper___init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6_PyXAL_17XALManagerWrapper___init__[] = "\n        sets up the interface and initializes XAL you SHOULD NOT BE CREATING THIS CLASS YOUR SELF call PyXAL.Init and use the object created at PyXAL.Mgr\n        if PyXAL.Mgr is None call PyXAL.Destroy and then PyXAL.Init to set up the interface again\n        \n        @param systemname: string name of the back end system to use\n        @param backendId: int window handle of the calling aplication\n        @param threaded: bool should the system use a threaded interface? (False by defaut)\n        @param updateTime: float how offten should XAL update (0.01 by default)\n        @param deviceName: string arbatrary device name (\"\" by default)\n        ";
struct wrapperbase __pyx_wrapperbase_6_PyXAL_17XALManagerWrapper___init__;
static int __pyx_pf_6_PyXAL_17XALManagerWrapper___init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  char *__pyx_v_systemname;
  int __pyx_v_backendId;
  int __pyx_v_threaded;
  float __pyx_v_updateTime;
  char *__pyx_v_deviceName;
  hltypes::String __pyx_v_name;
  hltypes::String __pyx_v_dname;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__systemname,&__pyx_n_s__backendId,&__pyx_n_s__threaded,&__pyx_n_s__updateTime,&__pyx_n_s__deviceName,0};
  __Pyx_RefNannySetupContext("__init__");
  {
    PyObject* values[5] = {0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__systemname);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__backendId);
        if (likely(values[1])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 2, 5, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 996; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__threaded);
          if (value) { values[2] = value; kw_args--; }
        }
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__updateTime);
          if (value) { values[3] = value; kw_args--; }
        }
        case  4:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__deviceName);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "__init__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 996; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_systemname = PyBytes_AsString(values[0]); if (unlikely((!__pyx_v_systemname) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 996; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_backendId = __Pyx_PyInt_AsInt(values[1]); if (unlikely((__pyx_v_backendId == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 996; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    if (values[2]) {
      __pyx_v_threaded = __Pyx_PyObject_IsTrue(values[2]); if (unlikely((__pyx_v_threaded == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 996; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_threaded = ((int)0);
    }
    if (values[3]) {
      __pyx_v_updateTime = __pyx_PyFloat_AsDouble(values[3]); if (unlikely((__pyx_v_updateTime == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 996; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_updateTime = ((float)0.01);
    }
    if (values[4]) {
      __pyx_v_deviceName = PyBytes_AsString(values[4]); if (unlikely((!__pyx_v_deviceName) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 996; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_deviceName = ((char *)__pyx_k_1);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 2, 5, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 996; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("_PyXAL.XALManagerWrapper.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;

  /* "_PyXAL.pyx":1008
 *         '''
 *         global Mgr
 *         if Mgr is not None:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("Only one XALManager interface allowed at a time, use the one at PyXAL.Mgr")
 *         self.CATEGORY_STR = "default"
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__Mgr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1008; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__pyx_t_1 != Py_None);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "_PyXAL.pyx":1009
 *         global Mgr
 *         if Mgr is not None:
 *             raise RuntimeError("Only one XALManager interface allowed at a time, use the one at PyXAL.Mgr")             # <<<<<<<<<<<<<<
 *         self.CATEGORY_STR = "default"
 *         cdef String name = String(systemname)
 */
    __pyx_t_1 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_142), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1009; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1009; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "_PyXAL.pyx":1010
 *         if Mgr is not None:
 *             raise RuntimeError("Only one XALManager interface allowed at a time, use the one at PyXAL.Mgr")
 *         self.CATEGORY_STR = "default"             # <<<<<<<<<<<<<<
 *         cdef String name = String(systemname)
 *         cdef String dname = String(deviceName)
 */
  ((struct __pyx_obj_6_PyXAL_XALManagerWrapper *)__pyx_v_self)->CATEGORY_STR = __pyx_k__default;

  /* "_PyXAL.pyx":1011
 *             raise RuntimeError("Only one XALManager interface allowed at a time, use the one at PyXAL.Mgr")
 *         self.CATEGORY_STR = "default"
 *         cdef String name = String(systemname)             # <<<<<<<<<<<<<<
 *         cdef String dname = String(deviceName)
 *         self._destroyXAL()
 */
  __pyx_v_name = hltypes::String(__pyx_v_systemname);

  /* "_PyXAL.pyx":1012
 *         self.CATEGORY_STR = "default"
 *         cdef String name = String(systemname)
 *         cdef String dname = String(deviceName)             # <<<<<<<<<<<<<<
 *         self._destroyXAL()
 *         XAL.init(name, <void*>backendId, threaded, updateTime, dname)
 */
  __pyx_v_dname = hltypes::String(__pyx_v_deviceName);

  /* "_PyXAL.pyx":1013
 *         cdef String name = String(systemname)
 *         cdef String dname = String(deviceName)
 *         self._destroyXAL()             # <<<<<<<<<<<<<<
 *         XAL.init(name, <void*>backendId, threaded, updateTime, dname)
 *         self.inited = True
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s___destroyXAL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1013; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1013; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "_PyXAL.pyx":1014
 *         cdef String dname = String(deviceName)
 *         self._destroyXAL()
 *         XAL.init(name, <void*>backendId, threaded, updateTime, dname)             # <<<<<<<<<<<<<<
 *         self.inited = True
 *         self.destroyed = False
 */
  try {xal::init(__pyx_v_name, ((void *)__pyx_v_backendId), __pyx_v_threaded, __pyx_v_updateTime, __pyx_v_dname);} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1014; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}

  /* "_PyXAL.pyx":1015
 *         self._destroyXAL()
 *         XAL.init(name, <void*>backendId, threaded, updateTime, dname)
 *         self.inited = True             # <<<<<<<<<<<<<<
 *         self.destroyed = False
 *         self.SetupXAL()
 */
  ((struct __pyx_obj_6_PyXAL_XALManagerWrapper *)__pyx_v_self)->inited = 1;

  /* "_PyXAL.pyx":1016
 *         XAL.init(name, <void*>backendId, threaded, updateTime, dname)
 *         self.inited = True
 *         self.destroyed = False             # <<<<<<<<<<<<<<
 *         self.SetupXAL()
 * 
 */
  ((struct __pyx_obj_6_PyXAL_XALManagerWrapper *)__pyx_v_self)->destroyed = 0;

  /* "_PyXAL.pyx":1017
 *         self.inited = True
 *         self.destroyed = False
 *         self.SetupXAL()             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __pyx_t_3 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__SetupXAL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1017; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = PyObject_Call(__pyx_t_3, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1017; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("_PyXAL.XALManagerWrapper.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":1019
 *         self.SetupXAL()
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if XAL.mgr != NULL:
 *             fade = 0.0
 */

static void __pyx_pf_6_PyXAL_17XALManagerWrapper_1__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pf_6_PyXAL_17XALManagerWrapper_1__dealloc__(PyObject *__pyx_v_self) {
  double __pyx_v_fade;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__dealloc__");

  /* "_PyXAL.pyx":1020
 * 
 *     def __dealloc__(self):
 *         if XAL.mgr != NULL:             # <<<<<<<<<<<<<<
 *             fade = 0.0
 *             XAL.mgr.stopAll(fade)
 */
  __pyx_t_1 = (xal::mgr != NULL);
  if (__pyx_t_1) {

    /* "_PyXAL.pyx":1021
 *     def __dealloc__(self):
 *         if XAL.mgr != NULL:
 *             fade = 0.0             # <<<<<<<<<<<<<<
 *             XAL.mgr.stopAll(fade)
 *             XAL.destroy()
 */
    __pyx_v_fade = 0.0;

    /* "_PyXAL.pyx":1022
 *         if XAL.mgr != NULL:
 *             fade = 0.0
 *             XAL.mgr.stopAll(fade)             # <<<<<<<<<<<<<<
 *             XAL.destroy()
 * 
 */
    try {xal::mgr->stopAll(__pyx_v_fade);} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1022; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}

    /* "_PyXAL.pyx":1023
 *             fade = 0.0
 *             XAL.mgr.stopAll(fade)
 *             XAL.destroy()             # <<<<<<<<<<<<<<
 * 
 *     def isXALInitialized(self):
 */
    try {xal::destroy();} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1023; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}
    goto __pyx_L5;
  }
  __pyx_L5:;

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_PyXAL.XALManagerWrapper.__dealloc__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "_PyXAL.pyx":1025
 *             XAL.destroy()
 * 
 *     def isXALInitialized(self):             # <<<<<<<<<<<<<<
 *         '''
 *         returns true if the C++ side of the interface to XAL exists
 */

static PyObject *__pyx_pf_6_PyXAL_17XALManagerWrapper_2isXALInitialized(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6_PyXAL_17XALManagerWrapper_2isXALInitialized[] = "\n        returns true if the C++ side of the interface to XAL exists\n        ";
static PyObject *__pyx_pf_6_PyXAL_17XALManagerWrapper_2isXALInitialized(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("isXALInitialized");

  /* "_PyXAL.pyx":1029
 *         returns true if the C++ side of the interface to XAL exists
 *         '''
 *         if XAL.mgr != NULL:             # <<<<<<<<<<<<<<
 *             return True
 *         else:
 */
  __pyx_t_1 = (xal::mgr != NULL);
  if (__pyx_t_1) {

    /* "_PyXAL.pyx":1030
 *         '''
 *         if XAL.mgr != NULL:
 *             return True             # <<<<<<<<<<<<<<
 *         else:
 *             return False
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyBool_FromLong(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1030; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
    goto __pyx_L5;
  }
  /*else*/ {

    /* "_PyXAL.pyx":1032
 *             return True
 *         else:
 *             return False             # <<<<<<<<<<<<<<
 * 
 *     def SetupXAL(self):
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyBool_FromLong(0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1032; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
  }
  __pyx_L5:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.XALManagerWrapper.isXALInitialized", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":1034
 *             return False
 * 
 *     def SetupXAL(self):             # <<<<<<<<<<<<<<
 *         '''
 *         set up XAL and create the default sound catagory
 */

static PyObject *__pyx_pf_6_PyXAL_17XALManagerWrapper_3SetupXAL(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6_PyXAL_17XALManagerWrapper_3SetupXAL[] = "\n        set up XAL and create the default sound catagory\n        ";
static PyObject *__pyx_pf_6_PyXAL_17XALManagerWrapper_3SetupXAL(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  hltypes::String __pyx_v_category;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  xal::Category *__pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("SetupXAL");

  /* "_PyXAL.pyx":1038
 *         set up XAL and create the default sound catagory
 *         '''
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         cdef String category = String(self.CATEGORY_STR)
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1038; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1038; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1038; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = (!__pyx_t_3);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":1039
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         cdef String category = String(self.CATEGORY_STR)
 *         self._category = XAL.mgr.createCategory(category, FULL, DISK)
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_143), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1039; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1039; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "_PyXAL.pyx":1040
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         cdef String category = String(self.CATEGORY_STR)             # <<<<<<<<<<<<<<
 *         self._category = XAL.mgr.createCategory(category, FULL, DISK)
 * 
 */
  __pyx_v_category = hltypes::String(((struct __pyx_obj_6_PyXAL_XALManagerWrapper *)__pyx_v_self)->CATEGORY_STR);

  /* "_PyXAL.pyx":1041
 *             raise RuntimeError("XAL is not Initialized")
 *         cdef String category = String(self.CATEGORY_STR)
 *         self._category = XAL.mgr.createCategory(category, FULL, DISK)             # <<<<<<<<<<<<<<
 * 
 *     def _destroyXAL(self):
 */
  try {__pyx_t_5 = xal::mgr->createCategory(__pyx_v_category, __pyx_v_6_PyXAL_FULL, __pyx_v_6_PyXAL_DISK);} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1041; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}
  ((struct __pyx_obj_6_PyXAL_XALManagerWrapper *)__pyx_v_self)->_category = __pyx_t_5;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.XALManagerWrapper.SetupXAL", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":1043
 *         self._category = XAL.mgr.createCategory(category, FULL, DISK)
 * 
 *     def _destroyXAL(self):             # <<<<<<<<<<<<<<
 *         if XAL.mgr != NULL:
 *             fade = 0.0
 */

static PyObject *__pyx_pf_6_PyXAL_17XALManagerWrapper_4_destroyXAL(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pf_6_PyXAL_17XALManagerWrapper_4_destroyXAL(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  double __pyx_v_fade;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_destroyXAL");

  /* "_PyXAL.pyx":1044
 * 
 *     def _destroyXAL(self):
 *         if XAL.mgr != NULL:             # <<<<<<<<<<<<<<
 *             fade = 0.0
 *             XAL.mgr.stopAll(fade)
 */
  __pyx_t_1 = (xal::mgr != NULL);
  if (__pyx_t_1) {

    /* "_PyXAL.pyx":1045
 *     def _destroyXAL(self):
 *         if XAL.mgr != NULL:
 *             fade = 0.0             # <<<<<<<<<<<<<<
 *             XAL.mgr.stopAll(fade)
 *             XAL.destroy()
 */
    __pyx_v_fade = 0.0;

    /* "_PyXAL.pyx":1046
 *         if XAL.mgr != NULL:
 *             fade = 0.0
 *             XAL.mgr.stopAll(fade)             # <<<<<<<<<<<<<<
 *             XAL.destroy()
 * 
 */
    try {xal::mgr->stopAll(__pyx_v_fade);} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1046; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}

    /* "_PyXAL.pyx":1047
 *             fade = 0.0
 *             XAL.mgr.stopAll(fade)
 *             XAL.destroy()             # <<<<<<<<<<<<<<
 * 
 * class XALManager(object):
 */
    try {xal::destroy();} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1047; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}
    goto __pyx_L5;
  }
  __pyx_L5:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_PyXAL.XALManagerWrapper._destroyXAL", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":1063
 *     _wrapper = None
 * 
 *     def __init__(self, int backendId, bint threaded = False):             # <<<<<<<<<<<<<<
 *         '''
 *         sets up the interface and initializes XAL you SHOULD NOT BE CREATING THIS CLASS YOUR SELF call PyXAL.Init and use the object created at PyXAL.Mgr
 */

static PyObject *__pyx_pf_6_PyXAL_10XALManager___init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6_PyXAL_10XALManager___init__[] = "\n        sets up the interface and initializes XAL you SHOULD NOT BE CREATING THIS CLASS YOUR SELF call PyXAL.Init and use the object created at PyXAL.Mgr\n        if PyXAL.Mgr is None call PyXAL.Destroy and then PyXAL.Init to set up the interface again\n        \n        @param backendId: int window handle of the calling aplication\n        @param threaded: bool should the system use a threaded interface? (False by defaut)\n        ";
static PyMethodDef __pyx_mdef_6_PyXAL_10XALManager___init__ = {__Pyx_NAMESTR("__init__"), (PyCFunction)__pyx_pf_6_PyXAL_10XALManager___init__, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_10XALManager___init__)};
static PyObject *__pyx_pf_6_PyXAL_10XALManager___init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  int __pyx_v_backendId;
  int __pyx_v_threaded;
  struct __pyx_obj_6_PyXAL_XALManagerWrapper *__pyx_v_wrapper = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__self,&__pyx_n_s__backendId,&__pyx_n_s__threaded,0};
  __Pyx_RefNannySetupContext("__init__");
  __pyx_self = __pyx_self;
  {
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__self);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__backendId);
        if (likely(values[1])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 2, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1063; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__threaded);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "__init__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1063; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_self = values[0];
    __pyx_v_backendId = __Pyx_PyInt_AsInt(values[1]); if (unlikely((__pyx_v_backendId == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1063; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    if (values[2]) {
      __pyx_v_threaded = __Pyx_PyObject_IsTrue(values[2]); if (unlikely((__pyx_v_threaded == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1063; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_threaded = ((int)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1063; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("_PyXAL.XALManager.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "_PyXAL.pyx":1072
 *         '''
 *         global Mgr
 *         if Mgr is not None:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("Only one XALManager interface allowed at a time, use the one at PyXAL.Mgr")
 *         cdef XALManagerWrapper wrapper = XALManagerWrapper(XAL_AS_DEFAULT, backendId, threaded)
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__Mgr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1072; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__pyx_t_1 != Py_None);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "_PyXAL.pyx":1073
 *         global Mgr
 *         if Mgr is not None:
 *             raise RuntimeError("Only one XALManager interface allowed at a time, use the one at PyXAL.Mgr")             # <<<<<<<<<<<<<<
 *         cdef XALManagerWrapper wrapper = XALManagerWrapper(XAL_AS_DEFAULT, backendId, threaded)
 *         self._wrapper = wrapper
 */
    __pyx_t_1 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_144), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1073; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1073; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "_PyXAL.pyx":1074
 *         if Mgr is not None:
 *             raise RuntimeError("Only one XALManager interface allowed at a time, use the one at PyXAL.Mgr")
 *         cdef XALManagerWrapper wrapper = XALManagerWrapper(XAL_AS_DEFAULT, backendId, threaded)             # <<<<<<<<<<<<<<
 *         self._wrapper = wrapper
 *         self._players = {}
 */
  __pyx_t_1 = PyBytes_FromString(__pyx_v_6_PyXAL_XAL_AS_DEFAULT); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1074; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_t_3 = PyInt_FromLong(__pyx_v_backendId); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1074; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_v_threaded); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1074; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1074; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_5));
  PyTuple_SET_ITEM(__pyx_t_5, 0, ((PyObject *)__pyx_t_1));
  __Pyx_GIVEREF(((PyObject *)__pyx_t_1));
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  __pyx_t_1 = 0;
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_t_4 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_6_PyXAL_XALManagerWrapper)), ((PyObject *)__pyx_t_5), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1074; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(((PyObject *)__pyx_t_5)); __pyx_t_5 = 0;
  __pyx_v_wrapper = ((struct __pyx_obj_6_PyXAL_XALManagerWrapper *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "_PyXAL.pyx":1075
 *             raise RuntimeError("Only one XALManager interface allowed at a time, use the one at PyXAL.Mgr")
 *         cdef XALManagerWrapper wrapper = XALManagerWrapper(XAL_AS_DEFAULT, backendId, threaded)
 *         self._wrapper = wrapper             # <<<<<<<<<<<<<<
 *         self._players = {}
 * 
 */
  if (PyObject_SetAttr(__pyx_v_self, __pyx_n_s___wrapper, ((PyObject *)__pyx_v_wrapper)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1075; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_PyXAL.pyx":1076
 *         cdef XALManagerWrapper wrapper = XALManagerWrapper(XAL_AS_DEFAULT, backendId, threaded)
 *         self._wrapper = wrapper
 *         self._players = {}             # <<<<<<<<<<<<<<
 * 
 *     def isXALInitialized(self):
 */
  __pyx_t_4 = PyDict_New(); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1076; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_4));
  if (PyObject_SetAttr(__pyx_v_self, __pyx_n_s___players, ((PyObject *)__pyx_t_4)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1076; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("_PyXAL.XALManager.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_wrapper);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":1078
 *         self._players = {}
 * 
 *     def isXALInitialized(self):             # <<<<<<<<<<<<<<
 *         '''
 *         returns true if the C++ side of the interface to XAL exists
 */

static PyObject *__pyx_pf_6_PyXAL_10XALManager_1isXALInitialized(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_6_PyXAL_10XALManager_1isXALInitialized[] = "\n        returns true if the C++ side of the interface to XAL exists\n        ";
static PyMethodDef __pyx_mdef_6_PyXAL_10XALManager_1isXALInitialized = {__Pyx_NAMESTR("isXALInitialized"), (PyCFunction)__pyx_pf_6_PyXAL_10XALManager_1isXALInitialized, METH_O, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_10XALManager_1isXALInitialized)};
static PyObject *__pyx_pf_6_PyXAL_10XALManager_1isXALInitialized(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("isXALInitialized");
  __pyx_self = __pyx_self;

  /* "_PyXAL.pyx":1082
 *         returns true if the C++ side of the interface to XAL exists
 *         '''
 *         if XAL.mgr != NULL:             # <<<<<<<<<<<<<<
 *             return True
 *         else:
 */
  __pyx_t_1 = (xal::mgr != NULL);
  if (__pyx_t_1) {

    /* "_PyXAL.pyx":1083
 *         '''
 *         if XAL.mgr != NULL:
 *             return True             # <<<<<<<<<<<<<<
 *         else:
 *             return False
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyBool_FromLong(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1083; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
    goto __pyx_L5;
  }
  /*else*/ {

    /* "_PyXAL.pyx":1085
 *             return True
 *         else:
 *             return False             # <<<<<<<<<<<<<<
 * 
 *     def __del__(self):
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyBool_FromLong(0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1085; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
  }
  __pyx_L5:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.XALManager.isXALInitialized", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":1087
 *             return False
 * 
 *     def __del__(self):             # <<<<<<<<<<<<<<
 *         '''
 *         make sure XAL is destroyed if the interface is destroyed
 */

static PyObject *__pyx_pf_6_PyXAL_10XALManager_2__del__(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_6_PyXAL_10XALManager_2__del__[] = "\n        make sure XAL is destroyed if the interface is destroyed\n        ";
static PyMethodDef __pyx_mdef_6_PyXAL_10XALManager_2__del__ = {__Pyx_NAMESTR("__del__"), (PyCFunction)__pyx_pf_6_PyXAL_10XALManager_2__del__, METH_O, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_10XALManager_2__del__)};
static PyObject *__pyx_pf_6_PyXAL_10XALManager_2__del__(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__del__");
  __pyx_self = __pyx_self;

  /* "_PyXAL.pyx":1091
 *         make sure XAL is destroyed if the interface is destroyed
 *         '''
 *         del self._players             # <<<<<<<<<<<<<<
 *         del self._wrapper
 * 
 */
  if (PyObject_DelAttr(__pyx_v_self, __pyx_n_s___players) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1091; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_PyXAL.pyx":1092
 *         '''
 *         del self._players
 *         del self._wrapper             # <<<<<<<<<<<<<<
 * 
 *     def clear(self):
 */
  if (PyObject_DelAttr(__pyx_v_self, __pyx_n_s___wrapper) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1092; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_PyXAL.XALManager.__del__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":1094
 *         del self._wrapper
 * 
 *     def clear(self):             # <<<<<<<<<<<<<<
 *         '''
 *         clear the XAL interface and reset it to be like it was freshly initialized all current sounds and players become invalid
 */

static PyObject *__pyx_pf_6_PyXAL_10XALManager_3clear(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_6_PyXAL_10XALManager_3clear[] = "\n        clear the XAL interface and reset it to be like it was freshly initialized all current sounds and players become invalid\n        ";
static PyMethodDef __pyx_mdef_6_PyXAL_10XALManager_3clear = {__Pyx_NAMESTR("clear"), (PyCFunction)__pyx_pf_6_PyXAL_10XALManager_3clear, METH_O, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_10XALManager_3clear)};
static PyObject *__pyx_pf_6_PyXAL_10XALManager_3clear(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  double __pyx_v_fade;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("clear");
  __pyx_self = __pyx_self;

  /* "_PyXAL.pyx":1098
 *         clear the XAL interface and reset it to be like it was freshly initialized all current sounds and players become invalid
 *         '''
 *         self._players = {}             # <<<<<<<<<<<<<<
 *         if self.isXALInitialized():
 *             fade = 0.0
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1098; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  if (PyObject_SetAttr(__pyx_v_self, __pyx_n_s___players, ((PyObject *)__pyx_t_1)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1098; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;

  /* "_PyXAL.pyx":1099
 *         '''
 *         self._players = {}
 *         if self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             fade = 0.0
 *             XAL.mgr.stopAll(fade)
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1099; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1099; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1099; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "_PyXAL.pyx":1100
 *         self._players = {}
 *         if self.isXALInitialized():
 *             fade = 0.0             # <<<<<<<<<<<<<<
 *             XAL.mgr.stopAll(fade)
 *             XAL.mgr.clear()
 */
    __pyx_v_fade = 0.0;

    /* "_PyXAL.pyx":1101
 *         if self.isXALInitialized():
 *             fade = 0.0
 *             XAL.mgr.stopAll(fade)             # <<<<<<<<<<<<<<
 *             XAL.mgr.clear()
 * 
 */
    try {xal::mgr->stopAll(__pyx_v_fade);} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1101; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}

    /* "_PyXAL.pyx":1102
 *             fade = 0.0
 *             XAL.mgr.stopAll(fade)
 *             XAL.mgr.clear()             # <<<<<<<<<<<<<<
 * 
 *     def createSound(self, bytes filename):
 */
    xal::mgr->clear();
    goto __pyx_L5;
  }
  __pyx_L5:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.XALManager.clear", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":1104
 *             XAL.mgr.clear()
 * 
 *     def createSound(self, bytes filename):             # <<<<<<<<<<<<<<
 *         '''
 *         create a sound object
 */

static PyObject *__pyx_pf_6_PyXAL_10XALManager_4createSound(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6_PyXAL_10XALManager_4createSound[] = "\n        create a sound object\n        raises a runtime error if the sound fails to load so be sure to put this call in a try except block\n        \n        @param filename: string full path to a sound file to load\n        @return: a PySound wraper to the sound object\n        ";
static PyMethodDef __pyx_mdef_6_PyXAL_10XALManager_4createSound = {__Pyx_NAMESTR("createSound"), (PyCFunction)__pyx_pf_6_PyXAL_10XALManager_4createSound, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_10XALManager_4createSound)};
static PyObject *__pyx_pf_6_PyXAL_10XALManager_4createSound(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_filename = 0;
  PyObject *__pyx_v_pysound = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__self,&__pyx_n_s__filename,0};
  __Pyx_RefNannySetupContext("createSound");
  __pyx_self = __pyx_self;
  {
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__self);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__filename);
        if (likely(values[1])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("createSound", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1104; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "createSound") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1104; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_self = values[0];
    __pyx_v_filename = ((PyObject*)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("createSound", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1104; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("_PyXAL.XALManager.createSound", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_filename), (&PyBytes_Type), 1, "filename", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1104; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_PyXAL.pyx":1112
 *         @return: a PySound wraper to the sound object
 *         '''
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         pysound = PySound(filename)
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1112; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1112; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1112; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = (!__pyx_t_3);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":1113
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         pysound = PySound(filename)
 *         return pysound
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_145), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1113; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1113; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "_PyXAL.pyx":1114
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         pysound = PySound(filename)             # <<<<<<<<<<<<<<
 *         return pysound
 * 
 */
  __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__PySound); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1114; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1114; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __Pyx_INCREF(((PyObject *)__pyx_v_filename));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_filename));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_filename));
  __pyx_t_5 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1114; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __pyx_v_pysound = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "_PyXAL.pyx":1115
 *             raise RuntimeError("XAL is not Initialized")
 *         pysound = PySound(filename)
 *         return pysound             # <<<<<<<<<<<<<<
 * 
 *     def createPlayer(self, sound):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_pysound);
  __pyx_r = __pyx_v_pysound;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("_PyXAL.XALManager.createSound", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_pysound);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":1117
 *         return pysound
 * 
 *     def createPlayer(self, sound):             # <<<<<<<<<<<<<<
 *         '''
 *         create a player from a sound object
 */

static PyObject *__pyx_pf_6_PyXAL_10XALManager_5createPlayer(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6_PyXAL_10XALManager_5createPlayer[] = "\n        create a player from a sound object\n        raises a runtime error if XAL fails to create a player so be sure to put this call in a try except block\n        \n        @param sound: a PySound wrapper to a sound object\n        @return: a PyPlayer wraper to the player object\n        ";
static PyMethodDef __pyx_mdef_6_PyXAL_10XALManager_5createPlayer = {__Pyx_NAMESTR("createPlayer"), (PyCFunction)__pyx_pf_6_PyXAL_10XALManager_5createPlayer, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_10XALManager_5createPlayer)};
static PyObject *__pyx_pf_6_PyXAL_10XALManager_5createPlayer(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_sound = 0;
  PyObject *__pyx_v_sound_name = NULL;
  PyObject *__pyx_v_pyplayer = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__self,&__pyx_n_s__sound,0};
  __Pyx_RefNannySetupContext("createPlayer");
  __pyx_self = __pyx_self;
  {
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__self);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__sound);
        if (likely(values[1])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("createPlayer", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1117; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "createPlayer") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1117; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_self = values[0];
    __pyx_v_sound = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("createPlayer", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1117; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("_PyXAL.XALManager.createPlayer", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "_PyXAL.pyx":1125
 *         @return: a PyPlayer wraper to the player object
 *         '''
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         if not isinstance(sound, PySound):
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1125; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1125; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1125; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = (!__pyx_t_3);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":1126
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if not isinstance(sound, PySound):
 *             raise TypeError("Expected argument 1 to be of type PySound got %s" % type(sound))
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_146), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1126; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1126; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "_PyXAL.pyx":1127
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         if not isinstance(sound, PySound):             # <<<<<<<<<<<<<<
 *             raise TypeError("Expected argument 1 to be of type PySound got %s" % type(sound))
 *         sound_name = sound.getName()
 */
  __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__PySound); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1127; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = PyObject_IsInstance(__pyx_v_sound, __pyx_t_2); if (unlikely(__pyx_t_4 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1127; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_3 = (!__pyx_t_4);
  if (__pyx_t_3) {

    /* "_PyXAL.pyx":1128
 *             raise RuntimeError("XAL is not Initialized")
 *         if not isinstance(sound, PySound):
 *             raise TypeError("Expected argument 1 to be of type PySound got %s" % type(sound))             # <<<<<<<<<<<<<<
 *         sound_name = sound.getName()
 *         if not self._players.has_key(sound_name):
 */
    __pyx_t_2 = PyNumber_Remainder(((PyObject *)__pyx_kp_s_99), ((PyObject *)Py_TYPE(__pyx_v_sound))); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1128; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_2));
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1128; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_1));
    PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_t_2));
    __Pyx_GIVEREF(((PyObject *)__pyx_t_2));
    __pyx_t_2 = 0;
    __pyx_t_2 = PyObject_Call(__pyx_builtin_TypeError, ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1128; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1128; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L7;
  }
  __pyx_L7:;

  /* "_PyXAL.pyx":1129
 *         if not isinstance(sound, PySound):
 *             raise TypeError("Expected argument 1 to be of type PySound got %s" % type(sound))
 *         sound_name = sound.getName()             # <<<<<<<<<<<<<<
 *         if not self._players.has_key(sound_name):
 *             self._players[sound_name] = []
 */
  __pyx_t_2 = PyObject_GetAttr(__pyx_v_sound, __pyx_n_s__getName); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1129; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1129; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_sound_name = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "_PyXAL.pyx":1130
 *             raise TypeError("Expected argument 1 to be of type PySound got %s" % type(sound))
 *         sound_name = sound.getName()
 *         if not self._players.has_key(sound_name):             # <<<<<<<<<<<<<<
 *             self._players[sound_name] = []
 *         pyplayer = PyPlayer(sound)
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s___players); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1130; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_GetAttr(__pyx_t_1, __pyx_n_s__has_key); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1130; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1130; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __Pyx_INCREF(__pyx_v_sound_name);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_sound_name);
  __Pyx_GIVEREF(__pyx_v_sound_name);
  __pyx_t_5 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1130; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1130; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_4 = (!__pyx_t_3);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":1131
 *         sound_name = sound.getName()
 *         if not self._players.has_key(sound_name):
 *             self._players[sound_name] = []             # <<<<<<<<<<<<<<
 *         pyplayer = PyPlayer(sound)
 *         self._players[sound_name].append(pyplayer)
 */
    __pyx_t_5 = PyList_New(0); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1131; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_5));
    __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s___players); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1131; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (PyObject_SetItem(__pyx_t_1, __pyx_v_sound_name, ((PyObject *)__pyx_t_5)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1131; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(((PyObject *)__pyx_t_5)); __pyx_t_5 = 0;
    goto __pyx_L8;
  }
  __pyx_L8:;

  /* "_PyXAL.pyx":1132
 *         if not self._players.has_key(sound_name):
 *             self._players[sound_name] = []
 *         pyplayer = PyPlayer(sound)             # <<<<<<<<<<<<<<
 *         self._players[sound_name].append(pyplayer)
 *         return pyplayer
 */
  __pyx_t_5 = __Pyx_GetName(__pyx_m, __pyx_n_s__PyPlayer); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1132; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1132; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __Pyx_INCREF(__pyx_v_sound);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_sound);
  __Pyx_GIVEREF(__pyx_v_sound);
  __pyx_t_2 = PyObject_Call(__pyx_t_5, ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1132; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __pyx_v_pyplayer = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "_PyXAL.pyx":1133
 *             self._players[sound_name] = []
 *         pyplayer = PyPlayer(sound)
 *         self._players[sound_name].append(pyplayer)             # <<<<<<<<<<<<<<
 *         return pyplayer
 * 
 */
  __pyx_t_2 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s___players); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1133; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyObject_GetItem(__pyx_t_2, __pyx_v_sound_name); if (!__pyx_t_1) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1133; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Append(__pyx_t_1, __pyx_v_pyplayer); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1133; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "_PyXAL.pyx":1134
 *         pyplayer = PyPlayer(sound)
 *         self._players[sound_name].append(pyplayer)
 *         return pyplayer             # <<<<<<<<<<<<<<
 * 
 *     def destroyPlayer(self, player):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_pyplayer);
  __pyx_r = __pyx_v_pyplayer;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("_PyXAL.XALManager.createPlayer", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_sound_name);
  __Pyx_XDECREF(__pyx_v_pyplayer);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":1136
 *         return pyplayer
 * 
 *     def destroyPlayer(self, player):             # <<<<<<<<<<<<<<
 *         '''
 *         destroy a player object
 */

static PyObject *__pyx_pf_6_PyXAL_10XALManager_6destroyPlayer(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6_PyXAL_10XALManager_6destroyPlayer[] = "\n        destroy a player object\n        destroyes the C++ interface. the object is unusable after this\n        \n        @param pyplayer: the PyPlayer wrapper for the player to destory\n        ";
static PyMethodDef __pyx_mdef_6_PyXAL_10XALManager_6destroyPlayer = {__Pyx_NAMESTR("destroyPlayer"), (PyCFunction)__pyx_pf_6_PyXAL_10XALManager_6destroyPlayer, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_10XALManager_6destroyPlayer)};
static PyObject *__pyx_pf_6_PyXAL_10XALManager_6destroyPlayer(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_player = 0;
  PyObject *__pyx_v_name = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__self,&__pyx_n_s__player,0};
  __Pyx_RefNannySetupContext("destroyPlayer");
  __pyx_self = __pyx_self;
  {
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__self);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__player);
        if (likely(values[1])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("destroyPlayer", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1136; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "destroyPlayer") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1136; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_self = values[0];
    __pyx_v_player = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("destroyPlayer", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1136; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("_PyXAL.XALManager.destroyPlayer", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "_PyXAL.pyx":1143
 *         @param pyplayer: the PyPlayer wrapper for the player to destory
 *         '''
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         if not isinstance(player, PyPlayer):
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1143; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1143; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1143; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = (!__pyx_t_3);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":1144
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if not isinstance(player, PyPlayer):
 *             raise TypeError("Expected argument 1 to be of type PyPlayer got %s" % type(player))
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_147), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1144; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1144; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "_PyXAL.pyx":1145
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         if not isinstance(player, PyPlayer):             # <<<<<<<<<<<<<<
 *             raise TypeError("Expected argument 1 to be of type PyPlayer got %s" % type(player))
 *         name = player.getName()
 */
  __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__PyPlayer); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1145; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = PyObject_IsInstance(__pyx_v_player, __pyx_t_2); if (unlikely(__pyx_t_4 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1145; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_3 = (!__pyx_t_4);
  if (__pyx_t_3) {

    /* "_PyXAL.pyx":1146
 *             raise RuntimeError("XAL is not Initialized")
 *         if not isinstance(player, PyPlayer):
 *             raise TypeError("Expected argument 1 to be of type PyPlayer got %s" % type(player))             # <<<<<<<<<<<<<<
 *         name = player.getName()
 *         if self._players.has_key(name):
 */
    __pyx_t_2 = PyNumber_Remainder(((PyObject *)__pyx_kp_s_148), ((PyObject *)Py_TYPE(__pyx_v_player))); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1146; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_2));
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1146; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_1));
    PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_t_2));
    __Pyx_GIVEREF(((PyObject *)__pyx_t_2));
    __pyx_t_2 = 0;
    __pyx_t_2 = PyObject_Call(__pyx_builtin_TypeError, ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1146; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1146; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L7;
  }
  __pyx_L7:;

  /* "_PyXAL.pyx":1147
 *         if not isinstance(player, PyPlayer):
 *             raise TypeError("Expected argument 1 to be of type PyPlayer got %s" % type(player))
 *         name = player.getName()             # <<<<<<<<<<<<<<
 *         if self._players.has_key(name):
 *             if player in self._players[name]:
 */
  __pyx_t_2 = PyObject_GetAttr(__pyx_v_player, __pyx_n_s__getName); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1147; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1147; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_name = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "_PyXAL.pyx":1148
 *             raise TypeError("Expected argument 1 to be of type PyPlayer got %s" % type(player))
 *         name = player.getName()
 *         if self._players.has_key(name):             # <<<<<<<<<<<<<<
 *             if player in self._players[name]:
 *                 self._players[name].remove(player)
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s___players); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1148; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_GetAttr(__pyx_t_1, __pyx_n_s__has_key); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1148; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1148; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __Pyx_INCREF(__pyx_v_name);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_name);
  __Pyx_GIVEREF(__pyx_v_name);
  __pyx_t_5 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1148; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1148; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (__pyx_t_3) {

    /* "_PyXAL.pyx":1149
 *         name = player.getName()
 *         if self._players.has_key(name):
 *             if player in self._players[name]:             # <<<<<<<<<<<<<<
 *                 self._players[name].remove(player)
 *         player._destroy()
 */
    __pyx_t_5 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s___players); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1149; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 = PyObject_GetItem(__pyx_t_5, __pyx_v_name); if (!__pyx_t_1) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1149; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_3 = ((PySequence_Contains(__pyx_t_1, __pyx_v_player))); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1149; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (__pyx_t_3) {

      /* "_PyXAL.pyx":1150
 *         if self._players.has_key(name):
 *             if player in self._players[name]:
 *                 self._players[name].remove(player)             # <<<<<<<<<<<<<<
 *         player._destroy()
 * 
 */
      __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s___players); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1150; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_5 = PyObject_GetItem(__pyx_t_1, __pyx_v_name); if (!__pyx_t_5) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1150; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = PyObject_GetAttr(__pyx_t_5, __pyx_n_s__remove); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1150; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1150; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_5));
      __Pyx_INCREF(__pyx_v_player);
      PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_v_player);
      __Pyx_GIVEREF(__pyx_v_player);
      __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_5), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1150; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(((PyObject *)__pyx_t_5)); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      goto __pyx_L9;
    }
    __pyx_L9:;
    goto __pyx_L8;
  }
  __pyx_L8:;

  /* "_PyXAL.pyx":1151
 *             if player in self._players[name]:
 *                 self._players[name].remove(player)
 *         player._destroy()             # <<<<<<<<<<<<<<
 * 
 *     def destroySound(self, sound):
 */
  __pyx_t_2 = PyObject_GetAttr(__pyx_v_player, __pyx_n_s___destroy); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1151; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1151; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("_PyXAL.XALManager.destroyPlayer", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_name);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":1153
 *         player._destroy()
 * 
 *     def destroySound(self, sound):             # <<<<<<<<<<<<<<
 *         '''
 *         destroy a sound object
 */

static PyObject *__pyx_pf_6_PyXAL_10XALManager_7destroySound(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6_PyXAL_10XALManager_7destroySound[] = "\n        destroy a sound object\n        destroyes the C++ interface. the object is unusable after this and so is any player that uses the sound\n        \n        @param pyplayer: the Pysound wrapper for the sound to destory\n        ";
static PyMethodDef __pyx_mdef_6_PyXAL_10XALManager_7destroySound = {__Pyx_NAMESTR("destroySound"), (PyCFunction)__pyx_pf_6_PyXAL_10XALManager_7destroySound, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_10XALManager_7destroySound)};
static PyObject *__pyx_pf_6_PyXAL_10XALManager_7destroySound(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_sound = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__self,&__pyx_n_s__sound,0};
  __Pyx_RefNannySetupContext("destroySound");
  __pyx_self = __pyx_self;
  {
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__self);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__sound);
        if (likely(values[1])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("destroySound", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1153; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "destroySound") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1153; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_self = values[0];
    __pyx_v_sound = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("destroySound", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1153; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("_PyXAL.XALManager.destroySound", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "_PyXAL.pyx":1160
 *         @param pyplayer: the Pysound wrapper for the sound to destory
 *         '''
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         if not isinstance(sound, PySound):
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1160; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1160; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1160; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = (!__pyx_t_3);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":1161
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if not isinstance(sound, PySound):
 *             raise TypeError("Expected argument 1 to be of type PySound got %s" % type(sound))
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_149), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1161; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1161; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "_PyXAL.pyx":1162
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         if not isinstance(sound, PySound):             # <<<<<<<<<<<<<<
 *             raise TypeError("Expected argument 1 to be of type PySound got %s" % type(sound))
 *         sound._destroy()
 */
  __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__PySound); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1162; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = PyObject_IsInstance(__pyx_v_sound, __pyx_t_2); if (unlikely(__pyx_t_4 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1162; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_3 = (!__pyx_t_4);
  if (__pyx_t_3) {

    /* "_PyXAL.pyx":1163
 *             raise RuntimeError("XAL is not Initialized")
 *         if not isinstance(sound, PySound):
 *             raise TypeError("Expected argument 1 to be of type PySound got %s" % type(sound))             # <<<<<<<<<<<<<<
 *         sound._destroy()
 * 
 */
    __pyx_t_2 = PyNumber_Remainder(((PyObject *)__pyx_kp_s_99), ((PyObject *)Py_TYPE(__pyx_v_sound))); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1163; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_2));
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1163; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_1));
    PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_t_2));
    __Pyx_GIVEREF(((PyObject *)__pyx_t_2));
    __pyx_t_2 = 0;
    __pyx_t_2 = PyObject_Call(__pyx_builtin_TypeError, ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1163; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1163; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L7;
  }
  __pyx_L7:;

  /* "_PyXAL.pyx":1164
 *         if not isinstance(sound, PySound):
 *             raise TypeError("Expected argument 1 to be of type PySound got %s" % type(sound))
 *         sound._destroy()             # <<<<<<<<<<<<<<
 * 
 *     def findPlayer(self, str name):
 */
  __pyx_t_2 = PyObject_GetAttr(__pyx_v_sound, __pyx_n_s___destroy); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1164; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1164; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.XALManager.destroySound", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":1166
 *         sound._destroy()
 * 
 *     def findPlayer(self, str name):             # <<<<<<<<<<<<<<
 *         '''
 *         tries to find a player for the sound whos name is passed. it find the player useing the intrealy kept list of wrpaed player instances. returns the first player in the list
 */

static PyObject *__pyx_pf_6_PyXAL_10XALManager_8findPlayer(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6_PyXAL_10XALManager_8findPlayer[] = "\n        tries to find a player for the sound whos name is passed. it find the player useing the intrealy kept list of wrpaed player instances. returns the first player in the list\n        \n        @param name: string the name of the soudn to find a player for\n        @return: a PyPlayer wraper to the player object or None if no player is found\n        ";
static PyMethodDef __pyx_mdef_6_PyXAL_10XALManager_8findPlayer = {__Pyx_NAMESTR("findPlayer"), (PyCFunction)__pyx_pf_6_PyXAL_10XALManager_8findPlayer, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_10XALManager_8findPlayer)};
static PyObject *__pyx_pf_6_PyXAL_10XALManager_8findPlayer(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_name = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__self,&__pyx_n_s__name,0};
  __Pyx_RefNannySetupContext("findPlayer");
  __pyx_self = __pyx_self;
  {
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__self);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__name);
        if (likely(values[1])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("findPlayer", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1166; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "findPlayer") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1166; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_self = values[0];
    __pyx_v_name = ((PyObject*)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("findPlayer", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1166; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("_PyXAL.XALManager.findPlayer", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_name), (&PyString_Type), 1, "name", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1166; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_PyXAL.pyx":1173
 *         @return: a PyPlayer wraper to the player object or None if no player is found
 *         '''
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         if self._players.has_key(name):
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1173; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1173; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1173; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = (!__pyx_t_3);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":1174
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self._players.has_key(name):
 *             if len(self._players[name]) > 0:
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_150), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1174; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1174; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "_PyXAL.pyx":1175
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         if self._players.has_key(name):             # <<<<<<<<<<<<<<
 *             if len(self._players[name]) > 0:
 *                 return self._players[name][0]
 */
  __pyx_t_2 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s___players); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1175; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__has_key); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1175; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1175; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  __Pyx_INCREF(((PyObject *)__pyx_v_name));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_name));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_name));
  __pyx_t_5 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1175; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1175; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":1176
 *             raise RuntimeError("XAL is not Initialized")
 *         if self._players.has_key(name):
 *             if len(self._players[name]) > 0:             # <<<<<<<<<<<<<<
 *                 return self._players[name][0]
 *         return None
 */
    __pyx_t_5 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s___players); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1176; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = PyObject_GetItem(__pyx_t_5, ((PyObject *)__pyx_v_name)); if (!__pyx_t_2) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1176; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_6 = PyObject_Length(__pyx_t_2); if (unlikely(__pyx_t_6 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1176; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_4 = (__pyx_t_6 > 0);
    if (__pyx_t_4) {

      /* "_PyXAL.pyx":1177
 *         if self._players.has_key(name):
 *             if len(self._players[name]) > 0:
 *                 return self._players[name][0]             # <<<<<<<<<<<<<<
 *         return None
 * 
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_2 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s___players); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1177; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_5 = PyObject_GetItem(__pyx_t_2, ((PyObject *)__pyx_v_name)); if (!__pyx_t_5) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1177; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_5, 0, sizeof(long), PyInt_FromLong); if (!__pyx_t_2) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1177; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      goto __pyx_L0;
      goto __pyx_L8;
    }
    __pyx_L8:;
    goto __pyx_L7;
  }
  __pyx_L7:;

  /* "_PyXAL.pyx":1178
 *             if len(self._players[name]) > 0:
 *                 return self._players[name][0]
 *         return None             # <<<<<<<<<<<<<<
 * 
 *     def play(self, bytes name, float fadeTime = 0.0, bool looping = False, float gain = 1.0):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(Py_None);
  __pyx_r = Py_None;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("_PyXAL.XALManager.findPlayer", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":1180
 *         return None
 * 
 *     def play(self, bytes name, float fadeTime = 0.0, bool looping = False, float gain = 1.0):             # <<<<<<<<<<<<<<
 *         '''
 *         play the sound identified by the name passed (it must of alrady been created)
 */

static PyObject *__pyx_pf_6_PyXAL_10XALManager_9play(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6_PyXAL_10XALManager_9play[] = "\n        play the sound identified by the name passed (it must of alrady been created)\n        \n        @param name: string the name of the sound to play. it must alrady of been created\n        @param fadeTime: float time is seconds for teh sound to fade in (0.0 by default)\n        @param looping: bool should the sound loop? (False by default)\n        @param gain: float the volume to play the sound at. 1.0 is normal 0.5 is half 2.0 is twice the volume ect. (1.0 by default)\n        ";
static PyMethodDef __pyx_mdef_6_PyXAL_10XALManager_9play = {__Pyx_NAMESTR("play"), (PyCFunction)__pyx_pf_6_PyXAL_10XALManager_9play, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_10XALManager_9play)};
static PyObject *__pyx_pf_6_PyXAL_10XALManager_9play(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_name = 0;
  float __pyx_v_fadeTime;
  bool __pyx_v_looping;
  float __pyx_v_gain;
  char *__pyx_v_name_str;
  hltypes::String __pyx_v_hl_name;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  char *__pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__self,&__pyx_n_s__name,&__pyx_n_s__fadeTime,&__pyx_n_s__looping,&__pyx_n_s__gain,0};
  __Pyx_RefNannySetupContext("play");
  __pyx_self = __pyx_self;
  {
    PyObject* values[5] = {0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__self);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__name);
        if (likely(values[1])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("play", 0, 2, 5, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1180; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__fadeTime);
          if (value) { values[2] = value; kw_args--; }
        }
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__looping);
          if (value) { values[3] = value; kw_args--; }
        }
        case  4:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__gain);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "play") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1180; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_self = values[0];
    __pyx_v_name = ((PyObject*)values[1]);
    if (values[2]) {
      __pyx_v_fadeTime = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_fadeTime == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1180; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_fadeTime = ((float)0.0);
    }
    if (values[3]) {
      __pyx_v_looping = __Pyx_PyObject_IsTrue(values[3]); if (unlikely((__pyx_v_looping == (bool)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1180; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_looping = ((bool)0);
    }
    if (values[4]) {
      __pyx_v_gain = __pyx_PyFloat_AsDouble(values[4]); if (unlikely((__pyx_v_gain == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1180; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_gain = ((float)1.0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("play", 0, 2, 5, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1180; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("_PyXAL.XALManager.play", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_name), (&PyBytes_Type), 1, "name", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1180; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_PyXAL.pyx":1189
 *         @param gain: float the volume to play the sound at. 1.0 is normal 0.5 is half 2.0 is twice the volume ect. (1.0 by default)
 *         '''
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         cdef char* name_str = name
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1189; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1189; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1189; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = (!__pyx_t_3);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":1190
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         cdef char* name_str = name
 *         cdef String hl_name = String(name_str)
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_151), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1190; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1190; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "_PyXAL.pyx":1191
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         cdef char* name_str = name             # <<<<<<<<<<<<<<
 *         cdef String hl_name = String(name_str)
 *         XAL.mgr.play(hl_name, fadeTime, looping, gain)
 */
  __pyx_t_5 = PyBytes_AsString(((PyObject *)__pyx_v_name)); if (unlikely((!__pyx_t_5) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1191; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_name_str = __pyx_t_5;

  /* "_PyXAL.pyx":1192
 *             raise RuntimeError("XAL is not Initialized")
 *         cdef char* name_str = name
 *         cdef String hl_name = String(name_str)             # <<<<<<<<<<<<<<
 *         XAL.mgr.play(hl_name, fadeTime, looping, gain)
 * 
 */
  __pyx_v_hl_name = hltypes::String(__pyx_v_name_str);

  /* "_PyXAL.pyx":1193
 *         cdef char* name_str = name
 *         cdef String hl_name = String(name_str)
 *         XAL.mgr.play(hl_name, fadeTime, looping, gain)             # <<<<<<<<<<<<<<
 * 
 *     def stop(self, bytes name, float fadeTime = 0.0):
 */
  try {xal::mgr->play(__pyx_v_hl_name, __pyx_v_fadeTime, __pyx_v_looping, __pyx_v_gain);} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1193; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.XALManager.play", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":1195
 *         XAL.mgr.play(hl_name, fadeTime, looping, gain)
 * 
 *     def stop(self, bytes name, float fadeTime = 0.0):             # <<<<<<<<<<<<<<
 *         '''
 *         stop playing the sound identifed by the name passed
 */

static PyObject *__pyx_pf_6_PyXAL_10XALManager_10stop(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6_PyXAL_10XALManager_10stop[] = "\n        stop playing the sound identifed by the name passed\n        \n        @param name: string the name of the sound to stop\n        @param fadeTime: float the time is second for the sound to fade out (0.0 by default)\n        ";
static PyMethodDef __pyx_mdef_6_PyXAL_10XALManager_10stop = {__Pyx_NAMESTR("stop"), (PyCFunction)__pyx_pf_6_PyXAL_10XALManager_10stop, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_10XALManager_10stop)};
static PyObject *__pyx_pf_6_PyXAL_10XALManager_10stop(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_name = 0;
  float __pyx_v_fadeTime;
  char *__pyx_v_name_str;
  hltypes::String __pyx_v_hl_name;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  char *__pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__self,&__pyx_n_s__name,&__pyx_n_s__fadeTime,0};
  __Pyx_RefNannySetupContext("stop");
  __pyx_self = __pyx_self;
  {
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__self);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__name);
        if (likely(values[1])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("stop", 0, 2, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1195; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__fadeTime);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "stop") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1195; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_self = values[0];
    __pyx_v_name = ((PyObject*)values[1]);
    if (values[2]) {
      __pyx_v_fadeTime = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_fadeTime == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1195; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_fadeTime = ((float)0.0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("stop", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1195; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("_PyXAL.XALManager.stop", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_name), (&PyBytes_Type), 1, "name", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1195; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_PyXAL.pyx":1202
 *         @param fadeTime: float the time is second for the sound to fade out (0.0 by default)
 *         '''
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         cdef char* name_str = name
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1202; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1202; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1202; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = (!__pyx_t_3);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":1203
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         cdef char* name_str = name
 *         cdef String hl_name = String(name_str)
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_152), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1203; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1203; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "_PyXAL.pyx":1204
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         cdef char* name_str = name             # <<<<<<<<<<<<<<
 *         cdef String hl_name = String(name_str)
 *         XAL.mgr.stop(hl_name, fadeTime)
 */
  __pyx_t_5 = PyBytes_AsString(((PyObject *)__pyx_v_name)); if (unlikely((!__pyx_t_5) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1204; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_name_str = __pyx_t_5;

  /* "_PyXAL.pyx":1205
 *             raise RuntimeError("XAL is not Initialized")
 *         cdef char* name_str = name
 *         cdef String hl_name = String(name_str)             # <<<<<<<<<<<<<<
 *         XAL.mgr.stop(hl_name, fadeTime)
 * 
 */
  __pyx_v_hl_name = hltypes::String(__pyx_v_name_str);

  /* "_PyXAL.pyx":1206
 *         cdef char* name_str = name
 *         cdef String hl_name = String(name_str)
 *         XAL.mgr.stop(hl_name, fadeTime)             # <<<<<<<<<<<<<<
 * 
 *     def stopFirst(self, bytes name, float fadeTime = 0.0):
 */
  try {xal::mgr->stop(__pyx_v_hl_name, __pyx_v_fadeTime);} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1206; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.XALManager.stop", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":1208
 *         XAL.mgr.stop(hl_name, fadeTime)
 * 
 *     def stopFirst(self, bytes name, float fadeTime = 0.0):             # <<<<<<<<<<<<<<
 *         '''
 *         stop playing the first player of the sound identifed by the name passed
 */

static PyObject *__pyx_pf_6_PyXAL_10XALManager_11stopFirst(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6_PyXAL_10XALManager_11stopFirst[] = "\n        stop playing the first player of the sound identifed by the name passed\n        \n        @param name: string the name of the sound to stop\n        @param fadeTime: float the time is second for the sound to fade out (0.0 by default)\n        ";
static PyMethodDef __pyx_mdef_6_PyXAL_10XALManager_11stopFirst = {__Pyx_NAMESTR("stopFirst"), (PyCFunction)__pyx_pf_6_PyXAL_10XALManager_11stopFirst, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_10XALManager_11stopFirst)};
static PyObject *__pyx_pf_6_PyXAL_10XALManager_11stopFirst(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_name = 0;
  float __pyx_v_fadeTime;
  char *__pyx_v_name_str;
  hltypes::String __pyx_v_hl_name;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  char *__pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__self,&__pyx_n_s__name,&__pyx_n_s__fadeTime,0};
  __Pyx_RefNannySetupContext("stopFirst");
  __pyx_self = __pyx_self;
  {
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__self);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__name);
        if (likely(values[1])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("stopFirst", 0, 2, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1208; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__fadeTime);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "stopFirst") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1208; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_self = values[0];
    __pyx_v_name = ((PyObject*)values[1]);
    if (values[2]) {
      __pyx_v_fadeTime = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_fadeTime == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1208; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_fadeTime = ((float)0.0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("stopFirst", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1208; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("_PyXAL.XALManager.stopFirst", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_name), (&PyBytes_Type), 1, "name", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1208; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_PyXAL.pyx":1215
 *         @param fadeTime: float the time is second for the sound to fade out (0.0 by default)
 *         '''
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         cdef char* name_str = name
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1215; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1215; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1215; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = (!__pyx_t_3);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":1216
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         cdef char* name_str = name
 *         cdef String hl_name = String(name_str)
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_153), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1216; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1216; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "_PyXAL.pyx":1217
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         cdef char* name_str = name             # <<<<<<<<<<<<<<
 *         cdef String hl_name = String(name_str)
 *         XAL.mgr.stopFirst(hl_name, fadeTime)
 */
  __pyx_t_5 = PyBytes_AsString(((PyObject *)__pyx_v_name)); if (unlikely((!__pyx_t_5) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1217; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_name_str = __pyx_t_5;

  /* "_PyXAL.pyx":1218
 *             raise RuntimeError("XAL is not Initialized")
 *         cdef char* name_str = name
 *         cdef String hl_name = String(name_str)             # <<<<<<<<<<<<<<
 *         XAL.mgr.stopFirst(hl_name, fadeTime)
 * 
 */
  __pyx_v_hl_name = hltypes::String(__pyx_v_name_str);

  /* "_PyXAL.pyx":1219
 *         cdef char* name_str = name
 *         cdef String hl_name = String(name_str)
 *         XAL.mgr.stopFirst(hl_name, fadeTime)             # <<<<<<<<<<<<<<
 * 
 *     def stopAll(self, float fadeTime = 0.0):
 */
  try {xal::mgr->stopFirst(__pyx_v_hl_name, __pyx_v_fadeTime);} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1219; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.XALManager.stopFirst", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":1221
 *         XAL.mgr.stopFirst(hl_name, fadeTime)
 * 
 *     def stopAll(self, float fadeTime = 0.0):             # <<<<<<<<<<<<<<
 *         '''
 *         stop playing the all players of the sound identifed by the name passed
 */

static PyObject *__pyx_pf_6_PyXAL_10XALManager_12stopAll(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6_PyXAL_10XALManager_12stopAll[] = "\n        stop playing the all players of the sound identifed by the name passed\n        \n        @param name: string the name of the sound to stop\n        @param fadeTime: float the time is second for the sound to fade out (0.0 by default)\n        ";
static PyMethodDef __pyx_mdef_6_PyXAL_10XALManager_12stopAll = {__Pyx_NAMESTR("stopAll"), (PyCFunction)__pyx_pf_6_PyXAL_10XALManager_12stopAll, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_10XALManager_12stopAll)};
static PyObject *__pyx_pf_6_PyXAL_10XALManager_12stopAll(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  float __pyx_v_fadeTime;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__self,&__pyx_n_s__fadeTime,0};
  __Pyx_RefNannySetupContext("stopAll");
  __pyx_self = __pyx_self;
  {
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__self);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__fadeTime);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "stopAll") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1221; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_self = values[0];
    if (values[1]) {
      __pyx_v_fadeTime = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_fadeTime == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1221; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_fadeTime = ((float)0.0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("stopAll", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1221; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("_PyXAL.XALManager.stopAll", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "_PyXAL.pyx":1228
 *         @param fadeTime: float the time is second for the sound to fade out (0.0 by default)
 *         '''
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         XAL.mgr.stopAll(fadeTime)
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1228; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1228; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1228; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = (!__pyx_t_3);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":1229
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         XAL.mgr.stopAll(fadeTime)
 * 
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_154), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1229; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1229; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "_PyXAL.pyx":1230
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         XAL.mgr.stopAll(fadeTime)             # <<<<<<<<<<<<<<
 * 
 *     def isAnyPlaying(self, bytes name):
 */
  try {xal::mgr->stopAll(__pyx_v_fadeTime);} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1230; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.XALManager.stopAll", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":1232
 *         XAL.mgr.stopAll(fadeTime)
 * 
 *     def isAnyPlaying(self, bytes name):             # <<<<<<<<<<<<<<
 *         '''
 *         @param name: sting name of sound to check
 */

static PyObject *__pyx_pf_6_PyXAL_10XALManager_13isAnyPlaying(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6_PyXAL_10XALManager_13isAnyPlaying[] = "\n        @param name: sting name of sound to check\n        @return: bool True if there is a sound by this name playing\n        ";
static PyMethodDef __pyx_mdef_6_PyXAL_10XALManager_13isAnyPlaying = {__Pyx_NAMESTR("isAnyPlaying"), (PyCFunction)__pyx_pf_6_PyXAL_10XALManager_13isAnyPlaying, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_10XALManager_13isAnyPlaying)};
static PyObject *__pyx_pf_6_PyXAL_10XALManager_13isAnyPlaying(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_name = 0;
  char *__pyx_v_name_str;
  hltypes::String __pyx_v_hl_name;
  int __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  char *__pyx_t_5;
  bool __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__self,&__pyx_n_s__name,0};
  __Pyx_RefNannySetupContext("isAnyPlaying");
  __pyx_self = __pyx_self;
  {
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__self);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__name);
        if (likely(values[1])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("isAnyPlaying", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1232; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "isAnyPlaying") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1232; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_self = values[0];
    __pyx_v_name = ((PyObject*)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("isAnyPlaying", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1232; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("_PyXAL.XALManager.isAnyPlaying", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_name), (&PyBytes_Type), 1, "name", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1232; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_PyXAL.pyx":1237
 *         @return: bool True if there is a sound by this name playing
 *         '''
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         cdef char* name_str = name
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1237; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1237; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1237; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = (!__pyx_t_3);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":1238
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         cdef char* name_str = name
 *         cdef String hl_name = String(name_str)
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_155), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1238; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1238; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "_PyXAL.pyx":1239
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         cdef char* name_str = name             # <<<<<<<<<<<<<<
 *         cdef String hl_name = String(name_str)
 *         cdef bint result = XAL.mgr.isAnyPlaying(hl_name)
 */
  __pyx_t_5 = PyBytes_AsString(((PyObject *)__pyx_v_name)); if (unlikely((!__pyx_t_5) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1239; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_name_str = __pyx_t_5;

  /* "_PyXAL.pyx":1240
 *             raise RuntimeError("XAL is not Initialized")
 *         cdef char* name_str = name
 *         cdef String hl_name = String(name_str)             # <<<<<<<<<<<<<<
 *         cdef bint result = XAL.mgr.isAnyPlaying(hl_name)
 *         return result
 */
  __pyx_v_hl_name = hltypes::String(__pyx_v_name_str);

  /* "_PyXAL.pyx":1241
 *         cdef char* name_str = name
 *         cdef String hl_name = String(name_str)
 *         cdef bint result = XAL.mgr.isAnyPlaying(hl_name)             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  try {__pyx_t_6 = xal::mgr->isAnyPlaying(__pyx_v_hl_name);} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1241; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}
  __pyx_v_result = __pyx_t_6;

  /* "_PyXAL.pyx":1242
 *         cdef String hl_name = String(name_str)
 *         cdef bint result = XAL.mgr.isAnyPlaying(hl_name)
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     def isAnyFading(self, bytes name):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_result); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1242; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.XALManager.isAnyPlaying", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":1244
 *         return result
 * 
 *     def isAnyFading(self, bytes name):             # <<<<<<<<<<<<<<
 *         '''
 *         @param name: sting name of sound to check
 */

static PyObject *__pyx_pf_6_PyXAL_10XALManager_14isAnyFading(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6_PyXAL_10XALManager_14isAnyFading[] = "\n        @param name: sting name of sound to check\n        @return: bool True if there is a sound by this name fading in or out\n        ";
static PyMethodDef __pyx_mdef_6_PyXAL_10XALManager_14isAnyFading = {__Pyx_NAMESTR("isAnyFading"), (PyCFunction)__pyx_pf_6_PyXAL_10XALManager_14isAnyFading, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_10XALManager_14isAnyFading)};
static PyObject *__pyx_pf_6_PyXAL_10XALManager_14isAnyFading(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_name = 0;
  char *__pyx_v_name_str;
  hltypes::String __pyx_v_hl_name;
  int __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  char *__pyx_t_5;
  bool __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__self,&__pyx_n_s__name,0};
  __Pyx_RefNannySetupContext("isAnyFading");
  __pyx_self = __pyx_self;
  {
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__self);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__name);
        if (likely(values[1])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("isAnyFading", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1244; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "isAnyFading") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1244; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_self = values[0];
    __pyx_v_name = ((PyObject*)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("isAnyFading", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1244; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("_PyXAL.XALManager.isAnyFading", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_name), (&PyBytes_Type), 1, "name", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1244; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_PyXAL.pyx":1249
 *         @return: bool True if there is a sound by this name fading in or out
 *         '''
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         cdef char* name_str = name
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1249; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1249; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1249; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = (!__pyx_t_3);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":1250
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         cdef char* name_str = name
 *         cdef String hl_name = String(name_str)
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_156), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1250; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1250; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "_PyXAL.pyx":1251
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         cdef char* name_str = name             # <<<<<<<<<<<<<<
 *         cdef String hl_name = String(name_str)
 *         cdef bint result = XAL.mgr.isAnyFading(hl_name)
 */
  __pyx_t_5 = PyBytes_AsString(((PyObject *)__pyx_v_name)); if (unlikely((!__pyx_t_5) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1251; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_name_str = __pyx_t_5;

  /* "_PyXAL.pyx":1252
 *             raise RuntimeError("XAL is not Initialized")
 *         cdef char* name_str = name
 *         cdef String hl_name = String(name_str)             # <<<<<<<<<<<<<<
 *         cdef bint result = XAL.mgr.isAnyFading(hl_name)
 *         return result
 */
  __pyx_v_hl_name = hltypes::String(__pyx_v_name_str);

  /* "_PyXAL.pyx":1253
 *         cdef char* name_str = name
 *         cdef String hl_name = String(name_str)
 *         cdef bint result = XAL.mgr.isAnyFading(hl_name)             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  try {__pyx_t_6 = xal::mgr->isAnyFading(__pyx_v_hl_name);} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1253; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}
  __pyx_v_result = __pyx_t_6;

  /* "_PyXAL.pyx":1254
 *         cdef String hl_name = String(name_str)
 *         cdef bint result = XAL.mgr.isAnyFading(hl_name)
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     def isAnyFadingIn(self, bytes name):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_result); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1254; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.XALManager.isAnyFading", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":1256
 *         return result
 * 
 *     def isAnyFadingIn(self, bytes name):             # <<<<<<<<<<<<<<
 *         '''
 *         @param name: sting name of sound to check
 */

static PyObject *__pyx_pf_6_PyXAL_10XALManager_15isAnyFadingIn(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6_PyXAL_10XALManager_15isAnyFadingIn[] = "\n        @param name: sting name of sound to check\n        @return: bool True if there is a sound by this name fading in\n        ";
static PyMethodDef __pyx_mdef_6_PyXAL_10XALManager_15isAnyFadingIn = {__Pyx_NAMESTR("isAnyFadingIn"), (PyCFunction)__pyx_pf_6_PyXAL_10XALManager_15isAnyFadingIn, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_10XALManager_15isAnyFadingIn)};
static PyObject *__pyx_pf_6_PyXAL_10XALManager_15isAnyFadingIn(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_name = 0;
  char *__pyx_v_name_str;
  hltypes::String __pyx_v_hl_name;
  int __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  char *__pyx_t_5;
  bool __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__self,&__pyx_n_s__name,0};
  __Pyx_RefNannySetupContext("isAnyFadingIn");
  __pyx_self = __pyx_self;
  {
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__self);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__name);
        if (likely(values[1])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("isAnyFadingIn", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1256; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "isAnyFadingIn") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1256; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_self = values[0];
    __pyx_v_name = ((PyObject*)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("isAnyFadingIn", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1256; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("_PyXAL.XALManager.isAnyFadingIn", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_name), (&PyBytes_Type), 1, "name", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1256; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_PyXAL.pyx":1261
 *         @return: bool True if there is a sound by this name fading in
 *         '''
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         cdef char* name_str = name
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1261; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1261; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1261; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = (!__pyx_t_3);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":1262
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         cdef char* name_str = name
 *         cdef String hl_name = String(name_str)
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_157), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1262; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1262; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "_PyXAL.pyx":1263
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         cdef char* name_str = name             # <<<<<<<<<<<<<<
 *         cdef String hl_name = String(name_str)
 *         cdef bint result = XAL.mgr.isAnyFadingIn(hl_name)
 */
  __pyx_t_5 = PyBytes_AsString(((PyObject *)__pyx_v_name)); if (unlikely((!__pyx_t_5) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1263; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_name_str = __pyx_t_5;

  /* "_PyXAL.pyx":1264
 *             raise RuntimeError("XAL is not Initialized")
 *         cdef char* name_str = name
 *         cdef String hl_name = String(name_str)             # <<<<<<<<<<<<<<
 *         cdef bint result = XAL.mgr.isAnyFadingIn(hl_name)
 *         return result
 */
  __pyx_v_hl_name = hltypes::String(__pyx_v_name_str);

  /* "_PyXAL.pyx":1265
 *         cdef char* name_str = name
 *         cdef String hl_name = String(name_str)
 *         cdef bint result = XAL.mgr.isAnyFadingIn(hl_name)             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  try {__pyx_t_6 = xal::mgr->isAnyFadingIn(__pyx_v_hl_name);} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1265; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}
  __pyx_v_result = __pyx_t_6;

  /* "_PyXAL.pyx":1266
 *         cdef String hl_name = String(name_str)
 *         cdef bint result = XAL.mgr.isAnyFadingIn(hl_name)
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     def isAnyFadingOut(self, bytes name):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_result); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1266; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.XALManager.isAnyFadingIn", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":1268
 *         return result
 * 
 *     def isAnyFadingOut(self, bytes name):             # <<<<<<<<<<<<<<
 *         '''
 *         @param name: sting name of sound to check
 */

static PyObject *__pyx_pf_6_PyXAL_10XALManager_16isAnyFadingOut(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6_PyXAL_10XALManager_16isAnyFadingOut[] = "\n        @param name: sting name of sound to check\n        @return: bool True if there is a sound by this name fading out\n        ";
static PyMethodDef __pyx_mdef_6_PyXAL_10XALManager_16isAnyFadingOut = {__Pyx_NAMESTR("isAnyFadingOut"), (PyCFunction)__pyx_pf_6_PyXAL_10XALManager_16isAnyFadingOut, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_10XALManager_16isAnyFadingOut)};
static PyObject *__pyx_pf_6_PyXAL_10XALManager_16isAnyFadingOut(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_name = 0;
  char *__pyx_v_name_str;
  hltypes::String __pyx_v_hl_name;
  int __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  char *__pyx_t_5;
  bool __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__self,&__pyx_n_s__name,0};
  __Pyx_RefNannySetupContext("isAnyFadingOut");
  __pyx_self = __pyx_self;
  {
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__self);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__name);
        if (likely(values[1])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("isAnyFadingOut", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1268; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "isAnyFadingOut") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1268; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_self = values[0];
    __pyx_v_name = ((PyObject*)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("isAnyFadingOut", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1268; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("_PyXAL.XALManager.isAnyFadingOut", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_name), (&PyBytes_Type), 1, "name", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1268; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_PyXAL.pyx":1273
 *         @return: bool True if there is a sound by this name fading out
 *         '''
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         cdef char* name_str = name
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1273; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1273; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1273; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = (!__pyx_t_3);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":1274
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         cdef char* name_str = name
 *         cdef String hl_name = String(name_str)
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_158), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1274; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1274; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "_PyXAL.pyx":1275
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         cdef char* name_str = name             # <<<<<<<<<<<<<<
 *         cdef String hl_name = String(name_str)
 *         cdef bint result = XAL.mgr.isAnyFadingOut(hl_name)
 */
  __pyx_t_5 = PyBytes_AsString(((PyObject *)__pyx_v_name)); if (unlikely((!__pyx_t_5) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1275; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_name_str = __pyx_t_5;

  /* "_PyXAL.pyx":1276
 *             raise RuntimeError("XAL is not Initialized")
 *         cdef char* name_str = name
 *         cdef String hl_name = String(name_str)             # <<<<<<<<<<<<<<
 *         cdef bint result = XAL.mgr.isAnyFadingOut(hl_name)
 *         return result
 */
  __pyx_v_hl_name = hltypes::String(__pyx_v_name_str);

  /* "_PyXAL.pyx":1277
 *         cdef char* name_str = name
 *         cdef String hl_name = String(name_str)
 *         cdef bint result = XAL.mgr.isAnyFadingOut(hl_name)             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  try {__pyx_t_6 = xal::mgr->isAnyFadingOut(__pyx_v_hl_name);} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1277; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}
  __pyx_v_result = __pyx_t_6;

  /* "_PyXAL.pyx":1278
 *         cdef String hl_name = String(name_str)
 *         cdef bint result = XAL.mgr.isAnyFadingOut(hl_name)
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     def suspendAudio(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_result); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1278; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.XALManager.isAnyFadingOut", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":1280
 *         return result
 * 
 *     def suspendAudio(self):             # <<<<<<<<<<<<<<
 *         '''
 *         pause all sounds and players
 */

static PyObject *__pyx_pf_6_PyXAL_10XALManager_17suspendAudio(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_6_PyXAL_10XALManager_17suspendAudio[] = "\n        pause all sounds and players\n        \n        @param fadeTime: float the time is second for the sound to fade out (0.0 by default)\n        ";
static PyMethodDef __pyx_mdef_6_PyXAL_10XALManager_17suspendAudio = {__Pyx_NAMESTR("suspendAudio"), (PyCFunction)__pyx_pf_6_PyXAL_10XALManager_17suspendAudio, METH_O, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_10XALManager_17suspendAudio)};
static PyObject *__pyx_pf_6_PyXAL_10XALManager_17suspendAudio(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("suspendAudio");
  __pyx_self = __pyx_self;

  /* "_PyXAL.pyx":1286
 *         @param fadeTime: float the time is second for the sound to fade out (0.0 by default)
 *         '''
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         XAL.mgr.suspendAudio()
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1286; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1286; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1286; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = (!__pyx_t_3);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":1287
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         XAL.mgr.suspendAudio()
 * 
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_159), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1287; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1287; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "_PyXAL.pyx":1288
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         XAL.mgr.suspendAudio()             # <<<<<<<<<<<<<<
 * 
 *     def resumeAudio(self):
 */
  try {xal::mgr->suspendAudio();} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1288; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.XALManager.suspendAudio", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":1290
 *         XAL.mgr.suspendAudio()
 * 
 *     def resumeAudio(self):             # <<<<<<<<<<<<<<
 *         '''
 *         resume all sounds and players
 */

static PyObject *__pyx_pf_6_PyXAL_10XALManager_18resumeAudio(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_6_PyXAL_10XALManager_18resumeAudio[] = "\n        resume all sounds and players\n        \n        @param fadeTime: float the time is second for the sound to fade in (0.0 by default)\n        ";
static PyMethodDef __pyx_mdef_6_PyXAL_10XALManager_18resumeAudio = {__Pyx_NAMESTR("resumeAudio"), (PyCFunction)__pyx_pf_6_PyXAL_10XALManager_18resumeAudio, METH_O, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_10XALManager_18resumeAudio)};
static PyObject *__pyx_pf_6_PyXAL_10XALManager_18resumeAudio(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("resumeAudio");
  __pyx_self = __pyx_self;

  /* "_PyXAL.pyx":1296
 *         @param fadeTime: float the time is second for the sound to fade in (0.0 by default)
 *         '''
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         XAL.mgr.resumeAudio()
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1296; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1296; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1296; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = (!__pyx_t_3);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":1297
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         XAL.mgr.resumeAudio()
 * 
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_160), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1297; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1297; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "_PyXAL.pyx":1298
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         XAL.mgr.resumeAudio()             # <<<<<<<<<<<<<<
 * 
 * def Init(int backendId, bint threaded = True):
 */
  try {xal::mgr->resumeAudio();} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1298; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.XALManager.resumeAudio", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":1300
 *         XAL.mgr.resumeAudio()
 * 
 * def Init(int backendId, bint threaded = True):             # <<<<<<<<<<<<<<
 *     '''
 *     Setup XAL and create an XALManager interface at PyXAL.Mgr
 */

static PyObject *__pyx_pf_6_PyXAL_2Init(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6_PyXAL_2Init[] = "\n    Setup XAL and create an XALManager interface at PyXAL.Mgr\n    \n    @param backendId: int window handel in the calling aplication\n    @param threaded: bool should XAL use a threaded interface? (True by default)\n    ";
static PyMethodDef __pyx_mdef_6_PyXAL_2Init = {__Pyx_NAMESTR("Init"), (PyCFunction)__pyx_pf_6_PyXAL_2Init, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_2Init)};
static PyObject *__pyx_pf_6_PyXAL_2Init(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_backendId;
  int __pyx_v_threaded;
  double __pyx_v_fade;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__backendId,&__pyx_n_s__threaded,0};
  __Pyx_RefNannySetupContext("Init");
  __pyx_self = __pyx_self;
  {
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__backendId);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__threaded);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "Init") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1300; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_backendId = __Pyx_PyInt_AsInt(values[0]); if (unlikely((__pyx_v_backendId == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1300; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    if (values[1]) {
      __pyx_v_threaded = __Pyx_PyObject_IsTrue(values[1]); if (unlikely((__pyx_v_threaded == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1300; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_threaded = ((int)1);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("Init", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1300; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("_PyXAL.Init", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "_PyXAL.pyx":1308
 *     '''
 *     global Mgr
 *     if Mgr is None:             # <<<<<<<<<<<<<<
 *         if XAL.mgr != NULL:
 *             fade = 0.0
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__Mgr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1308; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__pyx_t_1 == Py_None);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "_PyXAL.pyx":1309
 *     global Mgr
 *     if Mgr is None:
 *         if XAL.mgr != NULL:             # <<<<<<<<<<<<<<
 *             fade = 0.0
 *             XAL.mgr.stopAll(fade)
 */
    __pyx_t_2 = (xal::mgr != NULL);
    if (__pyx_t_2) {

      /* "_PyXAL.pyx":1310
 *     if Mgr is None:
 *         if XAL.mgr != NULL:
 *             fade = 0.0             # <<<<<<<<<<<<<<
 *             XAL.mgr.stopAll(fade)
 *             XAL.destroy()
 */
      __pyx_v_fade = 0.0;

      /* "_PyXAL.pyx":1311
 *         if XAL.mgr != NULL:
 *             fade = 0.0
 *             XAL.mgr.stopAll(fade)             # <<<<<<<<<<<<<<
 *             XAL.destroy()
 *         Mgr = XALManager(backendId, threaded)
 */
      try {xal::mgr->stopAll(__pyx_v_fade);} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1311; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}

      /* "_PyXAL.pyx":1312
 *             fade = 0.0
 *             XAL.mgr.stopAll(fade)
 *             XAL.destroy()             # <<<<<<<<<<<<<<
 *         Mgr = XALManager(backendId, threaded)
 * 
 */
      try {xal::destroy();} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1312; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}
      goto __pyx_L7;
    }
    __pyx_L7:;

    /* "_PyXAL.pyx":1313
 *             XAL.mgr.stopAll(fade)
 *             XAL.destroy()
 *         Mgr = XALManager(backendId, threaded)             # <<<<<<<<<<<<<<
 * 
 * def Destroy():
 */
    __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__XALManager); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1313; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = PyInt_FromLong(__pyx_v_backendId); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1313; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_v_threaded); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1313; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1313; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_5));
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_3 = 0;
    __pyx_t_4 = 0;
    __pyx_t_4 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_5), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1313; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(((PyObject *)__pyx_t_5)); __pyx_t_5 = 0;
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s__Mgr, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1313; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    goto __pyx_L6;
  }
  __pyx_L6:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("_PyXAL.Init", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":1315
 *         Mgr = XALManager(backendId, threaded)
 * 
 * def Destroy():             # <<<<<<<<<<<<<<
 *     '''
 *     Destroy XAL and remove the interface at PyXAL setting it to None
 */

static PyObject *__pyx_pf_6_PyXAL_3Destroy(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6_PyXAL_3Destroy[] = "\n    Destroy XAL and remove the interface at PyXAL setting it to None\n    ";
static PyMethodDef __pyx_mdef_6_PyXAL_3Destroy = {__Pyx_NAMESTR("Destroy"), (PyCFunction)__pyx_pf_6_PyXAL_3Destroy, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_3Destroy)};
static PyObject *__pyx_pf_6_PyXAL_3Destroy(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  double __pyx_v_fade;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("Destroy");
  __pyx_self = __pyx_self;

  /* "_PyXAL.pyx":1320
 *     '''
 *     global Mgr
 *     if XAL.mgr != NULL:             # <<<<<<<<<<<<<<
 *         fade = 0.0
 *         XAL.mgr.stopAll(fade)
 */
  __pyx_t_1 = (xal::mgr != NULL);
  if (__pyx_t_1) {

    /* "_PyXAL.pyx":1321
 *     global Mgr
 *     if XAL.mgr != NULL:
 *         fade = 0.0             # <<<<<<<<<<<<<<
 *         XAL.mgr.stopAll(fade)
 *         XAL.destroy()
 */
    __pyx_v_fade = 0.0;

    /* "_PyXAL.pyx":1322
 *     if XAL.mgr != NULL:
 *         fade = 0.0
 *         XAL.mgr.stopAll(fade)             # <<<<<<<<<<<<<<
 *         XAL.destroy()
 *     Mgr = None
 */
    try {xal::mgr->stopAll(__pyx_v_fade);} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1322; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}

    /* "_PyXAL.pyx":1323
 *         fade = 0.0
 *         XAL.mgr.stopAll(fade)
 *         XAL.destroy()             # <<<<<<<<<<<<<<
 *     Mgr = None
 */
    try {xal::destroy();} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1323; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "_PyXAL.pyx":1324
 *         XAL.mgr.stopAll(fade)
 *         XAL.destroy()
 *     Mgr = None             # <<<<<<<<<<<<<<
 */
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__Mgr, Py_None) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1324; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_PyXAL.Destroy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_tp_new_6_PyXAL_PyAudioManager(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = (*t->tp_alloc)(t, 0);
  if (!o) return 0;
  return o;
}

static void __pyx_tp_dealloc_6_PyXAL_PyAudioManager(PyObject *o) {
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_6_PyXAL_PyAudioManager[] = {
  {0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_PyAudioManager = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_PyAudioManager = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_PyAudioManager = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_PyAudioManager = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

static PyTypeObject __pyx_type_6_PyXAL_PyAudioManager = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("_PyXAL.PyAudioManager"), /*tp_name*/
  sizeof(struct __pyx_obj_6_PyXAL_PyAudioManager), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6_PyXAL_PyAudioManager, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_PyAudioManager, /*tp_as_number*/
  &__pyx_tp_as_sequence_PyAudioManager, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_PyAudioManager, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_PyAudioManager, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  __Pyx_DOCSTR("\n    A wrapper for the C++ xal::AudioManager class. it is currently not used\n    "), /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6_PyXAL_PyAudioManager, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pf_6_PyXAL_14PyAudioManager___init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6_PyXAL_PyAudioManager, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};

static PyObject *__pyx_tp_new_6_PyXAL_SoundWrapper(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = (*t->tp_alloc)(t, 0);
  if (!o) return 0;
  return o;
}

static void __pyx_tp_dealloc_6_PyXAL_SoundWrapper(PyObject *o) {
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pf_6_PyXAL_12SoundWrapper_2__dealloc__(o);
    if (PyErr_Occurred()) PyErr_WriteUnraisable(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_6_PyXAL_SoundWrapper[] = {
  {__Pyx_NAMESTR("_destroy"), (PyCFunction)__pyx_pf_6_PyXAL_12SoundWrapper_1_destroy, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("isXALInitialized"), (PyCFunction)__pyx_pf_6_PyXAL_12SoundWrapper_3isXALInitialized, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_12SoundWrapper_3isXALInitialized)},
  {__Pyx_NAMESTR("getName"), (PyCFunction)__pyx_pf_6_PyXAL_12SoundWrapper_4getName, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_12SoundWrapper_4getName)},
  {__Pyx_NAMESTR("getFilename"), (PyCFunction)__pyx_pf_6_PyXAL_12SoundWrapper_5getFilename, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_12SoundWrapper_5getFilename)},
  {__Pyx_NAMESTR("getRealFilename"), (PyCFunction)__pyx_pf_6_PyXAL_12SoundWrapper_6getRealFilename, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_12SoundWrapper_6getRealFilename)},
  {__Pyx_NAMESTR("getSize"), (PyCFunction)__pyx_pf_6_PyXAL_12SoundWrapper_7getSize, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_12SoundWrapper_7getSize)},
  {__Pyx_NAMESTR("getChannels"), (PyCFunction)__pyx_pf_6_PyXAL_12SoundWrapper_8getChannels, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_12SoundWrapper_8getChannels)},
  {__Pyx_NAMESTR("getSamplingRate"), (PyCFunction)__pyx_pf_6_PyXAL_12SoundWrapper_9getSamplingRate, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_12SoundWrapper_9getSamplingRate)},
  {__Pyx_NAMESTR("getBitsPerSample"), (PyCFunction)__pyx_pf_6_PyXAL_12SoundWrapper_10getBitsPerSample, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_12SoundWrapper_10getBitsPerSample)},
  {__Pyx_NAMESTR("getDuration"), (PyCFunction)__pyx_pf_6_PyXAL_12SoundWrapper_11getDuration, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_12SoundWrapper_11getDuration)},
  {__Pyx_NAMESTR("getFormat"), (PyCFunction)__pyx_pf_6_PyXAL_12SoundWrapper_12getFormat, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_12SoundWrapper_12getFormat)},
  {__Pyx_NAMESTR("isStreamed"), (PyCFunction)__pyx_pf_6_PyXAL_12SoundWrapper_13isStreamed, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_12SoundWrapper_13isStreamed)},
  {__Pyx_NAMESTR("readPcmData"), (PyCFunction)__pyx_pf_6_PyXAL_12SoundWrapper_14readPcmData, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_12SoundWrapper_14readPcmData)},
  {0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_SoundWrapper = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_SoundWrapper = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_SoundWrapper = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_SoundWrapper = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

static PyTypeObject __pyx_type_6_PyXAL_SoundWrapper = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("_PyXAL.SoundWrapper"), /*tp_name*/
  sizeof(struct __pyx_obj_6_PyXAL_SoundWrapper), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6_PyXAL_SoundWrapper, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_SoundWrapper, /*tp_as_number*/
  &__pyx_tp_as_sequence_SoundWrapper, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_SoundWrapper, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_SoundWrapper, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  __Pyx_DOCSTR("\n    A wrapper class for the C++ xal::Sound class. it is returned by the XALManager.createSound and PyPlayer.getSound methods\n    "), /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6_PyXAL_SoundWrapper, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pf_6_PyXAL_12SoundWrapper___init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6_PyXAL_SoundWrapper, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};

static PyObject *__pyx_tp_new_6_PyXAL_PlayerWrapper(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = (*t->tp_alloc)(t, 0);
  if (!o) return 0;
  return o;
}

static void __pyx_tp_dealloc_6_PyXAL_PlayerWrapper(PyObject *o) {
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pf_6_PyXAL_13PlayerWrapper_2__dealloc__(o);
    if (PyErr_Occurred()) PyErr_WriteUnraisable(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_6_PyXAL_PlayerWrapper[] = {
  {__Pyx_NAMESTR("_destroy"), (PyCFunction)__pyx_pf_6_PyXAL_13PlayerWrapper_1_destroy, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("isXALInitialized"), (PyCFunction)__pyx_pf_6_PyXAL_13PlayerWrapper_3isXALInitialized, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_13PlayerWrapper_3isXALInitialized)},
  {__Pyx_NAMESTR("getGain"), (PyCFunction)__pyx_pf_6_PyXAL_13PlayerWrapper_4getGain, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_13PlayerWrapper_4getGain)},
  {__Pyx_NAMESTR("setGain"), (PyCFunction)__pyx_pf_6_PyXAL_13PlayerWrapper_5setGain, METH_O, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_13PlayerWrapper_5setGain)},
  {__Pyx_NAMESTR("getPitch"), (PyCFunction)__pyx_pf_6_PyXAL_13PlayerWrapper_6getPitch, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_13PlayerWrapper_6getPitch)},
  {__Pyx_NAMESTR("setPitch"), (PyCFunction)__pyx_pf_6_PyXAL_13PlayerWrapper_7setPitch, METH_O, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_13PlayerWrapper_7setPitch)},
  {__Pyx_NAMESTR("getName"), (PyCFunction)__pyx_pf_6_PyXAL_13PlayerWrapper_8getName, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_13PlayerWrapper_8getName)},
  {__Pyx_NAMESTR("getFilename"), (PyCFunction)__pyx_pf_6_PyXAL_13PlayerWrapper_9getFilename, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_13PlayerWrapper_9getFilename)},
  {__Pyx_NAMESTR("getRealFilename"), (PyCFunction)__pyx_pf_6_PyXAL_13PlayerWrapper_10getRealFilename, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_13PlayerWrapper_10getRealFilename)},
  {__Pyx_NAMESTR("getDuration"), (PyCFunction)__pyx_pf_6_PyXAL_13PlayerWrapper_11getDuration, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_13PlayerWrapper_11getDuration)},
  {__Pyx_NAMESTR("getSize"), (PyCFunction)__pyx_pf_6_PyXAL_13PlayerWrapper_12getSize, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_13PlayerWrapper_12getSize)},
  {__Pyx_NAMESTR("getTimePosition"), (PyCFunction)__pyx_pf_6_PyXAL_13PlayerWrapper_13getTimePosition, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_13PlayerWrapper_13getTimePosition)},
  {__Pyx_NAMESTR("getSamplePosition"), (PyCFunction)__pyx_pf_6_PyXAL_13PlayerWrapper_14getSamplePosition, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_13PlayerWrapper_14getSamplePosition)},
  {__Pyx_NAMESTR("isPlaying"), (PyCFunction)__pyx_pf_6_PyXAL_13PlayerWrapper_15isPlaying, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_13PlayerWrapper_15isPlaying)},
  {__Pyx_NAMESTR("isPaused"), (PyCFunction)__pyx_pf_6_PyXAL_13PlayerWrapper_16isPaused, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_13PlayerWrapper_16isPaused)},
  {__Pyx_NAMESTR("isFading"), (PyCFunction)__pyx_pf_6_PyXAL_13PlayerWrapper_17isFading, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_13PlayerWrapper_17isFading)},
  {__Pyx_NAMESTR("isFadingIn"), (PyCFunction)__pyx_pf_6_PyXAL_13PlayerWrapper_18isFadingIn, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_13PlayerWrapper_18isFadingIn)},
  {__Pyx_NAMESTR("isFadingOut"), (PyCFunction)__pyx_pf_6_PyXAL_13PlayerWrapper_19isFadingOut, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_13PlayerWrapper_19isFadingOut)},
  {__Pyx_NAMESTR("isLooping"), (PyCFunction)__pyx_pf_6_PyXAL_13PlayerWrapper_20isLooping, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_13PlayerWrapper_20isLooping)},
  {__Pyx_NAMESTR("play"), (PyCFunction)__pyx_pf_6_PyXAL_13PlayerWrapper_21play, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_13PlayerWrapper_21play)},
  {__Pyx_NAMESTR("stop"), (PyCFunction)__pyx_pf_6_PyXAL_13PlayerWrapper_22stop, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_13PlayerWrapper_22stop)},
  {__Pyx_NAMESTR("pause"), (PyCFunction)__pyx_pf_6_PyXAL_13PlayerWrapper_23pause, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_13PlayerWrapper_23pause)},
  {0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_PlayerWrapper = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_PlayerWrapper = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_PlayerWrapper = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_PlayerWrapper = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

static PyTypeObject __pyx_type_6_PyXAL_PlayerWrapper = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("_PyXAL.PlayerWrapper"), /*tp_name*/
  sizeof(struct __pyx_obj_6_PyXAL_PlayerWrapper), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6_PyXAL_PlayerWrapper, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_PlayerWrapper, /*tp_as_number*/
  &__pyx_tp_as_sequence_PlayerWrapper, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_PlayerWrapper, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_PlayerWrapper, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  __Pyx_DOCSTR("\n    a wraper for the C++ class xal::Player. it is retuned by the XALManager.createPlayer method\n    "), /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6_PyXAL_PlayerWrapper, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pf_6_PyXAL_13PlayerWrapper___init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6_PyXAL_PlayerWrapper, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};

static PyObject *__pyx_tp_new_6_PyXAL_XALManagerWrapper(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = (*t->tp_alloc)(t, 0);
  if (!o) return 0;
  return o;
}

static void __pyx_tp_dealloc_6_PyXAL_XALManagerWrapper(PyObject *o) {
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pf_6_PyXAL_17XALManagerWrapper_1__dealloc__(o);
    if (PyErr_Occurred()) PyErr_WriteUnraisable(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_6_PyXAL_XALManagerWrapper[] = {
  {__Pyx_NAMESTR("isXALInitialized"), (PyCFunction)__pyx_pf_6_PyXAL_17XALManagerWrapper_2isXALInitialized, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_17XALManagerWrapper_2isXALInitialized)},
  {__Pyx_NAMESTR("SetupXAL"), (PyCFunction)__pyx_pf_6_PyXAL_17XALManagerWrapper_3SetupXAL, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_17XALManagerWrapper_3SetupXAL)},
  {__Pyx_NAMESTR("_destroyXAL"), (PyCFunction)__pyx_pf_6_PyXAL_17XALManagerWrapper_4_destroyXAL, METH_NOARGS, __Pyx_DOCSTR(0)},
  {0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_XALManagerWrapper = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_XALManagerWrapper = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_XALManagerWrapper = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_XALManagerWrapper = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

static PyTypeObject __pyx_type_6_PyXAL_XALManagerWrapper = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("_PyXAL.XALManagerWrapper"), /*tp_name*/
  sizeof(struct __pyx_obj_6_PyXAL_XALManagerWrapper), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6_PyXAL_XALManagerWrapper, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_XALManagerWrapper, /*tp_as_number*/
  &__pyx_tp_as_sequence_XALManagerWrapper, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_XALManagerWrapper, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_XALManagerWrapper, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  __Pyx_DOCSTR("\n    a wrapper for the xal::mgr object which is a xal::AudioManager. in other words this is the main interface to XAL you SHOLD NOT create an instance of the class yourself.\n    call PyXAL.Init to set up XAL. an instance of this class will be made avalable at PyXAL.Mgr\n    "), /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6_PyXAL_XALManagerWrapper, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pf_6_PyXAL_17XALManagerWrapper___init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6_PyXAL_XALManagerWrapper, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {__Pyx_NAMESTR("SetLogPath"), (PyCFunction)__pyx_pf_6_PyXAL_SetLogPath, METH_O, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_SetLogPath)},
  {__Pyx_NAMESTR("EnableLogging"), (PyCFunction)__pyx_pf_6_PyXAL_1EnableLogging, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_1EnableLogging)},
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    __Pyx_NAMESTR("_PyXAL"),
    0, /* m_doc */
    -1, /* m_size */
    __pyx_methods /* m_methods */,
    NULL, /* m_reload */
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_kp_s_1, __pyx_k_1, sizeof(__pyx_k_1), 0, 0, 1, 0},
  {&__pyx_kp_s_10, __pyx_k_10, sizeof(__pyx_k_10), 0, 0, 1, 0},
  {&__pyx_kp_s_100, __pyx_k_100, sizeof(__pyx_k_100), 0, 0, 1, 0},
  {&__pyx_kp_s_141, __pyx_k_141, sizeof(__pyx_k_141), 0, 0, 1, 0},
  {&__pyx_kp_s_148, __pyx_k_148, sizeof(__pyx_k_148), 0, 0, 1, 0},
  {&__pyx_kp_s_161, __pyx_k_161, sizeof(__pyx_k_161), 0, 0, 1, 0},
  {&__pyx_kp_s_162, __pyx_k_162, sizeof(__pyx_k_162), 0, 0, 1, 0},
  {&__pyx_kp_s_163, __pyx_k_163, sizeof(__pyx_k_163), 0, 0, 1, 0},
  {&__pyx_kp_s_3, __pyx_k_3, sizeof(__pyx_k_3), 0, 0, 1, 0},
  {&__pyx_kp_s_32, __pyx_k_32, sizeof(__pyx_k_32), 0, 0, 1, 0},
  {&__pyx_kp_s_4, __pyx_k_4, sizeof(__pyx_k_4), 0, 0, 1, 0},
  {&__pyx_kp_s_6, __pyx_k_6, sizeof(__pyx_k_6), 0, 0, 1, 0},
  {&__pyx_kp_s_75, __pyx_k_75, sizeof(__pyx_k_75), 0, 0, 1, 0},
  {&__pyx_kp_s_8, __pyx_k_8, sizeof(__pyx_k_8), 0, 0, 1, 0},
  {&__pyx_kp_s_99, __pyx_k_99, sizeof(__pyx_k_99), 0, 0, 1, 0},
  {&__pyx_n_s__CATEGORY_STR, __pyx_k__CATEGORY_STR, sizeof(__pyx_k__CATEGORY_STR), 0, 0, 1, 1},
  {&__pyx_n_s__Destroy, __pyx_k__Destroy, sizeof(__pyx_k__Destroy), 0, 0, 1, 1},
  {&__pyx_n_s__Exception, __pyx_k__Exception, sizeof(__pyx_k__Exception), 0, 0, 1, 1},
  {&__pyx_n_s__Init, __pyx_k__Init, sizeof(__pyx_k__Init), 0, 0, 1, 1},
  {&__pyx_n_s__Mgr, __pyx_k__Mgr, sizeof(__pyx_k__Mgr), 0, 0, 1, 1},
  {&__pyx_n_s__PyPlayer, __pyx_k__PyPlayer, sizeof(__pyx_k__PyPlayer), 0, 0, 1, 1},
  {&__pyx_n_s__PySound, __pyx_k__PySound, sizeof(__pyx_k__PySound), 0, 0, 1, 1},
  {&__pyx_n_s__RuntimeError, __pyx_k__RuntimeError, sizeof(__pyx_k__RuntimeError), 0, 0, 1, 1},
  {&__pyx_n_s__SetupXAL, __pyx_k__SetupXAL, sizeof(__pyx_k__SetupXAL), 0, 0, 1, 1},
  {&__pyx_n_s__TypeError, __pyx_k__TypeError, sizeof(__pyx_k__TypeError), 0, 0, 1, 1},
  {&__pyx_n_s__XALManager, __pyx_k__XALManager, sizeof(__pyx_k__XALManager), 0, 0, 1, 1},
  {&__pyx_n_s___PyXAL, __pyx_k___PyXAL, sizeof(__pyx_k___PyXAL), 0, 0, 1, 1},
  {&__pyx_n_s____del__, __pyx_k____del__, sizeof(__pyx_k____del__), 0, 0, 1, 1},
  {&__pyx_n_s____init__, __pyx_k____init__, sizeof(__pyx_k____init__), 0, 0, 1, 1},
  {&__pyx_n_s____main__, __pyx_k____main__, sizeof(__pyx_k____main__), 0, 0, 1, 1},
  {&__pyx_n_s____test__, __pyx_k____test__, sizeof(__pyx_k____test__), 0, 0, 1, 1},
  {&__pyx_n_s___destroy, __pyx_k___destroy, sizeof(__pyx_k___destroy), 0, 0, 1, 1},
  {&__pyx_n_s___destroyXAL, __pyx_k___destroyXAL, sizeof(__pyx_k___destroyXAL), 0, 0, 1, 1},
  {&__pyx_n_s___player, __pyx_k___player, sizeof(__pyx_k___player), 0, 0, 1, 1},
  {&__pyx_n_s___players, __pyx_k___players, sizeof(__pyx_k___players), 0, 0, 1, 1},
  {&__pyx_n_s___sound, __pyx_k___sound, sizeof(__pyx_k___sound), 0, 0, 1, 1},
  {&__pyx_n_s___wrapper, __pyx_k___wrapper, sizeof(__pyx_k___wrapper), 0, 0, 1, 1},
  {&__pyx_n_s__ab, __pyx_k__ab, sizeof(__pyx_k__ab), 0, 0, 1, 1},
  {&__pyx_n_s__backendId, __pyx_k__backendId, sizeof(__pyx_k__backendId), 0, 0, 1, 1},
  {&__pyx_n_s__clear, __pyx_k__clear, sizeof(__pyx_k__clear), 0, 0, 1, 1},
  {&__pyx_n_s__close, __pyx_k__close, sizeof(__pyx_k__close), 0, 0, 1, 1},
  {&__pyx_n_s__createPlayer, __pyx_k__createPlayer, sizeof(__pyx_k__createPlayer), 0, 0, 1, 1},
  {&__pyx_n_s__createSound, __pyx_k__createSound, sizeof(__pyx_k__createSound), 0, 0, 1, 1},
  {&__pyx_n_s__default, __pyx_k__default, sizeof(__pyx_k__default), 0, 0, 1, 1},
  {&__pyx_n_s__destroyPlayer, __pyx_k__destroyPlayer, sizeof(__pyx_k__destroyPlayer), 0, 0, 1, 1},
  {&__pyx_n_s__destroySound, __pyx_k__destroySound, sizeof(__pyx_k__destroySound), 0, 0, 1, 1},
  {&__pyx_n_s__destroyed, __pyx_k__destroyed, sizeof(__pyx_k__destroyed), 0, 0, 1, 1},
  {&__pyx_n_s__deviceName, __pyx_k__deviceName, sizeof(__pyx_k__deviceName), 0, 0, 1, 1},
  {&__pyx_n_s__exists, __pyx_k__exists, sizeof(__pyx_k__exists), 0, 0, 1, 1},
  {&__pyx_n_s__fadeTime, __pyx_k__fadeTime, sizeof(__pyx_k__fadeTime), 0, 0, 1, 1},
  {&__pyx_n_s__filename, __pyx_k__filename, sizeof(__pyx_k__filename), 0, 0, 1, 1},
  {&__pyx_n_s__findPlayer, __pyx_k__findPlayer, sizeof(__pyx_k__findPlayer), 0, 0, 1, 1},
  {&__pyx_n_s__gain, __pyx_k__gain, sizeof(__pyx_k__gain), 0, 0, 1, 1},
  {&__pyx_n_s__getBitsPerSample, __pyx_k__getBitsPerSample, sizeof(__pyx_k__getBitsPerSample), 0, 0, 1, 1},
  {&__pyx_n_s__getChannels, __pyx_k__getChannels, sizeof(__pyx_k__getChannels), 0, 0, 1, 1},
  {&__pyx_n_s__getDuration, __pyx_k__getDuration, sizeof(__pyx_k__getDuration), 0, 0, 1, 1},
  {&__pyx_n_s__getFilename, __pyx_k__getFilename, sizeof(__pyx_k__getFilename), 0, 0, 1, 1},
  {&__pyx_n_s__getFormat, __pyx_k__getFormat, sizeof(__pyx_k__getFormat), 0, 0, 1, 1},
  {&__pyx_n_s__getGain, __pyx_k__getGain, sizeof(__pyx_k__getGain), 0, 0, 1, 1},
  {&__pyx_n_s__getName, __pyx_k__getName, sizeof(__pyx_k__getName), 0, 0, 1, 1},
  {&__pyx_n_s__getPitch, __pyx_k__getPitch, sizeof(__pyx_k__getPitch), 0, 0, 1, 1},
  {&__pyx_n_s__getRealFilename, __pyx_k__getRealFilename, sizeof(__pyx_k__getRealFilename), 0, 0, 1, 1},
  {&__pyx_n_s__getSamplePosition, __pyx_k__getSamplePosition, sizeof(__pyx_k__getSamplePosition), 0, 0, 1, 1},
  {&__pyx_n_s__getSamplingRate, __pyx_k__getSamplingRate, sizeof(__pyx_k__getSamplingRate), 0, 0, 1, 1},
  {&__pyx_n_s__getSize, __pyx_k__getSize, sizeof(__pyx_k__getSize), 0, 0, 1, 1},
  {&__pyx_n_s__getSound, __pyx_k__getSound, sizeof(__pyx_k__getSound), 0, 0, 1, 1},
  {&__pyx_n_s__getTimePosition, __pyx_k__getTimePosition, sizeof(__pyx_k__getTimePosition), 0, 0, 1, 1},
  {&__pyx_n_s__has_key, __pyx_k__has_key, sizeof(__pyx_k__has_key), 0, 0, 1, 1},
  {&__pyx_n_s__inited, __pyx_k__inited, sizeof(__pyx_k__inited), 0, 0, 1, 1},
  {&__pyx_n_s__isAnyFading, __pyx_k__isAnyFading, sizeof(__pyx_k__isAnyFading), 0, 0, 1, 1},
  {&__pyx_n_s__isAnyFadingIn, __pyx_k__isAnyFadingIn, sizeof(__pyx_k__isAnyFadingIn), 0, 0, 1, 1},
  {&__pyx_n_s__isAnyFadingOut, __pyx_k__isAnyFadingOut, sizeof(__pyx_k__isAnyFadingOut), 0, 0, 1, 1},
  {&__pyx_n_s__isAnyPlaying, __pyx_k__isAnyPlaying, sizeof(__pyx_k__isAnyPlaying), 0, 0, 1, 1},
  {&__pyx_n_s__isFading, __pyx_k__isFading, sizeof(__pyx_k__isFading), 0, 0, 1, 1},
  {&__pyx_n_s__isFadingIn, __pyx_k__isFadingIn, sizeof(__pyx_k__isFadingIn), 0, 0, 1, 1},
  {&__pyx_n_s__isFadingOut, __pyx_k__isFadingOut, sizeof(__pyx_k__isFadingOut), 0, 0, 1, 1},
  {&__pyx_n_s__isLooping, __pyx_k__isLooping, sizeof(__pyx_k__isLooping), 0, 0, 1, 1},
  {&__pyx_n_s__isPaused, __pyx_k__isPaused, sizeof(__pyx_k__isPaused), 0, 0, 1, 1},
  {&__pyx_n_s__isPlaying, __pyx_k__isPlaying, sizeof(__pyx_k__isPlaying), 0, 0, 1, 1},
  {&__pyx_n_s__isStreamed, __pyx_k__isStreamed, sizeof(__pyx_k__isStreamed), 0, 0, 1, 1},
  {&__pyx_n_s__isXALInitialized, __pyx_k__isXALInitialized, sizeof(__pyx_k__isXALInitialized), 0, 0, 1, 1},
  {&__pyx_n_s__isdir, __pyx_k__isdir, sizeof(__pyx_k__isdir), 0, 0, 1, 1},
  {&__pyx_n_s__join, __pyx_k__join, sizeof(__pyx_k__join), 0, 0, 1, 1},
  {&__pyx_n_s__looping, __pyx_k__looping, sizeof(__pyx_k__looping), 0, 0, 1, 1},
  {&__pyx_n_s__makedirs, __pyx_k__makedirs, sizeof(__pyx_k__makedirs), 0, 0, 1, 1},
  {&__pyx_n_s__name, __pyx_k__name, sizeof(__pyx_k__name), 0, 0, 1, 1},
  {&__pyx_n_s__object, __pyx_k__object, sizeof(__pyx_k__object), 0, 0, 1, 1},
  {&__pyx_n_s__open, __pyx_k__open, sizeof(__pyx_k__open), 0, 0, 1, 1},
  {&__pyx_n_s__os, __pyx_k__os, sizeof(__pyx_k__os), 0, 0, 1, 1},
  {&__pyx_n_s__path, __pyx_k__path, sizeof(__pyx_k__path), 0, 0, 1, 1},
  {&__pyx_n_s__pause, __pyx_k__pause, sizeof(__pyx_k__pause), 0, 0, 1, 1},
  {&__pyx_n_s__play, __pyx_k__play, sizeof(__pyx_k__play), 0, 0, 1, 1},
  {&__pyx_n_s__player, __pyx_k__player, sizeof(__pyx_k__player), 0, 0, 1, 1},
  {&__pyx_n_s__players, __pyx_k__players, sizeof(__pyx_k__players), 0, 0, 1, 1},
  {&__pyx_n_s__readPcmData, __pyx_k__readPcmData, sizeof(__pyx_k__readPcmData), 0, 0, 1, 1},
  {&__pyx_n_s__remove, __pyx_k__remove, sizeof(__pyx_k__remove), 0, 0, 1, 1},
  {&__pyx_n_s__resumeAudio, __pyx_k__resumeAudio, sizeof(__pyx_k__resumeAudio), 0, 0, 1, 1},
  {&__pyx_n_s__self, __pyx_k__self, sizeof(__pyx_k__self), 0, 0, 1, 1},
  {&__pyx_n_s__setGain, __pyx_k__setGain, sizeof(__pyx_k__setGain), 0, 0, 1, 1},
  {&__pyx_n_s__setPitch, __pyx_k__setPitch, sizeof(__pyx_k__setPitch), 0, 0, 1, 1},
  {&__pyx_n_s__sound, __pyx_k__sound, sizeof(__pyx_k__sound), 0, 0, 1, 1},
  {&__pyx_n_s__split, __pyx_k__split, sizeof(__pyx_k__split), 0, 0, 1, 1},
  {&__pyx_n_s__state, __pyx_k__state, sizeof(__pyx_k__state), 0, 0, 1, 1},
  {&__pyx_n_s__stop, __pyx_k__stop, sizeof(__pyx_k__stop), 0, 0, 1, 1},
  {&__pyx_n_s__stopAll, __pyx_k__stopAll, sizeof(__pyx_k__stopAll), 0, 0, 1, 1},
  {&__pyx_n_s__stopFirst, __pyx_k__stopFirst, sizeof(__pyx_k__stopFirst), 0, 0, 1, 1},
  {&__pyx_n_s__suspendAudio, __pyx_k__suspendAudio, sizeof(__pyx_k__suspendAudio), 0, 0, 1, 1},
  {&__pyx_n_s__systemname, __pyx_k__systemname, sizeof(__pyx_k__systemname), 0, 0, 1, 1},
  {&__pyx_n_s__threaded, __pyx_k__threaded, sizeof(__pyx_k__threaded), 0, 0, 1, 1},
  {&__pyx_n_s__updateTime, __pyx_k__updateTime, sizeof(__pyx_k__updateTime), 0, 0, 1, 1},
  {&__pyx_n_s__value, __pyx_k__value, sizeof(__pyx_k__value), 0, 0, 1, 1},
  {&__pyx_n_s__write, __pyx_k__write, sizeof(__pyx_k__write), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_object = __Pyx_GetName(__pyx_b, __pyx_n_s__object); if (!__pyx_builtin_object) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 549; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_Exception = __Pyx_GetName(__pyx_b, __pyx_n_s__Exception); if (!__pyx_builtin_Exception) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 58; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_open = __Pyx_GetName(__pyx_b, __pyx_n_s__open); if (!__pyx_builtin_open) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 93; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_RuntimeError = __Pyx_GetName(__pyx_b, __pyx_n_s__RuntimeError); if (!__pyx_builtin_RuntimeError) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 117; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_TypeError = __Pyx_GetName(__pyx_b, __pyx_n_s__TypeError); if (!__pyx_builtin_TypeError) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 728; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants");

  /* "_PyXAL.pyx":117
 *         as such calling the __init__ method will raise a Runtime Error
 *         '''
 *         raise RuntimeError("PyAudioManager Can not be initialized from python")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_k_tuple_5 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 117; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_5));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_4));
  PyTuple_SET_ITEM(__pyx_k_tuple_5, 0, ((PyObject *)__pyx_kp_s_4));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_4));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_5));

  /* "_PyXAL.pyx":133
 *         as such calling the __init__ method will raise a Runtime Error
 *         '''
 *         raise RuntimeError("PySound Can not be initialized from python")             # <<<<<<<<<<<<<<
 * 
 *     def _destroy(self):
 */
  __pyx_k_tuple_7 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 133; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_7));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_6));
  PyTuple_SET_ITEM(__pyx_k_tuple_7, 0, ((PyObject *)__pyx_kp_s_6));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_6));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_7));

  /* "_PyXAL.pyx":159
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
  __pyx_k_tuple_9 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 159; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_9));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_8));
  PyTuple_SET_ITEM(__pyx_k_tuple_9, 0, ((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_9));

  /* "_PyXAL.pyx":161
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         cdef String hl_name = self._pointer.getName()
 *         cdef const_char_ptr name = hl_name.c_str()
 */
  __pyx_k_tuple_11 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 161; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_11));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_10));
  PyTuple_SET_ITEM(__pyx_k_tuple_11, 0, ((PyObject *)__pyx_kp_s_10));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_10));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_11));

  /* "_PyXAL.pyx":171
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
  __pyx_k_tuple_12 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 171; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_12));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_8));
  PyTuple_SET_ITEM(__pyx_k_tuple_12, 0, ((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_12));

  /* "_PyXAL.pyx":173
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         cdef String hl_name = self._pointer.getFilename()
 *         cdef const_char_ptr name = hl_name.c_str()
 */
  __pyx_k_tuple_13 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_13)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 173; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_13));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_10));
  PyTuple_SET_ITEM(__pyx_k_tuple_13, 0, ((PyObject *)__pyx_kp_s_10));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_10));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_13));

  /* "_PyXAL.pyx":183
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
  __pyx_k_tuple_14 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_14)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 183; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_14));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_8));
  PyTuple_SET_ITEM(__pyx_k_tuple_14, 0, ((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_14));

  /* "_PyXAL.pyx":185
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         cdef String hl_name = self._pointer.getRealFilename()
 *         cdef const_char_ptr name = hl_name.c_str()
 */
  __pyx_k_tuple_15 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_15)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 185; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_15));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_10));
  PyTuple_SET_ITEM(__pyx_k_tuple_15, 0, ((PyObject *)__pyx_kp_s_10));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_10));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_15));

  /* "_PyXAL.pyx":195
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
  __pyx_k_tuple_16 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_16)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 195; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_16));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_8));
  PyTuple_SET_ITEM(__pyx_k_tuple_16, 0, ((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_16));

  /* "_PyXAL.pyx":197
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         cdef int size = self._pointer.getSize()
 *         return size
 */
  __pyx_k_tuple_17 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_17)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 197; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_17));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_10));
  PyTuple_SET_ITEM(__pyx_k_tuple_17, 0, ((PyObject *)__pyx_kp_s_10));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_10));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_17));

  /* "_PyXAL.pyx":206
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
  __pyx_k_tuple_18 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_18)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 206; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_18));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_8));
  PyTuple_SET_ITEM(__pyx_k_tuple_18, 0, ((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_18));

  /* "_PyXAL.pyx":208
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         cdef int channels = self._pointer.getChannels()
 *         return channels
 */
  __pyx_k_tuple_19 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_19)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 208; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_19));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_10));
  PyTuple_SET_ITEM(__pyx_k_tuple_19, 0, ((PyObject *)__pyx_kp_s_10));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_10));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_19));

  /* "_PyXAL.pyx":217
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
  __pyx_k_tuple_20 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_20)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 217; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_20));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_8));
  PyTuple_SET_ITEM(__pyx_k_tuple_20, 0, ((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_20));

  /* "_PyXAL.pyx":219
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         cdef int rate = self._pointer.getSamplingRate()
 *         return rate
 */
  __pyx_k_tuple_21 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_21)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 219; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_21));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_10));
  PyTuple_SET_ITEM(__pyx_k_tuple_21, 0, ((PyObject *)__pyx_kp_s_10));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_10));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_21));

  /* "_PyXAL.pyx":228
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
  __pyx_k_tuple_22 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_22)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 228; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_22));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_8));
  PyTuple_SET_ITEM(__pyx_k_tuple_22, 0, ((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_22));

  /* "_PyXAL.pyx":230
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         cdef int rate = self._pointer.getBitsPerSample()
 *         return rate
 */
  __pyx_k_tuple_23 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_23)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 230; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_23));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_10));
  PyTuple_SET_ITEM(__pyx_k_tuple_23, 0, ((PyObject *)__pyx_kp_s_10));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_10));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_23));

  /* "_PyXAL.pyx":239
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
  __pyx_k_tuple_24 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_24)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 239; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_24));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_8));
  PyTuple_SET_ITEM(__pyx_k_tuple_24, 0, ((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_24));

  /* "_PyXAL.pyx":241
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         cdef float duration = self._pointer.getDuration()
 *         return duration
 */
  __pyx_k_tuple_25 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_25)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 241; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_25));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_10));
  PyTuple_SET_ITEM(__pyx_k_tuple_25, 0, ((PyObject *)__pyx_kp_s_10));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_10));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_25));

  /* "_PyXAL.pyx":251
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
  __pyx_k_tuple_26 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_26)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 251; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_26));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_8));
  PyTuple_SET_ITEM(__pyx_k_tuple_26, 0, ((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_26));

  /* "_PyXAL.pyx":253
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         cdef int format = <int>self._pointer.getFormat()
 *         return format
 */
  __pyx_k_tuple_27 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_27)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 253; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_27));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_10));
  PyTuple_SET_ITEM(__pyx_k_tuple_27, 0, ((PyObject *)__pyx_kp_s_10));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_10));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_27));

  /* "_PyXAL.pyx":263
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
  __pyx_k_tuple_28 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_28)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 263; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_28));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_8));
  PyTuple_SET_ITEM(__pyx_k_tuple_28, 0, ((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_28));

  /* "_PyXAL.pyx":265
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         cdef bint streamed = self._pointer.isStreamed()
 *         return streamed
 */
  __pyx_k_tuple_29 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_29)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 265; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_29));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_10));
  PyTuple_SET_ITEM(__pyx_k_tuple_29, 0, ((PyObject *)__pyx_kp_s_10));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_10));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_29));

  /* "_PyXAL.pyx":275
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
  __pyx_k_tuple_30 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_30)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 275; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_30));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_8));
  PyTuple_SET_ITEM(__pyx_k_tuple_30, 0, ((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_30));

  /* "_PyXAL.pyx":277
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         cdef unsigned char* pcm_data
 *         cdef int pcm_size
 */
  __pyx_k_tuple_31 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_31)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 277; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_31));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_10));
  PyTuple_SET_ITEM(__pyx_k_tuple_31, 0, ((PyObject *)__pyx_kp_s_10));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_10));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_31));

  /* "_PyXAL.pyx":306
 *         as such calling the __init__ method will raise a Runtime Error
 *         '''
 *         raise RuntimeError("PyPlayer Can not be initialized from python")             # <<<<<<<<<<<<<<
 * 
 *     def _destroy(self):
 */
  __pyx_k_tuple_33 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_33)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 306; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_33));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_32));
  PyTuple_SET_ITEM(__pyx_k_tuple_33, 0, ((PyObject *)__pyx_kp_s_32));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_32));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_33));

  /* "_PyXAL.pyx":332
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
  __pyx_k_tuple_34 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_34)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 332; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_34));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_8));
  PyTuple_SET_ITEM(__pyx_k_tuple_34, 0, ((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_34));

  /* "_PyXAL.pyx":334
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         cdef float gain = self._pointer.getGain()
 *         return gain
 */
  __pyx_k_tuple_35 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_35)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 334; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_35));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_10));
  PyTuple_SET_ITEM(__pyx_k_tuple_35, 0, ((PyObject *)__pyx_kp_s_10));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_10));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_35));

  /* "_PyXAL.pyx":344
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
  __pyx_k_tuple_36 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_36)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 344; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_36));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_8));
  PyTuple_SET_ITEM(__pyx_k_tuple_36, 0, ((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_36));

  /* "_PyXAL.pyx":346
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         self._pointer.setGain(value)
 * 
 */
  __pyx_k_tuple_37 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_37)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 346; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_37));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_10));
  PyTuple_SET_ITEM(__pyx_k_tuple_37, 0, ((PyObject *)__pyx_kp_s_10));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_10));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_37));

  /* "_PyXAL.pyx":354
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
  __pyx_k_tuple_38 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_38)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 354; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_38));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_8));
  PyTuple_SET_ITEM(__pyx_k_tuple_38, 0, ((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_38));

  /* "_PyXAL.pyx":356
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         cdef float offset = self._pointer.getPitch()
 *         return offset
 */
  __pyx_k_tuple_39 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_39)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 356; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_39));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_10));
  PyTuple_SET_ITEM(__pyx_k_tuple_39, 0, ((PyObject *)__pyx_kp_s_10));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_10));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_39));

  /* "_PyXAL.pyx":366
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
  __pyx_k_tuple_40 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_40)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 366; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_40));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_8));
  PyTuple_SET_ITEM(__pyx_k_tuple_40, 0, ((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_40));

  /* "_PyXAL.pyx":368
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         self._pointer.setPitch(value)
 * 
 */
  __pyx_k_tuple_41 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_41)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 368; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_41));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_10));
  PyTuple_SET_ITEM(__pyx_k_tuple_41, 0, ((PyObject *)__pyx_kp_s_10));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_10));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_41));

  /* "_PyXAL.pyx":376
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
  __pyx_k_tuple_42 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_42)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 376; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_42));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_8));
  PyTuple_SET_ITEM(__pyx_k_tuple_42, 0, ((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_42));

  /* "_PyXAL.pyx":378
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         cdef String hl_name = self._pointer.getName()
 *         cdef const_char_ptr name = hl_name.c_str()
 */
  __pyx_k_tuple_43 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_43)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 378; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_43));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_10));
  PyTuple_SET_ITEM(__pyx_k_tuple_43, 0, ((PyObject *)__pyx_kp_s_10));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_10));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_43));

  /* "_PyXAL.pyx":388
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
  __pyx_k_tuple_44 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_44)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 388; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_44));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_8));
  PyTuple_SET_ITEM(__pyx_k_tuple_44, 0, ((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_44));

  /* "_PyXAL.pyx":390
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         cdef String hl_name = self._pointer.getFilename()
 *         cdef const_char_ptr name = hl_name.c_str()
 */
  __pyx_k_tuple_45 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_45)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 390; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_45));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_10));
  PyTuple_SET_ITEM(__pyx_k_tuple_45, 0, ((PyObject *)__pyx_kp_s_10));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_10));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_45));

  /* "_PyXAL.pyx":400
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
  __pyx_k_tuple_46 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_46)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 400; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_46));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_8));
  PyTuple_SET_ITEM(__pyx_k_tuple_46, 0, ((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_46));

  /* "_PyXAL.pyx":402
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         cdef String hl_name = self._pointer.getRealFilename()
 *         cdef const_char_ptr name = hl_name.c_str()
 */
  __pyx_k_tuple_47 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_47)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 402; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_47));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_10));
  PyTuple_SET_ITEM(__pyx_k_tuple_47, 0, ((PyObject *)__pyx_kp_s_10));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_10));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_47));

  /* "_PyXAL.pyx":412
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
  __pyx_k_tuple_48 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_48)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 412; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_48));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_8));
  PyTuple_SET_ITEM(__pyx_k_tuple_48, 0, ((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_48));

  /* "_PyXAL.pyx":414
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         cdef float duration = self._pointer.getDuration()
 *         return duration
 */
  __pyx_k_tuple_49 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_49)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 414; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_49));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_10));
  PyTuple_SET_ITEM(__pyx_k_tuple_49, 0, ((PyObject *)__pyx_kp_s_10));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_10));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_49));

  /* "_PyXAL.pyx":423
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
  __pyx_k_tuple_50 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_50)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 423; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_50));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_8));
  PyTuple_SET_ITEM(__pyx_k_tuple_50, 0, ((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_50));

  /* "_PyXAL.pyx":425
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         cdef int size = self._pointer.getSize()
 *         return size
 */
  __pyx_k_tuple_51 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_51)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 425; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_51));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_10));
  PyTuple_SET_ITEM(__pyx_k_tuple_51, 0, ((PyObject *)__pyx_kp_s_10));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_10));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_51));

  /* "_PyXAL.pyx":434
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
  __pyx_k_tuple_52 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_52)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 434; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_52));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_8));
  PyTuple_SET_ITEM(__pyx_k_tuple_52, 0, ((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_52));

  /* "_PyXAL.pyx":436
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         cdef float size = self._pointer.getTimePosition()
 *         return size
 */
  __pyx_k_tuple_53 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_53)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 436; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_53));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_10));
  PyTuple_SET_ITEM(__pyx_k_tuple_53, 0, ((PyObject *)__pyx_kp_s_10));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_10));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_53));

  /* "_PyXAL.pyx":445
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
  __pyx_k_tuple_54 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_54)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 445; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_54));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_8));
  PyTuple_SET_ITEM(__pyx_k_tuple_54, 0, ((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_54));

  /* "_PyXAL.pyx":447
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         cdef unsigned int size = self._pointer.getSamplePosition()
 *         return size
 */
  __pyx_k_tuple_55 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_55)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 447; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_55));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_10));
  PyTuple_SET_ITEM(__pyx_k_tuple_55, 0, ((PyObject *)__pyx_kp_s_10));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_10));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_55));

  /* "_PyXAL.pyx":456
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
  __pyx_k_tuple_56 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_56)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 456; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_56));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_8));
  PyTuple_SET_ITEM(__pyx_k_tuple_56, 0, ((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_56));

  /* "_PyXAL.pyx":458
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         return self._pointer.isPlaying()
 * 
 */
  __pyx_k_tuple_57 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_57)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 458; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_57));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_10));
  PyTuple_SET_ITEM(__pyx_k_tuple_57, 0, ((PyObject *)__pyx_kp_s_10));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_10));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_57));

  /* "_PyXAL.pyx":466
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
  __pyx_k_tuple_58 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_58)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 466; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_58));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_8));
  PyTuple_SET_ITEM(__pyx_k_tuple_58, 0, ((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_58));

  /* "_PyXAL.pyx":468
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         return self._pointer.isPaused()
 * 
 */
  __pyx_k_tuple_59 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_59)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 468; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_59));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_10));
  PyTuple_SET_ITEM(__pyx_k_tuple_59, 0, ((PyObject *)__pyx_kp_s_10));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_10));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_59));

  /* "_PyXAL.pyx":476
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
  __pyx_k_tuple_60 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_60)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 476; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_60));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_8));
  PyTuple_SET_ITEM(__pyx_k_tuple_60, 0, ((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_60));

  /* "_PyXAL.pyx":478
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         return self._pointer.isFading()
 * 
 */
  __pyx_k_tuple_61 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_61)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 478; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_61));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_10));
  PyTuple_SET_ITEM(__pyx_k_tuple_61, 0, ((PyObject *)__pyx_kp_s_10));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_10));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_61));

  /* "_PyXAL.pyx":486
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
  __pyx_k_tuple_62 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_62)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 486; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_62));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_8));
  PyTuple_SET_ITEM(__pyx_k_tuple_62, 0, ((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_62));

  /* "_PyXAL.pyx":488
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         return self._pointer.isFadingIn()
 * 
 */
  __pyx_k_tuple_63 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_63)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 488; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_63));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_10));
  PyTuple_SET_ITEM(__pyx_k_tuple_63, 0, ((PyObject *)__pyx_kp_s_10));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_10));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_63));

  /* "_PyXAL.pyx":496
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
  __pyx_k_tuple_64 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_64)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 496; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_64));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_8));
  PyTuple_SET_ITEM(__pyx_k_tuple_64, 0, ((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_64));

  /* "_PyXAL.pyx":498
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         return self._pointer.isFadingOut()
 * 
 */
  __pyx_k_tuple_65 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_65)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 498; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_65));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_10));
  PyTuple_SET_ITEM(__pyx_k_tuple_65, 0, ((PyObject *)__pyx_kp_s_10));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_10));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_65));

  /* "_PyXAL.pyx":506
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
  __pyx_k_tuple_66 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_66)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 506; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_66));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_8));
  PyTuple_SET_ITEM(__pyx_k_tuple_66, 0, ((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_66));

  /* "_PyXAL.pyx":508
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         return self._pointer.isLooping()
 * 
 */
  __pyx_k_tuple_67 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_67)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 508; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_67));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_10));
  PyTuple_SET_ITEM(__pyx_k_tuple_67, 0, ((PyObject *)__pyx_kp_s_10));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_10));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_67));

  /* "_PyXAL.pyx":519
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
  __pyx_k_tuple_68 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_68)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 519; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_68));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_8));
  PyTuple_SET_ITEM(__pyx_k_tuple_68, 0, ((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_68));

  /* "_PyXAL.pyx":521
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         self._pointer.play(fadeTime, looping)
 * 
 */
  __pyx_k_tuple_69 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_69)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 521; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_69));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_10));
  PyTuple_SET_ITEM(__pyx_k_tuple_69, 0, ((PyObject *)__pyx_kp_s_10));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_10));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_69));

  /* "_PyXAL.pyx":531
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
  __pyx_k_tuple_70 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_70)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 531; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_70));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_8));
  PyTuple_SET_ITEM(__pyx_k_tuple_70, 0, ((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_70));

  /* "_PyXAL.pyx":533
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         self._pointer.stop(fadeTime)
 * 
 */
  __pyx_k_tuple_71 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_71)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 533; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_71));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_10));
  PyTuple_SET_ITEM(__pyx_k_tuple_71, 0, ((PyObject *)__pyx_kp_s_10));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_10));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_71));

  /* "_PyXAL.pyx":543
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
  __pyx_k_tuple_72 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_72)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 543; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_72));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_8));
  PyTuple_SET_ITEM(__pyx_k_tuple_72, 0, ((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_72));

  /* "_PyXAL.pyx":545
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         self._pointer.pause(fadeTime)
 * 
 */
  __pyx_k_tuple_73 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_73)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 545; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_73));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_10));
  PyTuple_SET_ITEM(__pyx_k_tuple_73, 0, ((PyObject *)__pyx_kp_s_10));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_10));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_73));

  /* "_PyXAL.pyx":563
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         cdef char* file = filename
 *         s = os.path.split(filename)[0]
 */
  __pyx_k_tuple_74 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_74)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 563; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_74));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_8));
  PyTuple_SET_ITEM(__pyx_k_tuple_74, 0, ((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_74));

  /* "_PyXAL.pyx":604
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
  __pyx_k_tuple_76 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_76)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 604; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_76));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_8));
  PyTuple_SET_ITEM(__pyx_k_tuple_76, 0, ((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_76));

  /* "_PyXAL.pyx":606
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         return self._wrapper.getName()
 * 
 */
  __pyx_k_tuple_77 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_77)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 606; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_77));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_10));
  PyTuple_SET_ITEM(__pyx_k_tuple_77, 0, ((PyObject *)__pyx_kp_s_10));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_10));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_77));

  /* "_PyXAL.pyx":614
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
  __pyx_k_tuple_78 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_78)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 614; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_78));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_8));
  PyTuple_SET_ITEM(__pyx_k_tuple_78, 0, ((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_78));

  /* "_PyXAL.pyx":616
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         return self._wrapper.getFilename()
 * 
 */
  __pyx_k_tuple_79 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_79)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 616; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_79));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_10));
  PyTuple_SET_ITEM(__pyx_k_tuple_79, 0, ((PyObject *)__pyx_kp_s_10));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_10));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_79));

  /* "_PyXAL.pyx":624
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
  __pyx_k_tuple_80 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_80)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 624; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_80));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_8));
  PyTuple_SET_ITEM(__pyx_k_tuple_80, 0, ((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_80));

  /* "_PyXAL.pyx":626
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         return self._wrapper.getRealFilename()
 * 
 */
  __pyx_k_tuple_81 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_81)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 626; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_81));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_10));
  PyTuple_SET_ITEM(__pyx_k_tuple_81, 0, ((PyObject *)__pyx_kp_s_10));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_10));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_81));

  /* "_PyXAL.pyx":634
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
  __pyx_k_tuple_82 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_82)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 634; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_82));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_8));
  PyTuple_SET_ITEM(__pyx_k_tuple_82, 0, ((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_82));

  /* "_PyXAL.pyx":636
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         return self._wrapper.getSize()
 * 
 */
  __pyx_k_tuple_83 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_83)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 636; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_83));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_10));
  PyTuple_SET_ITEM(__pyx_k_tuple_83, 0, ((PyObject *)__pyx_kp_s_10));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_10));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_83));

  /* "_PyXAL.pyx":644
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
  __pyx_k_tuple_84 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_84)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 644; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_84));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_8));
  PyTuple_SET_ITEM(__pyx_k_tuple_84, 0, ((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_84));

  /* "_PyXAL.pyx":646
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         return self._wrapper.getChannels()
 * 
 */
  __pyx_k_tuple_85 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_85)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 646; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_85));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_10));
  PyTuple_SET_ITEM(__pyx_k_tuple_85, 0, ((PyObject *)__pyx_kp_s_10));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_10));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_85));

  /* "_PyXAL.pyx":654
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
  __pyx_k_tuple_86 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_86)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 654; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_86));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_8));
  PyTuple_SET_ITEM(__pyx_k_tuple_86, 0, ((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_86));

  /* "_PyXAL.pyx":656
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         return self._wrapper.getSamplingRate()
 * 
 */
  __pyx_k_tuple_87 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_87)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 656; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_87));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_10));
  PyTuple_SET_ITEM(__pyx_k_tuple_87, 0, ((PyObject *)__pyx_kp_s_10));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_10));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_87));

  /* "_PyXAL.pyx":664
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
  __pyx_k_tuple_88 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_88)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 664; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_88));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_8));
  PyTuple_SET_ITEM(__pyx_k_tuple_88, 0, ((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_88));

  /* "_PyXAL.pyx":666
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         return self._wrapper.getBitsPerSample()
 * 
 */
  __pyx_k_tuple_89 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_89)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 666; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_89));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_10));
  PyTuple_SET_ITEM(__pyx_k_tuple_89, 0, ((PyObject *)__pyx_kp_s_10));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_10));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_89));

  /* "_PyXAL.pyx":674
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
  __pyx_k_tuple_90 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_90)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 674; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_90));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_8));
  PyTuple_SET_ITEM(__pyx_k_tuple_90, 0, ((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_90));

  /* "_PyXAL.pyx":676
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         return self._wrapper.getDuration()
 * 
 */
  __pyx_k_tuple_91 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_91)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 676; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_91));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_10));
  PyTuple_SET_ITEM(__pyx_k_tuple_91, 0, ((PyObject *)__pyx_kp_s_10));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_10));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_91));

  /* "_PyXAL.pyx":685
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
  __pyx_k_tuple_92 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_92)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 685; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_92));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_8));
  PyTuple_SET_ITEM(__pyx_k_tuple_92, 0, ((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_92));

  /* "_PyXAL.pyx":687
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         return self._wrapper.getFormat()
 * 
 */
  __pyx_k_tuple_93 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_93)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 687; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_93));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_10));
  PyTuple_SET_ITEM(__pyx_k_tuple_93, 0, ((PyObject *)__pyx_kp_s_10));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_10));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_93));

  /* "_PyXAL.pyx":696
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
  __pyx_k_tuple_94 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_94)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 696; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_94));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_8));
  PyTuple_SET_ITEM(__pyx_k_tuple_94, 0, ((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_94));

  /* "_PyXAL.pyx":698
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         return self._wrapper.isStreamed()
 * 
 */
  __pyx_k_tuple_95 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_95)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 698; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_95));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_10));
  PyTuple_SET_ITEM(__pyx_k_tuple_95, 0, ((PyObject *)__pyx_kp_s_10));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_10));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_95));

  /* "_PyXAL.pyx":707
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
  __pyx_k_tuple_96 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_96)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 707; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_96));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_8));
  PyTuple_SET_ITEM(__pyx_k_tuple_96, 0, ((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_96));

  /* "_PyXAL.pyx":709
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         return self._wrapper.readPcmData()
 * 
 */
  __pyx_k_tuple_97 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_97)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 709; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_97));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_10));
  PyTuple_SET_ITEM(__pyx_k_tuple_97, 0, ((PyObject *)__pyx_kp_s_10));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_10));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_97));

  /* "_PyXAL.pyx":726
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if not isinstance(sound, PySound):
 *             raise TypeError("Expected argument 1 to be of type PySound got %s" % type(sound))
 */
  __pyx_k_tuple_98 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_98)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 726; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_98));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_8));
  PyTuple_SET_ITEM(__pyx_k_tuple_98, 0, ((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_98));

  /* "_PyXAL.pyx":775
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
  __pyx_k_tuple_101 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_101)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 775; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_101));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_8));
  PyTuple_SET_ITEM(__pyx_k_tuple_101, 0, ((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_101));

  /* "_PyXAL.pyx":777
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         return self._wrapper.getGain()
 * 
 */
  __pyx_k_tuple_102 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_102)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 777; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_102));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_10));
  PyTuple_SET_ITEM(__pyx_k_tuple_102, 0, ((PyObject *)__pyx_kp_s_10));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_10));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_102));

  /* "_PyXAL.pyx":786
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
  __pyx_k_tuple_103 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_103)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 786; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_103));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_8));
  PyTuple_SET_ITEM(__pyx_k_tuple_103, 0, ((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_103));

  /* "_PyXAL.pyx":788
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         self._wrapper.setGain(value)
 * 
 */
  __pyx_k_tuple_104 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_104)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 788; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_104));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_10));
  PyTuple_SET_ITEM(__pyx_k_tuple_104, 0, ((PyObject *)__pyx_kp_s_10));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_10));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_104));

  /* "_PyXAL.pyx":796
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
  __pyx_k_tuple_105 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_105)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 796; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_105));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_8));
  PyTuple_SET_ITEM(__pyx_k_tuple_105, 0, ((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_105));

  /* "_PyXAL.pyx":798
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         return self._wrapper.getPitch()
 * 
 */
  __pyx_k_tuple_106 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_106)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 798; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_106));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_10));
  PyTuple_SET_ITEM(__pyx_k_tuple_106, 0, ((PyObject *)__pyx_kp_s_10));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_10));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_106));

  /* "_PyXAL.pyx":807
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
  __pyx_k_tuple_107 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_107)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 807; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_107));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_8));
  PyTuple_SET_ITEM(__pyx_k_tuple_107, 0, ((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_107));

  /* "_PyXAL.pyx":809
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         self._wrapper.setPitch(value)
 * 
 */
  __pyx_k_tuple_108 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_108)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 809; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_108));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_10));
  PyTuple_SET_ITEM(__pyx_k_tuple_108, 0, ((PyObject *)__pyx_kp_s_10));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_10));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_108));

  /* "_PyXAL.pyx":823
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
  __pyx_k_tuple_109 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_109)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 823; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_109));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_8));
  PyTuple_SET_ITEM(__pyx_k_tuple_109, 0, ((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_109));

  /* "_PyXAL.pyx":825
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         return self._wrapper.getName()
 * 
 */
  __pyx_k_tuple_110 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_110)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 825; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_110));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_10));
  PyTuple_SET_ITEM(__pyx_k_tuple_110, 0, ((PyObject *)__pyx_kp_s_10));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_10));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_110));

  /* "_PyXAL.pyx":833
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
  __pyx_k_tuple_111 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_111)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 833; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_111));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_8));
  PyTuple_SET_ITEM(__pyx_k_tuple_111, 0, ((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_111));

  /* "_PyXAL.pyx":835
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         return self._wrapper.getFilename()
 * 
 */
  __pyx_k_tuple_112 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_112)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 835; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_112));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_10));
  PyTuple_SET_ITEM(__pyx_k_tuple_112, 0, ((PyObject *)__pyx_kp_s_10));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_10));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_112));

  /* "_PyXAL.pyx":843
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
  __pyx_k_tuple_113 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_113)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 843; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_113));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_8));
  PyTuple_SET_ITEM(__pyx_k_tuple_113, 0, ((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_113));

  /* "_PyXAL.pyx":845
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         return self._wrapper.getRealFilename()
 * 
 */
  __pyx_k_tuple_114 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_114)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 845; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_114));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_10));
  PyTuple_SET_ITEM(__pyx_k_tuple_114, 0, ((PyObject *)__pyx_kp_s_10));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_10));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_114));

  /* "_PyXAL.pyx":853
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
  __pyx_k_tuple_115 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_115)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 853; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_115));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_8));
  PyTuple_SET_ITEM(__pyx_k_tuple_115, 0, ((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_115));

  /* "_PyXAL.pyx":855
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         return self._wrapper.getDuration()
 * 
 */
  __pyx_k_tuple_116 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_116)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 855; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_116));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_10));
  PyTuple_SET_ITEM(__pyx_k_tuple_116, 0, ((PyObject *)__pyx_kp_s_10));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_10));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_116));

  /* "_PyXAL.pyx":863
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
  __pyx_k_tuple_117 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_117)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 863; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_117));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_8));
  PyTuple_SET_ITEM(__pyx_k_tuple_117, 0, ((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_117));

  /* "_PyXAL.pyx":865
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         return self._wrapper.getSize()
 * 
 */
  __pyx_k_tuple_118 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_118)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 865; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_118));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_10));
  PyTuple_SET_ITEM(__pyx_k_tuple_118, 0, ((PyObject *)__pyx_kp_s_10));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_10));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_118));

  /* "_PyXAL.pyx":873
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
  __pyx_k_tuple_119 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_119)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 873; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_119));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_8));
  PyTuple_SET_ITEM(__pyx_k_tuple_119, 0, ((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_119));

  /* "_PyXAL.pyx":875
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         return self._wrapper.getTimePosition()
 * 
 */
  __pyx_k_tuple_120 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_120)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 875; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_120));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_10));
  PyTuple_SET_ITEM(__pyx_k_tuple_120, 0, ((PyObject *)__pyx_kp_s_10));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_10));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_120));

  /* "_PyXAL.pyx":883
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
  __pyx_k_tuple_121 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_121)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 883; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_121));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_8));
  PyTuple_SET_ITEM(__pyx_k_tuple_121, 0, ((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_121));

  /* "_PyXAL.pyx":885
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         return self._wrapper.getSamplePosition()
 * 
 */
  __pyx_k_tuple_122 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_122)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 885; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_122));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_10));
  PyTuple_SET_ITEM(__pyx_k_tuple_122, 0, ((PyObject *)__pyx_kp_s_10));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_10));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_122));

  /* "_PyXAL.pyx":893
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
  __pyx_k_tuple_123 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_123)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 893; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_123));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_8));
  PyTuple_SET_ITEM(__pyx_k_tuple_123, 0, ((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_123));

  /* "_PyXAL.pyx":895
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         return self._wrapper.isPlaying()
 * 
 */
  __pyx_k_tuple_124 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_124)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 895; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_124));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_10));
  PyTuple_SET_ITEM(__pyx_k_tuple_124, 0, ((PyObject *)__pyx_kp_s_10));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_10));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_124));

  /* "_PyXAL.pyx":903
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
  __pyx_k_tuple_125 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_125)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 903; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_125));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_8));
  PyTuple_SET_ITEM(__pyx_k_tuple_125, 0, ((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_125));

  /* "_PyXAL.pyx":905
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         return self._wrapper.isPaused()
 * 
 */
  __pyx_k_tuple_126 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_126)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 905; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_126));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_10));
  PyTuple_SET_ITEM(__pyx_k_tuple_126, 0, ((PyObject *)__pyx_kp_s_10));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_10));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_126));

  /* "_PyXAL.pyx":913
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
  __pyx_k_tuple_127 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_127)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 913; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_127));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_8));
  PyTuple_SET_ITEM(__pyx_k_tuple_127, 0, ((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_127));

  /* "_PyXAL.pyx":915
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         return self._wrapper.isFading()
 * 
 */
  __pyx_k_tuple_128 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_128)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 915; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_128));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_10));
  PyTuple_SET_ITEM(__pyx_k_tuple_128, 0, ((PyObject *)__pyx_kp_s_10));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_10));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_128));

  /* "_PyXAL.pyx":923
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
  __pyx_k_tuple_129 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_129)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 923; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_129));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_8));
  PyTuple_SET_ITEM(__pyx_k_tuple_129, 0, ((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_129));

  /* "_PyXAL.pyx":925
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         return self._wrapper.isFadingIn()
 * 
 */
  __pyx_k_tuple_130 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_130)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 925; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_130));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_10));
  PyTuple_SET_ITEM(__pyx_k_tuple_130, 0, ((PyObject *)__pyx_kp_s_10));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_10));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_130));

  /* "_PyXAL.pyx":933
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
  __pyx_k_tuple_131 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_131)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 933; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_131));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_8));
  PyTuple_SET_ITEM(__pyx_k_tuple_131, 0, ((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_131));

  /* "_PyXAL.pyx":935
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         return self._wrapper.isFadingOut()
 * 
 */
  __pyx_k_tuple_132 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_132)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 935; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_132));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_10));
  PyTuple_SET_ITEM(__pyx_k_tuple_132, 0, ((PyObject *)__pyx_kp_s_10));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_10));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_132));

  /* "_PyXAL.pyx":943
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
  __pyx_k_tuple_133 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_133)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 943; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_133));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_8));
  PyTuple_SET_ITEM(__pyx_k_tuple_133, 0, ((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_133));

  /* "_PyXAL.pyx":945
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         return self._wrapper.isLooping()
 * 
 */
  __pyx_k_tuple_134 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_134)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 945; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_134));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_10));
  PyTuple_SET_ITEM(__pyx_k_tuple_134, 0, ((PyObject *)__pyx_kp_s_10));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_10));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_134));

  /* "_PyXAL.pyx":956
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
  __pyx_k_tuple_135 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_135)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 956; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_135));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_8));
  PyTuple_SET_ITEM(__pyx_k_tuple_135, 0, ((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_135));

  /* "_PyXAL.pyx":958
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         self._wrapper.play(fadeTime, looping)
 * 
 */
  __pyx_k_tuple_136 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_136)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 958; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_136));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_10));
  PyTuple_SET_ITEM(__pyx_k_tuple_136, 0, ((PyObject *)__pyx_kp_s_10));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_10));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_136));

  /* "_PyXAL.pyx":968
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
  __pyx_k_tuple_137 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_137)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 968; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_137));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_8));
  PyTuple_SET_ITEM(__pyx_k_tuple_137, 0, ((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_137));

  /* "_PyXAL.pyx":970
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         self._wrapper.stop(fadeTime)
 * 
 */
  __pyx_k_tuple_138 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_138)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 970; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_138));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_10));
  PyTuple_SET_ITEM(__pyx_k_tuple_138, 0, ((PyObject *)__pyx_kp_s_10));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_10));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_138));

  /* "_PyXAL.pyx":980
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
  __pyx_k_tuple_139 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_139)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 980; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_139));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_8));
  PyTuple_SET_ITEM(__pyx_k_tuple_139, 0, ((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_139));

  /* "_PyXAL.pyx":982
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         self._wrapper.pause(fadeTime)
 * 
 */
  __pyx_k_tuple_140 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_140)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 982; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_140));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_10));
  PyTuple_SET_ITEM(__pyx_k_tuple_140, 0, ((PyObject *)__pyx_kp_s_10));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_10));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_140));

  /* "_PyXAL.pyx":1009
 *         global Mgr
 *         if Mgr is not None:
 *             raise RuntimeError("Only one XALManager interface allowed at a time, use the one at PyXAL.Mgr")             # <<<<<<<<<<<<<<
 *         self.CATEGORY_STR = "default"
 *         cdef String name = String(systemname)
 */
  __pyx_k_tuple_142 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_142)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1009; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_142));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_141));
  PyTuple_SET_ITEM(__pyx_k_tuple_142, 0, ((PyObject *)__pyx_kp_s_141));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_141));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_142));

  /* "_PyXAL.pyx":1039
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         cdef String category = String(self.CATEGORY_STR)
 *         self._category = XAL.mgr.createCategory(category, FULL, DISK)
 */
  __pyx_k_tuple_143 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_143)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1039; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_143));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_8));
  PyTuple_SET_ITEM(__pyx_k_tuple_143, 0, ((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_143));

  /* "_PyXAL.pyx":1073
 *         global Mgr
 *         if Mgr is not None:
 *             raise RuntimeError("Only one XALManager interface allowed at a time, use the one at PyXAL.Mgr")             # <<<<<<<<<<<<<<
 *         cdef XALManagerWrapper wrapper = XALManagerWrapper(XAL_AS_DEFAULT, backendId, threaded)
 *         self._wrapper = wrapper
 */
  __pyx_k_tuple_144 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_144)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1073; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_144));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_141));
  PyTuple_SET_ITEM(__pyx_k_tuple_144, 0, ((PyObject *)__pyx_kp_s_141));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_141));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_144));

  /* "_PyXAL.pyx":1113
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         pysound = PySound(filename)
 *         return pysound
 */
  __pyx_k_tuple_145 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_145)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1113; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_145));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_8));
  PyTuple_SET_ITEM(__pyx_k_tuple_145, 0, ((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_145));

  /* "_PyXAL.pyx":1126
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if not isinstance(sound, PySound):
 *             raise TypeError("Expected argument 1 to be of type PySound got %s" % type(sound))
 */
  __pyx_k_tuple_146 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_146)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1126; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_146));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_8));
  PyTuple_SET_ITEM(__pyx_k_tuple_146, 0, ((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_146));

  /* "_PyXAL.pyx":1144
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if not isinstance(player, PyPlayer):
 *             raise TypeError("Expected argument 1 to be of type PyPlayer got %s" % type(player))
 */
  __pyx_k_tuple_147 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_147)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1144; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_147));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_8));
  PyTuple_SET_ITEM(__pyx_k_tuple_147, 0, ((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_147));

  /* "_PyXAL.pyx":1161
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if not isinstance(sound, PySound):
 *             raise TypeError("Expected argument 1 to be of type PySound got %s" % type(sound))
 */
  __pyx_k_tuple_149 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_149)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1161; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_149));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_8));
  PyTuple_SET_ITEM(__pyx_k_tuple_149, 0, ((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_149));

  /* "_PyXAL.pyx":1174
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self._players.has_key(name):
 *             if len(self._players[name]) > 0:
 */
  __pyx_k_tuple_150 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_150)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1174; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_150));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_8));
  PyTuple_SET_ITEM(__pyx_k_tuple_150, 0, ((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_150));

  /* "_PyXAL.pyx":1190
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         cdef char* name_str = name
 *         cdef String hl_name = String(name_str)
 */
  __pyx_k_tuple_151 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_151)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1190; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_151));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_8));
  PyTuple_SET_ITEM(__pyx_k_tuple_151, 0, ((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_151));

  /* "_PyXAL.pyx":1203
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         cdef char* name_str = name
 *         cdef String hl_name = String(name_str)
 */
  __pyx_k_tuple_152 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_152)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1203; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_152));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_8));
  PyTuple_SET_ITEM(__pyx_k_tuple_152, 0, ((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_152));

  /* "_PyXAL.pyx":1216
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         cdef char* name_str = name
 *         cdef String hl_name = String(name_str)
 */
  __pyx_k_tuple_153 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_153)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1216; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_153));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_8));
  PyTuple_SET_ITEM(__pyx_k_tuple_153, 0, ((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_153));

  /* "_PyXAL.pyx":1229
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         XAL.mgr.stopAll(fadeTime)
 * 
 */
  __pyx_k_tuple_154 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_154)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1229; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_154));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_8));
  PyTuple_SET_ITEM(__pyx_k_tuple_154, 0, ((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_154));

  /* "_PyXAL.pyx":1238
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         cdef char* name_str = name
 *         cdef String hl_name = String(name_str)
 */
  __pyx_k_tuple_155 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_155)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1238; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_155));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_8));
  PyTuple_SET_ITEM(__pyx_k_tuple_155, 0, ((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_155));

  /* "_PyXAL.pyx":1250
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         cdef char* name_str = name
 *         cdef String hl_name = String(name_str)
 */
  __pyx_k_tuple_156 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_156)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1250; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_156));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_8));
  PyTuple_SET_ITEM(__pyx_k_tuple_156, 0, ((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_156));

  /* "_PyXAL.pyx":1262
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         cdef char* name_str = name
 *         cdef String hl_name = String(name_str)
 */
  __pyx_k_tuple_157 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_157)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1262; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_157));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_8));
  PyTuple_SET_ITEM(__pyx_k_tuple_157, 0, ((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_157));

  /* "_PyXAL.pyx":1274
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         cdef char* name_str = name
 *         cdef String hl_name = String(name_str)
 */
  __pyx_k_tuple_158 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_158)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1274; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_158));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_8));
  PyTuple_SET_ITEM(__pyx_k_tuple_158, 0, ((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_158));

  /* "_PyXAL.pyx":1287
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         XAL.mgr.suspendAudio()
 * 
 */
  __pyx_k_tuple_159 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_159)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1287; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_159));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_8));
  PyTuple_SET_ITEM(__pyx_k_tuple_159, 0, ((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_159));

  /* "_PyXAL.pyx":1297
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         XAL.mgr.resumeAudio()
 * 
 */
  __pyx_k_tuple_160 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_160)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1297; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_160));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_8));
  PyTuple_SET_ITEM(__pyx_k_tuple_160, 0, ((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_160));
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  return 0;
  __pyx_L1_error:;
  return -1;
}

#if PY_MAJOR_VERSION < 3
PyMODINIT_FUNC init_PyXAL(void); /*proto*/
PyMODINIT_FUNC init_PyXAL(void)
#else
PyMODINIT_FUNC PyInit__PyXAL(void); /*proto*/
PyMODINIT_FUNC PyInit__PyXAL(void)
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannyDeclarations
  #if CYTHON_REFNANNY
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
  if (!__Pyx_RefNanny) {
      PyErr_Clear();
      __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
      if (!__Pyx_RefNanny)
          Py_FatalError("failed to import 'refnanny' module");
  }
  #endif
  __Pyx_RefNannySetupContext("PyMODINIT_FUNC PyInit__PyXAL(void)");
  if ( __Pyx_check_binary_version() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #ifdef __pyx_binding_PyCFunctionType_USED
  if (__pyx_binding_PyCFunctionType_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4(__Pyx_NAMESTR("_PyXAL"), __pyx_methods, 0, 0, PYTHON_API_VERSION);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (!__pyx_m) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  #if PY_MAJOR_VERSION < 3
  Py_INCREF(__pyx_m);
  #endif
  __pyx_b = PyImport_AddModule(__Pyx_NAMESTR(__Pyx_BUILTIN_MODULE_NAME));
  if (!__pyx_b) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  if (__Pyx_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  /*--- Initialize various global constants etc. ---*/
  if (unlikely(__Pyx_InitGlobals() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_module_is_main__PyXAL) {
    if (__Pyx_SetAttrString(__pyx_m, "__name__", __pyx_n_s____main__) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  }
  /*--- Builtin init code ---*/
  if (unlikely(__Pyx_InitCachedBuiltins() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Constants init code ---*/
  if (unlikely(__Pyx_InitCachedConstants() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Global init code ---*/
  __pyx_v_6_PyXAL_LOG_PATH = ((PyObject*)Py_None); Py_INCREF(Py_None);
  /*--- Variable export code ---*/
  /*--- Function export code ---*/
  /*--- Type init code ---*/
  if (PyType_Ready(&__pyx_type_6_PyXAL_PyAudioManager) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 104; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  {
    PyObject *wrapper = __Pyx_GetAttrString((PyObject *)&__pyx_type_6_PyXAL_PyAudioManager, "__init__"); if (unlikely(!wrapper)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 104; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_6_PyXAL_14PyAudioManager___init__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_6_PyXAL_14PyAudioManager___init__.doc = __pyx_doc_6_PyXAL_14PyAudioManager___init__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_6_PyXAL_14PyAudioManager___init__;
    }
  }
  if (__Pyx_SetAttrString(__pyx_m, "PyAudioManager", (PyObject *)&__pyx_type_6_PyXAL_PyAudioManager) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 104; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_6_PyXAL_PyAudioManager = &__pyx_type_6_PyXAL_PyAudioManager;
  if (PyType_Ready(&__pyx_type_6_PyXAL_SoundWrapper) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 120; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  {
    PyObject *wrapper = __Pyx_GetAttrString((PyObject *)&__pyx_type_6_PyXAL_SoundWrapper, "__init__"); if (unlikely(!wrapper)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 120; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_6_PyXAL_12SoundWrapper___init__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_6_PyXAL_12SoundWrapper___init__.doc = __pyx_doc_6_PyXAL_12SoundWrapper___init__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_6_PyXAL_12SoundWrapper___init__;
    }
  }
  if (__Pyx_SetAttrString(__pyx_m, "SoundWrapper", (PyObject *)&__pyx_type_6_PyXAL_SoundWrapper) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 120; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_6_PyXAL_SoundWrapper = &__pyx_type_6_PyXAL_SoundWrapper;
  if (PyType_Ready(&__pyx_type_6_PyXAL_PlayerWrapper) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 293; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  {
    PyObject *wrapper = __Pyx_GetAttrString((PyObject *)&__pyx_type_6_PyXAL_PlayerWrapper, "__init__"); if (unlikely(!wrapper)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 293; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_6_PyXAL_13PlayerWrapper___init__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_6_PyXAL_13PlayerWrapper___init__.doc = __pyx_doc_6_PyXAL_13PlayerWrapper___init__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_6_PyXAL_13PlayerWrapper___init__;
    }
  }
  if (__Pyx_SetAttrString(__pyx_m, "PlayerWrapper", (PyObject *)&__pyx_type_6_PyXAL_PlayerWrapper) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 293; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_6_PyXAL_PlayerWrapper = &__pyx_type_6_PyXAL_PlayerWrapper;
  if (PyType_Ready(&__pyx_type_6_PyXAL_XALManagerWrapper) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 986; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  {
    PyObject *wrapper = __Pyx_GetAttrString((PyObject *)&__pyx_type_6_PyXAL_XALManagerWrapper, "__init__"); if (unlikely(!wrapper)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 986; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_6_PyXAL_17XALManagerWrapper___init__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_6_PyXAL_17XALManagerWrapper___init__.doc = __pyx_doc_6_PyXAL_17XALManagerWrapper___init__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_6_PyXAL_17XALManagerWrapper___init__;
    }
  }
  if (__Pyx_SetAttrString(__pyx_m, "XALManagerWrapper", (PyObject *)&__pyx_type_6_PyXAL_XALManagerWrapper) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 986; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_6_PyXAL_XALManagerWrapper = &__pyx_type_6_PyXAL_XALManagerWrapper;
  /*--- Type import code ---*/
  /*--- Variable import code ---*/
  /*--- Function import code ---*/
  /*--- Execution code ---*/

  /* "_PyXAL.pyx":8
 * cimport XAL
 * 
 * import os             # <<<<<<<<<<<<<<
 * 
 * cdef char* XAL_AS_ANDROID = "Android"
 */
  __pyx_t_1 = __Pyx_Import(((PyObject *)__pyx_n_s__os), 0, -1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 8; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__os, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 8; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "_PyXAL.pyx":10
 * import os
 * 
 * cdef char* XAL_AS_ANDROID = "Android"             # <<<<<<<<<<<<<<
 * cdef char* XAL_AS_DIRECTSOUND = "DirectSound"
 * cdef char* XAL_AS_OPENAL = "OpenAL"
 */
  __pyx_v_6_PyXAL_XAL_AS_ANDROID = __pyx_k__Android;

  /* "_PyXAL.pyx":11
 * 
 * cdef char* XAL_AS_ANDROID = "Android"
 * cdef char* XAL_AS_DIRECTSOUND = "DirectSound"             # <<<<<<<<<<<<<<
 * cdef char* XAL_AS_OPENAL = "OpenAL"
 * cdef char* XAL_AS_SDL = "SDL"
 */
  __pyx_v_6_PyXAL_XAL_AS_DIRECTSOUND = __pyx_k__DirectSound;

  /* "_PyXAL.pyx":12
 * cdef char* XAL_AS_ANDROID = "Android"
 * cdef char* XAL_AS_DIRECTSOUND = "DirectSound"
 * cdef char* XAL_AS_OPENAL = "OpenAL"             # <<<<<<<<<<<<<<
 * cdef char* XAL_AS_SDL = "SDL"
 * cdef char* XAL_AS_AVFOUNDATION = "AVFoundation"
 */
  __pyx_v_6_PyXAL_XAL_AS_OPENAL = __pyx_k__OpenAL;

  /* "_PyXAL.pyx":13
 * cdef char* XAL_AS_DIRECTSOUND = "DirectSound"
 * cdef char* XAL_AS_OPENAL = "OpenAL"
 * cdef char* XAL_AS_SDL = "SDL"             # <<<<<<<<<<<<<<
 * cdef char* XAL_AS_AVFOUNDATION = "AVFoundation"
 * cdef char* XAL_AS_COREAUDIO = "CoreAudio"
 */
  __pyx_v_6_PyXAL_XAL_AS_SDL = __pyx_k__SDL;

  /* "_PyXAL.pyx":14
 * cdef char* XAL_AS_OPENAL = "OpenAL"
 * cdef char* XAL_AS_SDL = "SDL"
 * cdef char* XAL_AS_AVFOUNDATION = "AVFoundation"             # <<<<<<<<<<<<<<
 * cdef char* XAL_AS_COREAUDIO = "CoreAudio"
 * cdef char* XAL_AS_DISABLED = "Disabled"
 */
  __pyx_v_6_PyXAL_XAL_AS_AVFOUNDATION = __pyx_k__AVFoundation;

  /* "_PyXAL.pyx":15
 * cdef char* XAL_AS_SDL = "SDL"
 * cdef char* XAL_AS_AVFOUNDATION = "AVFoundation"
 * cdef char* XAL_AS_COREAUDIO = "CoreAudio"             # <<<<<<<<<<<<<<
 * cdef char* XAL_AS_DISABLED = "Disabled"
 * cdef char* XAL_AS_DEFAULT = ""
 */
  __pyx_v_6_PyXAL_XAL_AS_COREAUDIO = __pyx_k__CoreAudio;

  /* "_PyXAL.pyx":16
 * cdef char* XAL_AS_AVFOUNDATION = "AVFoundation"
 * cdef char* XAL_AS_COREAUDIO = "CoreAudio"
 * cdef char* XAL_AS_DISABLED = "Disabled"             # <<<<<<<<<<<<<<
 * cdef char* XAL_AS_DEFAULT = ""
 * 
 */
  __pyx_v_6_PyXAL_XAL_AS_DISABLED = __pyx_k__Disabled;

  /* "_PyXAL.pyx":17
 * cdef char* XAL_AS_COREAUDIO = "CoreAudio"
 * cdef char* XAL_AS_DISABLED = "Disabled"
 * cdef char* XAL_AS_DEFAULT = ""             # <<<<<<<<<<<<<<
 * 
 * cdef XAL.BufferMode FULL = XAL.FULL
 */
  __pyx_v_6_PyXAL_XAL_AS_DEFAULT = __pyx_k_1;

  /* "_PyXAL.pyx":19
 * cdef char* XAL_AS_DEFAULT = ""
 * 
 * cdef XAL.BufferMode FULL = XAL.FULL             # <<<<<<<<<<<<<<
 * cdef XAL.BufferMode LAZY = XAL.LAZY
 * cdef XAL.BufferMode MANAGED = XAL.MANAGED
 */
  __pyx_v_6_PyXAL_FULL = xal::FULL;

  /* "_PyXAL.pyx":20
 * 
 * cdef XAL.BufferMode FULL = XAL.FULL
 * cdef XAL.BufferMode LAZY = XAL.LAZY             # <<<<<<<<<<<<<<
 * cdef XAL.BufferMode MANAGED = XAL.MANAGED
 * cdef XAL.BufferMode ON_DEMAND = XAL.ON_DEMAND
 */
  __pyx_v_6_PyXAL_LAZY = xal::LAZY;

  /* "_PyXAL.pyx":21
 * cdef XAL.BufferMode FULL = XAL.FULL
 * cdef XAL.BufferMode LAZY = XAL.LAZY
 * cdef XAL.BufferMode MANAGED = XAL.MANAGED             # <<<<<<<<<<<<<<
 * cdef XAL.BufferMode ON_DEMAND = XAL.ON_DEMAND
 * cdef XAL.BufferMode STREAMED = XAL.STREAMED
 */
  __pyx_v_6_PyXAL_MANAGED = xal::MANAGED;

  /* "_PyXAL.pyx":22
 * cdef XAL.BufferMode LAZY = XAL.LAZY
 * cdef XAL.BufferMode MANAGED = XAL.MANAGED
 * cdef XAL.BufferMode ON_DEMAND = XAL.ON_DEMAND             # <<<<<<<<<<<<<<
 * cdef XAL.BufferMode STREAMED = XAL.STREAMED
 * 
 */
  __pyx_v_6_PyXAL_ON_DEMAND = xal::ON_DEMAND;

  /* "_PyXAL.pyx":23
 * cdef XAL.BufferMode MANAGED = XAL.MANAGED
 * cdef XAL.BufferMode ON_DEMAND = XAL.ON_DEMAND
 * cdef XAL.BufferMode STREAMED = XAL.STREAMED             # <<<<<<<<<<<<<<
 * 
 * cdef XAL.SourceMode DISK = XAL.DISK
 */
  __pyx_v_6_PyXAL_STREAMED = xal::STREAMED;

  /* "_PyXAL.pyx":25
 * cdef XAL.BufferMode STREAMED = XAL.STREAMED
 * 
 * cdef XAL.SourceMode DISK = XAL.DISK             # <<<<<<<<<<<<<<
 * cdef XAL.SourceMode RAM = XAL.RAM
 * 
 */
  __pyx_v_6_PyXAL_DISK = xal::DISK;

  /* "_PyXAL.pyx":26
 * 
 * cdef XAL.SourceMode DISK = XAL.DISK
 * cdef XAL.SourceMode RAM = XAL.RAM             # <<<<<<<<<<<<<<
 * 
 * cdef XAL.Format FLAC = XAL.FLAC
 */
  __pyx_v_6_PyXAL_RAM = xal::RAM;

  /* "_PyXAL.pyx":28
 * cdef XAL.SourceMode RAM = XAL.RAM
 * 
 * cdef XAL.Format FLAC = XAL.FLAC             # <<<<<<<<<<<<<<
 * cdef XAL.Format M4A = XAL.M4A
 * cdef XAL.Format OGG = XAL.OGG
 */
  __pyx_v_6_PyXAL_FLAC = xal::FLAC;

  /* "_PyXAL.pyx":29
 * 
 * cdef XAL.Format FLAC = XAL.FLAC
 * cdef XAL.Format M4A = XAL.M4A             # <<<<<<<<<<<<<<
 * cdef XAL.Format OGG = XAL.OGG
 * cdef XAL.Format SPX = XAL.SPX
 */
  __pyx_v_6_PyXAL_M4A = xal::M4A;

  /* "_PyXAL.pyx":30
 * cdef XAL.Format FLAC = XAL.FLAC
 * cdef XAL.Format M4A = XAL.M4A
 * cdef XAL.Format OGG = XAL.OGG             # <<<<<<<<<<<<<<
 * cdef XAL.Format SPX = XAL.SPX
 * cdef XAL.Format WAV = XAL.WAV
 */
  __pyx_v_6_PyXAL_OGG = xal::OGG;

  /* "_PyXAL.pyx":31
 * cdef XAL.Format M4A = XAL.M4A
 * cdef XAL.Format OGG = XAL.OGG
 * cdef XAL.Format SPX = XAL.SPX             # <<<<<<<<<<<<<<
 * cdef XAL.Format WAV = XAL.WAV
 * cdef XAL.Format UNKNOWN = XAL.UNKNOWN
 */
  __pyx_v_6_PyXAL_SPX = xal::SPX;

  /* "_PyXAL.pyx":32
 * cdef XAL.Format OGG = XAL.OGG
 * cdef XAL.Format SPX = XAL.SPX
 * cdef XAL.Format WAV = XAL.WAV             # <<<<<<<<<<<<<<
 * cdef XAL.Format UNKNOWN = XAL.UNKNOWN
 * 
 */
  __pyx_v_6_PyXAL_WAV = xal::WAV;

  /* "_PyXAL.pyx":33
 * cdef XAL.Format SPX = XAL.SPX
 * cdef XAL.Format WAV = XAL.WAV
 * cdef XAL.Format UNKNOWN = XAL.UNKNOWN             # <<<<<<<<<<<<<<
 * 
 * cdef extern from *:
 */
  __pyx_v_6_PyXAL_UNKNOWN = xal::UNKNOWN;

  /* "_PyXAL.pyx":40
 *     ctypedef String& chstr "chstr"
 * 
 * cdef str LOG_PATH = ""             # <<<<<<<<<<<<<<
 * cdef bool LOG_ENABLED = False
 * 
 */
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_1));
  __Pyx_XGOTREF(((PyObject *)__pyx_v_6_PyXAL_LOG_PATH));
  __Pyx_DECREF(((PyObject *)__pyx_v_6_PyXAL_LOG_PATH));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_1));
  __pyx_v_6_PyXAL_LOG_PATH = __pyx_kp_s_1;

  /* "_PyXAL.pyx":41
 * 
 * cdef str LOG_PATH = ""
 * cdef bool LOG_ENABLED = False             # <<<<<<<<<<<<<<
 * 
 * cpdef SetLogPath(str path):
 */
  __pyx_v_6_PyXAL_LOG_ENABLED = 0;

  /* "_PyXAL.pyx":99
 *             pass
 * 
 * XAL.setLogFunction(Log)             # <<<<<<<<<<<<<<
 * 
 * Mgr = None
 */
  try {xal::setLogFunction(__pyx_f_6_PyXAL_Log);} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 99; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}

  /* "_PyXAL.pyx":101
 * XAL.setLogFunction(Log)
 * 
 * Mgr = None             # <<<<<<<<<<<<<<
 * 
 * 
 */
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__Mgr, Py_None) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 101; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_PyXAL.pyx":549
 * 
 * 
 * class PySound(object):             # <<<<<<<<<<<<<<
 *     '''
 *     a interface for the wrapper of the xal::Sound class
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 549; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));

  /* "_PyXAL.pyx":554
 *     '''
 * 
 *     CATEGORY_STR = "default"             # <<<<<<<<<<<<<<
 *     _wrapper = None
 *     destroyed = False
 */
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s__CATEGORY_STR, ((PyObject *)__pyx_n_s__default)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 554; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_PyXAL.pyx":555
 * 
 *     CATEGORY_STR = "default"
 *     _wrapper = None             # <<<<<<<<<<<<<<
 *     destroyed = False
 * 
 */
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s___wrapper, Py_None) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 555; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_PyXAL.pyx":556
 *     CATEGORY_STR = "default"
 *     _wrapper = None
 *     destroyed = False             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, bytes filename):
 */
  __pyx_t_2 = __Pyx_PyBool_FromLong(0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 556; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s__destroyed, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 556; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "_PyXAL.pyx":558
 *     destroyed = False
 * 
 *     def __init__(self, bytes filename):             # <<<<<<<<<<<<<<
 *         '''
 *         this creates a sound object from a file name
 */
  __pyx_t_2 = __pyx_binding_PyCFunctionType_NewEx(&__pyx_mdef_6_PyXAL_7PySound___init__, NULL, __pyx_n_s___PyXAL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 558; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s____init__, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 558; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "_PyXAL.pyx":580
 *         self._wrapper = wrapper
 * 
 *     def _destroy(self):             # <<<<<<<<<<<<<<
 *         if self.isXALInitialized() and not self.destroyed:
 *             self._wrapper._destroy()
 */
  __pyx_t_2 = __pyx_binding_PyCFunctionType_NewEx(&__pyx_mdef_6_PyXAL_7PySound_1_destroy, NULL, __pyx_n_s___PyXAL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 580; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s___destroy, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 580; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "_PyXAL.pyx":585
 *             self.destroyed = True
 * 
 *     def __del__(self):             # <<<<<<<<<<<<<<
 *         if self.isXALInitialized():
 *             self._destroy()
 */
  __pyx_t_2 = __pyx_binding_PyCFunctionType_NewEx(&__pyx_mdef_6_PyXAL_7PySound_2__del__, NULL, __pyx_n_s___PyXAL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 585; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s____del__, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 585; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "_PyXAL.pyx":590
 *         del self._wrapper
 * 
 *     def isXALInitialized(self):             # <<<<<<<<<<<<<<
 *         '''
 *         returns true if the C++ side of the interface to XAL exists
 */
  __pyx_t_2 = __pyx_binding_PyCFunctionType_NewEx(&__pyx_mdef_6_PyXAL_7PySound_3isXALInitialized, NULL, __pyx_n_s___PyXAL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 590; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s__isXALInitialized, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 590; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "_PyXAL.pyx":599
 *             return False
 * 
 *     def getName(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: returns the string name of the sound. it is normal the full path of teh sound file with out the file extention
 */
  __pyx_t_2 = __pyx_binding_PyCFunctionType_NewEx(&__pyx_mdef_6_PyXAL_7PySound_4getName, NULL, __pyx_n_s___PyXAL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 599; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s__getName, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 599; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "_PyXAL.pyx":609
 *         return self._wrapper.getName()
 * 
 *     def getFilename(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: returns a string containing the file name the sound was loaded from
 */
  __pyx_t_2 = __pyx_binding_PyCFunctionType_NewEx(&__pyx_mdef_6_PyXAL_7PySound_5getFilename, NULL, __pyx_n_s___PyXAL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 609; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s__getFilename, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 609; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "_PyXAL.pyx":619
 *         return self._wrapper.getFilename()
 * 
 *     def getRealFilename(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: returns a string with the full path to the file the string was loaded from
 */
  __pyx_t_2 = __pyx_binding_PyCFunctionType_NewEx(&__pyx_mdef_6_PyXAL_7PySound_6getRealFilename, NULL, __pyx_n_s___PyXAL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 619; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s__getRealFilename, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 619; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "_PyXAL.pyx":629
 *         return self._wrapper.getRealFilename()
 * 
 *     def getSize(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: int the size of the sound data in bits not bytes
 */
  __pyx_t_2 = __pyx_binding_PyCFunctionType_NewEx(&__pyx_mdef_6_PyXAL_7PySound_7getSize, NULL, __pyx_n_s___PyXAL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 629; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s__getSize, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 629; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "_PyXAL.pyx":639
 *         return self._wrapper.getSize()
 * 
 *     def getChannels(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: int number of channels the sound has. 1 for mono or 2 for stereo
 */
  __pyx_t_2 = __pyx_binding_PyCFunctionType_NewEx(&__pyx_mdef_6_PyXAL_7PySound_8getChannels, NULL, __pyx_n_s___PyXAL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 639; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s__getChannels, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 639; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "_PyXAL.pyx":649
 *         return self._wrapper.getChannels()
 * 
 *     def getSamplingRate(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: int the sampeling rate for the sound in samples per second
 */
  __pyx_t_2 = __pyx_binding_PyCFunctionType_NewEx(&__pyx_mdef_6_PyXAL_7PySound_9getSamplingRate, NULL, __pyx_n_s___PyXAL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 649; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s__getSamplingRate, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 649; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "_PyXAL.pyx":659
 *         return self._wrapper.getSamplingRate()
 * 
 *     def getBitsPerSample(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: int the bits per sample of data in the sound. usualy 8, 16, or 24, possibly 32 not sure
 */
  __pyx_t_2 = __pyx_binding_PyCFunctionType_NewEx(&__pyx_mdef_6_PyXAL_7PySound_10getBitsPerSample, NULL, __pyx_n_s___PyXAL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 659; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s__getBitsPerSample, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 659; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "_PyXAL.pyx":669
 *         return self._wrapper.getBitsPerSample()
 * 
 *     def getDuration(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: float duration of the sound in seconds. it is a floating point number to acound for fractions of a second
 */
  __pyx_t_2 = __pyx_binding_PyCFunctionType_NewEx(&__pyx_mdef_6_PyXAL_7PySound_11getDuration, NULL, __pyx_n_s___PyXAL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 669; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s__getDuration, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 669; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "_PyXAL.pyx":679
 *         return self._wrapper.getDuration()
 * 
 *     def getFormat(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: int the intrnal designation of the sound format. coresponds to a file type but as of now there is no way to tell for certin which is which
 */
  __pyx_t_2 = __pyx_binding_PyCFunctionType_NewEx(&__pyx_mdef_6_PyXAL_7PySound_12getFormat, NULL, __pyx_n_s___PyXAL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 679; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s__getFormat, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 679; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "_PyXAL.pyx":690
 *         return self._wrapper.getFormat()
 * 
 *     def isStreamed(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: bool is the sound being streamed from it's file to the player? or is it comleatly loaded into memory.
 */
  __pyx_t_2 = __pyx_binding_PyCFunctionType_NewEx(&__pyx_mdef_6_PyXAL_7PySound_13isStreamed, NULL, __pyx_n_s___PyXAL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 690; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s__isStreamed, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 690; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "_PyXAL.pyx":701
 *         return self._wrapper.isStreamed()
 * 
 *     def readPcmData(self):             # <<<<<<<<<<<<<<
 *         '''
 *         read the raw data of the sound and return it the format of said data can be determined from the size, chanels, bits per sample and sampleling rate of the sound
 */
  __pyx_t_2 = __pyx_binding_PyCFunctionType_NewEx(&__pyx_mdef_6_PyXAL_7PySound_14readPcmData, NULL, __pyx_n_s___PyXAL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 701; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s__readPcmData, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 701; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "_PyXAL.pyx":549
 * 
 * 
 * class PySound(object):             # <<<<<<<<<<<<<<
 *     '''
 *     a interface for the wrapper of the xal::Sound class
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 549; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  __Pyx_INCREF(__pyx_builtin_object);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_builtin_object);
  __Pyx_GIVEREF(__pyx_builtin_object);
  if (PyDict_SetItemString(((PyObject *)__pyx_t_1), "__doc__", ((PyObject *)__pyx_kp_s_161)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 549; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = __Pyx_CreateClass(((PyObject *)__pyx_t_2), ((PyObject *)__pyx_t_1), __pyx_n_s__PySound, __pyx_n_s___PyXAL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 549; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__PySound, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 549; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;

  /* "_PyXAL.pyx":712
 *         return self._wrapper.readPcmData()
 * 
 * class PyPlayer(object):             # <<<<<<<<<<<<<<
 *     '''
 *     a interface for the C++ wrapper
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 712; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));

  /* "_PyXAL.pyx":717
 *     '''
 * 
 *     _wrapper = None             # <<<<<<<<<<<<<<
 *     _sound = None
 *     destroyed = False
 */
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s___wrapper, Py_None) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 717; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_PyXAL.pyx":718
 * 
 *     _wrapper = None
 *     _sound = None             # <<<<<<<<<<<<<<
 *     destroyed = False
 * 
 */
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s___sound, Py_None) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 718; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_PyXAL.pyx":719
 *     _wrapper = None
 *     _sound = None
 *     destroyed = False             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, sound):
 */
  __pyx_t_3 = __Pyx_PyBool_FromLong(0); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 719; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s__destroyed, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 719; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "_PyXAL.pyx":721
 *     destroyed = False
 * 
 *     def __init__(self, sound):             # <<<<<<<<<<<<<<
 *         '''
 *         a PyPlayer object created by bassing a PySound to the __init__ method
 */
  __pyx_t_3 = __pyx_binding_PyCFunctionType_NewEx(&__pyx_mdef_6_PyXAL_8PyPlayer___init__, NULL, __pyx_n_s___PyXAL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 721; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s____init__, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 721; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "_PyXAL.pyx":742
 *         self._sound = sound
 * 
 *     def _destroy(self):             # <<<<<<<<<<<<<<
 *         if self.isXALInitialized() and not self.destroyed:
 *             self._wrapper._destroy()
 */
  __pyx_t_3 = __pyx_binding_PyCFunctionType_NewEx(&__pyx_mdef_6_PyXAL_8PyPlayer_1_destroy, NULL, __pyx_n_s___PyXAL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 742; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s___destroy, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 742; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "_PyXAL.pyx":747
 *             self.destroyed = True
 * 
 *     def __del__(self):             # <<<<<<<<<<<<<<
 *         global Mgr
 *         if not self.destroyed:
 */
  __pyx_t_3 = __pyx_binding_PyCFunctionType_NewEx(&__pyx_mdef_6_PyXAL_8PyPlayer_2__del__, NULL, __pyx_n_s___PyXAL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 747; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s____del__, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 747; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "_PyXAL.pyx":761
 * 
 * 
 *     def isXALInitialized(self):             # <<<<<<<<<<<<<<
 *         '''
 *         returns true if the C++ side of the interface to XAL exists
 */
  __pyx_t_3 = __pyx_binding_PyCFunctionType_NewEx(&__pyx_mdef_6_PyXAL_8PyPlayer_3isXALInitialized, NULL, __pyx_n_s___PyXAL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 761; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s__isXALInitialized, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 761; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "_PyXAL.pyx":770
 *             return False
 * 
 *     def getGain(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: float the current gain of the player (also knows as volume)
 */
  __pyx_t_3 = __pyx_binding_PyCFunctionType_NewEx(&__pyx_mdef_6_PyXAL_8PyPlayer_4getGain, NULL, __pyx_n_s___PyXAL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 770; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s__getGain, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 770; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "_PyXAL.pyx":780
 *         return self._wrapper.getGain()
 * 
 *     def setGain(self, float value):             # <<<<<<<<<<<<<<
 *         '''
 *         set the gain of the player (also knows as volume)
 */
  __pyx_t_3 = __pyx_binding_PyCFunctionType_NewEx(&__pyx_mdef_6_PyXAL_8PyPlayer_5setGain, NULL, __pyx_n_s___PyXAL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 780; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s__setGain, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 780; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "_PyXAL.pyx":791
 *         self._wrapper.setGain(value)
 * 
 *     def getPitch(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: float the current pitch of the player
 */
  __pyx_t_3 = __pyx_binding_PyCFunctionType_NewEx(&__pyx_mdef_6_PyXAL_8PyPlayer_6getPitch, NULL, __pyx_n_s___PyXAL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 791; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s__getPitch, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 791; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "_PyXAL.pyx":801
 *         return self._wrapper.getPitch()
 * 
 *     def setPitch(self, float value):             # <<<<<<<<<<<<<<
 *         '''
 *         set the current pitch of the player
 */
  __pyx_t_3 = __pyx_binding_PyCFunctionType_NewEx(&__pyx_mdef_6_PyXAL_8PyPlayer_7setPitch, NULL, __pyx_n_s___PyXAL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 801; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s__setPitch, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 801; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "_PyXAL.pyx":812
 *         self._wrapper.setPitch(value)
 * 
 *     def getSound(self):             # <<<<<<<<<<<<<<
 *         '''
 *         return a PySound class wrapper for the sound object of the player
 */
  __pyx_t_3 = __pyx_binding_PyCFunctionType_NewEx(&__pyx_mdef_6_PyXAL_8PyPlayer_8getSound, NULL, __pyx_n_s___PyXAL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 812; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s__getSound, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 812; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "_PyXAL.pyx":818
 *         return self._sound
 * 
 *     def getName(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: returns the string name of the sound. it is normal the full path of teh sound file with out the file extention
 */
  __pyx_t_3 = __pyx_binding_PyCFunctionType_NewEx(&__pyx_mdef_6_PyXAL_8PyPlayer_9getName, NULL, __pyx_n_s___PyXAL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 818; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s__getName, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 818; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "_PyXAL.pyx":828
 *         return self._wrapper.getName()
 * 
 *     def getFilename(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: returns a string containing the file name the sound was loaded from
 */
  __pyx_t_3 = __pyx_binding_PyCFunctionType_NewEx(&__pyx_mdef_6_PyXAL_8PyPlayer_10getFilename, NULL, __pyx_n_s___PyXAL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 828; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s__getFilename, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 828; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "_PyXAL.pyx":838
 *         return self._wrapper.getFilename()
 * 
 *     def getRealFilename(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: returns a string with the full path to the file the string was loaded from
 */
  __pyx_t_3 = __pyx_binding_PyCFunctionType_NewEx(&__pyx_mdef_6_PyXAL_8PyPlayer_11getRealFilename, NULL, __pyx_n_s___PyXAL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 838; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s__getRealFilename, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 838; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "_PyXAL.pyx":848
 *         return self._wrapper.getRealFilename()
 * 
 *     def getDuration(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: float duration of the sound in seconds. it is a floating point number to acound for fractions of a second
 */
  __pyx_t_3 = __pyx_binding_PyCFunctionType_NewEx(&__pyx_mdef_6_PyXAL_8PyPlayer_12getDuration, NULL, __pyx_n_s___PyXAL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 848; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s__getDuration, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 848; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "_PyXAL.pyx":858
 *         return self._wrapper.getDuration()
 * 
 *     def getSize(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: int the size of the sound data in bits not bytes
 */
  __pyx_t_3 = __pyx_binding_PyCFunctionType_NewEx(&__pyx_mdef_6_PyXAL_8PyPlayer_13getSize, NULL, __pyx_n_s___PyXAL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 858; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s__getSize, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 858; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "_PyXAL.pyx":868
 *         return self._wrapper.getSize()
 * 
 *     def getTimePosition(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: float the time position in seconds
 */
  __pyx_t_3 = __pyx_binding_PyCFunctionType_NewEx(&__pyx_mdef_6_PyXAL_8PyPlayer_14getTimePosition, NULL, __pyx_n_s___PyXAL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 868; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s__getTimePosition, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 868; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "_PyXAL.pyx":878
 *         return self._wrapper.getTimePosition()
 * 
 *     def getSamplePosition(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: unsigned int the position in the buffer
 */
  __pyx_t_3 = __pyx_binding_PyCFunctionType_NewEx(&__pyx_mdef_6_PyXAL_8PyPlayer_15getSamplePosition, NULL, __pyx_n_s___PyXAL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 878; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s__getSamplePosition, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 878; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "_PyXAL.pyx":888
 *         return self._wrapper.getSamplePosition()
 * 
 *     def isPlaying(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: bool True of the sound is playing
 */
  __pyx_t_3 = __pyx_binding_PyCFunctionType_NewEx(&__pyx_mdef_6_PyXAL_8PyPlayer_16isPlaying, NULL, __pyx_n_s___PyXAL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 888; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s__isPlaying, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 888; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "_PyXAL.pyx":898
 *         return self._wrapper.isPlaying()
 * 
 *     def isPaused(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: bool True if the sound is paused
 */
  __pyx_t_3 = __pyx_binding_PyCFunctionType_NewEx(&__pyx_mdef_6_PyXAL_8PyPlayer_17isPaused, NULL, __pyx_n_s___PyXAL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 898; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s__isPaused, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 898; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "_PyXAL.pyx":908
 *         return self._wrapper.isPaused()
 * 
 *     def isFading(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: bool True if the sound is fading in or out
 */
  __pyx_t_3 = __pyx_binding_PyCFunctionType_NewEx(&__pyx_mdef_6_PyXAL_8PyPlayer_18isFading, NULL, __pyx_n_s___PyXAL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 908; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s__isFading, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 908; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "_PyXAL.pyx":918
 *         return self._wrapper.isFading()
 * 
 *     def isFadingIn(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: bool True if the sound is fading in
 */
  __pyx_t_3 = __pyx_binding_PyCFunctionType_NewEx(&__pyx_mdef_6_PyXAL_8PyPlayer_19isFadingIn, NULL, __pyx_n_s___PyXAL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 918; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s__isFadingIn, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 918; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "_PyXAL.pyx":928
 *         return self._wrapper.isFadingIn()
 * 
 *     def isFadingOut(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: bool True if teh sound is fading out
 */
  __pyx_t_3 = __pyx_binding_PyCFunctionType_NewEx(&__pyx_mdef_6_PyXAL_8PyPlayer_20isFadingOut, NULL, __pyx_n_s___PyXAL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 928; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s__isFadingOut, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 928; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "_PyXAL.pyx":938
 *         return self._wrapper.isFadingOut()
 * 
 *     def isLooping(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: bool True of the sound is looping
 */
  __pyx_t_3 = __pyx_binding_PyCFunctionType_NewEx(&__pyx_mdef_6_PyXAL_8PyPlayer_21isLooping, NULL, __pyx_n_s___PyXAL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 938; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s__isLooping, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 938; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "_PyXAL.pyx":948
 *         return self._wrapper.isLooping()
 * 
 *     def play(self, float fadeTime = 0.0, bool looping = False):             # <<<<<<<<<<<<<<
 *         '''
 *         start the sound playing at it's current offset, the offset starts at 0.0 when teh sound is first loaded
 */
  __pyx_t_3 = __pyx_binding_PyCFunctionType_NewEx(&__pyx_mdef_6_PyXAL_8PyPlayer_22play, NULL, __pyx_n_s___PyXAL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 948; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s__play, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 948; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "_PyXAL.pyx":961
 *         self._wrapper.play(fadeTime, looping)
 * 
 *     def stop(self, float fadeTime = 0.0):             # <<<<<<<<<<<<<<
 *         '''
 *         stop the sound playing and rest set it's offset to 0.0
 */
  __pyx_t_3 = __pyx_binding_PyCFunctionType_NewEx(&__pyx_mdef_6_PyXAL_8PyPlayer_23stop, NULL, __pyx_n_s___PyXAL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 961; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s__stop, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 961; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "_PyXAL.pyx":973
 *         self._wrapper.stop(fadeTime)
 * 
 *     def pause(self, float fadeTime = 0.0):             # <<<<<<<<<<<<<<
 *         '''
 *         stop the sound playing keeping the current offset of the sound
 */
  __pyx_t_3 = __pyx_binding_PyCFunctionType_NewEx(&__pyx_mdef_6_PyXAL_8PyPlayer_24pause, NULL, __pyx_n_s___PyXAL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 973; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s__pause, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 973; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "_PyXAL.pyx":712
 *         return self._wrapper.readPcmData()
 * 
 * class PyPlayer(object):             # <<<<<<<<<<<<<<
 *     '''
 *     a interface for the C++ wrapper
 */
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 712; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_3));
  __Pyx_INCREF(__pyx_builtin_object);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_builtin_object);
  __Pyx_GIVEREF(__pyx_builtin_object);
  if (PyDict_SetItemString(((PyObject *)__pyx_t_1), "__doc__", ((PyObject *)__pyx_kp_s_162)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 712; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_CreateClass(((PyObject *)__pyx_t_3), ((PyObject *)__pyx_t_1), __pyx_n_s__PyPlayer, __pyx_n_s___PyXAL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 712; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__PyPlayer, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 712; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;

  /* "_PyXAL.pyx":1049
 *             XAL.destroy()
 * 
 * class XALManager(object):             # <<<<<<<<<<<<<<
 *     '''
 *     a wrapper for the xal::mgr object which is a xal::AudioManager. in other words this is the main interface to XAL you SHOLD NOT create an instance of the class yourself.
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1049; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));

  /* "_PyXAL.pyx":1055
 *     '''
 * 
 *     destroyed = False             # <<<<<<<<<<<<<<
 *     inited = False
 * 
 */
  __pyx_t_2 = __Pyx_PyBool_FromLong(0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1055; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s__destroyed, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1055; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "_PyXAL.pyx":1056
 * 
 *     destroyed = False
 *     inited = False             # <<<<<<<<<<<<<<
 * 
 *     CATEGORY_STR = "default"
 */
  __pyx_t_2 = __Pyx_PyBool_FromLong(0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1056; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s__inited, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1056; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "_PyXAL.pyx":1058
 *     inited = False
 * 
 *     CATEGORY_STR = "default"             # <<<<<<<<<<<<<<
 * 
 *     _players = {}
 */
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s__CATEGORY_STR, ((PyObject *)__pyx_n_s__default)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1058; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_PyXAL.pyx":1060
 *     CATEGORY_STR = "default"
 * 
 *     _players = {}             # <<<<<<<<<<<<<<
 *     _wrapper = None
 * 
 */
  __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1060; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s___players, ((PyObject *)__pyx_t_2)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1060; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;

  /* "_PyXAL.pyx":1061
 * 
 *     _players = {}
 *     _wrapper = None             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, int backendId, bint threaded = False):
 */
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s___wrapper, Py_None) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1061; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_PyXAL.pyx":1063
 *     _wrapper = None
 * 
 *     def __init__(self, int backendId, bint threaded = False):             # <<<<<<<<<<<<<<
 *         '''
 *         sets up the interface and initializes XAL you SHOULD NOT BE CREATING THIS CLASS YOUR SELF call PyXAL.Init and use the object created at PyXAL.Mgr
 */
  __pyx_t_2 = __pyx_binding_PyCFunctionType_NewEx(&__pyx_mdef_6_PyXAL_10XALManager___init__, NULL, __pyx_n_s___PyXAL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1063; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s____init__, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1063; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "_PyXAL.pyx":1078
 *         self._players = {}
 * 
 *     def isXALInitialized(self):             # <<<<<<<<<<<<<<
 *         '''
 *         returns true if the C++ side of the interface to XAL exists
 */
  __pyx_t_2 = __pyx_binding_PyCFunctionType_NewEx(&__pyx_mdef_6_PyXAL_10XALManager_1isXALInitialized, NULL, __pyx_n_s___PyXAL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1078; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s__isXALInitialized, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1078; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "_PyXAL.pyx":1087
 *             return False
 * 
 *     def __del__(self):             # <<<<<<<<<<<<<<
 *         '''
 *         make sure XAL is destroyed if the interface is destroyed
 */
  __pyx_t_2 = __pyx_binding_PyCFunctionType_NewEx(&__pyx_mdef_6_PyXAL_10XALManager_2__del__, NULL, __pyx_n_s___PyXAL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1087; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s____del__, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1087; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "_PyXAL.pyx":1094
 *         del self._wrapper
 * 
 *     def clear(self):             # <<<<<<<<<<<<<<
 *         '''
 *         clear the XAL interface and reset it to be like it was freshly initialized all current sounds and players become invalid
 */
  __pyx_t_2 = __pyx_binding_PyCFunctionType_NewEx(&__pyx_mdef_6_PyXAL_10XALManager_3clear, NULL, __pyx_n_s___PyXAL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1094; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s__clear, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1094; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "_PyXAL.pyx":1104
 *             XAL.mgr.clear()
 * 
 *     def createSound(self, bytes filename):             # <<<<<<<<<<<<<<
 *         '''
 *         create a sound object
 */
  __pyx_t_2 = __pyx_binding_PyCFunctionType_NewEx(&__pyx_mdef_6_PyXAL_10XALManager_4createSound, NULL, __pyx_n_s___PyXAL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1104; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s__createSound, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1104; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "_PyXAL.pyx":1117
 *         return pysound
 * 
 *     def createPlayer(self, sound):             # <<<<<<<<<<<<<<
 *         '''
 *         create a player from a sound object
 */
  __pyx_t_2 = __pyx_binding_PyCFunctionType_NewEx(&__pyx_mdef_6_PyXAL_10XALManager_5createPlayer, NULL, __pyx_n_s___PyXAL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1117; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s__createPlayer, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1117; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "_PyXAL.pyx":1136
 *         return pyplayer
 * 
 *     def destroyPlayer(self, player):             # <<<<<<<<<<<<<<
 *         '''
 *         destroy a player object
 */
  __pyx_t_2 = __pyx_binding_PyCFunctionType_NewEx(&__pyx_mdef_6_PyXAL_10XALManager_6destroyPlayer, NULL, __pyx_n_s___PyXAL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1136; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s__destroyPlayer, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1136; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "_PyXAL.pyx":1153
 *         player._destroy()
 * 
 *     def destroySound(self, sound):             # <<<<<<<<<<<<<<
 *         '''
 *         destroy a sound object
 */
  __pyx_t_2 = __pyx_binding_PyCFunctionType_NewEx(&__pyx_mdef_6_PyXAL_10XALManager_7destroySound, NULL, __pyx_n_s___PyXAL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1153; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s__destroySound, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1153; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "_PyXAL.pyx":1166
 *         sound._destroy()
 * 
 *     def findPlayer(self, str name):             # <<<<<<<<<<<<<<
 *         '''
 *         tries to find a player for the sound whos name is passed. it find the player useing the intrealy kept list of wrpaed player instances. returns the first player in the list
 */
  __pyx_t_2 = __pyx_binding_PyCFunctionType_NewEx(&__pyx_mdef_6_PyXAL_10XALManager_8findPlayer, NULL, __pyx_n_s___PyXAL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1166; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s__findPlayer, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1166; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "_PyXAL.pyx":1180
 *         return None
 * 
 *     def play(self, bytes name, float fadeTime = 0.0, bool looping = False, float gain = 1.0):             # <<<<<<<<<<<<<<
 *         '''
 *         play the sound identified by the name passed (it must of alrady been created)
 */
  __pyx_t_2 = __pyx_binding_PyCFunctionType_NewEx(&__pyx_mdef_6_PyXAL_10XALManager_9play, NULL, __pyx_n_s___PyXAL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1180; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s__play, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1180; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "_PyXAL.pyx":1195
 *         XAL.mgr.play(hl_name, fadeTime, looping, gain)
 * 
 *     def stop(self, bytes name, float fadeTime = 0.0):             # <<<<<<<<<<<<<<
 *         '''
 *         stop playing the sound identifed by the name passed
 */
  __pyx_t_2 = __pyx_binding_PyCFunctionType_NewEx(&__pyx_mdef_6_PyXAL_10XALManager_10stop, NULL, __pyx_n_s___PyXAL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1195; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s__stop, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1195; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "_PyXAL.pyx":1208
 *         XAL.mgr.stop(hl_name, fadeTime)
 * 
 *     def stopFirst(self, bytes name, float fadeTime = 0.0):             # <<<<<<<<<<<<<<
 *         '''
 *         stop playing the first player of the sound identifed by the name passed
 */
  __pyx_t_2 = __pyx_binding_PyCFunctionType_NewEx(&__pyx_mdef_6_PyXAL_10XALManager_11stopFirst, NULL, __pyx_n_s___PyXAL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1208; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s__stopFirst, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1208; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "_PyXAL.pyx":1221
 *         XAL.mgr.stopFirst(hl_name, fadeTime)
 * 
 *     def stopAll(self, float fadeTime = 0.0):             # <<<<<<<<<<<<<<
 *         '''
 *         stop playing the all players of the sound identifed by the name passed
 */
  __pyx_t_2 = __pyx_binding_PyCFunctionType_NewEx(&__pyx_mdef_6_PyXAL_10XALManager_12stopAll, NULL, __pyx_n_s___PyXAL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1221; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s__stopAll, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1221; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "_PyXAL.pyx":1232
 *         XAL.mgr.stopAll(fadeTime)
 * 
 *     def isAnyPlaying(self, bytes name):             # <<<<<<<<<<<<<<
 *         '''
 *         @param name: sting name of sound to check
 */
  __pyx_t_2 = __pyx_binding_PyCFunctionType_NewEx(&__pyx_mdef_6_PyXAL_10XALManager_13isAnyPlaying, NULL, __pyx_n_s___PyXAL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1232; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s__isAnyPlaying, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1232; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "_PyXAL.pyx":1244
 *         return result
 * 
 *     def isAnyFading(self, bytes name):             # <<<<<<<<<<<<<<
 *         '''
 *         @param name: sting name of sound to check
 */
  __pyx_t_2 = __pyx_binding_PyCFunctionType_NewEx(&__pyx_mdef_6_PyXAL_10XALManager_14isAnyFading, NULL, __pyx_n_s___PyXAL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1244; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s__isAnyFading, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1244; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "_PyXAL.pyx":1256
 *         return result
 * 
 *     def isAnyFadingIn(self, bytes name):             # <<<<<<<<<<<<<<
 *         '''
 *         @param name: sting name of sound to check
 */
  __pyx_t_2 = __pyx_binding_PyCFunctionType_NewEx(&__pyx_mdef_6_PyXAL_10XALManager_15isAnyFadingIn, NULL, __pyx_n_s___PyXAL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1256; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s__isAnyFadingIn, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1256; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "_PyXAL.pyx":1268
 *         return result
 * 
 *     def isAnyFadingOut(self, bytes name):             # <<<<<<<<<<<<<<
 *         '''
 *         @param name: sting name of sound to check
 */
  __pyx_t_2 = __pyx_binding_PyCFunctionType_NewEx(&__pyx_mdef_6_PyXAL_10XALManager_16isAnyFadingOut, NULL, __pyx_n_s___PyXAL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1268; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s__isAnyFadingOut, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1268; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "_PyXAL.pyx":1280
 *         return result
 * 
 *     def suspendAudio(self):             # <<<<<<<<<<<<<<
 *         '''
 *         pause all sounds and players
 */
  __pyx_t_2 = __pyx_binding_PyCFunctionType_NewEx(&__pyx_mdef_6_PyXAL_10XALManager_17suspendAudio, NULL, __pyx_n_s___PyXAL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1280; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s__suspendAudio, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1280; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "_PyXAL.pyx":1290
 *         XAL.mgr.suspendAudio()
 * 
 *     def resumeAudio(self):             # <<<<<<<<<<<<<<
 *         '''
 *         resume all sounds and players
 */
  __pyx_t_2 = __pyx_binding_PyCFunctionType_NewEx(&__pyx_mdef_6_PyXAL_10XALManager_18resumeAudio, NULL, __pyx_n_s___PyXAL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1290; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s__resumeAudio, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1290; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "_PyXAL.pyx":1049
 *             XAL.destroy()
 * 
 * class XALManager(object):             # <<<<<<<<<<<<<<
 *     '''
 *     a wrapper for the xal::mgr object which is a xal::AudioManager. in other words this is the main interface to XAL you SHOLD NOT create an instance of the class yourself.
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1049; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  __Pyx_INCREF(__pyx_builtin_object);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_builtin_object);
  __Pyx_GIVEREF(__pyx_builtin_object);
  if (PyDict_SetItemString(((PyObject *)__pyx_t_1), "__doc__", ((PyObject *)__pyx_kp_s_163)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1049; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = __Pyx_CreateClass(((PyObject *)__pyx_t_2), ((PyObject *)__pyx_t_1), __pyx_n_s__XALManager, __pyx_n_s___PyXAL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1049; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__XALManager, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1049; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;

  /* "_PyXAL.pyx":1300
 *         XAL.mgr.resumeAudio()
 * 
 * def Init(int backendId, bint threaded = True):             # <<<<<<<<<<<<<<
 *     '''
 *     Setup XAL and create an XALManager interface at PyXAL.Mgr
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6_PyXAL_2Init, NULL, __pyx_n_s___PyXAL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1300; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__Init, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1300; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "_PyXAL.pyx":1315
 *         Mgr = XALManager(backendId, threaded)
 * 
 * def Destroy():             # <<<<<<<<<<<<<<
 *     '''
 *     Destroy XAL and remove the interface at PyXAL setting it to None
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6_PyXAL_3Destroy, NULL, __pyx_n_s___PyXAL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1315; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__Destroy, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1315; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "_PyXAL.pyx":1
 * from cython.operator cimport dereference as deref             # <<<<<<<<<<<<<<
 * from libc.stdlib cimport free
 * from libcpp cimport bool
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s____test__, ((PyObject *)__pyx_t_1)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  if (__pyx_m) {
    __Pyx_AddTraceback("init _PyXAL", __pyx_clineno, __pyx_lineno, __pyx_filename);
    Py_DECREF(__pyx_m); __pyx_m = 0;
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init _PyXAL");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if PY_MAJOR_VERSION < 3
  return;
  #else
  return __pyx_m;
  #endif
}

/* Runtime support code */

#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule((char *)modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif /* CYTHON_REFNANNY */

static PyObject *__Pyx_GetName(PyObject *dict, PyObject *name) {
    PyObject *result;
    result = PyObject_GetAttr(dict, name);
    if (!result) {
        if (dict != __pyx_b) {
            PyErr_Clear();
            result = PyObject_GetAttr(__pyx_b, name);
        }
        if (!result) {
            PyErr_SetObject(PyExc_NameError, name);
        }
    }
    return result;
}

static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *local_type, *local_value, *local_tb;
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyThreadState *tstate = PyThreadState_GET();
    local_type = tstate->curexc_type;
    local_value = tstate->curexc_value;
    local_tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
    PyErr_NormalizeException(&local_type, &local_value, &local_tb);
    if (unlikely(tstate->curexc_type))
        goto bad;
    #if PY_MAJOR_VERSION >= 3
    if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
        goto bad;
    #endif
    *type = local_type;
    *value = local_value;
    *tb = local_tb;
    Py_INCREF(local_type);
    Py_INCREF(local_value);
    Py_INCREF(local_tb);
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = local_type;
    tstate->exc_value = local_value;
    tstate->exc_traceback = local_tb;
    /* Make sure tstate is in a consistent state when we XDECREF
       these objects (XDECREF may run arbitrary code). */
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
    return 0;
bad:
    *type = 0;
    *value = 0;
    *tb = 0;
    Py_XDECREF(local_type);
    Py_XDECREF(local_value);
    Py_XDECREF(local_tb);
    return -1;
}


static int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact)
{
    if (!type) {
        PyErr_Format(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (none_allowed && obj == Py_None) return 1;
    else if (exact) {
        if (Py_TYPE(obj) == type) return 1;
    }
    else {
        if (PyObject_TypeCheck(obj, type)) return 1;
    }
    PyErr_Format(PyExc_TypeError,
        "Argument '%s' has incorrect type (expected %s, got %s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
    return 0;
}

static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AS_STRING(kw_name));
        #endif
}

static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;

    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
        } else {
            #if PY_MAJOR_VERSION < 3
            if (unlikely(!PyString_CheckExact(key)) && unlikely(!PyString_Check(key))) {
            #else
            if (unlikely(!PyUnicode_CheckExact(key)) && unlikely(!PyUnicode_Check(key))) {
            #endif
                goto invalid_keyword_type;
            } else {
                for (name = first_kw_arg; *name; name++) {
                    #if PY_MAJOR_VERSION >= 3
                    if (PyUnicode_GET_SIZE(**name) == PyUnicode_GET_SIZE(key) &&
                        PyUnicode_Compare(**name, key) == 0) break;
                    #else
                    if (PyString_GET_SIZE(**name) == PyString_GET_SIZE(key) &&
                        _PyString_Eq(**name, key)) break;
                    #endif
                }
                if (*name) {
                    values[name-argnames] = value;
                } else {
                    /* unexpected keyword found */
                    for (name=argnames; name != first_kw_arg; name++) {
                        if (**name == key) goto arg_passed_twice;
                        #if PY_MAJOR_VERSION >= 3
                        if (PyUnicode_GET_SIZE(**name) == PyUnicode_GET_SIZE(key) &&
                            PyUnicode_Compare(**name, key) == 0) goto arg_passed_twice;
                        #else
                        if (PyString_GET_SIZE(**name) == PyString_GET_SIZE(key) &&
                            _PyString_Eq(**name, key)) goto arg_passed_twice;
                        #endif
                    }
                    if (kwds2) {
                        if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
                    } else {
                        goto invalid_keyword;
                    }
                }
            }
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, **name);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%s() got an unexpected keyword argument '%s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;

    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%s() takes %s %"PY_FORMAT_SIZE_T"d positional argument%s (%"PY_FORMAT_SIZE_T"d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

static CYTHON_INLINE int __Pyx_CheckKeywordStrings(
    PyObject *kwdict,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
    while (PyDict_Next(kwdict, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_CheckExact(key)) && unlikely(!PyString_Check(key)))
        #else
        if (unlikely(!PyUnicode_CheckExact(key)) && unlikely(!PyUnicode_Check(key)))
        #endif
            goto invalid_keyword_type;
    }
    if ((!kw_allowed) && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%s() keywords must be strings", function_name);
    return 0;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%s() got an unexpected keyword argument '%s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}

static CYTHON_INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyThreadState *tstate = PyThreadState_GET();

    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}

static CYTHON_INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb) {
    PyThreadState *tstate = PyThreadState_GET();
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;

    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}


#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    /* cause is unused */
    Py_XINCREF(type);
    Py_XINCREF(value);
    Py_XINCREF(tb);
    /* First, check the traceback argument, replacing None with NULL. */
    if (tb == Py_None) {
        Py_DECREF(tb);
        tb = 0;
    }
    else if (tb != NULL && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto raise_error;
    }
    /* Next, replace a missing value with None */
    if (value == NULL) {
        value = Py_None;
        Py_INCREF(value);
    }
    #if PY_VERSION_HEX < 0x02050000
    if (!PyClass_Check(type))
    #else
    if (!PyType_Check(type))
    #endif
    {
        /* Raising an instance.  The value should be a dummy. */
        if (value != Py_None) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        /* Normalize to raise <class>, <instance> */
        Py_DECREF(value);
        value = type;
        #if PY_VERSION_HEX < 0x02050000
            if (PyInstance_Check(type)) {
                type = (PyObject*) ((PyInstanceObject*)type)->in_class;
                Py_INCREF(type);
            }
            else {
                type = 0;
                PyErr_SetString(PyExc_TypeError,
                    "raise: exception must be an old-style class or instance");
                goto raise_error;
            }
        #else
            type = (PyObject*) Py_TYPE(type);
            Py_INCREF(type);
            if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
                PyErr_SetString(PyExc_TypeError,
                    "raise: exception class must be a subclass of BaseException");
                goto raise_error;
            }
        #endif
    }

    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}

#else /* Python 3+ */

static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;

    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (!PyExceptionClass_Check(type)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }

    if (cause) {
        PyObject *fixed_cause;
        if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        }
        else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        }
        else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        if (!value) {
            value = PyObject_CallObject(type, NULL);
        }
        PyException_SetCause(value, fixed_cause);
    }

    PyErr_SetObject(type, value);

    if (tb) {
        PyThreadState *tstate = PyThreadState_GET();
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
    }

bad:
    return;
}
#endif


static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    if (unlikely(!type)) {
        PyErr_Format(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(PyObject_TypeCheck(obj, type)))
        return 1;
    PyErr_Format(PyExc_TypeError, "Cannot convert %.200s to %.200s",
                 Py_TYPE(obj)->tp_name, type->tp_name);
    return 0;
}

static CYTHON_INLINE void __Pyx_ExceptionSave(PyObject **type, PyObject **value, PyObject **tb) {
    PyThreadState *tstate = PyThreadState_GET();
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
}

static void __Pyx_ExceptionReset(PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyThreadState *tstate = PyThreadState_GET();
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}

static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, long level) {
    PyObject *py_import = 0;
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    py_import = __Pyx_GetAttrString(__pyx_b, "__import__");
    if (!py_import)
        goto bad;
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    #if PY_VERSION_HEX >= 0x02050000
    {
        PyObject *py_level = PyInt_FromLong(level);
        if (!py_level)
            goto bad;
        module = PyObject_CallFunctionObjArgs(py_import,
            name, global_dict, empty_dict, list, py_level, NULL);
        Py_DECREF(py_level);
    }
    #else
    if (level>0) {
        PyErr_SetString(PyExc_RuntimeError, "Relative import is not supported for Python <=2.4.");
        goto bad;
    }
    module = PyObject_CallFunctionObjArgs(py_import,
        name, global_dict, empty_dict, list, NULL);
    #endif
bad:
    Py_XDECREF(empty_list);
    Py_XDECREF(py_import);
    Py_XDECREF(empty_dict);
    return module;
}

static PyObject *__Pyx_FindPy2Metaclass(PyObject *bases) {
    PyObject *metaclass;
    /* Default metaclass */
#if PY_MAJOR_VERSION < 3
    if (PyTuple_Check(bases) && PyTuple_GET_SIZE(bases) > 0) {
        PyObject *base = PyTuple_GET_ITEM(bases, 0);
        metaclass = PyObject_GetAttrString(base, (char *)"__class__");
        if (!metaclass) {
            PyErr_Clear();
            metaclass = (PyObject*) Py_TYPE(base);
        }
    } else {
        metaclass = (PyObject *) &PyClass_Type;
    }
#else
    if (PyTuple_Check(bases) && PyTuple_GET_SIZE(bases) > 0) {
        PyObject *base = PyTuple_GET_ITEM(bases, 0);
        metaclass = (PyObject*) Py_TYPE(base);
    } else {
        metaclass = (PyObject *) &PyType_Type;
    }
#endif
    Py_INCREF(metaclass);
    return metaclass;
}

static PyObject *__Pyx_CreateClass(PyObject *bases, PyObject *dict, PyObject *name,
                                   PyObject *modname) {
    PyObject *result;
    PyObject *metaclass;

    if (PyDict_SetItemString(dict, "__module__", modname) < 0)
        return NULL;

    /* Python2 __metaclass__ */
    metaclass = PyDict_GetItemString(dict, "__metaclass__");
    if (metaclass) {
        Py_INCREF(metaclass);
    } else {
        metaclass = __Pyx_FindPy2Metaclass(bases);
    }
    result = PyObject_CallFunctionObjArgs(metaclass, name, bases, dict, NULL);
    Py_DECREF(metaclass);
    return result;
}


static PyObject *__pyx_binding_PyCFunctionType_NewEx(PyMethodDef *ml, PyObject *self, PyObject *module) {
    __pyx_binding_PyCFunctionType_object *op = PyObject_GC_New(__pyx_binding_PyCFunctionType_object, __pyx_binding_PyCFunctionType);
    if (op == NULL)
        return NULL;
    op->func.m_ml = ml;
    Py_XINCREF(self);
    op->func.m_self = self;
    Py_XINCREF(module);
    op->func.m_module = module;
    PyObject_GC_Track(op);
    return (PyObject *)op;
}

static void __pyx_binding_PyCFunctionType_dealloc(__pyx_binding_PyCFunctionType_object *m) {
    PyObject_GC_UnTrack(m);
    Py_XDECREF(m->func.m_self);
    Py_XDECREF(m->func.m_module);
    PyObject_GC_Del(m);
}

static PyObject *__pyx_binding_PyCFunctionType_descr_get(PyObject *func, PyObject *obj, PyObject *type) {
    if (obj == Py_None)
            obj = NULL;
    return PyMethod_New(func, obj, type);
}

static int __pyx_binding_PyCFunctionType_init(void) {
    __pyx_binding_PyCFunctionType_type = PyCFunction_Type;
    __pyx_binding_PyCFunctionType_type.tp_name = __Pyx_NAMESTR("cython_binding_builtin_function_or_method");
    __pyx_binding_PyCFunctionType_type.tp_dealloc = (destructor)__pyx_binding_PyCFunctionType_dealloc;
    __pyx_binding_PyCFunctionType_type.tp_descr_get = __pyx_binding_PyCFunctionType_descr_get;
    if (PyType_Ready(&__pyx_binding_PyCFunctionType_type) < 0) {
        return -1;
    }
    __pyx_binding_PyCFunctionType = &__pyx_binding_PyCFunctionType_type;
    return 0;

}

static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals) {
    if (s1 == s2) {   /* as done by PyObject_RichCompareBool(); also catches the (interned) empty string */
        return (equals == Py_EQ);
    } else if (PyBytes_CheckExact(s1) & PyBytes_CheckExact(s2)) {
        if (PyBytes_GET_SIZE(s1) != PyBytes_GET_SIZE(s2)) {
            return (equals == Py_NE);
        } else if (PyBytes_GET_SIZE(s1) == 1) {
            if (equals == Py_EQ)
                return (PyBytes_AS_STRING(s1)[0] == PyBytes_AS_STRING(s2)[0]);
            else
                return (PyBytes_AS_STRING(s1)[0] != PyBytes_AS_STRING(s2)[0]);
        } else {
            int result = memcmp(PyBytes_AS_STRING(s1), PyBytes_AS_STRING(s2), (size_t)PyBytes_GET_SIZE(s1));
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & PyBytes_CheckExact(s2)) {
        return (equals == Py_NE);
    } else if ((s2 == Py_None) & PyBytes_CheckExact(s1)) {
        return (equals == Py_NE);
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
}

static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals) {
    if (s1 == s2) {   /* as done by PyObject_RichCompareBool(); also catches the (interned) empty string */
        return (equals == Py_EQ);
    } else if (PyUnicode_CheckExact(s1) & PyUnicode_CheckExact(s2)) {
        if (PyUnicode_GET_SIZE(s1) != PyUnicode_GET_SIZE(s2)) {
            return (equals == Py_NE);
        } else if (PyUnicode_GET_SIZE(s1) == 1) {
            if (equals == Py_EQ)
                return (PyUnicode_AS_UNICODE(s1)[0] == PyUnicode_AS_UNICODE(s2)[0]);
            else
                return (PyUnicode_AS_UNICODE(s1)[0] != PyUnicode_AS_UNICODE(s2)[0]);
        } else {
            int result = PyUnicode_Compare(s1, s2);
            if ((result == -1) && unlikely(PyErr_Occurred()))
                return -1;
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & PyUnicode_CheckExact(s2)) {
        return (equals == Py_NE);
    } else if ((s2 == Py_None) & PyUnicode_CheckExact(s1)) {
        return (equals == Py_NE);
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
}

static CYTHON_INLINE unsigned char __Pyx_PyInt_AsUnsignedChar(PyObject* x) {
    const unsigned char neg_one = (unsigned char)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(unsigned char) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(unsigned char)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to unsigned char" :
                    "value too large to convert to unsigned char");
            }
            return (unsigned char)-1;
        }
        return (unsigned char)val;
    }
    return (unsigned char)__Pyx_PyInt_AsUnsignedLong(x);
}

static CYTHON_INLINE unsigned short __Pyx_PyInt_AsUnsignedShort(PyObject* x) {
    const unsigned short neg_one = (unsigned short)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(unsigned short) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(unsigned short)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to unsigned short" :
                    "value too large to convert to unsigned short");
            }
            return (unsigned short)-1;
        }
        return (unsigned short)val;
    }
    return (unsigned short)__Pyx_PyInt_AsUnsignedLong(x);
}

static CYTHON_INLINE unsigned int __Pyx_PyInt_AsUnsignedInt(PyObject* x) {
    const unsigned int neg_one = (unsigned int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(unsigned int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(unsigned int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to unsigned int" :
                    "value too large to convert to unsigned int");
            }
            return (unsigned int)-1;
        }
        return (unsigned int)val;
    }
    return (unsigned int)__Pyx_PyInt_AsUnsignedLong(x);
}

static CYTHON_INLINE char __Pyx_PyInt_AsChar(PyObject* x) {
    const char neg_one = (char)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(char) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(char)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to char" :
                    "value too large to convert to char");
            }
            return (char)-1;
        }
        return (char)val;
    }
    return (char)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE short __Pyx_PyInt_AsShort(PyObject* x) {
    const short neg_one = (short)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(short) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(short)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to short" :
                    "value too large to convert to short");
            }
            return (short)-1;
        }
        return (short)val;
    }
    return (short)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE int __Pyx_PyInt_AsInt(PyObject* x) {
    const int neg_one = (int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to int" :
                    "value too large to convert to int");
            }
            return (int)-1;
        }
        return (int)val;
    }
    return (int)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE signed char __Pyx_PyInt_AsSignedChar(PyObject* x) {
    const signed char neg_one = (signed char)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(signed char) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(signed char)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to signed char" :
                    "value too large to convert to signed char");
            }
            return (signed char)-1;
        }
        return (signed char)val;
    }
    return (signed char)__Pyx_PyInt_AsSignedLong(x);
}

static CYTHON_INLINE signed short __Pyx_PyInt_AsSignedShort(PyObject* x) {
    const signed short neg_one = (signed short)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(signed short) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(signed short)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to signed short" :
                    "value too large to convert to signed short");
            }
            return (signed short)-1;
        }
        return (signed short)val;
    }
    return (signed short)__Pyx_PyInt_AsSignedLong(x);
}

static CYTHON_INLINE signed int __Pyx_PyInt_AsSignedInt(PyObject* x) {
    const signed int neg_one = (signed int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(signed int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(signed int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to signed int" :
                    "value too large to convert to signed int");
            }
            return (signed int)-1;
        }
        return (signed int)val;
    }
    return (signed int)__Pyx_PyInt_AsSignedLong(x);
}

static CYTHON_INLINE int __Pyx_PyInt_AsLongDouble(PyObject* x) {
    const int neg_one = (int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to int" :
                    "value too large to convert to int");
            }
            return (int)-1;
        }
        return (int)val;
    }
    return (int)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE unsigned long __Pyx_PyInt_AsUnsignedLong(PyObject* x) {
    const unsigned long neg_one = (unsigned long)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to unsigned long");
            return (unsigned long)-1;
        }
        return (unsigned long)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to unsigned long");
                return (unsigned long)-1;
            }
            return (unsigned long)PyLong_AsUnsignedLong(x);
        } else {
            return (unsigned long)PyLong_AsLong(x);
        }
    } else {
        unsigned long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (unsigned long)-1;
        val = __Pyx_PyInt_AsUnsignedLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE unsigned PY_LONG_LONG __Pyx_PyInt_AsUnsignedLongLong(PyObject* x) {
    const unsigned PY_LONG_LONG neg_one = (unsigned PY_LONG_LONG)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to unsigned PY_LONG_LONG");
            return (unsigned PY_LONG_LONG)-1;
        }
        return (unsigned PY_LONG_LONG)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to unsigned PY_LONG_LONG");
                return (unsigned PY_LONG_LONG)-1;
            }
            return (unsigned PY_LONG_LONG)PyLong_AsUnsignedLongLong(x);
        } else {
            return (unsigned PY_LONG_LONG)PyLong_AsLongLong(x);
        }
    } else {
        unsigned PY_LONG_LONG val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (unsigned PY_LONG_LONG)-1;
        val = __Pyx_PyInt_AsUnsignedLongLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE long __Pyx_PyInt_AsLong(PyObject* x) {
    const long neg_one = (long)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to long");
            return (long)-1;
        }
        return (long)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to long");
                return (long)-1;
            }
            return (long)PyLong_AsUnsignedLong(x);
        } else {
            return (long)PyLong_AsLong(x);
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (long)-1;
        val = __Pyx_PyInt_AsLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE PY_LONG_LONG __Pyx_PyInt_AsLongLong(PyObject* x) {
    const PY_LONG_LONG neg_one = (PY_LONG_LONG)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to PY_LONG_LONG");
            return (PY_LONG_LONG)-1;
        }
        return (PY_LONG_LONG)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to PY_LONG_LONG");
                return (PY_LONG_LONG)-1;
            }
            return (PY_LONG_LONG)PyLong_AsUnsignedLongLong(x);
        } else {
            return (PY_LONG_LONG)PyLong_AsLongLong(x);
        }
    } else {
        PY_LONG_LONG val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (PY_LONG_LONG)-1;
        val = __Pyx_PyInt_AsLongLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE signed long __Pyx_PyInt_AsSignedLong(PyObject* x) {
    const signed long neg_one = (signed long)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to signed long");
            return (signed long)-1;
        }
        return (signed long)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to signed long");
                return (signed long)-1;
            }
            return (signed long)PyLong_AsUnsignedLong(x);
        } else {
            return (signed long)PyLong_AsLong(x);
        }
    } else {
        signed long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (signed long)-1;
        val = __Pyx_PyInt_AsSignedLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE signed PY_LONG_LONG __Pyx_PyInt_AsSignedLongLong(PyObject* x) {
    const signed PY_LONG_LONG neg_one = (signed PY_LONG_LONG)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to signed PY_LONG_LONG");
            return (signed PY_LONG_LONG)-1;
        }
        return (signed PY_LONG_LONG)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to signed PY_LONG_LONG");
                return (signed PY_LONG_LONG)-1;
            }
            return (signed PY_LONG_LONG)PyLong_AsUnsignedLongLong(x);
        } else {
            return (signed PY_LONG_LONG)PyLong_AsLongLong(x);
        }
    } else {
        signed PY_LONG_LONG val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (signed PY_LONG_LONG)-1;
        val = __Pyx_PyInt_AsSignedLongLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
}

static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        #if PY_VERSION_HEX < 0x02050000
        return PyErr_Warn(NULL, message);
        #else
        return PyErr_WarnEx(NULL, message, 1);
        #endif
    }
    return 0;
}

#include "compile.h"
#include "frameobject.h"
#include "traceback.h"

static void __Pyx_AddTraceback(const char *funcname, int __pyx_clineno,
                               int __pyx_lineno, const char *__pyx_filename) {
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    PyObject *py_globals = 0;
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;

    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(__pyx_filename);
    #else
    py_srcfile = PyUnicode_FromString(__pyx_filename);
    #endif
    if (!py_srcfile) goto bad;
    if (__pyx_clineno) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, __pyx_clineno);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, __pyx_clineno);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_globals = PyModule_GetDict(__pyx_m);
    if (!py_globals) goto bad;
    py_code = PyCode_New(
        0,            /*int argcount,*/
        #if PY_MAJOR_VERSION >= 3
        0,            /*int kwonlyargcount,*/
        #endif
        0,            /*int nlocals,*/
        0,            /*int stacksize,*/
        0,            /*int flags,*/
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple,  /*PyObject *consts,*/
        __pyx_empty_tuple,  /*PyObject *names,*/
        __pyx_empty_tuple,  /*PyObject *varnames,*/
        __pyx_empty_tuple,  /*PyObject *freevars,*/
        __pyx_empty_tuple,  /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        __pyx_lineno,   /*int firstlineno,*/
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    if (!py_code) goto bad;
    py_frame = PyFrame_New(
        PyThreadState_GET(), /*PyThreadState *tstate,*/
        py_code,             /*PyCodeObject *code,*/
        py_globals,          /*PyObject *globals,*/
        0                    /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    py_frame->f_lineno = __pyx_lineno;
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else  /* Python 3+ has unicode identifiers */
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        ++t;
    }
    return 0;
}

/* Type Conversion Functions */

static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}

static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x) {
  PyNumberMethods *m;
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_VERSION_HEX < 0x03000000
  if (PyInt_Check(x) || PyLong_Check(x))
#else
  if (PyLong_Check(x))
#endif
    return Py_INCREF(x), x;
  m = Py_TYPE(x)->tp_as_number;
#if PY_VERSION_HEX < 0x03000000
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = PyNumber_Long(x);
  }
#else
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Long(x);
  }
#endif
  if (res) {
#if PY_VERSION_HEX < 0x03000000
    if (!PyInt_Check(res) && !PyLong_Check(res)) {
#else
    if (!PyLong_Check(res)) {
#endif
      PyErr_Format(PyExc_TypeError,
                   "__%s__ returned non-%s (type %.200s)",
                   name, name, Py_TYPE(res)->tp_name);
      Py_DECREF(res);
      return NULL;
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}

static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject* x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}

static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
#if PY_VERSION_HEX < 0x02050000
   if (ival <= LONG_MAX)
       return PyInt_FromLong((long)ival);
   else {
       unsigned char *bytes = (unsigned char *) &ival;
       int one = 1; int little = (int)*(unsigned char*)&one;
       return _PyLong_FromByteArray(bytes, sizeof(size_t), little, 0);
   }
#else
   return PyInt_FromSize_t(ival);
#endif
}

static CYTHON_INLINE size_t __Pyx_PyInt_AsSize_t(PyObject* x) {
   unsigned PY_LONG_LONG val = __Pyx_PyInt_AsUnsignedLongLong(x);
   if (unlikely(val == (unsigned PY_LONG_LONG)-1 && PyErr_Occurred())) {
       return (size_t)-1;
   } else if (unlikely(val != (unsigned PY_LONG_LONG)(size_t)val)) {
       PyErr_SetString(PyExc_OverflowError,
                       "value too large to convert to size_t");
       return (size_t)-1;
   }
   return (size_t)val;
}


#endif /* Py_PYTHON_H */
