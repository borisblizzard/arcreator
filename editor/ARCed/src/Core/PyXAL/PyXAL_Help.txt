Help on module Core.PyXAL._PyXAL in Core.PyXAL:

NAME
    Core.PyXAL._PyXAL

FILE
    _pyxal.pyd

CLASSES
    __builtin__.object
        _PyXAL.PyAudioManager
        _PyXAL.PyPlayer
        _PyXAL.PySound
        _PyXAL.XALManager
    
    class PyAudioManager(__builtin__.object)
     |  A wrapper for the C++ xal::AudioManager class. it is currently not used
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      this is a wapper class for a C++ class . it should not be initialied outside of the PyXAL module as proper set up would be impossible.
     |      as such calling the __init__ method will raise a Runtime Error
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class PyPlayer(__builtin__.object)
     |  a wraper for the C++ class xal::Player. it is retuned by the XALManager.createPlayer method
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      this is a wapper class for a C++ class . it should not be initialied outside of the PyXAL module as proper set up would be impossible.
     |      as such calling the __init__ method will raise a Runtime Error
     |  
     |  getDuration(...)
     |      @return: float duration of the sound in seconds. it is a floating point number to acound for fractions of a second
     |  
     |  getFilename(...)
     |      @return: returns a string containing the file name the sound was loaded from
     |  
     |  getGain(...)
     |      @return: float the current gain of the player (also knows as volume)
     |  
     |  getName(...)
     |      @return: returns the string name of the sound. it is normal the full path of teh sound file with out the file extention
     |  
     |  getOffset(...)
     |      @return: float the current playing offset in seconds from the start of the sound
     |  
     |  getPitch(...)
     |      @return: float the current pitch of the player
     |  
     |  getRealFilename(...)
     |      @return: returns a string with the full path to the file the string was loaded from
     |  
     |  getSize(...)
     |      @return: int the size of the sound data in bits not bytes
     |  
     |  getSound(...)
     |      return a PySound class wrapper for the sound object of the player
     |  
     |  isFading(...)
     |      @return: bool True if the sound is fading in or out
     |  
     |  isFadingIn(...)
     |      @return: bool True if the sound is fading in
     |  
     |  isFadingOut(...)
     |      @return: bool True if teh sound is fading out
     |  
     |  isLooping(...)
     |      @return: bool True of the sound is looping
     |  
     |  isPaused(...)
     |      @return: bool True if the sound is paused
     |  
     |  isPlaying(...)
     |      @return: bool True of the sound is playing
     |  
     |  isXALInitialized(...)
     |      returns true if the C++ side of the interface to XAL exists
     |  
     |  pause(...)
     |      stop the sound playing keeping the current offset of the sound
     |      
     |      @param fadeTime: float the time in seconds for the sound to fade out (0.0 by default)
     |  
     |  play(...)
     |      start the sound playing at it's current offset, the offset starts at 0.0 when teh sound is first loaded
     |      
     |      @param fadeTime: float the time in seconds for the sound to fade in (0.0 by default)
     |      @param looping: bool should the sound loop (False by default)
     |  
     |  setGain(...)
     |      set the gain of the player (also knows as volume)
     |      @param value: float the value of the volume to set 1.0 is normal 2.0 is twice as loud 0.5 is half volume ect.
     |  
     |  setOffset(...)
     |      set the offset in seconds from the start of the sound
     |      
     |      WARNING: THIS IS JUST HERE TO PROVIDE THE INTERFACE FOR NOW.  IT DOES NOTHING AS OF YET AS XAL DOES NOT IMPLMENT THE FEATURE
     |      
     |      @param value: float offset in seconds to set
     |  
     |  setPitch(...)
     |      set the current pitch of the player
     |      @param value: float the value of the pitch to set to set 1.0 is normal 2.0 is a 200% shift 0.5 is a 50% shift
     |  
     |  stop(...)
     |      stop the sound playing and rest set it's offset to 0.0
     |      
     |      @param fadeTime: float the time in seconds for the sound to fade out (0.0 by default)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class PySound(__builtin__.object)
     |  A wrapper class for the C++ xal::Sound class. it is returned by the XALManager.createSound and PyPlayer.getSound methods
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      this is a wapper class for a C++ class . it should not be initialied outside of the PyXAL module as proper set up would be impossible.
     |      as such calling the __init__ method will raise a Runtime Error
     |  
     |  getBitsPerSample(...)
     |      @return: int the bits per sample of data in the sound. usualy 8, 16, or 24, possibly 32 not sure
     |  
     |  getChannels(...)
     |      @return: int number of channels the sound has. 1 for mono or 2 for stereo
     |  
     |  getDuration(...)
     |      @return: float duration of the sound in seconds. it is a floating point number to acound for fractions of a second
     |  
     |  getFilename(...)
     |      @return: returns a string containing the file name the sound was loaded from
     |  
     |  getFormat(...)
     |      @return: int the intrnal designation of the sound format. coresponds to a file type but as of now there is no way to tell for certin which is which 
     |          as the nubers will change depending on what formats are currently suported by XAL
     |  
     |  getName(...)
     |      @return: returns the string name of the sound. it is normal the full path of teh sound file with out the file extention
     |  
     |  getRealFilename(...)
     |      @return: returns a string with the full path to the file the string was loaded from
     |  
     |  getSamplingRate(...)
     |      @return: int the sampeling rate for the sound in samples per second
     |  
     |  getSize(...)
     |      @return: int the size of the sound data in bits not bytes
     |  
     |  isStreamed(...)
     |      @return: bool is the sound being streamed from it's file to the player? or is it comleatly loaded into memory. 
     |          should always return false in PyXAL as PyXAL uses full decoding mode
     |  
     |  isXALInitialized(...)
     |      returns true if the C++ side of the interface to XAL exists
     |  
     |  readRawData(...)
     |      read the raw data of the sound and return it the format of said data can be determined from the size, chanels, bits per sample and sampleling rate of the sound
     |      @return: a 2 tuple of (number of bits read, string of bytes read)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class XALManager(__builtin__.object)
     |  a wraptter for the xal::mgr object which is a xal::AudioManager. in other word this is the main interface to XAL you SHOLD NOT create an instance of the class yourself.
     |  call PyXAL.Init to set up XAL an instance of this class will be made avalable at PyXAL.Mgr
     |  
     |  Methods defined here:
     |  
     |  DestroyXAL(...)
     |      Destrory the XAL interface
     |  
     |  SetupXAL(...)
     |      set up XAL and create the default sound catagory
     |  
     |  __del__(...)
     |      make sure XAL is destroyed if the interface is destroyed
     |  
     |  __init__(...)
     |      sets up the interface and initializes XAL you SHOULD NOT BE CREATING THIS CLASS YOUR SELF call PyXAL.Init and use the object created at PyXAL.Mgr
     |      if PyXAL.Mgr is None call PyXAL.Destroy and then PyXAL.Init to set up the interface again
     |      
     |      @param systemname: string name of the back end system to use
     |      @param backendId: int window handle of the calling aplication
     |      @param threaded: bool should the system use a threaded interface? (False by defaut)
     |      @param updateTime: float how offten should XAL update (0.01 by default)
     |      @param deviceName: string arbatrary device name ("" by default)
     |  
     |  clear(...)
     |      clear the XAL interface and reset it to be like it was freshly initialized all current sounds and players become invalid
     |  
     |  createPlayer(...)
     |      create a player from a sound object
     |      raises a runtime error if XAL failes to creat a player so be sure to put thsi call in a try except block
     |      
     |      @param sound: a PySound wrapper to a sound object
     |      @return: a PyPlayer wraper to the player object
     |  
     |  createSound(...)
     |      create a sound object
     |      raises a runtime error if the sound failes to load so be sure to put this call in a try except block
     |      
     |      @param filename: string full path to a sound file to load
     |      @return: a PySound wraper to the sound object
     |  
     |  destroyPlayer(...)
     |      destroy a player object
     |      destroyes the C++ interface. the object is unusable after this
     |      
     |      @param pyplayer: the PyPlayer wrapper for the player to destory
     |  
     |  destroySound(...)
     |      destroy a sound object
     |      destroyes the C++ interface. the object is unusable after this and so is any player that uses the sound
     |      
     |      @param pyplayer: the Pysound wrapper for the sound to destory
     |  
     |  findPlayer(...)
     |      tries to find a player for the sound whos nae is passed. raises a runtime error if not player is found so be sure to put in a try except block
     |      
     |      @param name: string the name of the soudn to find a player for
     |  
     |  isAnyFading(...)
     |      @param name: sting name of sound to check
     |      @return: bool True if there is a sound by this name fading in or out
     |  
     |  isAnyFadingIn(...)
     |      @param name: sting name of sound to check
     |      @return: bool True if there is a sound by this name fading in
     |  
     |  isAnyFadingOut(...)
     |      @param name: sting name of sound to check
     |      @return: bool True if there is a sound by this name fading out
     |  
     |  isAnyPlaying(...)
     |      @param name: sting name of sound to check
     |      @return: bool True if there is a sound by this name playing
     |  
     |  isXALInitialized(...)
     |      returns true if the C++ side of the interface to XAL exists
     |  
     |  pauseAll(...)
     |      pause all sounds and players
     |      
     |      @param fadeTime: float the time is second for the sound to fade out (0.0 by default)
     |  
     |  play(...)
     |      play the sound identified by the name passed (it must of alrady been created)
     |      
     |      @param name: string the name of the sound to play. it must alrady of been created
     |      @param fadeTime: float time is seconds for teh sound to fade in (0.0 by default)
     |      @param looping: bool should the sound loop? (False by default)
     |      @param gain: float the volume to play the sound at. 1.0 is normal 0.5 is half 2.0 is twice the volume ect. (1.0 by default)
     |  
     |  resumeAll(...)
     |      resume all sounds and players
     |      
     |      @param fadeTime: float the time is second for the sound to fade in (0.0 by default)
     |  
     |  stop(...)
     |      stop playing the sound identifed by the name passed
     |      
     |      @param name: string the name of the sound to stop
     |      @param fadeTime: float the time is second for the sound to fade out (0.0 by default)
     |  
     |  stopAll(...)
     |      stop playing the all players of the sound identifed by the name passed
     |      
     |      @param name: string the name of the sound to stop
     |      @param fadeTime: float the time is second for the sound to fade out (0.0 by default)
     |  
     |  stopFirst(...)
     |      stop playing the first player of the sound identifed by the name passed
     |      
     |      @param name: string the name of the sound to stop
     |      @param fadeTime: float the time is second for the sound to fade out (0.0 by default)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T

FUNCTIONS
    Destroy(...)
        Destroy XAL and remove the interface at PyXAL setting it to None
    
    EnableLogging(...)
        sets the logging state of PyXAL by default it is off
        
        @param state: bool True or False if XAL should be logging data default is True so calling
            PyXAL.EnableLogging will turn logging on (by default PyXAL does not log)
        @param path: string path to the folder where PyXAL should create the log 
            it is an empty string by default so that should mean the log will be made in the 
            current working directory. calling PyXAL.EnableLogging will set the path to an empty string if the paramater is not included
        @return: returns True or False if the path was set
    
    Init(...)
        Setup XAL and creat an XALManager interface at PyXAL.Mgr
        
        @param backendId: int window handel in the calling aplication
        @param threaded: bool should XAL use a threaded interface? (True by default)
    
    SetLogPath(...)
        Sets the path where XAL should create a log file. 
        the path should not include the file
        PyXAL will try to create a folder at the path if the path doesn't exist and will save it's log in that folder as a file named XAL.log
        
        @param path: string path to the folder where the log should be made
        @return: returns True or False if the path was set

DATA
    Mgr = <_PyXAL.XALManager object>
    __test__ = {}