"""Subclass of ActorParameters_Dialog, which is generated by wxFormBuilder."""

import wx
import ARCed_Templates
import ARCedExpCurve_Dialog
import ARCedGenerateCurve_Dialog

# Implementing ActorParameters_Dialog
class ARCedActorParameters_Dialog( ARCed_Templates.ActorParameters_Dialog ):
	def __init__( self, parent ):
		ARCed_Templates.ActorParameters_Dialog.__init__( self, parent )
	
	# Handlers for ActorParameters_Dialog events.
	def buttonQuickAMaxHP_Clicked( self, event ):
		# TODO: Implement buttonQuickAMaxHP_Clicked
		pass
	
	def buttonQuickBMaxHP_Clicked( self, event ):
		# TODO: Implement buttonQuickBMaxHP_Clicked
		pass
	
	def buttonQuickCMaxHP_Clicked( self, event ):
		# TODO: Implement buttonQuickCMaxHP_Clicked
		pass
	
	def buttonQuickDMaxHP_Clicked( self, event ):
		# TODO: Implement buttonQuickDMaxHP_Clicked
		pass
	
	def buttonQuickEMaxHP_Clicked( self, event ):
		# TODO: Implement buttonQuickEMaxHP_Clicked
		pass
	
	def spinCtrlLevelMaxHP_ValueChanged( self, event ):
		# TODO: Implement spinCtrlLevelMaxHP_ValueChanged
		pass
	
	def spinCtrlValueMaxHP_ValueChanged( self, event ):
		# TODO: Implement spinCtrlValueMaxHP_ValueChanged
		pass
	
	def buttonGenerateMaxHP_Clicked( self, event ):
		self.generateCurve(0)
	
	def bitmapGraphMaxHP_LeftClick( self, event ):
		# TODO: Implement bitmapGraphMaxHP_LeftClick
		pass
	
	def bitmapGraphMaxHP_LeftDown( self, event ):
		# TODO: Implement bitmapGraphMaxHP_LeftDown
		pass
	
	def bitmapGraphMaxHP_LeftUp( self, event ):
		# TODO: Implement bitmapGraphMaxHP_LeftUp
		pass
	
	def buttonQuickAMaxSP_Clicked( self, event ):
		# TODO: Implement buttonQuickAMaxSP_Clicked
		pass
	
	def buttonQuickBMaxSP_Clicked( self, event ):
		# TODO: Implement buttonQuickBMaxSP_Clicked
		pass
	
	def buttonQuickCMaxSP_Clicked( self, event ):
		# TODO: Implement buttonQuickCMaxSP_Clicked
		pass
	
	def buttonQuickDMaxSP_Clicked( self, event ):
		# TODO: Implement buttonQuickDMaxSP_Clicked
		pass
	
	def buttonQuickEMaxSP_Clicked( self, event ):
		# TODO: Implement buttonQuickEMaxSP_Clicked
		pass
	
	def spinCtrlLevelMaxSP_ValueChanged( self, event ):
		# TODO: Implement spinCtrlLevelMaxSP_ValueChanged
		pass
	
	def spinCtrlValueMaxSP_ValueChanged( self, event ):
		# TODO: Implement spinCtrlValueMaxSP_ValueChanged
		pass
	
	def buttonGenerateMaxSP_Clicked( self, event ):
		self.generateCurve(1)
	
	def bitmapGraphMaxSP_LeftClick( self, event ):
		# TODO: Implement bitmapGraphMaxSP_LeftClick
		pass
	
	def bitmapGraphMaxSP_LeftDown( self, event ):
		# TODO: Implement bitmapGraphMaxSP_LeftDown
		pass
	
	def bitmapGraphMaxSP_LeftUp( self, event ):
		# TODO: Implement bitmapGraphMaxSP_LeftUp
		pass
	
	def buttonQuickAStr_Clicked( self, event ):
		# TODO: Implement buttonQuickAStr_Clicked
		pass
	
	def buttonQuickBStr_Clicked( self, event ):
		# TODO: Implement buttonQuickBStr_Clicked
		pass
	
	def buttonQuickCStr_Clicked( self, event ):
		# TODO: Implement buttonQuickCStr_Clicked
		pass
	
	def buttonQuickDStr_Clicked( self, event ):
		# TODO: Implement buttonQuickDStr_Clicked
		pass
	
	def buttonQuickEStr_Clicked( self, event ):
		# TODO: Implement buttonQuickEStr_Clicked
		pass
	
	def spinCtrlLevelStr_ValueChanged( self, event ):
		# TODO: Implement spinCtrlLevelStr_ValueChanged
		pass
	
	def spinCtrlValueStr_ValueChanged( self, event ):
		# TODO: Implement spinCtrlValueStr_ValueChanged
		pass
	
	def buttonGenerateStr_Clicked( self, event ):
		self.generateCurve(2)

	
	def bitmapGraphStr_LeftClick( self, event ):
		# TODO: Implement bitmapGraphStr_LeftClick
		pass
	
	def bitmapGraphStr_LeftDown( self, event ):
		# TODO: Implement bitmapGraphStr_LeftDown
		pass
	
	def bitmapGraphStr_LeftUp( self, event ):
		# TODO: Implement bitmapGraphStr_LeftUp
		pass
	
	def buttonQuickADex_Clicked( self, event ):
		# TODO: Implement buttonQuickADex_Clicked
		pass
	
	def buttonQuickBDex_Clicked( self, event ):
		# TODO: Implement buttonQuickBDex_Clicked
		pass
	
	def buttonQuickCDex_Clicked( self, event ):
		# TODO: Implement buttonQuickCDex_Clicked
		pass
	
	def buttonQuickDDex_Clicked( self, event ):
		# TODO: Implement buttonQuickDDex_Clicked
		pass
	
	def buttonQuickEDex_Clicked( self, event ):
		# TODO: Implement buttonQuickEDex_Clicked
		pass
	
	def spinCtrlLevelDex_ValueChanged( self, event ):
		# TODO: Implement spinCtrlLevelDex_ValueChanged
		pass
	
	def spinCtrlValueDex_ValueChanged( self, event ):
		# TODO: Implement spinCtrlValueDex_ValueChanged
		pass
	
	def buttonGenerateDex_Clicked( self, event ):
		self.generateCurve(3)
	
	def bitmapGraphDex_LeftClick( self, event ):
		# TODO: Implement bitmapGraphDex_LeftClick
		pass
	
	def bitmapGraphDex_LeftDown( self, event ):
		# TODO: Implement bitmapGraphDex_LeftDown
		pass
	
	def bitmapGraphDex_LeftUp( self, event ):
		# TODO: Implement bitmapGraphDex_LeftUp
		pass
	
	def buttonQuickAAgi_Clicked( self, event ):
		# TODO: Implement buttonQuickAAgi_Clicked
		pass
	
	def buttonQuickBAgi_Clicked( self, event ):
		# TODO: Implement buttonQuickBAgi_Clicked
		pass
	
	def buttonQuickCAgi_Clicked( self, event ):
		# TODO: Implement buttonQuickCAgi_Clicked
		pass
	
	def buttonQuickDAgi_Clicked( self, event ):
		# TODO: Implement buttonQuickDAgi_Clicked
		pass
	
	def buttonQuickEAgi_Clicked( self, event ):
		# TODO: Implement buttonQuickEAgi_Clicked
		pass
	
	def spinCtrlLevelAgi_ValueChanged( self, event ):
		# TODO: Implement spinCtrlLevelAgi_ValueChanged
		pass
	
	def spinCtrlValueAgi_ValueChanged( self, event ):
		# TODO: Implement spinCtrlValueAgi_ValueChanged
		pass
	
	def buttonGenerateAgi_Clicked( self, event ):
		self.generateCurve(4)
	
	def bitmapGraphAgi_LeftClick( self, event ):
		# TODO: Implement bitmapGraphAgi_LeftClick
		pass
	
	def bitmapGraphAgi_LeftDown( self, event ):
		# TODO: Implement bitmapGraphAgi_LeftDown
		pass
	
	def bitmapGraphAgi_LeftUp( self, event ):
		# TODO: Implement bitmapGraphAgi_LeftUp
		pass
	
	def buttonQuickAInt_Clicked( self, event ):
		# TODO: Implement buttonQuickAInt_Clicked
		pass
	
	def buttonQuickCInt_Clicked( self, event ):
		# TODO: Implement buttonQuickCInt_Clicked
		pass
	
	def buttonQuickDInt_Clicked( self, event ):
		# TODO: Implement buttonQuickDInt_Clicked
		pass
	
	def buttonQuickEInt_Clicked( self, event ):
		# TODO: Implement buttonQuickEInt_Clicked
		pass
	
	def spinCtrlLevelInt_ValueChanged( self, event ):
		# TODO: Implement spinCtrlLevelInt_ValueChanged
		pass
	
	def spinCtrlValueInt_ValueChanged( self, event ):
		# TODO: Implement spinCtrlValueInt_ValueChanged
		pass
	
	def buttonGenerateInt_Clicked( self, event ):
		self.generateCurve(5)
	
	def bitmapGraphInt_LeftClick( self, event ):
		# TODO: Implement bitmapGraphInt_LeftClick
		pass
	
	def bitmapGraphInt_LeftDown( self, event ):
		# TODO: Implement bitmapGraphInt_LeftDown
		pass
	
	def bitmapGraphInt_LeftUp( self, event ):
		# TODO: Implement bitmapGraphInt_LeftUp
		pass
	
	def buttonOK_Clicked( self, event ):
		# End the dialog and return ID_OK
		self.EndModal(wx.ID_OK)
	
	def buttonCancel_Clicked( self, event ):
		# End the dialog and return ID_CANCEL
		self.EndModal(wx.ID_CANCEL)

	def generateCurve(self, parameterIndex):
		# Create the experience curve dialog, using the passed index to determine which parameter
		dlg = ARCedGenerateCurve_Dialog.ARCedGenerateCurve_Dialog(self, parameterIndex)
		if dlg.ShowModal() == wx.ID_OK:
			# TODO: Implement curve modification
			print 'New Curve Generated'
		dlg.Destroy()

	
	
