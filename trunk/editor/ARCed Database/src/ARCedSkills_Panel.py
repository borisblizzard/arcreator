"""Subclass of Skills_Panel, which is generated by wxFormBuilder."""

import wx
import ARCed_Templates
import ARCedChangeMaximum_Dialog
import ARCedChooseGraphic_Dialog
import ARCedChooseAudio_Dialog

import Kernel

# TEST
ARC_FORMAT = False

class ARCedSkills_Panel( ARCed_Templates.Skills_Panel ):
	def __init__( self, parent ):
		ARCed_Templates.Skills_Panel.__init__( self, parent )
		global Config, DataSkills, DataAnimations, DataElements
		global DataStates, DataCommonEvents
		Config = Kernel.GlobalObjects.get_value('ARCed_config')
		try:
			proj = Kernel.GlobalObjects.get_value('PROJECT')
			DataSkills = proj.getData('Skills')
			DataAnimations = proj.getData('Animations')
			DataStates = proj.getData('States')
			DataElements = proj.getData('System').elements
			DataCommonEvents = proj.getData('Common Events')
		except NameError:
			Kernel.Log('Database opened before Project has been initialized', '[Database:SKILLS]', True)
			self.Destroy()
		self.setRanges()
		self.SelectedSkill = DataSkills[self.FixedIndex(0)]
		self.refreshAll()
		self.listBoxSkills.SetSelection(0)

	def refreshSkillList( self ):
		''' Refreshes the values in the class wxListBox control '''
		self.listBoxSkills.Clear()
		for i, skill in enumerate(DataSkills):
			if not ARC_FORMAT and i == 0:
				continue
			digits = len(Config.get('GameObjects', 'Skills'))
			self.listBoxSkills.Append("".join([str(i).zfill(digits), ': ', skill.name]))
		self.listBoxSkills.SetSelection(0)

	def refreshAnimations( self ):
		self.comboBoxTargetAnimation.Clear()
		self.comboBoxUserAnimation.Clear()
		digits = len(Config.get('GameObjects', 'Animations'))
		animations = [
			''.join([str(i).zfill(digits), ': ', DataAnimations[i].name]) for i in xrange(1, len(DataAnimations))]
		animations.insert(0, '(None)')
		self.comboBoxTargetAnimation.AppendItems(animations)
		self.comboBoxUserAnimation.AppendItems(animations)

	def refreshElements( self ):
		''' Clears and refreshes the list of elements in the checklist '''
		self.listBoxElements.Clear()
		start = self.FixedIndex(0)
		names = DataElements[start:]
		self.listBoxElements.InsertItems(names, 0)
		self.listBoxElements.SetSelection(0)

	def refreshStates( self ):
		''' Clears and refreshes the list of states in the checklist '''
		self.listBoxStates.Clear()
		start = self.FixedIndex(0)
		names = [DataStates[i].name for i in xrange(start, len(DataStates))]
		self.listBoxStates.InsertItems(names, 0)
		self.listBoxStates.SetSelection(0)

	def refreshValues(self ):

		# TODO: Implement adding controls for user-parameters

		''' Resets the values of all the controls to reflect the selected skill '''
		self.textCtrlName.ChangeValue(self.SelectedSkill.name)
		self.textCtrlDescription.ChangeValue(self.SelectedSkill.description)
		self.comboBoxIcon.SetValue(self.SelectedSkill.icon_name)
		self.comboBoxUserAnimation.SetSelection(self.SelectedSkill.animation1_id)
		self.comboBoxTargetAnimation.SetSelection(self.SelectedSkill.animation2_id)

		self.spinCtrlSPCost.SetValue(self.SelectedSkill.sp_cost)
		print self.SelectedSkill.power # wtf?
		#self.spinCtrlPower.SetValue(self.SelectedSkill.power) ############################### ????????
		self.spinCtrlAtkF.SetValue(self.SelectedSkill.atk_f)
		self.spinCtrlEvaF.SetValue(self.SelectedSkill.eva_f)
		self.spinCtrlStrF.SetValue(self.SelectedSkill.str_f)
		self.spinCtrlDexF.SetValue(self.SelectedSkill.dex_f)
		self.spinCtrlAgiF.SetValue(self.SelectedSkill.agi_f)
		self.spinCtrlIntF.SetValue(self.SelectedSkill.int_f)
		self.spinCtrlPDEF.SetValue(self.SelectedSkill.pdef_f)
		self.spinCtrlMDEF.SetValue(self.SelectedSkill.mdef_f)
		self.spinCtrlHitRate.SetValue(self.SelectedSkill.hit)
		self.spinCtrlVariance.SetValue(self.SelectedSkill.variance)

	def refreshAll( self ):
		self.refreshSkillList()
		self.refreshAnimations()
		self.refreshStates()
		self.refreshElements()
		self.refreshValues()


	def setRanges( self ):
		self.spinCtrlSPCost.SetRange(0, Config.getint('Skills', 'spcost'))
		self.spinCtrlPower.SetRange(0, Config.getint('Skills', 'power'))
		self.spinCtrlAtkF.SetRange(0, Config.getint('Skills', 'atkf'))
		self.spinCtrlEvaF.SetRange(0, Config.getint('Skills', 'evaf'))
		self.spinCtrlStrF.SetRange(0, Config.getint('Skills', 'strf'))
		self.spinCtrlDexF.SetRange(0, Config.getint('Skills', 'dexf'))
		self.spinCtrlAgiF.SetRange(0, Config.getint('Skills', 'agif'))
		self.spinCtrlIntF.SetRange(0, Config.getint('Skills', 'intf'))
		self.spinCtrlPDEF.SetRange(0, Config.getint('Skills', 'pdeff'))
		self.spinCtrlMDEF.SetRange(0, Config.getint('Skills', 'mdeff'))

	def listBoxSkills_SelectionChanged( self, event ):
		self.SelectedSkill = DataSkills[self.FixedIndex(event.GetSelection())]
		self.refreshValues()

	def buttonMaximum_Clicked( self, event ):
		# TODO: Implement buttonMaximum_Clicked
		pass

	def textCtrlName_TextChanged( self, event ):
		# TODO: Implement textCtrlName_TextChanged
		pass

	def comboBoxIcon_SelectionChanged( self, event ):
		# TODO: Implement comboBoxIcon_SelectionChanged
		pass

	def textCtrlDescription_TextChange( self, event ):
		# TODO: Implement textCtrlDescription_TextChange
		pass

	def comboBoxScope_SelectionChanged( self, event ):
		# TODO: Implement comboBoxScope_SelectionChanged
		pass

	def comboBoxUserAnimation_SelectionChanged( self, event ):
		# TODO: Implement comboBoxUserAnimation_SelectionChanged
		pass

	def comboBoxMenuSE_Clicked( self, event ):
		# TODO: Implement comboBoxMenuSE_Clicked
		pass

	def comboBoxOccasion_SelectionChanged( self, event ):
		# TODO: Implement comboBoxOccasion_SelectionChanged
		pass

	def comboBoxTargetAnimation_SelectionChanged( self, event ):
		# TODO: Implement comboBoxTargetAnimation_SelectionChanged
		pass

	def comboBoxCommonEvent_SelectionChanged( self, event ):
		# TODO: Implement comboBoxCommonEvent_SelectionChanged
		pass

	def spinCtrlSPCost_ValueChanged( self, event ):
		# TODO: Implement spinCtrlSPCost_ValueChanged
		pass

	def spinCtrlStrF_ValueChanged( self, event ):
		# TODO: Implement spinCtrlStrF_ValueChanged
		pass

	def spinCtrlHitRate_ValueChanged( self, event ):
		# TODO: Implement spinCtrlHitRate_ValueChanged
		pass

	def spinCtrlPower_ValueChanged( self, event ):
		# TODO: Implement spinCtrlPower_ValueChanged
		pass

	def spinCtrlDexF_ValueChanged( self, event ):
		# TODO: Implement spinCtrlDexF_ValueChanged
		pass

	def spinCtrlPDEF_ValueChanged( self, event ):
		# TODO: Implement spinCtrlPDEF_ValueChanged
		pass

	def spinCtrlAtkF_ValueChanged( self, event ):
		# TODO: Implement spinCtrlAtkF_ValueChanged
		pass

	def spinCtrlAgiF_ValueChanged( self, event ):
		# TODO: Implement spinCtrlAgiF_ValueChanged
		pass

	def spinCtrlMDEF_ValueChanged( self, event ):
		# TODO: Implement spinCtrlMDEF_ValueChanged
		pass

	def spinCtrlEvaF_ValueChanged( self, event ):
		# TODO: Implement spinCtrlEvaF_ValueChanged
		pass

	def spinCtrlIntF_ValueChanged( self, event ):
		# TODO: Implement spinCtrlIntF_ValueChanged
		pass

	def spinCtrlVariance_ValueChanged( self, event ):
		# TODO: Implement spinCtrlVariance_ValueChanged
		pass

	def listBoxElements_SelectionChanged( self, event ):
		pass

	def listBoxStates_SelectionChanged( self, event ):
		pass

	def spinCtrlElements_Changed( self, event ):
		pass

	def spinCtrlStates_ValueChanged( self, event ):
		pass

	def textCtrlNotes_TextChanged( self, event ):
		# TODO: Implement textCtrlNotes_TextChanged
		pass


	@staticmethod
	def FixedIndex(index):
		''' Returns the correct starting index for game data structure depending on the current format '''
		if ARC_FORMAT:
			return index
		else:
			return index + 1