/* Generated by Cython 0.20.2 on Mon Sep  8 01:38:27 2014 */

#define PY_SSIZE_T_CLEAN
#ifndef CYTHON_USE_PYLONG_INTERNALS
#ifdef PYLONG_BITS_IN_DIGIT
#define CYTHON_USE_PYLONG_INTERNALS 0
#else
#include "pyconfig.h"
#ifdef PYLONG_BITS_IN_DIGIT
#define CYTHON_USE_PYLONG_INTERNALS 1
#else
#define CYTHON_USE_PYLONG_INTERNALS 0
#endif
#endif
#endif
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02040000
    #error Cython requires Python 2.4+.
#else
#define CYTHON_ABI "0_20_2"
#include <stddef.h> /* For offsetof */
#ifndef offsetof
#define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
#define CYTHON_COMPILING_IN_PYPY 1
#define CYTHON_COMPILING_IN_CPYTHON 0
#else
#define CYTHON_COMPILING_IN_PYPY 0
#define CYTHON_COMPILING_IN_CPYTHON 1
#endif
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600
#define Py_OptimizeFlag 0
#endif
#if PY_VERSION_HEX < 0x02050000
  typedef int Py_ssize_t;
  #define PY_SSIZE_T_MAX INT_MAX
  #define PY_SSIZE_T_MIN INT_MIN
  #define PY_FORMAT_SIZE_T ""
  #define CYTHON_FORMAT_SSIZE_T ""
  #define PyInt_FromSsize_t(z) PyInt_FromLong(z)
  #define PyInt_AsSsize_t(o)   __Pyx_PyInt_As_int(o)
  #define PyNumber_Index(o)    ((PyNumber_Check(o) && !PyFloat_Check(o)) ? PyNumber_Int(o) : \
                                (PyErr_Format(PyExc_TypeError, \
                                              "expected index value, got %.200s", Py_TYPE(o)->tp_name), \
                                 (PyObject*)0))
  #define __Pyx_PyIndex_Check(o) (PyNumber_Check(o) && !PyFloat_Check(o) && \
                                  !PyComplex_Check(o))
  #define PyIndex_Check __Pyx_PyIndex_Check
  #define PyErr_WarnEx(category, message, stacklevel) PyErr_Warn(category, message)
  #define __PYX_BUILD_PY_SSIZE_T "i"
#else
  #define __PYX_BUILD_PY_SSIZE_T "n"
  #define CYTHON_FORMAT_SSIZE_T "z"
  #define __Pyx_PyIndex_Check PyIndex_Check
#endif
#if PY_VERSION_HEX < 0x02060000
  #define Py_REFCNT(ob) (((PyObject*)(ob))->ob_refcnt)
  #define Py_TYPE(ob)   (((PyObject*)(ob))->ob_type)
  #define Py_SIZE(ob)   (((PyVarObject*)(ob))->ob_size)
  #define PyVarObject_HEAD_INIT(type, size) \
          PyObject_HEAD_INIT(type) size,
  #define PyType_Modified(t)
  typedef struct {
     void *buf;
     PyObject *obj;
     Py_ssize_t len;
     Py_ssize_t itemsize;
     int readonly;
     int ndim;
     char *format;
     Py_ssize_t *shape;
     Py_ssize_t *strides;
     Py_ssize_t *suboffsets;
     void *internal;
  } Py_buffer;
  #define PyBUF_SIMPLE 0
  #define PyBUF_WRITABLE 0x0001
  #define PyBUF_FORMAT 0x0004
  #define PyBUF_ND 0x0008
  #define PyBUF_STRIDES (0x0010 | PyBUF_ND)
  #define PyBUF_C_CONTIGUOUS (0x0020 | PyBUF_STRIDES)
  #define PyBUF_F_CONTIGUOUS (0x0040 | PyBUF_STRIDES)
  #define PyBUF_ANY_CONTIGUOUS (0x0080 | PyBUF_STRIDES)
  #define PyBUF_INDIRECT (0x0100 | PyBUF_STRIDES)
  #define PyBUF_RECORDS (PyBUF_STRIDES | PyBUF_FORMAT | PyBUF_WRITABLE)
  #define PyBUF_FULL (PyBUF_INDIRECT | PyBUF_FORMAT | PyBUF_WRITABLE)
  typedef int (*getbufferproc)(PyObject *, Py_buffer *, int);
  typedef void (*releasebufferproc)(PyObject *, Py_buffer *);
#endif
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos) \
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos) \
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyType_Type
#endif
#if PY_VERSION_HEX < 0x02060000
  #define PyUnicode_FromString(s) PyUnicode_Decode(s, strlen(s), "UTF-8", "strict")
#endif
#if PY_MAJOR_VERSION >= 3
  #define Py_TPFLAGS_CHECKTYPES 0
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#if (PY_VERSION_HEX < 0x02060000) || (PY_MAJOR_VERSION >= 3)
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#if PY_VERSION_HEX < 0x02060000
  #define Py_TPFLAGS_HAVE_VERSION_TAG 0
#endif
#if PY_VERSION_HEX < 0x02060000 && !defined(Py_TPFLAGS_IS_ABSTRACT)
  #define Py_TPFLAGS_IS_ABSTRACT 0
#endif
#if PY_VERSION_HEX < 0x030400a1 && !defined(Py_TPFLAGS_HAVE_FINALIZE)
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ? \
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
#else
  #define CYTHON_PEP393_ENABLED 0
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ? \
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#define __Pyx_PyString_FormatSafe(a, b)  ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#endif
#if PY_VERSION_HEX < 0x02060000
  #define PyBytesObject                PyStringObject
  #define PyBytes_Type                 PyString_Type
  #define PyBytes_Check                PyString_Check
  #define PyBytes_CheckExact           PyString_CheckExact
  #define PyBytes_FromString           PyString_FromString
  #define PyBytes_FromStringAndSize    PyString_FromStringAndSize
  #define PyBytes_FromFormat           PyString_FromFormat
  #define PyBytes_DecodeEscape         PyString_DecodeEscape
  #define PyBytes_AsString             PyString_AsString
  #define PyBytes_AsStringAndSize      PyString_AsStringAndSize
  #define PyBytes_Size                 PyString_Size
  #define PyBytes_AS_STRING            PyString_AS_STRING
  #define PyBytes_GET_SIZE             PyString_GET_SIZE
  #define PyBytes_Repr                 PyString_Repr
  #define PyBytes_Concat               PyString_Concat
  #define PyBytes_ConcatAndDel         PyString_ConcatAndDel
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj) || \
                                         PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#if PY_VERSION_HEX < 0x02060000
  #define PySet_Check(obj)             PyObject_TypeCheck(obj, &PySet_Type)
  #define PyFrozenSet_Check(obj)       PyObject_TypeCheck(obj, &PyFrozenSet_Type)
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if (PY_MAJOR_VERSION < 3) || (PY_VERSION_HEX >= 0x03010300)
  #define __Pyx_PySequence_GetSlice(obj, a, b) PySequence_GetSlice(obj, a, b)
  #define __Pyx_PySequence_SetSlice(obj, a, b, value) PySequence_SetSlice(obj, a, b, value)
  #define __Pyx_PySequence_DelSlice(obj, a, b) PySequence_DelSlice(obj, a, b)
#else
  #define __Pyx_PySequence_GetSlice(obj, a, b) (unlikely(!(obj)) ? \
        (PyErr_SetString(PyExc_SystemError, "null argument to internal routine"), (PyObject*)0) : \
        (likely((obj)->ob_type->tp_as_mapping) ? (PySequence_GetSlice(obj, a, b)) : \
            (PyErr_Format(PyExc_TypeError, "'%.200s' object is unsliceable", (obj)->ob_type->tp_name), (PyObject*)0)))
  #define __Pyx_PySequence_SetSlice(obj, a, b, value) (unlikely(!(obj)) ? \
        (PyErr_SetString(PyExc_SystemError, "null argument to internal routine"), -1) : \
        (likely((obj)->ob_type->tp_as_mapping) ? (PySequence_SetSlice(obj, a, b, value)) : \
            (PyErr_Format(PyExc_TypeError, "'%.200s' object doesn't support slice assignment", (obj)->ob_type->tp_name), -1)))
  #define __Pyx_PySequence_DelSlice(obj, a, b) (unlikely(!(obj)) ? \
        (PyErr_SetString(PyExc_SystemError, "null argument to internal routine"), -1) : \
        (likely((obj)->ob_type->tp_as_mapping) ? (PySequence_DelSlice(obj, a, b)) : \
            (PyErr_Format(PyExc_TypeError, "'%.200s' object doesn't support slice deletion", (obj)->ob_type->tp_name), -1)))
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : PyInstanceMethod_New(func))
#endif
#if PY_VERSION_HEX < 0x02050000
  #define __Pyx_GetAttrString(o,n)   PyObject_GetAttrString((o),((char *)(n)))
  #define __Pyx_SetAttrString(o,n,a) PyObject_SetAttrString((o),((char *)(n)),(a))
  #define __Pyx_DelAttrString(o,n)   PyObject_DelAttrString((o),((char *)(n)))
#else
  #define __Pyx_GetAttrString(o,n)   PyObject_GetAttrString((o),(n))
  #define __Pyx_SetAttrString(o,n,a) PyObject_SetAttrString((o),(n),(a))
  #define __Pyx_DelAttrString(o,n)   PyObject_DelAttrString((o),(n))
#endif
#if PY_VERSION_HEX < 0x02050000
  #define __Pyx_NAMESTR(n) ((char *)(n))
  #define __Pyx_DOCSTR(n)  ((char *)(n))
#else
  #define __Pyx_NAMESTR(n) (n)
  #define __Pyx_DOCSTR(n)  (n)
#endif
#ifndef CYTHON_INLINE
  #if defined(__GNUC__)
    #define CYTHON_INLINE __inline__
  #elif defined(_MSC_VER)
    #define CYTHON_INLINE __inline
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_INLINE inline
  #else
    #define CYTHON_INLINE
  #endif
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  /* Initialize NaN. The sign is irrelevant, an exponent with all bits 1 and
   a nonzero mantissa means NaN. If the first bit in the mantissa is 1, it is
   a quiet NaN. */
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#ifdef __cplusplus
template<typename T>
void __Pyx_call_destructor(T* x) {
    x->~T();
}
#endif


#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
#define _USE_MATH_DEFINES
#endif
#include <math.h>
#define __PYX_HAVE___PyXAL
#define __PYX_HAVE_API___PyXAL
#include "string.h"
#include "stdlib.h"
#include <hltypes/hstring.h>
#include <hltypes/harray.h>
#include <xal/AudioManager.h>
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <xal/Sound.h>
#include <xal/Category.h>
#include <xal/Player.h>
#include <xal/Buffer.h>
#include <xal/xal.h>
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#ifdef PYREX_WITHOUT_ASSERTIONS
#define CYTHON_WITHOUT_ASSERTIONS
#endif

#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
typedef struct {PyObject **p; char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry; /*proto*/

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT 0
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (    \
    (sizeof(type) < sizeof(Py_ssize_t))  ||             \
    (sizeof(type) > sizeof(Py_ssize_t) &&               \
          likely(v < (type)PY_SSIZE_T_MAX ||            \
                 v == (type)PY_SSIZE_T_MAX)  &&         \
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||       \
                                v == (type)PY_SSIZE_T_MIN)))  ||  \
    (sizeof(type) == sizeof(Py_ssize_t) &&              \
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||        \
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyObject_AsSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromUString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromUString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromUString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromUString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromUString(s) __Pyx_PyUnicode_FromString((const char*)s)
#if PY_MAJOR_VERSION < 3
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u)
{
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#else
#define __Pyx_Py_UNICODE_strlen Py_UNICODE_strlen
#endif
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_Owned_Py_None(b) (Py_INCREF(Py_None), Py_None)
#define __Pyx_PyBool_FromLong(b) ((b) ? (Py_INCREF(Py_True), Py_True) : (Py_INCREF(Py_False), Py_False))
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x);
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_COMPILING_IN_CPYTHON
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c));
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */

static PyObject *__pyx_m;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "_PyXAL.pyx",
};

/*--- Type declarations ---*/
struct __pyx_obj_6_PyXAL_PyAudioManager;
struct __pyx_obj_6_PyXAL_SoundWrapper;
struct __pyx_obj_6_PyXAL_PlayerWrapper;
struct __pyx_obj_6_PyXAL_XALManagerWrapper;

/* "_PyXAL.pyx":119
 * 
 * 
 * cdef class PyAudioManager:             # <<<<<<<<<<<<<<
 *     '''
 *     A wrapper for the C++ xal::AudioManager class. it is currently not used
 */
struct __pyx_obj_6_PyXAL_PyAudioManager {
  PyObject_HEAD
  xal::AudioManager *_pointer;
  bool destroyed;
};


/* "_PyXAL.pyx":135
 * 
 * 
 * cdef class SoundWrapper:             # <<<<<<<<<<<<<<
 *     '''
 *     A wrapper class for the C++ xal::Sound class. it is returned by the XALManager.createSound and PyPlayer.getSound methods
 */
struct __pyx_obj_6_PyXAL_SoundWrapper {
  PyObject_HEAD
  xal::Sound *_pointer;
  bool destroyed;
};


/* "_PyXAL.pyx":308
 * 
 * 
 * cdef class PlayerWrapper:             # <<<<<<<<<<<<<<
 *     '''
 *     a wraper for the C++ class xal::Player. it is retuned by the XALManager.createPlayer method
 */
struct __pyx_obj_6_PyXAL_PlayerWrapper {
  PyObject_HEAD
  xal::Player *_pointer;
  bool destroyed;
};


/* "_PyXAL.pyx":997
 * 
 * 
 * cdef class XALManagerWrapper(object):             # <<<<<<<<<<<<<<
 *     '''
 *     a wrapper for the xal::mgr object which is a xal::AudioManager. in other words this is the main interface to XAL you SHOLD NOT create an instance of the class yourself.
 */
struct __pyx_obj_6_PyXAL_XALManagerWrapper {
  PyObject_HEAD
  int destroyed;
  int inited;
  xal::Category *_category;
  char *CATEGORY_STR;
};

#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname); /*proto*/
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil) \
          if (acquire_gil) { \
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure(); \
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__); \
              PyGILState_Release(__pyx_gilstate_save); \
          } else { \
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__); \
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil) \
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext() \
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif /* CYTHON_REFNANNY */
#define __Pyx_XDECREF_SET(r, v) do {                            \
        PyObject *tmp = (PyObject *) r;                         \
        r = v; __Pyx_XDECREF(tmp);                              \
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {                             \
        PyObject *tmp = (PyObject *) r;                         \
        r = v; __Pyx_DECREF(tmp);                               \
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

static PyObject *__Pyx_GetBuiltinName(PyObject *name); /*proto*/

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw); /*proto*/
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

static CYTHON_INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb); /*proto*/
static CYTHON_INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb); /*proto*/

static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename,
                                  int full_traceback); /*proto*/

#include <string.h>

static CYTHON_INLINE PyObject* __Pyx_decode_c_string(
         const char* cstring, Py_ssize_t start, Py_ssize_t stop,
         const char* encoding, const char* errors,
         PyObject* (*decode_func)(const char *s, Py_ssize_t size, const char *errors));

static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found); /*proto*/

static CYTHON_INLINE int __Pyx_CheckKeywordStrings(PyObject *kwdict, const char* function_name, int kw_allowed); /*proto*/

static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause); /*proto*/

static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb); /*proto*/

static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb); /*proto*/

static CYTHON_INLINE void __Pyx_ExceptionSave(PyObject **type, PyObject **value, PyObject **tb); /*proto*/
static void __Pyx_ExceptionReset(PyObject *type, PyObject *value, PyObject *tb); /*proto*/

static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name); /*proto*/

static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[], \
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args, \
    const char* function_name); /*proto*/

static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name); /*proto*/

#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck) \
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ? \
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) : \
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) : \
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck) \
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ? \
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) : \
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck) \
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ? \
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) : \
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type); /*proto*/

#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyObject_DelAttrStr(o,n) __Pyx_PyObject_SetAttrStr(o,n,NULL)
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_setattro))
        return tp->tp_setattro(obj, attr_name, value);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_setattr))
        return tp->tp_setattr(obj, PyString_AS_STRING(attr_name), value);
#endif
    return PyObject_SetAttr(obj, attr_name, value);
}
#else
#define __Pyx_PyObject_DelAttrStr(o,n)   PyObject_DelAttr(o,n)
#define __Pyx_PyObject_SetAttrStr(o,n,v) PyObject_SetAttr(o,n,v)
#endif

static CYTHON_INLINE int __Pyx_PySequence_Contains(PyObject* item, PyObject* seq, int eq) {
    int result = PySequence_Contains(seq, item);
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len) & likely(len > (L->allocated >> 1))) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)
#endif

static PyObject* __Pyx_PyObject_CallMethodTuple(PyObject* obj, PyObject* method_name, PyObject* args) {
    PyObject *method, *result = NULL;
    if (unlikely(!args)) return NULL;
    method = __Pyx_PyObject_GetAttrStr(obj, method_name);
    if (unlikely(!method)) goto bad;
    result = __Pyx_PyObject_Call(method, args, NULL);
    Py_DECREF(method);
bad:
    Py_DECREF(args);
    return result;
}
#define __Pyx_PyObject_CallMethod3(obj, name, arg1, arg2, arg3) \
    __Pyx_PyObject_CallMethodTuple(obj, name, PyTuple_Pack(3, arg1, arg2, arg3))
#define __Pyx_PyObject_CallMethod2(obj, name, arg1, arg2) \
    __Pyx_PyObject_CallMethodTuple(obj, name, PyTuple_Pack(2, arg1, arg2))
#define __Pyx_PyObject_CallMethod1(obj, name, arg1) \
    __Pyx_PyObject_CallMethodTuple(obj, name, PyTuple_Pack(1, arg1))
#define __Pyx_PyObject_CallMethod0(obj, name) \
    __Pyx_PyObject_CallMethodTuple(obj, name, (Py_INCREF(__pyx_empty_tuple), __pyx_empty_tuple))

static CYTHON_INLINE int __Pyx_PyObject_Append(PyObject* L, PyObject* x); /*proto*/

static CYTHON_INLINE int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact); /*proto*/

static PyObject *__Pyx_CalculateMetaclass(PyTypeObject *metaclass, PyObject *bases);

static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type);

#define __Pyx_CyFunction_USED 1
#include <structmember.h>
#define __Pyx_CYFUNCTION_STATICMETHOD  0x01
#define __Pyx_CYFUNCTION_CLASSMETHOD   0x02
#define __Pyx_CYFUNCTION_CCLASS        0x04
#define __Pyx_CyFunction_GetClosure(f) \
    (((__pyx_CyFunctionObject *) (f))->func_closure)
#define __Pyx_CyFunction_GetClassObj(f) \
    (((__pyx_CyFunctionObject *) (f))->func_classobj)
#define __Pyx_CyFunction_Defaults(type, f) \
    ((type *)(((__pyx_CyFunctionObject *) (f))->defaults))
#define __Pyx_CyFunction_SetDefaultsGetter(f, g) \
    ((__pyx_CyFunctionObject *) (f))->defaults_getter = (g)
typedef struct {
    PyCFunctionObject func;
    PyObject *func_dict;
    PyObject *func_weakreflist;
    PyObject *func_name;
    PyObject *func_qualname;
    PyObject *func_doc;
    PyObject *func_globals;
    PyObject *func_code;
    PyObject *func_closure;
    PyObject *func_classobj; /* No-args super() class cell */
    void *defaults;
    int defaults_pyobjects;
    int flags;
    PyObject *defaults_tuple;   /* Const defaults tuple */
    PyObject *defaults_kwdict;  /* Const kwonly defaults dict */
    PyObject *(*defaults_getter)(PyObject *);
    PyObject *func_annotations; /* function annotations dict */
} __pyx_CyFunctionObject;
static PyTypeObject *__pyx_CyFunctionType = 0;
#define __Pyx_CyFunction_NewEx(ml, flags, qualname, self, module, globals, code) \
    __Pyx_CyFunction_New(__pyx_CyFunctionType, ml, flags, qualname, self, module, globals, code)
static PyObject *__Pyx_CyFunction_New(PyTypeObject *, PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *self,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *m,
                                                         size_t size,
                                                         int pyobjects);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *m,
                                                            PyObject *tuple);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *m,
                                                             PyObject *dict);
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *m,
                                                              PyObject *dict);
static int __Pyx_CyFunction_init(void);

static PyObject *__Pyx_Py3MetaclassPrepare(PyObject *metaclass, PyObject *bases, PyObject *name, PyObject *qualname,
                                           PyObject *mkw, PyObject *modname, PyObject *doc); /*proto*/
static PyObject *__Pyx_Py3ClassCreate(PyObject *metaclass, PyObject *name, PyObject *bases, PyObject *dict,
                                      PyObject *mkw, int calculate_metaclass, int allow_py2_metaclass); /*proto*/

static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level); /*proto*/

static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

#ifndef __Pyx_CppExn2PyErr
#include <new>
#include <typeinfo>
#include <stdexcept>
#include <ios>
static void __Pyx_CppExn2PyErr() {
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::bad_alloc& exn) {
    PyErr_SetString(PyExc_MemoryError, exn.what());
  } catch (const std::bad_cast& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::domain_error& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::invalid_argument& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::ios_base::failure& exn) {
    PyErr_SetString(PyExc_IOError, exn.what());
  } catch (const std::out_of_range& exn) {
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::overflow_error& exn) {
    PyErr_SetString(PyExc_OverflowError, exn.what());
  } catch (const std::range_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::underflow_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_int(unsigned int value);

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

static int __Pyx_check_binary_version(void);

typedef struct {
    int code_line;
    PyCodeObject* code_object;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename); /*proto*/

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t); /*proto*/


/* Module declarations from 'libc.string' */

/* Module declarations from 'libc.stdlib' */

/* Module declarations from 'libcpp' */

/* Module declarations from 'hltypes' */

/* Module declarations from 'XAL' */

/* Module declarations from '_PyXAL' */
static PyTypeObject *__pyx_ptype_6_PyXAL_PyAudioManager = 0;
static PyTypeObject *__pyx_ptype_6_PyXAL_SoundWrapper = 0;
static PyTypeObject *__pyx_ptype_6_PyXAL_PlayerWrapper = 0;
static PyTypeObject *__pyx_ptype_6_PyXAL_XALManagerWrapper = 0;
static PyObject *__pyx_v_6_PyXAL_XAL_AS_DEFAULT = 0;
static PyObject *__pyx_v_6_PyXAL_XAL_AS_DISABLED = 0;
static PyObject *__pyx_v_6_PyXAL_XAL_AS_DIRECTSOUND = 0;
static PyObject *__pyx_v_6_PyXAL_XAL_AS_OPENAL = 0;
static PyObject *__pyx_v_6_PyXAL_XAL_AS_OPENSLES = 0;
static PyObject *__pyx_v_6_PyXAL_XAL_AS_SDL = 0;
static PyObject *__pyx_v_6_PyXAL_XAL_AS_XAUDIO2 = 0;
static PyObject *__pyx_v_6_PyXAL_XAL_AS_AVFOUNDATION = 0;
static PyObject *__pyx_v_6_PyXAL_XAL_AS_COREAUDIO = 0;
static enum xal::BufferMode __pyx_v_6_PyXAL_FULL;
static enum xal::BufferMode __pyx_v_6_PyXAL_LAZY;
static enum xal::BufferMode __pyx_v_6_PyXAL_MANAGED;
static enum xal::BufferMode __pyx_v_6_PyXAL_ON_DEMAND;
static enum xal::BufferMode __pyx_v_6_PyXAL_STREAMED;
static enum xal::SourceMode __pyx_v_6_PyXAL_DISK;
static enum xal::SourceMode __pyx_v_6_PyXAL_RAM;
static enum xal::Format __pyx_v_6_PyXAL_FLAC;
static enum xal::Format __pyx_v_6_PyXAL_M4A;
static enum xal::Format __pyx_v_6_PyXAL_OGG;
static enum xal::Format __pyx_v_6_PyXAL_SPX;
static enum xal::Format __pyx_v_6_PyXAL_WAV;
static enum xal::Format __pyx_v_6_PyXAL_UNKNOWN;
static hstr __pyx_f_6_PyXAL_Py_to_Hstr(PyObject *); /*proto*/
static PyObject *__pyx_f_6_PyXAL_Hstr_to_Py(hstr); /*proto*/
#define __Pyx_MODULE_NAME "_PyXAL"
int __pyx_module_is_main__PyXAL = 0;

/* Implementation of '_PyXAL' */
static PyObject *__pyx_builtin_object;
static PyObject *__pyx_builtin_RuntimeError;
static PyObject *__pyx_builtin_TypeError;
static int __pyx_pf_6_PyXAL_14PyAudioManager___init__(CYTHON_UNUSED struct __pyx_obj_6_PyXAL_PyAudioManager *__pyx_v_self); /* proto */
static int __pyx_pf_6_PyXAL_12SoundWrapper___init__(CYTHON_UNUSED struct __pyx_obj_6_PyXAL_SoundWrapper *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6_PyXAL_12SoundWrapper_2_destroy(struct __pyx_obj_6_PyXAL_SoundWrapper *__pyx_v_self); /* proto */
static void __pyx_pf_6_PyXAL_12SoundWrapper_4__dealloc__(struct __pyx_obj_6_PyXAL_SoundWrapper *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6_PyXAL_12SoundWrapper_6isXALInitialized(CYTHON_UNUSED struct __pyx_obj_6_PyXAL_SoundWrapper *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6_PyXAL_12SoundWrapper_8getName(struct __pyx_obj_6_PyXAL_SoundWrapper *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6_PyXAL_12SoundWrapper_10getFilename(struct __pyx_obj_6_PyXAL_SoundWrapper *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6_PyXAL_12SoundWrapper_12getRealFilename(struct __pyx_obj_6_PyXAL_SoundWrapper *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6_PyXAL_12SoundWrapper_14getSize(struct __pyx_obj_6_PyXAL_SoundWrapper *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6_PyXAL_12SoundWrapper_16getChannels(struct __pyx_obj_6_PyXAL_SoundWrapper *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6_PyXAL_12SoundWrapper_18getSamplingRate(struct __pyx_obj_6_PyXAL_SoundWrapper *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6_PyXAL_12SoundWrapper_20getBitsPerSample(struct __pyx_obj_6_PyXAL_SoundWrapper *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6_PyXAL_12SoundWrapper_22getDuration(struct __pyx_obj_6_PyXAL_SoundWrapper *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6_PyXAL_12SoundWrapper_24getFormat(struct __pyx_obj_6_PyXAL_SoundWrapper *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6_PyXAL_12SoundWrapper_26isStreamed(struct __pyx_obj_6_PyXAL_SoundWrapper *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6_PyXAL_12SoundWrapper_28readPcmData(struct __pyx_obj_6_PyXAL_SoundWrapper *__pyx_v_self); /* proto */
static int __pyx_pf_6_PyXAL_13PlayerWrapper___init__(CYTHON_UNUSED struct __pyx_obj_6_PyXAL_PlayerWrapper *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6_PyXAL_13PlayerWrapper_2_destroy(struct __pyx_obj_6_PyXAL_PlayerWrapper *__pyx_v_self); /* proto */
static void __pyx_pf_6_PyXAL_13PlayerWrapper_4__dealloc__(struct __pyx_obj_6_PyXAL_PlayerWrapper *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6_PyXAL_13PlayerWrapper_6isXALInitialized(CYTHON_UNUSED struct __pyx_obj_6_PyXAL_PlayerWrapper *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6_PyXAL_13PlayerWrapper_8getGain(struct __pyx_obj_6_PyXAL_PlayerWrapper *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6_PyXAL_13PlayerWrapper_10setGain(struct __pyx_obj_6_PyXAL_PlayerWrapper *__pyx_v_self, float __pyx_v_value); /* proto */
static PyObject *__pyx_pf_6_PyXAL_13PlayerWrapper_12getPitch(struct __pyx_obj_6_PyXAL_PlayerWrapper *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6_PyXAL_13PlayerWrapper_14setPitch(struct __pyx_obj_6_PyXAL_PlayerWrapper *__pyx_v_self, float __pyx_v_value); /* proto */
static PyObject *__pyx_pf_6_PyXAL_13PlayerWrapper_16getName(struct __pyx_obj_6_PyXAL_PlayerWrapper *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6_PyXAL_13PlayerWrapper_18getFilename(struct __pyx_obj_6_PyXAL_PlayerWrapper *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6_PyXAL_13PlayerWrapper_20getRealFilename(struct __pyx_obj_6_PyXAL_PlayerWrapper *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6_PyXAL_13PlayerWrapper_22getDuration(struct __pyx_obj_6_PyXAL_PlayerWrapper *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6_PyXAL_13PlayerWrapper_24getSize(struct __pyx_obj_6_PyXAL_PlayerWrapper *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6_PyXAL_13PlayerWrapper_26getTimePosition(struct __pyx_obj_6_PyXAL_PlayerWrapper *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6_PyXAL_13PlayerWrapper_28getSamplePosition(struct __pyx_obj_6_PyXAL_PlayerWrapper *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6_PyXAL_13PlayerWrapper_30isPlaying(struct __pyx_obj_6_PyXAL_PlayerWrapper *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6_PyXAL_13PlayerWrapper_32isPaused(struct __pyx_obj_6_PyXAL_PlayerWrapper *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6_PyXAL_13PlayerWrapper_34isFading(struct __pyx_obj_6_PyXAL_PlayerWrapper *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6_PyXAL_13PlayerWrapper_36isFadingIn(struct __pyx_obj_6_PyXAL_PlayerWrapper *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6_PyXAL_13PlayerWrapper_38isFadingOut(struct __pyx_obj_6_PyXAL_PlayerWrapper *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6_PyXAL_13PlayerWrapper_40isLooping(struct __pyx_obj_6_PyXAL_PlayerWrapper *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6_PyXAL_13PlayerWrapper_42play(struct __pyx_obj_6_PyXAL_PlayerWrapper *__pyx_v_self, float __pyx_v_fadeTime, bool __pyx_v_looping); /* proto */
static PyObject *__pyx_pf_6_PyXAL_13PlayerWrapper_44stop(struct __pyx_obj_6_PyXAL_PlayerWrapper *__pyx_v_self, float __pyx_v_fadeTime); /* proto */
static PyObject *__pyx_pf_6_PyXAL_13PlayerWrapper_46pause(struct __pyx_obj_6_PyXAL_PlayerWrapper *__pyx_v_self, float __pyx_v_fadeTime); /* proto */
static PyObject *__pyx_pf_6_PyXAL_7PySound___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_filename); /* proto */
static PyObject *__pyx_pf_6_PyXAL_7PySound_2_destroy(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6_PyXAL_7PySound_4__del__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6_PyXAL_7PySound_6isXALInitialized(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6_PyXAL_7PySound_8getName(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6_PyXAL_7PySound_10getFilename(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6_PyXAL_7PySound_12getRealFilename(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6_PyXAL_7PySound_14getSize(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6_PyXAL_7PySound_16getChannels(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6_PyXAL_7PySound_18getSamplingRate(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6_PyXAL_7PySound_20getBitsPerSample(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6_PyXAL_7PySound_22getDuration(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6_PyXAL_7PySound_24getFormat(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6_PyXAL_7PySound_26isStreamed(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6_PyXAL_7PySound_28readPcmData(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6_PyXAL_8PyPlayer___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_sound); /* proto */
static PyObject *__pyx_pf_6_PyXAL_8PyPlayer_2_destroy(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6_PyXAL_8PyPlayer_4__del__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6_PyXAL_8PyPlayer_6isXALInitialized(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6_PyXAL_8PyPlayer_8getGain(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6_PyXAL_8PyPlayer_10setGain(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, float __pyx_v_value); /* proto */
static PyObject *__pyx_pf_6_PyXAL_8PyPlayer_12getPitch(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6_PyXAL_8PyPlayer_14setPitch(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, float __pyx_v_value); /* proto */
static PyObject *__pyx_pf_6_PyXAL_8PyPlayer_16getSound(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6_PyXAL_8PyPlayer_18getName(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6_PyXAL_8PyPlayer_20getFilename(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6_PyXAL_8PyPlayer_22getRealFilename(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6_PyXAL_8PyPlayer_24getDuration(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6_PyXAL_8PyPlayer_26getSize(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6_PyXAL_8PyPlayer_28getTimePosition(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6_PyXAL_8PyPlayer_30getSamplePosition(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6_PyXAL_8PyPlayer_32isPlaying(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6_PyXAL_8PyPlayer_34isPaused(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6_PyXAL_8PyPlayer_36isFading(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6_PyXAL_8PyPlayer_38isFadingIn(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6_PyXAL_8PyPlayer_40isFadingOut(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6_PyXAL_8PyPlayer_42isLooping(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6_PyXAL_8PyPlayer_44play(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, float __pyx_v_fadeTime, bool __pyx_v_looping); /* proto */
static PyObject *__pyx_pf_6_PyXAL_8PyPlayer_46stop(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, float __pyx_v_fadeTime); /* proto */
static PyObject *__pyx_pf_6_PyXAL_8PyPlayer_48pause(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, float __pyx_v_fadeTime); /* proto */
static int __pyx_pf_6_PyXAL_17XALManagerWrapper___init__(struct __pyx_obj_6_PyXAL_XALManagerWrapper *__pyx_v_self, enum xal::AudioSystemType __pyx_v_type, int __pyx_v_backendId, int __pyx_v_threaded, float __pyx_v_updateTime, char *__pyx_v_deviceName); /* proto */
static void __pyx_pf_6_PyXAL_17XALManagerWrapper_2__dealloc__(CYTHON_UNUSED struct __pyx_obj_6_PyXAL_XALManagerWrapper *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6_PyXAL_17XALManagerWrapper_4isXALInitialized(CYTHON_UNUSED struct __pyx_obj_6_PyXAL_XALManagerWrapper *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6_PyXAL_17XALManagerWrapper_6SetupXAL(struct __pyx_obj_6_PyXAL_XALManagerWrapper *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6_PyXAL_17XALManagerWrapper_8_destroyXAL(CYTHON_UNUSED struct __pyx_obj_6_PyXAL_XALManagerWrapper *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6_PyXAL_10XALManager___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, int __pyx_v_backendId, int __pyx_v_threaded); /* proto */
static PyObject *__pyx_pf_6_PyXAL_10XALManager_2isXALInitialized(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6_PyXAL_10XALManager_4__del__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6_PyXAL_10XALManager_6clear(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6_PyXAL_10XALManager_8createSound(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_filename); /* proto */
static PyObject *__pyx_pf_6_PyXAL_10XALManager_10createPlayer(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_sound); /* proto */
static PyObject *__pyx_pf_6_PyXAL_10XALManager_12destroyPlayer(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_player); /* proto */
static PyObject *__pyx_pf_6_PyXAL_10XALManager_14destroySound(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_sound); /* proto */
static PyObject *__pyx_pf_6_PyXAL_10XALManager_16findPlayer(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_name); /* proto */
static PyObject *__pyx_pf_6_PyXAL_10XALManager_18play(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_name, float __pyx_v_fadeTime, bool __pyx_v_looping, float __pyx_v_gain); /* proto */
static PyObject *__pyx_pf_6_PyXAL_10XALManager_20stop(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_name, float __pyx_v_fadeTime); /* proto */
static PyObject *__pyx_pf_6_PyXAL_10XALManager_22stopFirst(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_name, float __pyx_v_fadeTime); /* proto */
static PyObject *__pyx_pf_6_PyXAL_10XALManager_24stopAll(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, float __pyx_v_fadeTime); /* proto */
static PyObject *__pyx_pf_6_PyXAL_10XALManager_26isAnyPlaying(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_name); /* proto */
static PyObject *__pyx_pf_6_PyXAL_10XALManager_28isAnyFading(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_name); /* proto */
static PyObject *__pyx_pf_6_PyXAL_10XALManager_30isAnyFadingIn(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_name); /* proto */
static PyObject *__pyx_pf_6_PyXAL_10XALManager_32isAnyFadingOut(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_name); /* proto */
static PyObject *__pyx_pf_6_PyXAL_10XALManager_34suspendAudio(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6_PyXAL_10XALManager_36resumeAudio(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6_PyXAL_Init(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_backendId, int __pyx_v_threaded); /* proto */
static PyObject *__pyx_pf_6_PyXAL_2Destroy(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_tp_new_6_PyXAL_PyAudioManager(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6_PyXAL_SoundWrapper(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6_PyXAL_PlayerWrapper(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6_PyXAL_XALManagerWrapper(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static char __pyx_k_os[] = "os";
static char __pyx_k_Mgr[] = "Mgr";
static char __pyx_k__26[] = "";
static char __pyx_k_del[] = "__del__";
static char __pyx_k_doc[] = "__doc__";
static char __pyx_k_Init[] = "Init";
static char __pyx_k_fade[] = "fade";
static char __pyx_k_gain[] = "gain";
static char __pyx_k_init[] = "__init__";
static char __pyx_k_main[] = "__main__";
static char __pyx_k_name[] = "name";
static char __pyx_k_path[] = "path";
static char __pyx_k_play[] = "play";
static char __pyx_k_self[] = "self";
static char __pyx_k_stop[] = "stop";
static char __pyx_k_test[] = "__test__";
static char __pyx_k_type[] = "type";
static char __pyx_k_PyXAL[] = "_PyXAL";
static char __pyx_k_UTF_8[] = "UTF-8";
static char __pyx_k_clear[] = "clear";
static char __pyx_k_pause[] = "pause";
static char __pyx_k_sound[] = "sound";
static char __pyx_k_split[] = "split";
static char __pyx_k_value[] = "value";
static char __pyx_k_append[] = "append";
static char __pyx_k_encode[] = "encode";
static char __pyx_k_import[] = "__import__";
static char __pyx_k_inited[] = "inited";
static char __pyx_k_module[] = "__module__";
static char __pyx_k_object[] = "object";
static char __pyx_k_player[] = "_player";
static char __pyx_k_remove[] = "remove";
static char __pyx_k_result[] = "result";
static char __pyx_k_Destroy[] = "Destroy";
static char __pyx_k_PySound[] = "PySound";
static char __pyx_k_default[] = "default";
static char __pyx_k_destroy[] = "_destroy";
static char __pyx_k_getGain[] = "getGain";
static char __pyx_k_getName[] = "getName";
static char __pyx_k_getSize[] = "getSize";
static char __pyx_k_hl_name[] = "hl_name";
static char __pyx_k_looping[] = "looping";
static char __pyx_k_players[] = "_players";
static char __pyx_k_prepare[] = "__prepare__";
static char __pyx_k_pysound[] = "pysound";
static char __pyx_k_setGain[] = "setGain";
static char __pyx_k_sound_2[] = "_sound";
static char __pyx_k_stopAll[] = "stopAll";
static char __pyx_k_wrapper[] = "_wrapper";
static char __pyx_k_PyPlayer[] = "PyPlayer";
static char __pyx_k_SetupXAL[] = "SetupXAL";
static char __pyx_k_category[] = "category";
static char __pyx_k_fadeTime[] = "fadeTime";
static char __pyx_k_file_str[] = "file_str";
static char __pyx_k_filename[] = "filename";
static char __pyx_k_getPitch[] = "getPitch";
static char __pyx_k_getSound[] = "getSound";
static char __pyx_k_isFading[] = "isFading";
static char __pyx_k_isPaused[] = "isPaused";
static char __pyx_k_path_str[] = "path_str";
static char __pyx_k_player_2[] = "player";
static char __pyx_k_pyplayer[] = "pyplayer";
static char __pyx_k_qualname[] = "__qualname__";
static char __pyx_k_setPitch[] = "setPitch";
static char __pyx_k_threaded[] = "threaded";
static char __pyx_k_TypeError[] = "TypeError";
static char __pyx_k_backendId[] = "backendId";
static char __pyx_k_destroyed[] = "destroyed";
static char __pyx_k_getFormat[] = "getFormat";
static char __pyx_k_isLooping[] = "isLooping";
static char __pyx_k_isPlaying[] = "isPlaying";
static char __pyx_k_metaclass[] = "__metaclass__";
static char __pyx_k_players_2[] = "players";
static char __pyx_k_stopFirst[] = "stopFirst";
static char __pyx_k_wrapper_2[] = "wrapper";
static char __pyx_k_XALManager[] = "XALManager";
static char __pyx_k_destroyXAL[] = "_destroyXAL";
static char __pyx_k_deviceName[] = "deviceName";
static char __pyx_k_findPlayer[] = "findPlayer";
static char __pyx_k_isFadingIn[] = "isFadingIn";
static char __pyx_k_isStreamed[] = "isStreamed";
static char __pyx_k_sound_name[] = "sound_name";
static char __pyx_k_updateTime[] = "updateTime";
static char __pyx_k_createSound[] = "createSound";
static char __pyx_k_getChannels[] = "getChannels";
static char __pyx_k_getDuration[] = "getDuration";
static char __pyx_k_getFilename[] = "getFilename";
static char __pyx_k_isAnyFading[] = "isAnyFading";
static char __pyx_k_isFadingOut[] = "isFadingOut";
static char __pyx_k_readPcmData[] = "readPcmData";
static char __pyx_k_resumeAudio[] = "resumeAudio";
static char __pyx_k_CATEGORY_STR[] = "CATEGORY_STR";
static char __pyx_k_RuntimeError[] = "RuntimeError";
static char __pyx_k_createPlayer[] = "createPlayer";
static char __pyx_k_destroySound[] = "destroySound";
static char __pyx_k_isAnyPlaying[] = "isAnyPlaying";
static char __pyx_k_suspendAudio[] = "suspendAudio";
static char __pyx_k_PyPlayer_play[] = "PyPlayer.play";
static char __pyx_k_PyPlayer_stop[] = "PyPlayer.stop";
static char __pyx_k_PySound___del[] = "PySound.__del__";
static char __pyx_k_destroyPlayer[] = "destroyPlayer";
static char __pyx_k_isAnyFadingIn[] = "isAnyFadingIn";
static char __pyx_k_PyPlayer___del[] = "PyPlayer.__del__";
static char __pyx_k_PyPlayer_pause[] = "PyPlayer.pause";
static char __pyx_k_PySound___init[] = "PySound.__init__";
static char __pyx_k_isAnyFadingOut[] = "isAnyFadingOut";
static char __pyx_k_PyPlayer___init[] = "PyPlayer.__init__";
static char __pyx_k_PySound_getName[] = "PySound.getName";
static char __pyx_k_PySound_getSize[] = "PySound.getSize";
static char __pyx_k_XALManager_play[] = "XALManager.play";
static char __pyx_k_XALManager_stop[] = "XALManager.stop";
static char __pyx_k_getRealFilename[] = "getRealFilename";
static char __pyx_k_getSamplingRate[] = "getSamplingRate";
static char __pyx_k_getTimePosition[] = "getTimePosition";
static char __pyx_k_PyPlayer_getGain[] = "PyPlayer.getGain";
static char __pyx_k_PyPlayer_getName[] = "PyPlayer.getName";
static char __pyx_k_PyPlayer_getSize[] = "PyPlayer.getSize";
static char __pyx_k_PyPlayer_setGain[] = "PyPlayer.setGain";
static char __pyx_k_PySound__destroy[] = "PySound._destroy";
static char __pyx_k_XALManager___del[] = "XALManager.__del__";
static char __pyx_k_XALManager_clear[] = "XALManager.clear";
static char __pyx_k_getBitsPerSample[] = "getBitsPerSample";
static char __pyx_k_isXALInitialized[] = "isXALInitialized";
static char __pyx_k_PyPlayer__destroy[] = "PyPlayer._destroy";
static char __pyx_k_PyPlayer_getPitch[] = "PyPlayer.getPitch";
static char __pyx_k_PyPlayer_getSound[] = "PyPlayer.getSound";
static char __pyx_k_PyPlayer_isFading[] = "PyPlayer.isFading";
static char __pyx_k_PyPlayer_isPaused[] = "PyPlayer.isPaused";
static char __pyx_k_PyPlayer_setPitch[] = "PyPlayer.setPitch";
static char __pyx_k_PySound_getFormat[] = "PySound.getFormat";
static char __pyx_k_XALManager___init[] = "XALManager.__init__";
static char __pyx_k_getSamplePosition[] = "getSamplePosition";
static char __pyx_k_PyPlayer_isLooping[] = "PyPlayer.isLooping";
static char __pyx_k_PyPlayer_isPlaying[] = "PyPlayer.isPlaying";
static char __pyx_k_PySound_isStreamed[] = "PySound.isStreamed";
static char __pyx_k_XALManager_stopAll[] = "XALManager.stopAll";
static char __pyx_k_PyPlayer_isFadingIn[] = "PyPlayer.isFadingIn";
static char __pyx_k_PySound_getChannels[] = "PySound.getChannels";
static char __pyx_k_PySound_getDuration[] = "PySound.getDuration";
static char __pyx_k_PySound_getFilename[] = "PySound.getFilename";
static char __pyx_k_PySound_readPcmData[] = "PySound.readPcmData";
static char __pyx_k_PyPlayer_getDuration[] = "PyPlayer.getDuration";
static char __pyx_k_PyPlayer_getFilename[] = "PyPlayer.getFilename";
static char __pyx_k_PyPlayer_isFadingOut[] = "PyPlayer.isFadingOut";
static char __pyx_k_XALManager_stopFirst[] = "XALManager.stopFirst";
static char __pyx_k_XALManager_findPlayer[] = "XALManager.findPlayer";
static char __pyx_k_XALManager_createSound[] = "XALManager.createSound";
static char __pyx_k_XALManager_isAnyFading[] = "XALManager.isAnyFading";
static char __pyx_k_XALManager_resumeAudio[] = "XALManager.resumeAudio";
static char __pyx_k_XAL_is_not_Initialized[] = "XAL is not Initialized";
static char __pyx_k_PySound_getRealFilename[] = "PySound.getRealFilename";
static char __pyx_k_PySound_getSamplingRate[] = "PySound.getSamplingRate";
static char __pyx_k_XALManager_createPlayer[] = "XALManager.createPlayer";
static char __pyx_k_XALManager_destroySound[] = "XALManager.destroySound";
static char __pyx_k_XALManager_isAnyPlaying[] = "XALManager.isAnyPlaying";
static char __pyx_k_XALManager_suspendAudio[] = "XALManager.suspendAudio";
static char __pyx_k_PyPlayer_getRealFilename[] = "PyPlayer.getRealFilename";
static char __pyx_k_PyPlayer_getTimePosition[] = "PyPlayer.getTimePosition";
static char __pyx_k_PySound_getBitsPerSample[] = "PySound.getBitsPerSample";
static char __pyx_k_PySound_isXALInitialized[] = "PySound.isXALInitialized";
static char __pyx_k_XALManager_destroyPlayer[] = "XALManager.destroyPlayer";
static char __pyx_k_XALManager_isAnyFadingIn[] = "XALManager.isAnyFadingIn";
static char __pyx_k_PyPlayer_isXALInitialized[] = "PyPlayer.isXALInitialized";
static char __pyx_k_XALManager_isAnyFadingOut[] = "XALManager.isAnyFadingOut";
static char __pyx_k_XAL_Failed_to_load_file_s[] = "XAL Failed to load file %s";
static char __pyx_k_PyPlayer_getSamplePosition[] = "PyPlayer.getSamplePosition";
static char __pyx_k_XALManager_isXALInitialized[] = "XALManager.isXALInitialized";
static char __pyx_k_a_interface_for_the_C_wrapper[] = "\n    a interface for the C++ wrapper\n    ";
static char __pyx_k_a_interface_for_the_wrapper_of[] = "\n    a interface for the wrapper of the xal::Sound class\n    ";
static char __pyx_k_PyPlayer_Can_not_be_initialized[] = "PyPlayer Can not be initialized from python";
static char __pyx_k_a_wrapper_for_the_xal_mgr_objec[] = "\n    a wrapper for the xal::mgr object which is a xal::AudioManager. in other words this is the main interface to XAL you SHOLD NOT create an instance of the class yourself.\n    call PyXAL.Init to set up XAL. an instance of this class will be made avalable at PyXAL.Mgr\n    ";
static char __pyx_k_the_C_interface_for_this_object[] = "the C++ interface for this object has been destroyed";
static char __pyx_k_E_Projects_ARC_editor_Welder_src[] = "E:\\Projects\\ARC\\editor\\Welder\\src\\Core\\PyXAL\\src\\_PyXAL.pyx";
static char __pyx_k_Expected_argument_1_to_be_of_typ[] = "Expected argument 1 to be of type PySound got %s";
static char __pyx_k_Only_one_XALManager_interface_al[] = "Only one XALManager interface allowed at a time, use the one at PyXAL.Mgr";
static char __pyx_k_PyAudioManager_Can_not_be_initia[] = "PyAudioManager Can not be initialized from python";
static char __pyx_k_PySound_Can_not_be_initialized_f[] = "PySound Can not be initialized from python";
static char __pyx_k_XAL_Failed_to_create_a_player_fo[] = "XAL Failed to create a player for %s";
static char __pyx_k_Expected_argument_1_to_be_of_typ_2[] = "Expected argument 1 to be of type PyPlayer got %s";
static PyObject *__pyx_n_s_CATEGORY_STR;
static PyObject *__pyx_n_s_Destroy;
static PyObject *__pyx_kp_s_E_Projects_ARC_editor_Welder_src;
static PyObject *__pyx_kp_s_Expected_argument_1_to_be_of_typ;
static PyObject *__pyx_kp_s_Expected_argument_1_to_be_of_typ_2;
static PyObject *__pyx_n_s_Init;
static PyObject *__pyx_n_s_Mgr;
static PyObject *__pyx_kp_s_Only_one_XALManager_interface_al;
static PyObject *__pyx_kp_s_PyAudioManager_Can_not_be_initia;
static PyObject *__pyx_n_s_PyPlayer;
static PyObject *__pyx_kp_s_PyPlayer_Can_not_be_initialized;
static PyObject *__pyx_n_s_PyPlayer___del;
static PyObject *__pyx_n_s_PyPlayer___init;
static PyObject *__pyx_n_s_PyPlayer__destroy;
static PyObject *__pyx_n_s_PyPlayer_getDuration;
static PyObject *__pyx_n_s_PyPlayer_getFilename;
static PyObject *__pyx_n_s_PyPlayer_getGain;
static PyObject *__pyx_n_s_PyPlayer_getName;
static PyObject *__pyx_n_s_PyPlayer_getPitch;
static PyObject *__pyx_n_s_PyPlayer_getRealFilename;
static PyObject *__pyx_n_s_PyPlayer_getSamplePosition;
static PyObject *__pyx_n_s_PyPlayer_getSize;
static PyObject *__pyx_n_s_PyPlayer_getSound;
static PyObject *__pyx_n_s_PyPlayer_getTimePosition;
static PyObject *__pyx_n_s_PyPlayer_isFading;
static PyObject *__pyx_n_s_PyPlayer_isFadingIn;
static PyObject *__pyx_n_s_PyPlayer_isFadingOut;
static PyObject *__pyx_n_s_PyPlayer_isLooping;
static PyObject *__pyx_n_s_PyPlayer_isPaused;
static PyObject *__pyx_n_s_PyPlayer_isPlaying;
static PyObject *__pyx_n_s_PyPlayer_isXALInitialized;
static PyObject *__pyx_n_s_PyPlayer_pause;
static PyObject *__pyx_n_s_PyPlayer_play;
static PyObject *__pyx_n_s_PyPlayer_setGain;
static PyObject *__pyx_n_s_PyPlayer_setPitch;
static PyObject *__pyx_n_s_PyPlayer_stop;
static PyObject *__pyx_n_s_PySound;
static PyObject *__pyx_kp_s_PySound_Can_not_be_initialized_f;
static PyObject *__pyx_n_s_PySound___del;
static PyObject *__pyx_n_s_PySound___init;
static PyObject *__pyx_n_s_PySound__destroy;
static PyObject *__pyx_n_s_PySound_getBitsPerSample;
static PyObject *__pyx_n_s_PySound_getChannels;
static PyObject *__pyx_n_s_PySound_getDuration;
static PyObject *__pyx_n_s_PySound_getFilename;
static PyObject *__pyx_n_s_PySound_getFormat;
static PyObject *__pyx_n_s_PySound_getName;
static PyObject *__pyx_n_s_PySound_getRealFilename;
static PyObject *__pyx_n_s_PySound_getSamplingRate;
static PyObject *__pyx_n_s_PySound_getSize;
static PyObject *__pyx_n_s_PySound_isStreamed;
static PyObject *__pyx_n_s_PySound_isXALInitialized;
static PyObject *__pyx_n_s_PySound_readPcmData;
static PyObject *__pyx_n_s_PyXAL;
static PyObject *__pyx_n_s_RuntimeError;
static PyObject *__pyx_n_s_SetupXAL;
static PyObject *__pyx_n_s_TypeError;
static PyObject *__pyx_kp_s_UTF_8;
static PyObject *__pyx_n_s_XALManager;
static PyObject *__pyx_n_s_XALManager___del;
static PyObject *__pyx_n_s_XALManager___init;
static PyObject *__pyx_n_s_XALManager_clear;
static PyObject *__pyx_n_s_XALManager_createPlayer;
static PyObject *__pyx_n_s_XALManager_createSound;
static PyObject *__pyx_n_s_XALManager_destroyPlayer;
static PyObject *__pyx_n_s_XALManager_destroySound;
static PyObject *__pyx_n_s_XALManager_findPlayer;
static PyObject *__pyx_n_s_XALManager_isAnyFading;
static PyObject *__pyx_n_s_XALManager_isAnyFadingIn;
static PyObject *__pyx_n_s_XALManager_isAnyFadingOut;
static PyObject *__pyx_n_s_XALManager_isAnyPlaying;
static PyObject *__pyx_n_s_XALManager_isXALInitialized;
static PyObject *__pyx_n_s_XALManager_play;
static PyObject *__pyx_n_s_XALManager_resumeAudio;
static PyObject *__pyx_n_s_XALManager_stop;
static PyObject *__pyx_n_s_XALManager_stopAll;
static PyObject *__pyx_n_s_XALManager_stopFirst;
static PyObject *__pyx_n_s_XALManager_suspendAudio;
static PyObject *__pyx_kp_s_XAL_Failed_to_create_a_player_fo;
static PyObject *__pyx_kp_s_XAL_Failed_to_load_file_s;
static PyObject *__pyx_kp_s_XAL_is_not_Initialized;
static PyObject *__pyx_kp_s__26;
static PyObject *__pyx_kp_s_a_interface_for_the_C_wrapper;
static PyObject *__pyx_kp_s_a_interface_for_the_wrapper_of;
static PyObject *__pyx_kp_s_a_wrapper_for_the_xal_mgr_objec;
static PyObject *__pyx_n_s_append;
static PyObject *__pyx_n_s_backendId;
static PyObject *__pyx_n_s_category;
static PyObject *__pyx_n_s_clear;
static PyObject *__pyx_n_s_createPlayer;
static PyObject *__pyx_n_s_createSound;
static PyObject *__pyx_n_s_default;
static PyObject *__pyx_n_s_del;
static PyObject *__pyx_n_s_destroy;
static PyObject *__pyx_n_s_destroyPlayer;
static PyObject *__pyx_n_s_destroySound;
static PyObject *__pyx_n_s_destroyXAL;
static PyObject *__pyx_n_s_destroyed;
static PyObject *__pyx_n_s_deviceName;
static PyObject *__pyx_n_s_doc;
static PyObject *__pyx_n_s_encode;
static PyObject *__pyx_n_s_fade;
static PyObject *__pyx_n_s_fadeTime;
static PyObject *__pyx_n_s_file_str;
static PyObject *__pyx_n_s_filename;
static PyObject *__pyx_n_s_findPlayer;
static PyObject *__pyx_n_s_gain;
static PyObject *__pyx_n_s_getBitsPerSample;
static PyObject *__pyx_n_s_getChannels;
static PyObject *__pyx_n_s_getDuration;
static PyObject *__pyx_n_s_getFilename;
static PyObject *__pyx_n_s_getFormat;
static PyObject *__pyx_n_s_getGain;
static PyObject *__pyx_n_s_getName;
static PyObject *__pyx_n_s_getPitch;
static PyObject *__pyx_n_s_getRealFilename;
static PyObject *__pyx_n_s_getSamplePosition;
static PyObject *__pyx_n_s_getSamplingRate;
static PyObject *__pyx_n_s_getSize;
static PyObject *__pyx_n_s_getSound;
static PyObject *__pyx_n_s_getTimePosition;
static PyObject *__pyx_n_s_hl_name;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_init;
static PyObject *__pyx_n_s_inited;
static PyObject *__pyx_n_s_isAnyFading;
static PyObject *__pyx_n_s_isAnyFadingIn;
static PyObject *__pyx_n_s_isAnyFadingOut;
static PyObject *__pyx_n_s_isAnyPlaying;
static PyObject *__pyx_n_s_isFading;
static PyObject *__pyx_n_s_isFadingIn;
static PyObject *__pyx_n_s_isFadingOut;
static PyObject *__pyx_n_s_isLooping;
static PyObject *__pyx_n_s_isPaused;
static PyObject *__pyx_n_s_isPlaying;
static PyObject *__pyx_n_s_isStreamed;
static PyObject *__pyx_n_s_isXALInitialized;
static PyObject *__pyx_n_s_looping;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_metaclass;
static PyObject *__pyx_n_s_module;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_s_object;
static PyObject *__pyx_n_s_os;
static PyObject *__pyx_n_s_path;
static PyObject *__pyx_n_s_path_str;
static PyObject *__pyx_n_s_pause;
static PyObject *__pyx_n_s_play;
static PyObject *__pyx_n_s_player;
static PyObject *__pyx_n_s_player_2;
static PyObject *__pyx_n_s_players;
static PyObject *__pyx_n_s_players_2;
static PyObject *__pyx_n_s_prepare;
static PyObject *__pyx_n_s_pyplayer;
static PyObject *__pyx_n_s_pysound;
static PyObject *__pyx_n_s_qualname;
static PyObject *__pyx_n_s_readPcmData;
static PyObject *__pyx_n_s_remove;
static PyObject *__pyx_n_s_result;
static PyObject *__pyx_n_s_resumeAudio;
static PyObject *__pyx_n_s_self;
static PyObject *__pyx_n_s_setGain;
static PyObject *__pyx_n_s_setPitch;
static PyObject *__pyx_n_s_sound;
static PyObject *__pyx_n_s_sound_2;
static PyObject *__pyx_n_s_sound_name;
static PyObject *__pyx_n_s_split;
static PyObject *__pyx_n_s_stop;
static PyObject *__pyx_n_s_stopAll;
static PyObject *__pyx_n_s_stopFirst;
static PyObject *__pyx_n_s_suspendAudio;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_kp_s_the_C_interface_for_this_object;
static PyObject *__pyx_n_s_threaded;
static PyObject *__pyx_n_s_type;
static PyObject *__pyx_n_s_updateTime;
static PyObject *__pyx_n_s_value;
static PyObject *__pyx_n_s_wrapper;
static PyObject *__pyx_n_s_wrapper_2;
static PyObject *__pyx_tuple_;
static PyObject *__pyx_tuple__2;
static PyObject *__pyx_tuple__3;
static PyObject *__pyx_tuple__4;
static PyObject *__pyx_tuple__5;
static PyObject *__pyx_tuple__6;
static PyObject *__pyx_tuple__7;
static PyObject *__pyx_tuple__8;
static PyObject *__pyx_tuple__9;
static PyObject *__pyx_tuple__10;
static PyObject *__pyx_tuple__11;
static PyObject *__pyx_tuple__12;
static PyObject *__pyx_tuple__13;
static PyObject *__pyx_tuple__14;
static PyObject *__pyx_tuple__15;
static PyObject *__pyx_tuple__16;
static PyObject *__pyx_tuple__17;
static PyObject *__pyx_tuple__18;
static PyObject *__pyx_tuple__19;
static PyObject *__pyx_tuple__20;
static PyObject *__pyx_tuple__21;
static PyObject *__pyx_tuple__22;
static PyObject *__pyx_tuple__23;
static PyObject *__pyx_tuple__24;
static PyObject *__pyx_tuple__25;
static PyObject *__pyx_tuple__27;
static PyObject *__pyx_tuple__28;
static PyObject *__pyx_tuple__29;
static PyObject *__pyx_tuple__30;
static PyObject *__pyx_tuple__31;
static PyObject *__pyx_tuple__32;
static PyObject *__pyx_tuple__33;
static PyObject *__pyx_tuple__34;
static PyObject *__pyx_tuple__35;
static PyObject *__pyx_tuple__36;
static PyObject *__pyx_tuple__37;
static PyObject *__pyx_tuple__38;
static PyObject *__pyx_tuple__39;
static PyObject *__pyx_tuple__40;
static PyObject *__pyx_tuple__41;
static PyObject *__pyx_tuple__42;
static PyObject *__pyx_tuple__43;
static PyObject *__pyx_tuple__44;
static PyObject *__pyx_tuple__45;
static PyObject *__pyx_tuple__46;
static PyObject *__pyx_tuple__47;
static PyObject *__pyx_tuple__48;
static PyObject *__pyx_tuple__49;
static PyObject *__pyx_tuple__50;
static PyObject *__pyx_tuple__51;
static PyObject *__pyx_tuple__52;
static PyObject *__pyx_tuple__53;
static PyObject *__pyx_tuple__54;
static PyObject *__pyx_tuple__55;
static PyObject *__pyx_tuple__56;
static PyObject *__pyx_tuple__57;
static PyObject *__pyx_tuple__58;
static PyObject *__pyx_tuple__59;
static PyObject *__pyx_tuple__60;
static PyObject *__pyx_tuple__61;
static PyObject *__pyx_tuple__62;
static PyObject *__pyx_tuple__63;
static PyObject *__pyx_tuple__64;
static PyObject *__pyx_tuple__65;
static PyObject *__pyx_tuple__66;
static PyObject *__pyx_tuple__67;
static PyObject *__pyx_tuple__68;
static PyObject *__pyx_tuple__69;
static PyObject *__pyx_tuple__70;
static PyObject *__pyx_tuple__71;
static PyObject *__pyx_tuple__72;
static PyObject *__pyx_tuple__73;
static PyObject *__pyx_tuple__74;
static PyObject *__pyx_tuple__75;
static PyObject *__pyx_tuple__76;
static PyObject *__pyx_tuple__77;
static PyObject *__pyx_tuple__78;
static PyObject *__pyx_tuple__79;
static PyObject *__pyx_tuple__80;
static PyObject *__pyx_tuple__81;
static PyObject *__pyx_tuple__82;
static PyObject *__pyx_tuple__83;
static PyObject *__pyx_tuple__84;
static PyObject *__pyx_tuple__85;
static PyObject *__pyx_tuple__86;
static PyObject *__pyx_tuple__87;
static PyObject *__pyx_tuple__88;
static PyObject *__pyx_tuple__89;
static PyObject *__pyx_tuple__90;
static PyObject *__pyx_tuple__91;
static PyObject *__pyx_tuple__92;
static PyObject *__pyx_tuple__93;
static PyObject *__pyx_tuple__94;
static PyObject *__pyx_tuple__95;
static PyObject *__pyx_tuple__96;
static PyObject *__pyx_tuple__97;
static PyObject *__pyx_tuple__98;
static PyObject *__pyx_tuple__99;
static PyObject *__pyx_tuple__100;
static PyObject *__pyx_tuple__101;
static PyObject *__pyx_tuple__102;
static PyObject *__pyx_tuple__103;
static PyObject *__pyx_tuple__104;
static PyObject *__pyx_tuple__105;
static PyObject *__pyx_tuple__106;
static PyObject *__pyx_tuple__107;
static PyObject *__pyx_tuple__108;
static PyObject *__pyx_tuple__109;
static PyObject *__pyx_tuple__110;
static PyObject *__pyx_tuple__111;
static PyObject *__pyx_tuple__112;
static PyObject *__pyx_tuple__113;
static PyObject *__pyx_tuple__114;
static PyObject *__pyx_tuple__115;
static PyObject *__pyx_tuple__116;
static PyObject *__pyx_tuple__117;
static PyObject *__pyx_tuple__118;
static PyObject *__pyx_tuple__119;
static PyObject *__pyx_tuple__120;
static PyObject *__pyx_tuple__121;
static PyObject *__pyx_tuple__122;
static PyObject *__pyx_tuple__123;
static PyObject *__pyx_tuple__124;
static PyObject *__pyx_tuple__125;
static PyObject *__pyx_tuple__126;
static PyObject *__pyx_tuple__127;
static PyObject *__pyx_tuple__128;
static PyObject *__pyx_tuple__129;
static PyObject *__pyx_tuple__130;
static PyObject *__pyx_tuple__131;
static PyObject *__pyx_tuple__132;
static PyObject *__pyx_tuple__133;
static PyObject *__pyx_tuple__134;
static PyObject *__pyx_tuple__135;
static PyObject *__pyx_tuple__136;
static PyObject *__pyx_tuple__137;
static PyObject *__pyx_tuple__138;
static PyObject *__pyx_tuple__139;
static PyObject *__pyx_tuple__140;
static PyObject *__pyx_tuple__141;
static PyObject *__pyx_tuple__142;
static PyObject *__pyx_tuple__143;
static PyObject *__pyx_tuple__144;
static PyObject *__pyx_tuple__145;
static PyObject *__pyx_tuple__146;
static PyObject *__pyx_tuple__147;
static PyObject *__pyx_tuple__148;
static PyObject *__pyx_tuple__149;
static PyObject *__pyx_tuple__150;
static PyObject *__pyx_tuple__152;
static PyObject *__pyx_tuple__154;
static PyObject *__pyx_tuple__156;
static PyObject *__pyx_tuple__158;
static PyObject *__pyx_tuple__160;
static PyObject *__pyx_tuple__162;
static PyObject *__pyx_tuple__164;
static PyObject *__pyx_tuple__166;
static PyObject *__pyx_tuple__168;
static PyObject *__pyx_tuple__170;
static PyObject *__pyx_tuple__172;
static PyObject *__pyx_tuple__174;
static PyObject *__pyx_tuple__176;
static PyObject *__pyx_tuple__178;
static PyObject *__pyx_tuple__180;
static PyObject *__pyx_tuple__182;
static PyObject *__pyx_tuple__184;
static PyObject *__pyx_tuple__186;
static PyObject *__pyx_tuple__188;
static PyObject *__pyx_tuple__190;
static PyObject *__pyx_tuple__192;
static PyObject *__pyx_tuple__194;
static PyObject *__pyx_tuple__196;
static PyObject *__pyx_tuple__198;
static PyObject *__pyx_tuple__200;
static PyObject *__pyx_tuple__202;
static PyObject *__pyx_tuple__204;
static PyObject *__pyx_tuple__206;
static PyObject *__pyx_tuple__208;
static PyObject *__pyx_tuple__210;
static PyObject *__pyx_tuple__212;
static PyObject *__pyx_tuple__214;
static PyObject *__pyx_tuple__216;
static PyObject *__pyx_tuple__218;
static PyObject *__pyx_tuple__220;
static PyObject *__pyx_tuple__222;
static PyObject *__pyx_tuple__224;
static PyObject *__pyx_tuple__226;
static PyObject *__pyx_tuple__228;
static PyObject *__pyx_tuple__230;
static PyObject *__pyx_tuple__232;
static PyObject *__pyx_tuple__234;
static PyObject *__pyx_tuple__236;
static PyObject *__pyx_tuple__238;
static PyObject *__pyx_tuple__240;
static PyObject *__pyx_tuple__242;
static PyObject *__pyx_tuple__244;
static PyObject *__pyx_tuple__246;
static PyObject *__pyx_tuple__248;
static PyObject *__pyx_tuple__250;
static PyObject *__pyx_tuple__252;
static PyObject *__pyx_tuple__254;
static PyObject *__pyx_tuple__256;
static PyObject *__pyx_tuple__258;
static PyObject *__pyx_tuple__260;
static PyObject *__pyx_tuple__262;
static PyObject *__pyx_tuple__264;
static PyObject *__pyx_tuple__266;
static PyObject *__pyx_tuple__268;
static PyObject *__pyx_tuple__270;
static PyObject *__pyx_codeobj__151;
static PyObject *__pyx_codeobj__153;
static PyObject *__pyx_codeobj__155;
static PyObject *__pyx_codeobj__157;
static PyObject *__pyx_codeobj__159;
static PyObject *__pyx_codeobj__161;
static PyObject *__pyx_codeobj__163;
static PyObject *__pyx_codeobj__165;
static PyObject *__pyx_codeobj__167;
static PyObject *__pyx_codeobj__169;
static PyObject *__pyx_codeobj__171;
static PyObject *__pyx_codeobj__173;
static PyObject *__pyx_codeobj__175;
static PyObject *__pyx_codeobj__177;
static PyObject *__pyx_codeobj__179;
static PyObject *__pyx_codeobj__181;
static PyObject *__pyx_codeobj__183;
static PyObject *__pyx_codeobj__185;
static PyObject *__pyx_codeobj__187;
static PyObject *__pyx_codeobj__189;
static PyObject *__pyx_codeobj__191;
static PyObject *__pyx_codeobj__193;
static PyObject *__pyx_codeobj__195;
static PyObject *__pyx_codeobj__197;
static PyObject *__pyx_codeobj__199;
static PyObject *__pyx_codeobj__201;
static PyObject *__pyx_codeobj__203;
static PyObject *__pyx_codeobj__205;
static PyObject *__pyx_codeobj__207;
static PyObject *__pyx_codeobj__209;
static PyObject *__pyx_codeobj__211;
static PyObject *__pyx_codeobj__213;
static PyObject *__pyx_codeobj__215;
static PyObject *__pyx_codeobj__217;
static PyObject *__pyx_codeobj__219;
static PyObject *__pyx_codeobj__221;
static PyObject *__pyx_codeobj__223;
static PyObject *__pyx_codeobj__225;
static PyObject *__pyx_codeobj__227;
static PyObject *__pyx_codeobj__229;
static PyObject *__pyx_codeobj__231;
static PyObject *__pyx_codeobj__233;
static PyObject *__pyx_codeobj__235;
static PyObject *__pyx_codeobj__237;
static PyObject *__pyx_codeobj__239;
static PyObject *__pyx_codeobj__241;
static PyObject *__pyx_codeobj__243;
static PyObject *__pyx_codeobj__245;
static PyObject *__pyx_codeobj__247;
static PyObject *__pyx_codeobj__249;
static PyObject *__pyx_codeobj__251;
static PyObject *__pyx_codeobj__253;
static PyObject *__pyx_codeobj__255;
static PyObject *__pyx_codeobj__257;
static PyObject *__pyx_codeobj__259;
static PyObject *__pyx_codeobj__261;
static PyObject *__pyx_codeobj__263;
static PyObject *__pyx_codeobj__265;
static PyObject *__pyx_codeobj__267;
static PyObject *__pyx_codeobj__269;
static PyObject *__pyx_codeobj__271;

/* "_PyXAL.pyx":106
 * Mgr = None
 * 
 * cdef hstr Py_to_Hstr (string):             # <<<<<<<<<<<<<<
 *     py_byte_string = string.encode('UTF-8')
 *     cdef char* c_str = py_byte_string
 */

static hstr __pyx_f_6_PyXAL_Py_to_Hstr(PyObject *__pyx_v_string) {
  PyObject *__pyx_v_py_byte_string = NULL;
  char *__pyx_v_c_str;
  hstr __pyx_v_hstring;
  hstr __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  char *__pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("Py_to_Hstr", 0);

  /* "_PyXAL.pyx":107
 * 
 * cdef hstr Py_to_Hstr (string):
 *     py_byte_string = string.encode('UTF-8')             # <<<<<<<<<<<<<<
 *     cdef char* c_str = py_byte_string
 *     cdef hstr hstring = hstr(c_str)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_string, __pyx_n_s_encode); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 107; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 107; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_py_byte_string = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "_PyXAL.pyx":108
 * cdef hstr Py_to_Hstr (string):
 *     py_byte_string = string.encode('UTF-8')
 *     cdef char* c_str = py_byte_string             # <<<<<<<<<<<<<<
 *     cdef hstr hstring = hstr(c_str)
 *     return hstring
 */
  __pyx_t_3 = __Pyx_PyObject_AsString(__pyx_v_py_byte_string); if (unlikely((!__pyx_t_3) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 108; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_c_str = __pyx_t_3;

  /* "_PyXAL.pyx":109
 *     py_byte_string = string.encode('UTF-8')
 *     cdef char* c_str = py_byte_string
 *     cdef hstr hstring = hstr(c_str)             # <<<<<<<<<<<<<<
 *     return hstring
 * 
 */
  __pyx_v_hstring = hstr(__pyx_v_c_str);

  /* "_PyXAL.pyx":110
 *     cdef char* c_str = py_byte_string
 *     cdef hstr hstring = hstr(c_str)
 *     return hstring             # <<<<<<<<<<<<<<
 * 
 * cdef Hstr_to_Py (hstr string):
 */
  __pyx_r = __pyx_v_hstring;
  goto __pyx_L0;

  /* "_PyXAL.pyx":106
 * Mgr = None
 * 
 * cdef hstr Py_to_Hstr (string):             # <<<<<<<<<<<<<<
 *     py_byte_string = string.encode('UTF-8')
 *     cdef char* c_str = py_byte_string
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_WriteUnraisable("_PyXAL.Py_to_Hstr", __pyx_clineno, __pyx_lineno, __pyx_filename, 0);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_py_byte_string);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":112
 *     return hstring
 * 
 * cdef Hstr_to_Py (hstr string):             # <<<<<<<<<<<<<<
 *     cdef const_char_ptr c_str = string.c_str()
 *     py_byte_string = c_str
 */

static PyObject *__pyx_f_6_PyXAL_Hstr_to_Py(hstr __pyx_v_string) {
  const char* __pyx_v_c_str;
  const char* __pyx_v_py_byte_string;
  PyObject *__pyx_v_pystring = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("Hstr_to_Py", 0);

  /* "_PyXAL.pyx":113
 * 
 * cdef Hstr_to_Py (hstr string):
 *     cdef const_char_ptr c_str = string.c_str()             # <<<<<<<<<<<<<<
 *     py_byte_string = c_str
 *     pystring = py_byte_string.decode('UTF-8')
 */
  __pyx_v_c_str = __pyx_v_string.c_str();

  /* "_PyXAL.pyx":114
 * cdef Hstr_to_Py (hstr string):
 *     cdef const_char_ptr c_str = string.c_str()
 *     py_byte_string = c_str             # <<<<<<<<<<<<<<
 *     pystring = py_byte_string.decode('UTF-8')
 *     return pystring
 */
  __pyx_v_py_byte_string = __pyx_v_c_str;

  /* "_PyXAL.pyx":115
 *     cdef const_char_ptr c_str = string.c_str()
 *     py_byte_string = c_str
 *     pystring = py_byte_string.decode('UTF-8')             # <<<<<<<<<<<<<<
 *     return pystring
 * 
 */
  __pyx_t_1 = __Pyx_decode_c_string(__pyx_v_py_byte_string, 0, strlen(__pyx_v_py_byte_string), NULL, NULL, PyUnicode_DecodeUTF8); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 115; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_pystring = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "_PyXAL.pyx":116
 *     py_byte_string = c_str
 *     pystring = py_byte_string.decode('UTF-8')
 *     return pystring             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_pystring);
  __pyx_r = __pyx_v_pystring;
  goto __pyx_L0;

  /* "_PyXAL.pyx":112
 *     return hstring
 * 
 * cdef Hstr_to_Py (hstr string):             # <<<<<<<<<<<<<<
 *     cdef const_char_ptr c_str = string.c_str()
 *     py_byte_string = c_str
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_PyXAL.Hstr_to_Py", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_pystring);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":127
 *     cdef bool destroyed
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         '''
 *         this is a wapper class for a C++ class . it should not be initialied outside of the PyXAL module as proper set up would be impossible.
 */

/* Python wrapper */
static int __pyx_pw_6_PyXAL_14PyAudioManager_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6_PyXAL_14PyAudioManager___init__[] = "\n        this is a wapper class for a C++ class . it should not be initialied outside of the PyXAL module as proper set up would be impossible.\n        as such calling the __init__ method will raise a Runtime Error\n        ";
#if CYTHON_COMPILING_IN_CPYTHON
struct wrapperbase __pyx_wrapperbase_6_PyXAL_14PyAudioManager___init__;
#endif
static int __pyx_pw_6_PyXAL_14PyAudioManager_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_6_PyXAL_14PyAudioManager___init__(((struct __pyx_obj_6_PyXAL_PyAudioManager *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6_PyXAL_14PyAudioManager___init__(CYTHON_UNUSED struct __pyx_obj_6_PyXAL_PyAudioManager *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "_PyXAL.pyx":132
 *         as such calling the __init__ method will raise a Runtime Error
 *         '''
 *         raise RuntimeError("PyAudioManager Can not be initialized from python")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 132; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  {__pyx_filename = __pyx_f[0]; __pyx_lineno = 132; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_PyXAL.pyx":127
 *     cdef bool destroyed
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         '''
 *         this is a wapper class for a C++ class . it should not be initialied outside of the PyXAL module as proper set up would be impossible.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_PyXAL.PyAudioManager.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":143
 *     cdef bool destroyed
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         '''
 *         this is a wapper class for a C++ class . it should not be initialied outside of the PyXAL module as proper set up would be impossible.
 */

/* Python wrapper */
static int __pyx_pw_6_PyXAL_12SoundWrapper_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6_PyXAL_12SoundWrapper___init__[] = "\n        this is a wapper class for a C++ class . it should not be initialied outside of the PyXAL module as proper set up would be impossible.\n        as such calling the __init__ method will raise a Runtime Error\n        ";
#if CYTHON_COMPILING_IN_CPYTHON
struct wrapperbase __pyx_wrapperbase_6_PyXAL_12SoundWrapper___init__;
#endif
static int __pyx_pw_6_PyXAL_12SoundWrapper_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_6_PyXAL_12SoundWrapper___init__(((struct __pyx_obj_6_PyXAL_SoundWrapper *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6_PyXAL_12SoundWrapper___init__(CYTHON_UNUSED struct __pyx_obj_6_PyXAL_SoundWrapper *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "_PyXAL.pyx":148
 *         as such calling the __init__ method will raise a Runtime Error
 *         '''
 *         raise RuntimeError("PySound Can not be initialized from python")             # <<<<<<<<<<<<<<
 * 
 *     def _destroy(self):
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__3, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 148; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  {__pyx_filename = __pyx_f[0]; __pyx_lineno = 148; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_PyXAL.pyx":143
 *     cdef bool destroyed
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         '''
 *         this is a wapper class for a C++ class . it should not be initialied outside of the PyXAL module as proper set up would be impossible.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_PyXAL.SoundWrapper.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":150
 *         raise RuntimeError("PySound Can not be initialized from python")
 * 
 *     def _destroy(self):             # <<<<<<<<<<<<<<
 *         if self.isXALInitialized() and not self.destroyed :
 *             XAL.mgr.destroySound(self._pointer)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_PyXAL_12SoundWrapper_3_destroy(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6_PyXAL_12SoundWrapper_3_destroy(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_destroy (wrapper)", 0);
  __pyx_r = __pyx_pf_6_PyXAL_12SoundWrapper_2_destroy(((struct __pyx_obj_6_PyXAL_SoundWrapper *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_PyXAL_12SoundWrapper_2_destroy(struct __pyx_obj_6_PyXAL_SoundWrapper *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_destroy", 0);

  /* "_PyXAL.pyx":151
 * 
 *     def _destroy(self):
 *         if self.isXALInitialized() and not self.destroyed :             # <<<<<<<<<<<<<<
 *             XAL.mgr.destroySound(self._pointer)
 *             self.destroyed = True
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 151; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 151; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 151; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {
    __pyx_t_4 = (!(__pyx_v_self->destroyed != 0));
    __pyx_t_5 = __pyx_t_4;
  } else {
    __pyx_t_5 = __pyx_t_3;
  }
  if (__pyx_t_5) {

    /* "_PyXAL.pyx":152
 *     def _destroy(self):
 *         if self.isXALInitialized() and not self.destroyed :
 *             XAL.mgr.destroySound(self._pointer)             # <<<<<<<<<<<<<<
 *             self.destroyed = True
 * 
 */
    try {
      xal::mgr->destroySound(__pyx_v_self->_pointer);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 152; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }

    /* "_PyXAL.pyx":153
 *         if self.isXALInitialized() and not self.destroyed :
 *             XAL.mgr.destroySound(self._pointer)
 *             self.destroyed = True             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
    __pyx_v_self->destroyed = 1;
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "_PyXAL.pyx":150
 *         raise RuntimeError("PySound Can not be initialized from python")
 * 
 *     def _destroy(self):             # <<<<<<<<<<<<<<
 *         if self.isXALInitialized() and not self.destroyed :
 *             XAL.mgr.destroySound(self._pointer)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.SoundWrapper._destroy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":155
 *             self.destroyed = True
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if (XAL.mgr != NULL) and (not self.destroyed):
 *             XAL.mgr.destroySound(self._pointer)
 */

/* Python wrapper */
static void __pyx_pw_6_PyXAL_12SoundWrapper_5__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_6_PyXAL_12SoundWrapper_5__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_6_PyXAL_12SoundWrapper_4__dealloc__(((struct __pyx_obj_6_PyXAL_SoundWrapper *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_6_PyXAL_12SoundWrapper_4__dealloc__(struct __pyx_obj_6_PyXAL_SoundWrapper *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "_PyXAL.pyx":156
 * 
 *     def __dealloc__(self):
 *         if (XAL.mgr != NULL) and (not self.destroyed):             # <<<<<<<<<<<<<<
 *             XAL.mgr.destroySound(self._pointer)
 *             self.destroyed = True
 */
  __pyx_t_1 = ((xal::mgr != NULL) != 0);
  if (__pyx_t_1) {
    __pyx_t_2 = ((!(__pyx_v_self->destroyed != 0)) != 0);
    __pyx_t_3 = __pyx_t_2;
  } else {
    __pyx_t_3 = __pyx_t_1;
  }
  if (__pyx_t_3) {

    /* "_PyXAL.pyx":157
 *     def __dealloc__(self):
 *         if (XAL.mgr != NULL) and (not self.destroyed):
 *             XAL.mgr.destroySound(self._pointer)             # <<<<<<<<<<<<<<
 *             self.destroyed = True
 * 
 */
    try {
      xal::mgr->destroySound(__pyx_v_self->_pointer);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 157; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }

    /* "_PyXAL.pyx":158
 *         if (XAL.mgr != NULL) and (not self.destroyed):
 *             XAL.mgr.destroySound(self._pointer)
 *             self.destroyed = True             # <<<<<<<<<<<<<<
 * 
 *     def isXALInitialized(self):
 */
    __pyx_v_self->destroyed = 1;
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "_PyXAL.pyx":155
 *             self.destroyed = True
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if (XAL.mgr != NULL) and (not self.destroyed):
 *             XAL.mgr.destroySound(self._pointer)
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("_PyXAL.SoundWrapper.__dealloc__", __pyx_clineno, __pyx_lineno, __pyx_filename, 0);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "_PyXAL.pyx":160
 *             self.destroyed = True
 * 
 *     def isXALInitialized(self):             # <<<<<<<<<<<<<<
 *         '''
 *         returns true if the C++ side of the interface to XAL exists
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_PyXAL_12SoundWrapper_7isXALInitialized(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6_PyXAL_12SoundWrapper_6isXALInitialized[] = "\n        returns true if the C++ side of the interface to XAL exists\n        ";
static PyObject *__pyx_pw_6_PyXAL_12SoundWrapper_7isXALInitialized(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("isXALInitialized (wrapper)", 0);
  __pyx_r = __pyx_pf_6_PyXAL_12SoundWrapper_6isXALInitialized(((struct __pyx_obj_6_PyXAL_SoundWrapper *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_PyXAL_12SoundWrapper_6isXALInitialized(CYTHON_UNUSED struct __pyx_obj_6_PyXAL_SoundWrapper *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("isXALInitialized", 0);

  /* "_PyXAL.pyx":164
 *         returns true if the C++ side of the interface to XAL exists
 *         '''
 *         if XAL.mgr != NULL:             # <<<<<<<<<<<<<<
 *             return True
 *         else:
 */
  __pyx_t_1 = ((xal::mgr != NULL) != 0);
  if (__pyx_t_1) {

    /* "_PyXAL.pyx":165
 *         '''
 *         if XAL.mgr != NULL:
 *             return True             # <<<<<<<<<<<<<<
 *         else:
 *             return False
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_True);
    __pyx_r = Py_True;
    goto __pyx_L0;
  }
  /*else*/ {

    /* "_PyXAL.pyx":167
 *             return True
 *         else:
 *             return False             # <<<<<<<<<<<<<<
 * 
 *     def getName(self):
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_False);
    __pyx_r = Py_False;
    goto __pyx_L0;
  }

  /* "_PyXAL.pyx":160
 *             self.destroyed = True
 * 
 *     def isXALInitialized(self):             # <<<<<<<<<<<<<<
 *         '''
 *         returns true if the C++ side of the interface to XAL exists
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":169
 *             return False
 * 
 *     def getName(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: returns the string name of the sound. it is normal the full path of teh sound file with out the file extention
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_PyXAL_12SoundWrapper_9getName(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6_PyXAL_12SoundWrapper_8getName[] = "\n        @return: returns the string name of the sound. it is normal the full path of teh sound file with out the file extention\n        ";
static PyObject *__pyx_pw_6_PyXAL_12SoundWrapper_9getName(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getName (wrapper)", 0);
  __pyx_r = __pyx_pf_6_PyXAL_12SoundWrapper_8getName(((struct __pyx_obj_6_PyXAL_SoundWrapper *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_PyXAL_12SoundWrapper_8getName(struct __pyx_obj_6_PyXAL_SoundWrapper *__pyx_v_self) {
  hstr __pyx_v_hl_name;
  PyObject *__pyx_v_name = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  hstr __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getName", 0);

  /* "_PyXAL.pyx":173
 *         @return: returns the string name of the sound. it is normal the full path of teh sound file with out the file extention
 *         '''
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 173; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 173; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 173; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = ((!__pyx_t_3) != 0);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":174
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 174; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 174; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "_PyXAL.pyx":175
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         cdef hstr hl_name = self._pointer.getName()
 */
  __pyx_t_4 = (__pyx_v_self->destroyed != 0);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":176
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         cdef hstr hl_name = self._pointer.getName()
 *         name = Hstr_to_Py(hl_name)
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__5, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 176; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 176; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "_PyXAL.pyx":177
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         cdef hstr hl_name = self._pointer.getName()             # <<<<<<<<<<<<<<
 *         name = Hstr_to_Py(hl_name)
 *         return name
 */
  try {
    __pyx_t_5 = __pyx_v_self->_pointer->getName();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 177; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_hl_name = __pyx_t_5;

  /* "_PyXAL.pyx":178
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         cdef hstr hl_name = self._pointer.getName()
 *         name = Hstr_to_Py(hl_name)             # <<<<<<<<<<<<<<
 *         return name
 * 
 */
  __pyx_t_2 = __pyx_f_6_PyXAL_Hstr_to_Py(__pyx_v_hl_name); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 178; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_name = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "_PyXAL.pyx":179
 *         cdef hstr hl_name = self._pointer.getName()
 *         name = Hstr_to_Py(hl_name)
 *         return name             # <<<<<<<<<<<<<<
 * 
 *     def getFilename(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_name);
  __pyx_r = __pyx_v_name;
  goto __pyx_L0;

  /* "_PyXAL.pyx":169
 *             return False
 * 
 *     def getName(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: returns the string name of the sound. it is normal the full path of teh sound file with out the file extention
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.SoundWrapper.getName", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_name);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":181
 *         return name
 * 
 *     def getFilename(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: returns a string containing the file name the sound was loaded from
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_PyXAL_12SoundWrapper_11getFilename(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6_PyXAL_12SoundWrapper_10getFilename[] = "\n        @return: returns a string containing the file name the sound was loaded from\n        ";
static PyObject *__pyx_pw_6_PyXAL_12SoundWrapper_11getFilename(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getFilename (wrapper)", 0);
  __pyx_r = __pyx_pf_6_PyXAL_12SoundWrapper_10getFilename(((struct __pyx_obj_6_PyXAL_SoundWrapper *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_PyXAL_12SoundWrapper_10getFilename(struct __pyx_obj_6_PyXAL_SoundWrapper *__pyx_v_self) {
  hstr __pyx_v_hl_name;
  PyObject *__pyx_v_name = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  hstr __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getFilename", 0);

  /* "_PyXAL.pyx":185
 *         @return: returns a string containing the file name the sound was loaded from
 *         '''
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 185; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 185; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 185; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = ((!__pyx_t_3) != 0);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":186
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__6, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 186; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 186; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "_PyXAL.pyx":187
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         cdef hstr hl_name = self._pointer.getFilename()
 */
  __pyx_t_4 = (__pyx_v_self->destroyed != 0);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":188
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         cdef hstr hl_name = self._pointer.getFilename()
 *         name = Hstr_to_Py(hl_name)
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__7, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 188; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 188; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "_PyXAL.pyx":189
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         cdef hstr hl_name = self._pointer.getFilename()             # <<<<<<<<<<<<<<
 *         name = Hstr_to_Py(hl_name)
 *         return name
 */
  try {
    __pyx_t_5 = __pyx_v_self->_pointer->getFilename();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 189; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_hl_name = __pyx_t_5;

  /* "_PyXAL.pyx":190
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         cdef hstr hl_name = self._pointer.getFilename()
 *         name = Hstr_to_Py(hl_name)             # <<<<<<<<<<<<<<
 *         return name
 * 
 */
  __pyx_t_2 = __pyx_f_6_PyXAL_Hstr_to_Py(__pyx_v_hl_name); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 190; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_name = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "_PyXAL.pyx":191
 *         cdef hstr hl_name = self._pointer.getFilename()
 *         name = Hstr_to_Py(hl_name)
 *         return name             # <<<<<<<<<<<<<<
 * 
 *     def getRealFilename(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_name);
  __pyx_r = __pyx_v_name;
  goto __pyx_L0;

  /* "_PyXAL.pyx":181
 *         return name
 * 
 *     def getFilename(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: returns a string containing the file name the sound was loaded from
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.SoundWrapper.getFilename", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_name);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":193
 *         return name
 * 
 *     def getRealFilename(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: returns a string with the full path to the file the string was loaded from
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_PyXAL_12SoundWrapper_13getRealFilename(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6_PyXAL_12SoundWrapper_12getRealFilename[] = "\n        @return: returns a string with the full path to the file the string was loaded from\n        ";
static PyObject *__pyx_pw_6_PyXAL_12SoundWrapper_13getRealFilename(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getRealFilename (wrapper)", 0);
  __pyx_r = __pyx_pf_6_PyXAL_12SoundWrapper_12getRealFilename(((struct __pyx_obj_6_PyXAL_SoundWrapper *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_PyXAL_12SoundWrapper_12getRealFilename(struct __pyx_obj_6_PyXAL_SoundWrapper *__pyx_v_self) {
  hstr __pyx_v_hl_name;
  PyObject *__pyx_v_name = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  hstr __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getRealFilename", 0);

  /* "_PyXAL.pyx":197
 *         @return: returns a string with the full path to the file the string was loaded from
 *         '''
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 197; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 197; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 197; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = ((!__pyx_t_3) != 0);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":198
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__8, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 198; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 198; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "_PyXAL.pyx":199
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         cdef hstr hl_name = self._pointer.getRealFilename()
 */
  __pyx_t_4 = (__pyx_v_self->destroyed != 0);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":200
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         cdef hstr hl_name = self._pointer.getRealFilename()
 *         name = Hstr_to_Py(hl_name)
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__9, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 200; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 200; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "_PyXAL.pyx":201
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         cdef hstr hl_name = self._pointer.getRealFilename()             # <<<<<<<<<<<<<<
 *         name = Hstr_to_Py(hl_name)
 *         return name
 */
  try {
    __pyx_t_5 = __pyx_v_self->_pointer->getRealFilename();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 201; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_hl_name = __pyx_t_5;

  /* "_PyXAL.pyx":202
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         cdef hstr hl_name = self._pointer.getRealFilename()
 *         name = Hstr_to_Py(hl_name)             # <<<<<<<<<<<<<<
 *         return name
 * 
 */
  __pyx_t_2 = __pyx_f_6_PyXAL_Hstr_to_Py(__pyx_v_hl_name); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 202; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_name = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "_PyXAL.pyx":203
 *         cdef hstr hl_name = self._pointer.getRealFilename()
 *         name = Hstr_to_Py(hl_name)
 *         return name             # <<<<<<<<<<<<<<
 * 
 *     def getSize(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_name);
  __pyx_r = __pyx_v_name;
  goto __pyx_L0;

  /* "_PyXAL.pyx":193
 *         return name
 * 
 *     def getRealFilename(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: returns a string with the full path to the file the string was loaded from
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.SoundWrapper.getRealFilename", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_name);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":205
 *         return name
 * 
 *     def getSize(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: int the size of the sound data in bits not bytes
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_PyXAL_12SoundWrapper_15getSize(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6_PyXAL_12SoundWrapper_14getSize[] = "\n        @return: int the size of the sound data in bits not bytes\n        ";
static PyObject *__pyx_pw_6_PyXAL_12SoundWrapper_15getSize(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getSize (wrapper)", 0);
  __pyx_r = __pyx_pf_6_PyXAL_12SoundWrapper_14getSize(((struct __pyx_obj_6_PyXAL_SoundWrapper *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_PyXAL_12SoundWrapper_14getSize(struct __pyx_obj_6_PyXAL_SoundWrapper *__pyx_v_self) {
  int __pyx_v_size;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getSize", 0);

  /* "_PyXAL.pyx":209
 *         @return: int the size of the sound data in bits not bytes
 *         '''
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 209; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 209; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 209; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = ((!__pyx_t_3) != 0);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":210
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__10, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 210; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 210; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "_PyXAL.pyx":211
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         cdef int size = self._pointer.getSize()
 */
  __pyx_t_4 = (__pyx_v_self->destroyed != 0);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":212
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         cdef int size = self._pointer.getSize()
 *         return size
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__11, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 212; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 212; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "_PyXAL.pyx":213
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         cdef int size = self._pointer.getSize()             # <<<<<<<<<<<<<<
 *         return size
 * 
 */
  try {
    __pyx_t_5 = __pyx_v_self->_pointer->getSize();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 213; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_size = __pyx_t_5;

  /* "_PyXAL.pyx":214
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         cdef int size = self._pointer.getSize()
 *         return size             # <<<<<<<<<<<<<<
 * 
 *     def getChannels(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_size); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 214; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "_PyXAL.pyx":205
 *         return name
 * 
 *     def getSize(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: int the size of the sound data in bits not bytes
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.SoundWrapper.getSize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":216
 *         return size
 * 
 *     def getChannels(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: int number of channels the sound has. 1 for mono or 2 for stereo
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_PyXAL_12SoundWrapper_17getChannels(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6_PyXAL_12SoundWrapper_16getChannels[] = "\n        @return: int number of channels the sound has. 1 for mono or 2 for stereo \n        ";
static PyObject *__pyx_pw_6_PyXAL_12SoundWrapper_17getChannels(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getChannels (wrapper)", 0);
  __pyx_r = __pyx_pf_6_PyXAL_12SoundWrapper_16getChannels(((struct __pyx_obj_6_PyXAL_SoundWrapper *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_PyXAL_12SoundWrapper_16getChannels(struct __pyx_obj_6_PyXAL_SoundWrapper *__pyx_v_self) {
  int __pyx_v_channels;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getChannels", 0);

  /* "_PyXAL.pyx":220
 *         @return: int number of channels the sound has. 1 for mono or 2 for stereo
 *         '''
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 220; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 220; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 220; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = ((!__pyx_t_3) != 0);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":221
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__12, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 221; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 221; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "_PyXAL.pyx":222
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         cdef int channels = self._pointer.getChannels()
 */
  __pyx_t_4 = (__pyx_v_self->destroyed != 0);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":223
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         cdef int channels = self._pointer.getChannels()
 *         return channels
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__13, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 223; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 223; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "_PyXAL.pyx":224
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         cdef int channels = self._pointer.getChannels()             # <<<<<<<<<<<<<<
 *         return channels
 * 
 */
  try {
    __pyx_t_5 = __pyx_v_self->_pointer->getChannels();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 224; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_channels = __pyx_t_5;

  /* "_PyXAL.pyx":225
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         cdef int channels = self._pointer.getChannels()
 *         return channels             # <<<<<<<<<<<<<<
 * 
 *     def getSamplingRate(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_channels); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 225; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "_PyXAL.pyx":216
 *         return size
 * 
 *     def getChannels(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: int number of channels the sound has. 1 for mono or 2 for stereo
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.SoundWrapper.getChannels", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":227
 *         return channels
 * 
 *     def getSamplingRate(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: int the sampeling rate for the sound in samples per second
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_PyXAL_12SoundWrapper_19getSamplingRate(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6_PyXAL_12SoundWrapper_18getSamplingRate[] = "\n        @return: int the sampeling rate for the sound in samples per second\n        ";
static PyObject *__pyx_pw_6_PyXAL_12SoundWrapper_19getSamplingRate(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getSamplingRate (wrapper)", 0);
  __pyx_r = __pyx_pf_6_PyXAL_12SoundWrapper_18getSamplingRate(((struct __pyx_obj_6_PyXAL_SoundWrapper *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_PyXAL_12SoundWrapper_18getSamplingRate(struct __pyx_obj_6_PyXAL_SoundWrapper *__pyx_v_self) {
  int __pyx_v_rate;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getSamplingRate", 0);

  /* "_PyXAL.pyx":231
 *         @return: int the sampeling rate for the sound in samples per second
 *         '''
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 231; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 231; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 231; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = ((!__pyx_t_3) != 0);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":232
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__14, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 232; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 232; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "_PyXAL.pyx":233
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         cdef int rate = self._pointer.getSamplingRate()
 */
  __pyx_t_4 = (__pyx_v_self->destroyed != 0);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":234
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         cdef int rate = self._pointer.getSamplingRate()
 *         return rate
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__15, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 234; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 234; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "_PyXAL.pyx":235
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         cdef int rate = self._pointer.getSamplingRate()             # <<<<<<<<<<<<<<
 *         return rate
 * 
 */
  try {
    __pyx_t_5 = __pyx_v_self->_pointer->getSamplingRate();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 235; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_rate = __pyx_t_5;

  /* "_PyXAL.pyx":236
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         cdef int rate = self._pointer.getSamplingRate()
 *         return rate             # <<<<<<<<<<<<<<
 * 
 *     def getBitsPerSample(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_rate); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 236; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "_PyXAL.pyx":227
 *         return channels
 * 
 *     def getSamplingRate(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: int the sampeling rate for the sound in samples per second
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.SoundWrapper.getSamplingRate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":238
 *         return rate
 * 
 *     def getBitsPerSample(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: int the bits per sample of data in the sound. usualy 8, 16, or 24, possibly 32 not sure
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_PyXAL_12SoundWrapper_21getBitsPerSample(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6_PyXAL_12SoundWrapper_20getBitsPerSample[] = "\n        @return: int the bits per sample of data in the sound. usualy 8, 16, or 24, possibly 32 not sure\n        ";
static PyObject *__pyx_pw_6_PyXAL_12SoundWrapper_21getBitsPerSample(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getBitsPerSample (wrapper)", 0);
  __pyx_r = __pyx_pf_6_PyXAL_12SoundWrapper_20getBitsPerSample(((struct __pyx_obj_6_PyXAL_SoundWrapper *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_PyXAL_12SoundWrapper_20getBitsPerSample(struct __pyx_obj_6_PyXAL_SoundWrapper *__pyx_v_self) {
  int __pyx_v_rate;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getBitsPerSample", 0);

  /* "_PyXAL.pyx":242
 *         @return: int the bits per sample of data in the sound. usualy 8, 16, or 24, possibly 32 not sure
 *         '''
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 242; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 242; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 242; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = ((!__pyx_t_3) != 0);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":243
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__16, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 243; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 243; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "_PyXAL.pyx":244
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         cdef int rate = self._pointer.getBitsPerSample()
 */
  __pyx_t_4 = (__pyx_v_self->destroyed != 0);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":245
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         cdef int rate = self._pointer.getBitsPerSample()
 *         return rate
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__17, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 245; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 245; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "_PyXAL.pyx":246
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         cdef int rate = self._pointer.getBitsPerSample()             # <<<<<<<<<<<<<<
 *         return rate
 * 
 */
  try {
    __pyx_t_5 = __pyx_v_self->_pointer->getBitsPerSample();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 246; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_rate = __pyx_t_5;

  /* "_PyXAL.pyx":247
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         cdef int rate = self._pointer.getBitsPerSample()
 *         return rate             # <<<<<<<<<<<<<<
 * 
 *     def getDuration(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_rate); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 247; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "_PyXAL.pyx":238
 *         return rate
 * 
 *     def getBitsPerSample(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: int the bits per sample of data in the sound. usualy 8, 16, or 24, possibly 32 not sure
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.SoundWrapper.getBitsPerSample", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":249
 *         return rate
 * 
 *     def getDuration(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: float duration of the sound in seconds. it is a floating point number to acound for fractions of a second
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_PyXAL_12SoundWrapper_23getDuration(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6_PyXAL_12SoundWrapper_22getDuration[] = "\n        @return: float duration of the sound in seconds. it is a floating point number to acound for fractions of a second\n        ";
static PyObject *__pyx_pw_6_PyXAL_12SoundWrapper_23getDuration(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getDuration (wrapper)", 0);
  __pyx_r = __pyx_pf_6_PyXAL_12SoundWrapper_22getDuration(((struct __pyx_obj_6_PyXAL_SoundWrapper *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_PyXAL_12SoundWrapper_22getDuration(struct __pyx_obj_6_PyXAL_SoundWrapper *__pyx_v_self) {
  float __pyx_v_duration;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  float __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getDuration", 0);

  /* "_PyXAL.pyx":253
 *         @return: float duration of the sound in seconds. it is a floating point number to acound for fractions of a second
 *         '''
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 253; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 253; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 253; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = ((!__pyx_t_3) != 0);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":254
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__18, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 254; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 254; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "_PyXAL.pyx":255
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         cdef float duration = self._pointer.getDuration()
 */
  __pyx_t_4 = (__pyx_v_self->destroyed != 0);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":256
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         cdef float duration = self._pointer.getDuration()
 *         return duration
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__19, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 256; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 256; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "_PyXAL.pyx":257
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         cdef float duration = self._pointer.getDuration()             # <<<<<<<<<<<<<<
 *         return duration
 * 
 */
  try {
    __pyx_t_5 = __pyx_v_self->_pointer->getDuration();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 257; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_duration = __pyx_t_5;

  /* "_PyXAL.pyx":258
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         cdef float duration = self._pointer.getDuration()
 *         return duration             # <<<<<<<<<<<<<<
 * 
 *     def getFormat(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_duration); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 258; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "_PyXAL.pyx":249
 *         return rate
 * 
 *     def getDuration(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: float duration of the sound in seconds. it is a floating point number to acound for fractions of a second
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.SoundWrapper.getDuration", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":260
 *         return duration
 * 
 *     def getFormat(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: int the intrnal designation of the sound format. coresponds to a file type but as of now there is no way to tell for certin which is which
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_PyXAL_12SoundWrapper_25getFormat(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6_PyXAL_12SoundWrapper_24getFormat[] = "\n        @return: int the intrnal designation of the sound format. coresponds to a file type but as of now there is no way to tell for certin which is which \n            as the nubers will change depending on what formats are currently suported by XAL\n        ";
static PyObject *__pyx_pw_6_PyXAL_12SoundWrapper_25getFormat(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getFormat (wrapper)", 0);
  __pyx_r = __pyx_pf_6_PyXAL_12SoundWrapper_24getFormat(((struct __pyx_obj_6_PyXAL_SoundWrapper *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_PyXAL_12SoundWrapper_24getFormat(struct __pyx_obj_6_PyXAL_SoundWrapper *__pyx_v_self) {
  int __pyx_v_format;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  enum xal::Format __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getFormat", 0);

  /* "_PyXAL.pyx":265
 *             as the nubers will change depending on what formats are currently suported by XAL
 *         '''
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 265; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 265; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 265; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = ((!__pyx_t_3) != 0);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":266
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__20, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 266; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 266; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "_PyXAL.pyx":267
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         cdef int format = <int>self._pointer.getFormat()
 */
  __pyx_t_4 = (__pyx_v_self->destroyed != 0);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":268
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         cdef int format = <int>self._pointer.getFormat()
 *         return format
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__21, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 268; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 268; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "_PyXAL.pyx":269
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         cdef int format = <int>self._pointer.getFormat()             # <<<<<<<<<<<<<<
 *         return format
 * 
 */
  try {
    __pyx_t_5 = __pyx_v_self->_pointer->getFormat();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 269; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_format = ((int)__pyx_t_5);

  /* "_PyXAL.pyx":270
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         cdef int format = <int>self._pointer.getFormat()
 *         return format             # <<<<<<<<<<<<<<
 * 
 *     def isStreamed(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_format); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 270; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "_PyXAL.pyx":260
 *         return duration
 * 
 *     def getFormat(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: int the intrnal designation of the sound format. coresponds to a file type but as of now there is no way to tell for certin which is which
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.SoundWrapper.getFormat", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":272
 *         return format
 * 
 *     def isStreamed(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: bool is the sound being streamed from it's file to the player? or is it comleatly loaded into memory.
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_PyXAL_12SoundWrapper_27isStreamed(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6_PyXAL_12SoundWrapper_26isStreamed[] = "\n        @return: bool is the sound being streamed from it's file to the player? or is it comleatly loaded into memory. \n            should always return false in PyXAL as PyXAL uses full decoding mode\n        ";
static PyObject *__pyx_pw_6_PyXAL_12SoundWrapper_27isStreamed(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("isStreamed (wrapper)", 0);
  __pyx_r = __pyx_pf_6_PyXAL_12SoundWrapper_26isStreamed(((struct __pyx_obj_6_PyXAL_SoundWrapper *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_PyXAL_12SoundWrapper_26isStreamed(struct __pyx_obj_6_PyXAL_SoundWrapper *__pyx_v_self) {
  int __pyx_v_streamed;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  bool __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("isStreamed", 0);

  /* "_PyXAL.pyx":277
 *             should always return false in PyXAL as PyXAL uses full decoding mode
 *         '''
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 277; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 277; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 277; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = ((!__pyx_t_3) != 0);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":278
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__22, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 278; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 278; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "_PyXAL.pyx":279
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         cdef bint streamed = self._pointer.isStreamed()
 */
  __pyx_t_4 = (__pyx_v_self->destroyed != 0);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":280
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         cdef bint streamed = self._pointer.isStreamed()
 *         return streamed
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__23, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 280; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 280; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "_PyXAL.pyx":281
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         cdef bint streamed = self._pointer.isStreamed()             # <<<<<<<<<<<<<<
 *         return streamed
 * 
 */
  try {
    __pyx_t_5 = __pyx_v_self->_pointer->isStreamed();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 281; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_streamed = __pyx_t_5;

  /* "_PyXAL.pyx":282
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         cdef bint streamed = self._pointer.isStreamed()
 *         return streamed             # <<<<<<<<<<<<<<
 * 
 *     def readPcmData(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_streamed); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 282; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "_PyXAL.pyx":272
 *         return format
 * 
 *     def isStreamed(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: bool is the sound being streamed from it's file to the player? or is it comleatly loaded into memory.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.SoundWrapper.isStreamed", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":284
 *         return streamed
 * 
 *     def readPcmData(self):             # <<<<<<<<<<<<<<
 *         '''
 *         read the pcm data of the sound and return it the format of said data can be determined from the size, chanels, bits per sample and sampleling rate of the sound
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_PyXAL_12SoundWrapper_29readPcmData(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6_PyXAL_12SoundWrapper_28readPcmData[] = "\n        read the pcm data of the sound and return it the format of said data can be determined from the size, chanels, bits per sample and sampleling rate of the sound\n        @return: a 2 tuple of (number of bits read, string of bytes read)\n        ";
static PyObject *__pyx_pw_6_PyXAL_12SoundWrapper_29readPcmData(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("readPcmData (wrapper)", 0);
  __pyx_r = __pyx_pf_6_PyXAL_12SoundWrapper_28readPcmData(((struct __pyx_obj_6_PyXAL_SoundWrapper *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_PyXAL_12SoundWrapper_28readPcmData(struct __pyx_obj_6_PyXAL_SoundWrapper *__pyx_v_self) {
  unsigned char *__pyx_v_pcm_data;
  int __pyx_v_pcm_size;
  char *__pyx_v_c_data;
  PyObject *__pyx_v_data = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  char const *__pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("readPcmData", 0);

  /* "_PyXAL.pyx":289
 *         @return: a 2 tuple of (number of bits read, string of bytes read)
 *         '''
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 289; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 289; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 289; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = ((!__pyx_t_3) != 0);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":290
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__24, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 290; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 290; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "_PyXAL.pyx":291
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         cdef unsigned char* pcm_data
 */
  __pyx_t_4 = (__pyx_v_self->destroyed != 0);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":292
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         cdef unsigned char* pcm_data
 *         cdef int pcm_size
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__25, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 292; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 292; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "_PyXAL.pyx":296
 *         cdef int pcm_size
 *         cdef char* c_data
 *         data = ""             # <<<<<<<<<<<<<<
 *         try:
 *             pcm_size = self._pointer.readPcmData(&pcm_data)
 */
  __Pyx_INCREF(__pyx_kp_s__26);
  __pyx_v_data = __pyx_kp_s__26;

  /* "_PyXAL.pyx":297
 *         cdef char* c_data
 *         data = ""
 *         try:             # <<<<<<<<<<<<<<
 *             pcm_size = self._pointer.readPcmData(&pcm_data)
 *             if pcm_size > 0:
 */
  /*try:*/ {

    /* "_PyXAL.pyx":298
 *         data = ""
 *         try:
 *             pcm_size = self._pointer.readPcmData(&pcm_data)             # <<<<<<<<<<<<<<
 *             if pcm_size > 0:
 *                 c_data = <char*>pcm_data
 */
    try {
      __pyx_t_5 = __pyx_v_self->_pointer->readPcmData((&__pyx_v_pcm_data));
    } catch(...) {
      __Pyx_CppExn2PyErr();
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 298; __pyx_clineno = __LINE__; goto __pyx_L6_error;}
    }
    __pyx_v_pcm_size = __pyx_t_5;

    /* "_PyXAL.pyx":299
 *         try:
 *             pcm_size = self._pointer.readPcmData(&pcm_data)
 *             if pcm_size > 0:             # <<<<<<<<<<<<<<
 *                 c_data = <char*>pcm_data
 *                 data = c_data[:pcm_size]
 */
    __pyx_t_4 = ((__pyx_v_pcm_size > 0) != 0);
    if (__pyx_t_4) {

      /* "_PyXAL.pyx":300
 *             pcm_size = self._pointer.readPcmData(&pcm_data)
 *             if pcm_size > 0:
 *                 c_data = <char*>pcm_data             # <<<<<<<<<<<<<<
 *                 data = c_data[:pcm_size]
 *         finally:
 */
      __pyx_v_c_data = ((char *)__pyx_v_pcm_data);

      /* "_PyXAL.pyx":301
 *             if pcm_size > 0:
 *                 c_data = <char*>pcm_data
 *                 data = c_data[:pcm_size]             # <<<<<<<<<<<<<<
 *         finally:
 *             free(pcm_data)
 */
      __pyx_t_2 = __Pyx_PyBytes_FromStringAndSize(__pyx_v_c_data + 0, __pyx_v_pcm_size - 0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 301; __pyx_clineno = __LINE__; goto __pyx_L6_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF_SET(__pyx_v_data, __pyx_t_2);
      __pyx_t_2 = 0;
      goto __pyx_L8;
    }
    __pyx_L8:;
  }

  /* "_PyXAL.pyx":303
 *                 data = c_data[:pcm_size]
 *         finally:
 *             free(pcm_data)             # <<<<<<<<<<<<<<
 *             pcm_data = NULL
 *         return (pcm_size, data)
 */
  /*finally:*/ {
    /*normal exit:*/{
      free(__pyx_v_pcm_data);

      /* "_PyXAL.pyx":304
 *         finally:
 *             free(pcm_data)
 *             pcm_data = NULL             # <<<<<<<<<<<<<<
 *         return (pcm_size, data)
 * 
 */
      __pyx_v_pcm_data = NULL;
      goto __pyx_L7;
    }
    /*exception exit:*/{
      __pyx_L6_error:;
      __pyx_t_8 = 0; __pyx_t_9 = 0; __pyx_t_10 = 0; __pyx_t_11 = 0; __pyx_t_12 = 0; __pyx_t_13 = 0;
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_11, &__pyx_t_12, &__pyx_t_13);
      if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10) < 0)) __Pyx_ErrFetch(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10);
      __Pyx_XGOTREF(__pyx_t_8);
      __Pyx_XGOTREF(__pyx_t_9);
      __Pyx_XGOTREF(__pyx_t_10);
      __Pyx_XGOTREF(__pyx_t_11);
      __Pyx_XGOTREF(__pyx_t_12);
      __Pyx_XGOTREF(__pyx_t_13);
      __pyx_t_5 = __pyx_lineno; __pyx_t_6 = __pyx_clineno; __pyx_t_7 = __pyx_filename;
      {

        /* "_PyXAL.pyx":303
 *                 data = c_data[:pcm_size]
 *         finally:
 *             free(pcm_data)             # <<<<<<<<<<<<<<
 *             pcm_data = NULL
 *         return (pcm_size, data)
 */
        free(__pyx_v_pcm_data);

        /* "_PyXAL.pyx":304
 *         finally:
 *             free(pcm_data)
 *             pcm_data = NULL             # <<<<<<<<<<<<<<
 *         return (pcm_size, data)
 * 
 */
        __pyx_v_pcm_data = NULL;
      }
      if (PY_MAJOR_VERSION >= 3) {
        __Pyx_XGIVEREF(__pyx_t_11);
        __Pyx_XGIVEREF(__pyx_t_12);
        __Pyx_XGIVEREF(__pyx_t_13);
        __Pyx_ExceptionReset(__pyx_t_11, __pyx_t_12, __pyx_t_13);
      }
      __Pyx_XGIVEREF(__pyx_t_8);
      __Pyx_XGIVEREF(__pyx_t_9);
      __Pyx_XGIVEREF(__pyx_t_10);
      __Pyx_ErrRestore(__pyx_t_8, __pyx_t_9, __pyx_t_10);
      __pyx_t_8 = 0; __pyx_t_9 = 0; __pyx_t_10 = 0; __pyx_t_11 = 0; __pyx_t_12 = 0; __pyx_t_13 = 0;
      __pyx_lineno = __pyx_t_5; __pyx_clineno = __pyx_t_6; __pyx_filename = __pyx_t_7;
      goto __pyx_L1_error;
    }
    __pyx_L7:;
  }

  /* "_PyXAL.pyx":305
 *             free(pcm_data)
 *             pcm_data = NULL
 *         return (pcm_size, data)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_pcm_size); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 305; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 305; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_data);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_data);
  __Pyx_GIVEREF(__pyx_v_data);
  __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "_PyXAL.pyx":284
 *         return streamed
 * 
 *     def readPcmData(self):             # <<<<<<<<<<<<<<
 *         '''
 *         read the pcm data of the sound and return it the format of said data can be determined from the size, chanels, bits per sample and sampleling rate of the sound
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.SoundWrapper.readPcmData", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_data);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":316
 *     cdef bool destroyed
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         '''
 *         this is a wapper class for a C++ class . it should not be initialied outside of the PyXAL module as proper set up would be impossible.
 */

/* Python wrapper */
static int __pyx_pw_6_PyXAL_13PlayerWrapper_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6_PyXAL_13PlayerWrapper___init__[] = "\n        this is a wapper class for a C++ class . it should not be initialied outside of the PyXAL module as proper set up would be impossible.\n        as such calling the __init__ method will raise a Runtime Error\n        ";
#if CYTHON_COMPILING_IN_CPYTHON
struct wrapperbase __pyx_wrapperbase_6_PyXAL_13PlayerWrapper___init__;
#endif
static int __pyx_pw_6_PyXAL_13PlayerWrapper_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_6_PyXAL_13PlayerWrapper___init__(((struct __pyx_obj_6_PyXAL_PlayerWrapper *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6_PyXAL_13PlayerWrapper___init__(CYTHON_UNUSED struct __pyx_obj_6_PyXAL_PlayerWrapper *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "_PyXAL.pyx":321
 *         as such calling the __init__ method will raise a Runtime Error
 *         '''
 *         raise RuntimeError("PyPlayer Can not be initialized from python")             # <<<<<<<<<<<<<<
 * 
 *     def _destroy(self):
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__27, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 321; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  {__pyx_filename = __pyx_f[0]; __pyx_lineno = 321; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_PyXAL.pyx":316
 *     cdef bool destroyed
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         '''
 *         this is a wapper class for a C++ class . it should not be initialied outside of the PyXAL module as proper set up would be impossible.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_PyXAL.PlayerWrapper.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":323
 *         raise RuntimeError("PyPlayer Can not be initialized from python")
 * 
 *     def _destroy(self):             # <<<<<<<<<<<<<<
 *         if self.isXALInitialized() and not self.destroyed:
 *             XAL.mgr.destroyPlayer(self._pointer)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_PyXAL_13PlayerWrapper_3_destroy(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6_PyXAL_13PlayerWrapper_3_destroy(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_destroy (wrapper)", 0);
  __pyx_r = __pyx_pf_6_PyXAL_13PlayerWrapper_2_destroy(((struct __pyx_obj_6_PyXAL_PlayerWrapper *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_PyXAL_13PlayerWrapper_2_destroy(struct __pyx_obj_6_PyXAL_PlayerWrapper *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_destroy", 0);

  /* "_PyXAL.pyx":324
 * 
 *     def _destroy(self):
 *         if self.isXALInitialized() and not self.destroyed:             # <<<<<<<<<<<<<<
 *             XAL.mgr.destroyPlayer(self._pointer)
 *             self.destroyed = True
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 324; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 324; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 324; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {
    __pyx_t_4 = (!(__pyx_v_self->destroyed != 0));
    __pyx_t_5 = __pyx_t_4;
  } else {
    __pyx_t_5 = __pyx_t_3;
  }
  if (__pyx_t_5) {

    /* "_PyXAL.pyx":325
 *     def _destroy(self):
 *         if self.isXALInitialized() and not self.destroyed:
 *             XAL.mgr.destroyPlayer(self._pointer)             # <<<<<<<<<<<<<<
 *             self.destroyed = True
 * 
 */
    try {
      xal::mgr->destroyPlayer(__pyx_v_self->_pointer);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 325; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }

    /* "_PyXAL.pyx":326
 *         if self.isXALInitialized() and not self.destroyed:
 *             XAL.mgr.destroyPlayer(self._pointer)
 *             self.destroyed = True             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
    __pyx_v_self->destroyed = 1;
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "_PyXAL.pyx":323
 *         raise RuntimeError("PyPlayer Can not be initialized from python")
 * 
 *     def _destroy(self):             # <<<<<<<<<<<<<<
 *         if self.isXALInitialized() and not self.destroyed:
 *             XAL.mgr.destroyPlayer(self._pointer)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.PlayerWrapper._destroy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":328
 *             self.destroyed = True
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if (XAL.mgr != NULL) and (not self.destroyed):
 *             XAL.mgr.destroyPlayer(self._pointer)
 */

/* Python wrapper */
static void __pyx_pw_6_PyXAL_13PlayerWrapper_5__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_6_PyXAL_13PlayerWrapper_5__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_6_PyXAL_13PlayerWrapper_4__dealloc__(((struct __pyx_obj_6_PyXAL_PlayerWrapper *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_6_PyXAL_13PlayerWrapper_4__dealloc__(struct __pyx_obj_6_PyXAL_PlayerWrapper *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "_PyXAL.pyx":329
 * 
 *     def __dealloc__(self):
 *         if (XAL.mgr != NULL) and (not self.destroyed):             # <<<<<<<<<<<<<<
 *             XAL.mgr.destroyPlayer(self._pointer)
 *             self.destroyed = True
 */
  __pyx_t_1 = ((xal::mgr != NULL) != 0);
  if (__pyx_t_1) {
    __pyx_t_2 = ((!(__pyx_v_self->destroyed != 0)) != 0);
    __pyx_t_3 = __pyx_t_2;
  } else {
    __pyx_t_3 = __pyx_t_1;
  }
  if (__pyx_t_3) {

    /* "_PyXAL.pyx":330
 *     def __dealloc__(self):
 *         if (XAL.mgr != NULL) and (not self.destroyed):
 *             XAL.mgr.destroyPlayer(self._pointer)             # <<<<<<<<<<<<<<
 *             self.destroyed = True
 * 
 */
    try {
      xal::mgr->destroyPlayer(__pyx_v_self->_pointer);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 330; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }

    /* "_PyXAL.pyx":331
 *         if (XAL.mgr != NULL) and (not self.destroyed):
 *             XAL.mgr.destroyPlayer(self._pointer)
 *             self.destroyed = True             # <<<<<<<<<<<<<<
 * 
 *     def isXALInitialized(self):
 */
    __pyx_v_self->destroyed = 1;
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "_PyXAL.pyx":328
 *             self.destroyed = True
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if (XAL.mgr != NULL) and (not self.destroyed):
 *             XAL.mgr.destroyPlayer(self._pointer)
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("_PyXAL.PlayerWrapper.__dealloc__", __pyx_clineno, __pyx_lineno, __pyx_filename, 0);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "_PyXAL.pyx":333
 *             self.destroyed = True
 * 
 *     def isXALInitialized(self):             # <<<<<<<<<<<<<<
 *         '''
 *         returns true if the C++ side of the interface to XAL exists
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_PyXAL_13PlayerWrapper_7isXALInitialized(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6_PyXAL_13PlayerWrapper_6isXALInitialized[] = "\n        returns true if the C++ side of the interface to XAL exists\n        ";
static PyObject *__pyx_pw_6_PyXAL_13PlayerWrapper_7isXALInitialized(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("isXALInitialized (wrapper)", 0);
  __pyx_r = __pyx_pf_6_PyXAL_13PlayerWrapper_6isXALInitialized(((struct __pyx_obj_6_PyXAL_PlayerWrapper *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_PyXAL_13PlayerWrapper_6isXALInitialized(CYTHON_UNUSED struct __pyx_obj_6_PyXAL_PlayerWrapper *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("isXALInitialized", 0);

  /* "_PyXAL.pyx":337
 *         returns true if the C++ side of the interface to XAL exists
 *         '''
 *         if XAL.mgr != NULL:             # <<<<<<<<<<<<<<
 *             return True
 *         else:
 */
  __pyx_t_1 = ((xal::mgr != NULL) != 0);
  if (__pyx_t_1) {

    /* "_PyXAL.pyx":338
 *         '''
 *         if XAL.mgr != NULL:
 *             return True             # <<<<<<<<<<<<<<
 *         else:
 *             return False
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_True);
    __pyx_r = Py_True;
    goto __pyx_L0;
  }
  /*else*/ {

    /* "_PyXAL.pyx":340
 *             return True
 *         else:
 *             return False             # <<<<<<<<<<<<<<
 * 
 *     def getGain(self):
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_False);
    __pyx_r = Py_False;
    goto __pyx_L0;
  }

  /* "_PyXAL.pyx":333
 *             self.destroyed = True
 * 
 *     def isXALInitialized(self):             # <<<<<<<<<<<<<<
 *         '''
 *         returns true if the C++ side of the interface to XAL exists
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":342
 *             return False
 * 
 *     def getGain(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: float the current gain of the player (also knows as volume)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_PyXAL_13PlayerWrapper_9getGain(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6_PyXAL_13PlayerWrapper_8getGain[] = "\n        @return: float the current gain of the player (also knows as volume)\n        ";
static PyObject *__pyx_pw_6_PyXAL_13PlayerWrapper_9getGain(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getGain (wrapper)", 0);
  __pyx_r = __pyx_pf_6_PyXAL_13PlayerWrapper_8getGain(((struct __pyx_obj_6_PyXAL_PlayerWrapper *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_PyXAL_13PlayerWrapper_8getGain(struct __pyx_obj_6_PyXAL_PlayerWrapper *__pyx_v_self) {
  float __pyx_v_gain;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  float __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getGain", 0);

  /* "_PyXAL.pyx":346
 *         @return: float the current gain of the player (also knows as volume)
 *         '''
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 346; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 346; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 346; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = ((!__pyx_t_3) != 0);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":347
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__28, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 347; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 347; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "_PyXAL.pyx":348
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         cdef float gain = self._pointer.getGain()
 */
  __pyx_t_4 = (__pyx_v_self->destroyed != 0);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":349
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         cdef float gain = self._pointer.getGain()
 *         return gain
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__29, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 349; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 349; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "_PyXAL.pyx":350
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         cdef float gain = self._pointer.getGain()             # <<<<<<<<<<<<<<
 *         return gain
 * 
 */
  try {
    __pyx_t_5 = __pyx_v_self->_pointer->getGain();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 350; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_gain = __pyx_t_5;

  /* "_PyXAL.pyx":351
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         cdef float gain = self._pointer.getGain()
 *         return gain             # <<<<<<<<<<<<<<
 * 
 *     def setGain(self, float value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_gain); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 351; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "_PyXAL.pyx":342
 *             return False
 * 
 *     def getGain(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: float the current gain of the player (also knows as volume)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.PlayerWrapper.getGain", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":353
 *         return gain
 * 
 *     def setGain(self, float value):             # <<<<<<<<<<<<<<
 *         '''
 *         set the gain of the player (also knows as volume)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_PyXAL_13PlayerWrapper_11setGain(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static char __pyx_doc_6_PyXAL_13PlayerWrapper_10setGain[] = "\n        set the gain of the player (also knows as volume)\n        @param value: float the value of the volume to set 1.0 is normal 2.0 is twice as loud 0.5 is half volume ect.\n        ";
static PyObject *__pyx_pw_6_PyXAL_13PlayerWrapper_11setGain(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  float __pyx_v_value;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setGain (wrapper)", 0);
  assert(__pyx_arg_value); {
    __pyx_v_value = __pyx_PyFloat_AsFloat(__pyx_arg_value); if (unlikely((__pyx_v_value == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 353; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("_PyXAL.PlayerWrapper.setGain", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6_PyXAL_13PlayerWrapper_10setGain(((struct __pyx_obj_6_PyXAL_PlayerWrapper *)__pyx_v_self), ((float)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_PyXAL_13PlayerWrapper_10setGain(struct __pyx_obj_6_PyXAL_PlayerWrapper *__pyx_v_self, float __pyx_v_value) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setGain", 0);

  /* "_PyXAL.pyx":358
 *         @param value: float the value of the volume to set 1.0 is normal 2.0 is twice as loud 0.5 is half volume ect.
 *         '''
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 358; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 358; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 358; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = ((!__pyx_t_3) != 0);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":359
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__30, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 359; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 359; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "_PyXAL.pyx":360
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         self._pointer.setGain(value)
 */
  __pyx_t_4 = (__pyx_v_self->destroyed != 0);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":361
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         self._pointer.setGain(value)
 * 
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__31, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 361; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 361; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "_PyXAL.pyx":362
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         self._pointer.setGain(value)             # <<<<<<<<<<<<<<
 * 
 *     def getPitch(self):
 */
  try {
    __pyx_v_self->_pointer->setGain(__pyx_v_value);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 362; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "_PyXAL.pyx":353
 *         return gain
 * 
 *     def setGain(self, float value):             # <<<<<<<<<<<<<<
 *         '''
 *         set the gain of the player (also knows as volume)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.PlayerWrapper.setGain", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":364
 *         self._pointer.setGain(value)
 * 
 *     def getPitch(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: float the current pitch of the player
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_PyXAL_13PlayerWrapper_13getPitch(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6_PyXAL_13PlayerWrapper_12getPitch[] = "\n        @return: float the current pitch of the player\n        ";
static PyObject *__pyx_pw_6_PyXAL_13PlayerWrapper_13getPitch(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getPitch (wrapper)", 0);
  __pyx_r = __pyx_pf_6_PyXAL_13PlayerWrapper_12getPitch(((struct __pyx_obj_6_PyXAL_PlayerWrapper *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_PyXAL_13PlayerWrapper_12getPitch(struct __pyx_obj_6_PyXAL_PlayerWrapper *__pyx_v_self) {
  float __pyx_v_offset;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  float __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getPitch", 0);

  /* "_PyXAL.pyx":368
 *         @return: float the current pitch of the player
 *         '''
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 368; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 368; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 368; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = ((!__pyx_t_3) != 0);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":369
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__32, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 369; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 369; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "_PyXAL.pyx":370
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         cdef float offset = self._pointer.getPitch()
 */
  __pyx_t_4 = (__pyx_v_self->destroyed != 0);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":371
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         cdef float offset = self._pointer.getPitch()
 *         return offset
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__33, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 371; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 371; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "_PyXAL.pyx":372
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         cdef float offset = self._pointer.getPitch()             # <<<<<<<<<<<<<<
 *         return offset
 * 
 */
  try {
    __pyx_t_5 = __pyx_v_self->_pointer->getPitch();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 372; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_offset = __pyx_t_5;

  /* "_PyXAL.pyx":373
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         cdef float offset = self._pointer.getPitch()
 *         return offset             # <<<<<<<<<<<<<<
 * 
 *     def setPitch(self, float value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_offset); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 373; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "_PyXAL.pyx":364
 *         self._pointer.setGain(value)
 * 
 *     def getPitch(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: float the current pitch of the player
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.PlayerWrapper.getPitch", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":375
 *         return offset
 * 
 *     def setPitch(self, float value):             # <<<<<<<<<<<<<<
 *         '''
 *         set the current pitch of the player
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_PyXAL_13PlayerWrapper_15setPitch(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static char __pyx_doc_6_PyXAL_13PlayerWrapper_14setPitch[] = "\n        set the current pitch of the player\n        @param value: float the value of the pitch to set to set 1.0 is normal 2.0 is a 200% shift 0.5 is a 50% shift\n        ";
static PyObject *__pyx_pw_6_PyXAL_13PlayerWrapper_15setPitch(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  float __pyx_v_value;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setPitch (wrapper)", 0);
  assert(__pyx_arg_value); {
    __pyx_v_value = __pyx_PyFloat_AsFloat(__pyx_arg_value); if (unlikely((__pyx_v_value == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 375; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("_PyXAL.PlayerWrapper.setPitch", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6_PyXAL_13PlayerWrapper_14setPitch(((struct __pyx_obj_6_PyXAL_PlayerWrapper *)__pyx_v_self), ((float)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_PyXAL_13PlayerWrapper_14setPitch(struct __pyx_obj_6_PyXAL_PlayerWrapper *__pyx_v_self, float __pyx_v_value) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setPitch", 0);

  /* "_PyXAL.pyx":380
 *         @param value: float the value of the pitch to set to set 1.0 is normal 2.0 is a 200% shift 0.5 is a 50% shift
 *         '''
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 380; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 380; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 380; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = ((!__pyx_t_3) != 0);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":381
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__34, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 381; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 381; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "_PyXAL.pyx":382
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         self._pointer.setPitch(value)
 */
  __pyx_t_4 = (__pyx_v_self->destroyed != 0);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":383
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         self._pointer.setPitch(value)
 * 
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__35, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 383; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 383; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "_PyXAL.pyx":384
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         self._pointer.setPitch(value)             # <<<<<<<<<<<<<<
 * 
 *     def getName(self):
 */
  try {
    __pyx_v_self->_pointer->setPitch(__pyx_v_value);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 384; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "_PyXAL.pyx":375
 *         return offset
 * 
 *     def setPitch(self, float value):             # <<<<<<<<<<<<<<
 *         '''
 *         set the current pitch of the player
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.PlayerWrapper.setPitch", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":386
 *         self._pointer.setPitch(value)
 * 
 *     def getName(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: returns the string name of the sound. it is normal the full path of teh sound file with out the file extention
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_PyXAL_13PlayerWrapper_17getName(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6_PyXAL_13PlayerWrapper_16getName[] = "\n        @return: returns the string name of the sound. it is normal the full path of teh sound file with out the file extention\n        ";
static PyObject *__pyx_pw_6_PyXAL_13PlayerWrapper_17getName(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getName (wrapper)", 0);
  __pyx_r = __pyx_pf_6_PyXAL_13PlayerWrapper_16getName(((struct __pyx_obj_6_PyXAL_PlayerWrapper *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_PyXAL_13PlayerWrapper_16getName(struct __pyx_obj_6_PyXAL_PlayerWrapper *__pyx_v_self) {
  hstr __pyx_v_hl_name;
  PyObject *__pyx_v_name = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  hstr __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getName", 0);

  /* "_PyXAL.pyx":390
 *         @return: returns the string name of the sound. it is normal the full path of teh sound file with out the file extention
 *         '''
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 390; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 390; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 390; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = ((!__pyx_t_3) != 0);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":391
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__36, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 391; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 391; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "_PyXAL.pyx":392
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         cdef hstr hl_name = self._pointer.getName()
 */
  __pyx_t_4 = (__pyx_v_self->destroyed != 0);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":393
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         cdef hstr hl_name = self._pointer.getName()
 *         name = Hstr_to_Py(hl_name)
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__37, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 393; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 393; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "_PyXAL.pyx":394
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         cdef hstr hl_name = self._pointer.getName()             # <<<<<<<<<<<<<<
 *         name = Hstr_to_Py(hl_name)
 *         return name
 */
  try {
    __pyx_t_5 = __pyx_v_self->_pointer->getName();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 394; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_hl_name = __pyx_t_5;

  /* "_PyXAL.pyx":395
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         cdef hstr hl_name = self._pointer.getName()
 *         name = Hstr_to_Py(hl_name)             # <<<<<<<<<<<<<<
 *         return name
 * 
 */
  __pyx_t_2 = __pyx_f_6_PyXAL_Hstr_to_Py(__pyx_v_hl_name); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 395; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_name = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "_PyXAL.pyx":396
 *         cdef hstr hl_name = self._pointer.getName()
 *         name = Hstr_to_Py(hl_name)
 *         return name             # <<<<<<<<<<<<<<
 * 
 *     def getFilename(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_name);
  __pyx_r = __pyx_v_name;
  goto __pyx_L0;

  /* "_PyXAL.pyx":386
 *         self._pointer.setPitch(value)
 * 
 *     def getName(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: returns the string name of the sound. it is normal the full path of teh sound file with out the file extention
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.PlayerWrapper.getName", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_name);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":398
 *         return name
 * 
 *     def getFilename(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: returns a string containing the file name the sound was loaded from
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_PyXAL_13PlayerWrapper_19getFilename(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6_PyXAL_13PlayerWrapper_18getFilename[] = "\n        @return: returns a string containing the file name the sound was loaded from\n        ";
static PyObject *__pyx_pw_6_PyXAL_13PlayerWrapper_19getFilename(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getFilename (wrapper)", 0);
  __pyx_r = __pyx_pf_6_PyXAL_13PlayerWrapper_18getFilename(((struct __pyx_obj_6_PyXAL_PlayerWrapper *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_PyXAL_13PlayerWrapper_18getFilename(struct __pyx_obj_6_PyXAL_PlayerWrapper *__pyx_v_self) {
  hstr __pyx_v_hl_name;
  PyObject *__pyx_v_name = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  hstr __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getFilename", 0);

  /* "_PyXAL.pyx":402
 *         @return: returns a string containing the file name the sound was loaded from
 *         '''
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 402; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 402; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 402; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = ((!__pyx_t_3) != 0);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":403
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__38, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 403; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 403; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "_PyXAL.pyx":404
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         cdef hstr hl_name = self._pointer.getFilename()
 */
  __pyx_t_4 = (__pyx_v_self->destroyed != 0);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":405
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         cdef hstr hl_name = self._pointer.getFilename()
 *         name = Hstr_to_Py(hl_name)
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__39, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 405; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 405; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "_PyXAL.pyx":406
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         cdef hstr hl_name = self._pointer.getFilename()             # <<<<<<<<<<<<<<
 *         name = Hstr_to_Py(hl_name)
 *         return name
 */
  try {
    __pyx_t_5 = __pyx_v_self->_pointer->getFilename();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 406; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_hl_name = __pyx_t_5;

  /* "_PyXAL.pyx":407
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         cdef hstr hl_name = self._pointer.getFilename()
 *         name = Hstr_to_Py(hl_name)             # <<<<<<<<<<<<<<
 *         return name
 * 
 */
  __pyx_t_2 = __pyx_f_6_PyXAL_Hstr_to_Py(__pyx_v_hl_name); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 407; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_name = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "_PyXAL.pyx":408
 *         cdef hstr hl_name = self._pointer.getFilename()
 *         name = Hstr_to_Py(hl_name)
 *         return name             # <<<<<<<<<<<<<<
 * 
 *     def getRealFilename(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_name);
  __pyx_r = __pyx_v_name;
  goto __pyx_L0;

  /* "_PyXAL.pyx":398
 *         return name
 * 
 *     def getFilename(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: returns a string containing the file name the sound was loaded from
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.PlayerWrapper.getFilename", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_name);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":410
 *         return name
 * 
 *     def getRealFilename(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: returns a string with the full path to the file the string was loaded from
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_PyXAL_13PlayerWrapper_21getRealFilename(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6_PyXAL_13PlayerWrapper_20getRealFilename[] = "\n        @return: returns a string with the full path to the file the string was loaded from\n        ";
static PyObject *__pyx_pw_6_PyXAL_13PlayerWrapper_21getRealFilename(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getRealFilename (wrapper)", 0);
  __pyx_r = __pyx_pf_6_PyXAL_13PlayerWrapper_20getRealFilename(((struct __pyx_obj_6_PyXAL_PlayerWrapper *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_PyXAL_13PlayerWrapper_20getRealFilename(struct __pyx_obj_6_PyXAL_PlayerWrapper *__pyx_v_self) {
  hstr __pyx_v_hl_name;
  PyObject *__pyx_v_name = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  hstr __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getRealFilename", 0);

  /* "_PyXAL.pyx":414
 *         @return: returns a string with the full path to the file the string was loaded from
 *         '''
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 414; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 414; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 414; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = ((!__pyx_t_3) != 0);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":415
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__40, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 415; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 415; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "_PyXAL.pyx":416
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         cdef hstr hl_name = self._pointer.getRealFilename()
 */
  __pyx_t_4 = (__pyx_v_self->destroyed != 0);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":417
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         cdef hstr hl_name = self._pointer.getRealFilename()
 *         name = Hstr_to_Py(hl_name)
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__41, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 417; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 417; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "_PyXAL.pyx":418
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         cdef hstr hl_name = self._pointer.getRealFilename()             # <<<<<<<<<<<<<<
 *         name = Hstr_to_Py(hl_name)
 *         return name
 */
  try {
    __pyx_t_5 = __pyx_v_self->_pointer->getRealFilename();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 418; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_hl_name = __pyx_t_5;

  /* "_PyXAL.pyx":419
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         cdef hstr hl_name = self._pointer.getRealFilename()
 *         name = Hstr_to_Py(hl_name)             # <<<<<<<<<<<<<<
 *         return name
 * 
 */
  __pyx_t_2 = __pyx_f_6_PyXAL_Hstr_to_Py(__pyx_v_hl_name); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 419; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_name = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "_PyXAL.pyx":420
 *         cdef hstr hl_name = self._pointer.getRealFilename()
 *         name = Hstr_to_Py(hl_name)
 *         return name             # <<<<<<<<<<<<<<
 * 
 *     def getDuration(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_name);
  __pyx_r = __pyx_v_name;
  goto __pyx_L0;

  /* "_PyXAL.pyx":410
 *         return name
 * 
 *     def getRealFilename(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: returns a string with the full path to the file the string was loaded from
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.PlayerWrapper.getRealFilename", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_name);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":422
 *         return name
 * 
 *     def getDuration(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: float duration of the sound in seconds. it is a floating point number to acound for fractions of a second
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_PyXAL_13PlayerWrapper_23getDuration(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6_PyXAL_13PlayerWrapper_22getDuration[] = "\n        @return: float duration of the sound in seconds. it is a floating point number to acound for fractions of a second\n        ";
static PyObject *__pyx_pw_6_PyXAL_13PlayerWrapper_23getDuration(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getDuration (wrapper)", 0);
  __pyx_r = __pyx_pf_6_PyXAL_13PlayerWrapper_22getDuration(((struct __pyx_obj_6_PyXAL_PlayerWrapper *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_PyXAL_13PlayerWrapper_22getDuration(struct __pyx_obj_6_PyXAL_PlayerWrapper *__pyx_v_self) {
  float __pyx_v_duration;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  float __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getDuration", 0);

  /* "_PyXAL.pyx":426
 *         @return: float duration of the sound in seconds. it is a floating point number to acound for fractions of a second
 *         '''
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 426; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 426; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 426; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = ((!__pyx_t_3) != 0);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":427
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__42, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 427; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 427; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "_PyXAL.pyx":428
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         cdef float duration = self._pointer.getDuration()
 */
  __pyx_t_4 = (__pyx_v_self->destroyed != 0);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":429
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         cdef float duration = self._pointer.getDuration()
 *         return duration
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__43, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 429; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 429; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "_PyXAL.pyx":430
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         cdef float duration = self._pointer.getDuration()             # <<<<<<<<<<<<<<
 *         return duration
 * 
 */
  try {
    __pyx_t_5 = __pyx_v_self->_pointer->getDuration();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 430; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_duration = __pyx_t_5;

  /* "_PyXAL.pyx":431
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         cdef float duration = self._pointer.getDuration()
 *         return duration             # <<<<<<<<<<<<<<
 * 
 *     def getSize(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_duration); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 431; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "_PyXAL.pyx":422
 *         return name
 * 
 *     def getDuration(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: float duration of the sound in seconds. it is a floating point number to acound for fractions of a second
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.PlayerWrapper.getDuration", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":433
 *         return duration
 * 
 *     def getSize(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: int the size of the sound data in bits not bytes
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_PyXAL_13PlayerWrapper_25getSize(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6_PyXAL_13PlayerWrapper_24getSize[] = "\n        @return: int the size of the sound data in bits not bytes\n        ";
static PyObject *__pyx_pw_6_PyXAL_13PlayerWrapper_25getSize(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getSize (wrapper)", 0);
  __pyx_r = __pyx_pf_6_PyXAL_13PlayerWrapper_24getSize(((struct __pyx_obj_6_PyXAL_PlayerWrapper *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_PyXAL_13PlayerWrapper_24getSize(struct __pyx_obj_6_PyXAL_PlayerWrapper *__pyx_v_self) {
  int __pyx_v_size;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getSize", 0);

  /* "_PyXAL.pyx":437
 *         @return: int the size of the sound data in bits not bytes
 *         '''
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 437; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 437; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 437; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = ((!__pyx_t_3) != 0);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":438
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__44, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 438; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 438; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "_PyXAL.pyx":439
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         cdef int size = self._pointer.getSize()
 */
  __pyx_t_4 = (__pyx_v_self->destroyed != 0);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":440
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         cdef int size = self._pointer.getSize()
 *         return size
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__45, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 440; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 440; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "_PyXAL.pyx":441
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         cdef int size = self._pointer.getSize()             # <<<<<<<<<<<<<<
 *         return size
 * 
 */
  try {
    __pyx_t_5 = __pyx_v_self->_pointer->getSize();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 441; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_size = __pyx_t_5;

  /* "_PyXAL.pyx":442
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         cdef int size = self._pointer.getSize()
 *         return size             # <<<<<<<<<<<<<<
 * 
 *     def getTimePosition(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_size); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 442; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "_PyXAL.pyx":433
 *         return duration
 * 
 *     def getSize(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: int the size of the sound data in bits not bytes
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.PlayerWrapper.getSize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":444
 *         return size
 * 
 *     def getTimePosition(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: float the time position in seconds
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_PyXAL_13PlayerWrapper_27getTimePosition(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6_PyXAL_13PlayerWrapper_26getTimePosition[] = "\n        @return: float the time position in seconds\n        ";
static PyObject *__pyx_pw_6_PyXAL_13PlayerWrapper_27getTimePosition(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getTimePosition (wrapper)", 0);
  __pyx_r = __pyx_pf_6_PyXAL_13PlayerWrapper_26getTimePosition(((struct __pyx_obj_6_PyXAL_PlayerWrapper *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_PyXAL_13PlayerWrapper_26getTimePosition(struct __pyx_obj_6_PyXAL_PlayerWrapper *__pyx_v_self) {
  float __pyx_v_size;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  float __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getTimePosition", 0);

  /* "_PyXAL.pyx":448
 *         @return: float the time position in seconds
 *         '''
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 448; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 448; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 448; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = ((!__pyx_t_3) != 0);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":449
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__46, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 449; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 449; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "_PyXAL.pyx":450
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         cdef float size = self._pointer.getTimePosition()
 */
  __pyx_t_4 = (__pyx_v_self->destroyed != 0);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":451
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         cdef float size = self._pointer.getTimePosition()
 *         return size
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__47, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 451; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 451; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "_PyXAL.pyx":452
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         cdef float size = self._pointer.getTimePosition()             # <<<<<<<<<<<<<<
 *         return size
 * 
 */
  try {
    __pyx_t_5 = __pyx_v_self->_pointer->getTimePosition();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 452; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_size = __pyx_t_5;

  /* "_PyXAL.pyx":453
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         cdef float size = self._pointer.getTimePosition()
 *         return size             # <<<<<<<<<<<<<<
 * 
 *     def getSamplePosition(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_size); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 453; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "_PyXAL.pyx":444
 *         return size
 * 
 *     def getTimePosition(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: float the time position in seconds
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.PlayerWrapper.getTimePosition", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":455
 *         return size
 * 
 *     def getSamplePosition(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: unsigned int the position in the buffer
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_PyXAL_13PlayerWrapper_29getSamplePosition(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6_PyXAL_13PlayerWrapper_28getSamplePosition[] = "\n        @return: unsigned int the position in the buffer\n        ";
static PyObject *__pyx_pw_6_PyXAL_13PlayerWrapper_29getSamplePosition(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getSamplePosition (wrapper)", 0);
  __pyx_r = __pyx_pf_6_PyXAL_13PlayerWrapper_28getSamplePosition(((struct __pyx_obj_6_PyXAL_PlayerWrapper *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_PyXAL_13PlayerWrapper_28getSamplePosition(struct __pyx_obj_6_PyXAL_PlayerWrapper *__pyx_v_self) {
  unsigned int __pyx_v_size;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  unsigned int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getSamplePosition", 0);

  /* "_PyXAL.pyx":459
 *         @return: unsigned int the position in the buffer
 *         '''
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 459; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 459; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 459; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = ((!__pyx_t_3) != 0);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":460
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__48, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 460; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 460; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "_PyXAL.pyx":461
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         cdef unsigned int size = self._pointer.getSamplePosition()
 */
  __pyx_t_4 = (__pyx_v_self->destroyed != 0);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":462
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         cdef unsigned int size = self._pointer.getSamplePosition()
 *         return size
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__49, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 462; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 462; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "_PyXAL.pyx":463
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         cdef unsigned int size = self._pointer.getSamplePosition()             # <<<<<<<<<<<<<<
 *         return size
 * 
 */
  try {
    __pyx_t_5 = __pyx_v_self->_pointer->getSamplePosition();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 463; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_size = __pyx_t_5;

  /* "_PyXAL.pyx":464
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         cdef unsigned int size = self._pointer.getSamplePosition()
 *         return size             # <<<<<<<<<<<<<<
 * 
 *     def isPlaying(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyInt_From_unsigned_int(__pyx_v_size); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 464; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "_PyXAL.pyx":455
 *         return size
 * 
 *     def getSamplePosition(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: unsigned int the position in the buffer
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.PlayerWrapper.getSamplePosition", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":466
 *         return size
 * 
 *     def isPlaying(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: bool True of the sound is playing
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_PyXAL_13PlayerWrapper_31isPlaying(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6_PyXAL_13PlayerWrapper_30isPlaying[] = "\n        @return: bool True of the sound is playing\n        ";
static PyObject *__pyx_pw_6_PyXAL_13PlayerWrapper_31isPlaying(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("isPlaying (wrapper)", 0);
  __pyx_r = __pyx_pf_6_PyXAL_13PlayerWrapper_30isPlaying(((struct __pyx_obj_6_PyXAL_PlayerWrapper *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_PyXAL_13PlayerWrapper_30isPlaying(struct __pyx_obj_6_PyXAL_PlayerWrapper *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  bool __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("isPlaying", 0);

  /* "_PyXAL.pyx":470
 *         @return: bool True of the sound is playing
 *         '''
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 470; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 470; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 470; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = ((!__pyx_t_3) != 0);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":471
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__50, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 471; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 471; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "_PyXAL.pyx":472
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         return self._pointer.isPlaying()
 */
  __pyx_t_4 = (__pyx_v_self->destroyed != 0);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":473
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         return self._pointer.isPlaying()
 * 
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__51, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 473; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 473; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "_PyXAL.pyx":474
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         return self._pointer.isPlaying()             # <<<<<<<<<<<<<<
 * 
 *     def isPaused(self):
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_5 = __pyx_v_self->_pointer->isPlaying();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 474; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_t_5); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 474; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "_PyXAL.pyx":466
 *         return size
 * 
 *     def isPlaying(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: bool True of the sound is playing
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.PlayerWrapper.isPlaying", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":476
 *         return self._pointer.isPlaying()
 * 
 *     def isPaused(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: bool True if the sound is paused
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_PyXAL_13PlayerWrapper_33isPaused(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6_PyXAL_13PlayerWrapper_32isPaused[] = "\n        @return: bool True if the sound is paused\n        ";
static PyObject *__pyx_pw_6_PyXAL_13PlayerWrapper_33isPaused(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("isPaused (wrapper)", 0);
  __pyx_r = __pyx_pf_6_PyXAL_13PlayerWrapper_32isPaused(((struct __pyx_obj_6_PyXAL_PlayerWrapper *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_PyXAL_13PlayerWrapper_32isPaused(struct __pyx_obj_6_PyXAL_PlayerWrapper *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  bool __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("isPaused", 0);

  /* "_PyXAL.pyx":480
 *         @return: bool True if the sound is paused
 *         '''
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 480; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 480; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 480; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = ((!__pyx_t_3) != 0);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":481
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__52, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 481; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 481; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "_PyXAL.pyx":482
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         return self._pointer.isPaused()
 */
  __pyx_t_4 = (__pyx_v_self->destroyed != 0);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":483
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         return self._pointer.isPaused()
 * 
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__53, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 483; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 483; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "_PyXAL.pyx":484
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         return self._pointer.isPaused()             # <<<<<<<<<<<<<<
 * 
 *     def isFading(self):
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_5 = __pyx_v_self->_pointer->isPaused();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 484; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_t_5); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 484; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "_PyXAL.pyx":476
 *         return self._pointer.isPlaying()
 * 
 *     def isPaused(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: bool True if the sound is paused
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.PlayerWrapper.isPaused", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":486
 *         return self._pointer.isPaused()
 * 
 *     def isFading(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: bool True if the sound is fading in or out
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_PyXAL_13PlayerWrapper_35isFading(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6_PyXAL_13PlayerWrapper_34isFading[] = "\n        @return: bool True if the sound is fading in or out\n        ";
static PyObject *__pyx_pw_6_PyXAL_13PlayerWrapper_35isFading(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("isFading (wrapper)", 0);
  __pyx_r = __pyx_pf_6_PyXAL_13PlayerWrapper_34isFading(((struct __pyx_obj_6_PyXAL_PlayerWrapper *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_PyXAL_13PlayerWrapper_34isFading(struct __pyx_obj_6_PyXAL_PlayerWrapper *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  bool __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("isFading", 0);

  /* "_PyXAL.pyx":490
 *         @return: bool True if the sound is fading in or out
 *         '''
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 490; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 490; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 490; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = ((!__pyx_t_3) != 0);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":491
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__54, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 491; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 491; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "_PyXAL.pyx":492
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         return self._pointer.isFading()
 */
  __pyx_t_4 = (__pyx_v_self->destroyed != 0);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":493
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         return self._pointer.isFading()
 * 
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__55, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 493; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 493; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "_PyXAL.pyx":494
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         return self._pointer.isFading()             # <<<<<<<<<<<<<<
 * 
 *     def isFadingIn(self):
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_5 = __pyx_v_self->_pointer->isFading();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 494; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_t_5); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 494; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "_PyXAL.pyx":486
 *         return self._pointer.isPaused()
 * 
 *     def isFading(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: bool True if the sound is fading in or out
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.PlayerWrapper.isFading", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":496
 *         return self._pointer.isFading()
 * 
 *     def isFadingIn(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: bool True if the sound is fading in
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_PyXAL_13PlayerWrapper_37isFadingIn(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6_PyXAL_13PlayerWrapper_36isFadingIn[] = "\n        @return: bool True if the sound is fading in\n        ";
static PyObject *__pyx_pw_6_PyXAL_13PlayerWrapper_37isFadingIn(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("isFadingIn (wrapper)", 0);
  __pyx_r = __pyx_pf_6_PyXAL_13PlayerWrapper_36isFadingIn(((struct __pyx_obj_6_PyXAL_PlayerWrapper *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_PyXAL_13PlayerWrapper_36isFadingIn(struct __pyx_obj_6_PyXAL_PlayerWrapper *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  bool __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("isFadingIn", 0);

  /* "_PyXAL.pyx":500
 *         @return: bool True if the sound is fading in
 *         '''
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 500; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 500; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 500; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = ((!__pyx_t_3) != 0);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":501
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__56, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 501; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 501; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "_PyXAL.pyx":502
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         return self._pointer.isFadingIn()
 */
  __pyx_t_4 = (__pyx_v_self->destroyed != 0);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":503
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         return self._pointer.isFadingIn()
 * 
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__57, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 503; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 503; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "_PyXAL.pyx":504
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         return self._pointer.isFadingIn()             # <<<<<<<<<<<<<<
 * 
 *     def isFadingOut(self):
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_5 = __pyx_v_self->_pointer->isFadingIn();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 504; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_t_5); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 504; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "_PyXAL.pyx":496
 *         return self._pointer.isFading()
 * 
 *     def isFadingIn(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: bool True if the sound is fading in
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.PlayerWrapper.isFadingIn", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":506
 *         return self._pointer.isFadingIn()
 * 
 *     def isFadingOut(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: bool True if teh sound is fading out
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_PyXAL_13PlayerWrapper_39isFadingOut(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6_PyXAL_13PlayerWrapper_38isFadingOut[] = "\n        @return: bool True if teh sound is fading out\n        ";
static PyObject *__pyx_pw_6_PyXAL_13PlayerWrapper_39isFadingOut(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("isFadingOut (wrapper)", 0);
  __pyx_r = __pyx_pf_6_PyXAL_13PlayerWrapper_38isFadingOut(((struct __pyx_obj_6_PyXAL_PlayerWrapper *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_PyXAL_13PlayerWrapper_38isFadingOut(struct __pyx_obj_6_PyXAL_PlayerWrapper *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  bool __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("isFadingOut", 0);

  /* "_PyXAL.pyx":510
 *         @return: bool True if teh sound is fading out
 *         '''
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 510; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 510; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 510; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = ((!__pyx_t_3) != 0);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":511
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__58, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 511; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 511; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "_PyXAL.pyx":512
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         return self._pointer.isFadingOut()
 */
  __pyx_t_4 = (__pyx_v_self->destroyed != 0);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":513
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         return self._pointer.isFadingOut()
 * 
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__59, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 513; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 513; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "_PyXAL.pyx":514
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         return self._pointer.isFadingOut()             # <<<<<<<<<<<<<<
 * 
 *     def isLooping(self):
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_5 = __pyx_v_self->_pointer->isFadingOut();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 514; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_t_5); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 514; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "_PyXAL.pyx":506
 *         return self._pointer.isFadingIn()
 * 
 *     def isFadingOut(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: bool True if teh sound is fading out
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.PlayerWrapper.isFadingOut", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":516
 *         return self._pointer.isFadingOut()
 * 
 *     def isLooping(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: bool True of the sound is looping
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_PyXAL_13PlayerWrapper_41isLooping(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6_PyXAL_13PlayerWrapper_40isLooping[] = "\n        @return: bool True of the sound is looping\n        ";
static PyObject *__pyx_pw_6_PyXAL_13PlayerWrapper_41isLooping(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("isLooping (wrapper)", 0);
  __pyx_r = __pyx_pf_6_PyXAL_13PlayerWrapper_40isLooping(((struct __pyx_obj_6_PyXAL_PlayerWrapper *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_PyXAL_13PlayerWrapper_40isLooping(struct __pyx_obj_6_PyXAL_PlayerWrapper *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  bool __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("isLooping", 0);

  /* "_PyXAL.pyx":520
 *         @return: bool True of the sound is looping
 *         '''
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 520; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 520; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 520; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = ((!__pyx_t_3) != 0);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":521
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__60, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 521; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 521; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "_PyXAL.pyx":522
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         return self._pointer.isLooping()
 */
  __pyx_t_4 = (__pyx_v_self->destroyed != 0);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":523
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         return self._pointer.isLooping()
 * 
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__61, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 523; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 523; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "_PyXAL.pyx":524
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         return self._pointer.isLooping()             # <<<<<<<<<<<<<<
 * 
 *     def play(self, float fadeTime = 0.0, bool looping = False):
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_5 = __pyx_v_self->_pointer->isLooping();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 524; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_t_5); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 524; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "_PyXAL.pyx":516
 *         return self._pointer.isFadingOut()
 * 
 *     def isLooping(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: bool True of the sound is looping
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.PlayerWrapper.isLooping", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":526
 *         return self._pointer.isLooping()
 * 
 *     def play(self, float fadeTime = 0.0, bool looping = False):             # <<<<<<<<<<<<<<
 *         '''
 *         start the sound playing at it's current offset, the offset starts at 0.0 when teh sound is first loaded
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_PyXAL_13PlayerWrapper_43play(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6_PyXAL_13PlayerWrapper_42play[] = "\n        start the sound playing at it's current offset, the offset starts at 0.0 when teh sound is first loaded\n        \n        @param fadeTime: float the time in seconds for the sound to fade in (0.0 by default)\n        @param looping: bool should the sound loop (False by default)\n        ";
static PyObject *__pyx_pw_6_PyXAL_13PlayerWrapper_43play(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  float __pyx_v_fadeTime;
  bool __pyx_v_looping;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("play (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_fadeTime,&__pyx_n_s_looping,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_fadeTime);
          if (value) { values[0] = value; kw_args--; }
        }
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_looping);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "play") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 526; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_fadeTime = __pyx_PyFloat_AsFloat(values[0]); if (unlikely((__pyx_v_fadeTime == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 526; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_fadeTime = ((float)0.0);
    }
    if (values[1]) {
      __pyx_v_looping = __Pyx_PyObject_IsTrue(values[1]); if (unlikely((__pyx_v_looping == (bool)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 526; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_looping = ((bool)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("play", 0, 0, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 526; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("_PyXAL.PlayerWrapper.play", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6_PyXAL_13PlayerWrapper_42play(((struct __pyx_obj_6_PyXAL_PlayerWrapper *)__pyx_v_self), __pyx_v_fadeTime, __pyx_v_looping);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_PyXAL_13PlayerWrapper_42play(struct __pyx_obj_6_PyXAL_PlayerWrapper *__pyx_v_self, float __pyx_v_fadeTime, bool __pyx_v_looping) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("play", 0);

  /* "_PyXAL.pyx":533
 *         @param looping: bool should the sound loop (False by default)
 *         '''
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 533; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 533; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 533; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = ((!__pyx_t_3) != 0);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":534
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__62, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 534; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 534; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "_PyXAL.pyx":535
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         self._pointer.play(fadeTime, looping)
 */
  __pyx_t_4 = (__pyx_v_self->destroyed != 0);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":536
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         self._pointer.play(fadeTime, looping)
 * 
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__63, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 536; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 536; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "_PyXAL.pyx":537
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         self._pointer.play(fadeTime, looping)             # <<<<<<<<<<<<<<
 * 
 *     def stop(self, float fadeTime = 0.0):
 */
  try {
    __pyx_v_self->_pointer->play(__pyx_v_fadeTime, __pyx_v_looping);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 537; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "_PyXAL.pyx":526
 *         return self._pointer.isLooping()
 * 
 *     def play(self, float fadeTime = 0.0, bool looping = False):             # <<<<<<<<<<<<<<
 *         '''
 *         start the sound playing at it's current offset, the offset starts at 0.0 when teh sound is first loaded
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.PlayerWrapper.play", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":539
 *         self._pointer.play(fadeTime, looping)
 * 
 *     def stop(self, float fadeTime = 0.0):             # <<<<<<<<<<<<<<
 *         '''
 *         stop the sound playing and rest set it's offset to 0.0
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_PyXAL_13PlayerWrapper_45stop(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6_PyXAL_13PlayerWrapper_44stop[] = "\n        stop the sound playing and rest set it's offset to 0.0\n        \n        @param fadeTime: float the time in seconds for the sound to fade out (0.0 by default)\n        ";
static PyObject *__pyx_pw_6_PyXAL_13PlayerWrapper_45stop(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  float __pyx_v_fadeTime;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("stop (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_fadeTime,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_fadeTime);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "stop") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 539; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_fadeTime = __pyx_PyFloat_AsFloat(values[0]); if (unlikely((__pyx_v_fadeTime == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 539; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_fadeTime = ((float)0.0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("stop", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 539; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("_PyXAL.PlayerWrapper.stop", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6_PyXAL_13PlayerWrapper_44stop(((struct __pyx_obj_6_PyXAL_PlayerWrapper *)__pyx_v_self), __pyx_v_fadeTime);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_PyXAL_13PlayerWrapper_44stop(struct __pyx_obj_6_PyXAL_PlayerWrapper *__pyx_v_self, float __pyx_v_fadeTime) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("stop", 0);

  /* "_PyXAL.pyx":545
 *         @param fadeTime: float the time in seconds for the sound to fade out (0.0 by default)
 *         '''
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 545; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 545; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 545; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = ((!__pyx_t_3) != 0);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":546
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__64, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 546; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 546; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "_PyXAL.pyx":547
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         self._pointer.stop(fadeTime)
 */
  __pyx_t_4 = (__pyx_v_self->destroyed != 0);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":548
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         self._pointer.stop(fadeTime)
 * 
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__65, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 548; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 548; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "_PyXAL.pyx":549
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         self._pointer.stop(fadeTime)             # <<<<<<<<<<<<<<
 * 
 *     def pause(self, float fadeTime = 0.0):
 */
  try {
    __pyx_v_self->_pointer->stop(__pyx_v_fadeTime);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 549; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "_PyXAL.pyx":539
 *         self._pointer.play(fadeTime, looping)
 * 
 *     def stop(self, float fadeTime = 0.0):             # <<<<<<<<<<<<<<
 *         '''
 *         stop the sound playing and rest set it's offset to 0.0
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.PlayerWrapper.stop", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":551
 *         self._pointer.stop(fadeTime)
 * 
 *     def pause(self, float fadeTime = 0.0):             # <<<<<<<<<<<<<<
 *         '''
 *         stop the sound playing keeping the current offset of the sound
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_PyXAL_13PlayerWrapper_47pause(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6_PyXAL_13PlayerWrapper_46pause[] = "\n        stop the sound playing keeping the current offset of the sound\n        \n        @param fadeTime: float the time in seconds for the sound to fade out (0.0 by default)\n        ";
static PyObject *__pyx_pw_6_PyXAL_13PlayerWrapper_47pause(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  float __pyx_v_fadeTime;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("pause (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_fadeTime,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_fadeTime);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "pause") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 551; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_fadeTime = __pyx_PyFloat_AsFloat(values[0]); if (unlikely((__pyx_v_fadeTime == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 551; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_fadeTime = ((float)0.0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("pause", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 551; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("_PyXAL.PlayerWrapper.pause", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6_PyXAL_13PlayerWrapper_46pause(((struct __pyx_obj_6_PyXAL_PlayerWrapper *)__pyx_v_self), __pyx_v_fadeTime);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_PyXAL_13PlayerWrapper_46pause(struct __pyx_obj_6_PyXAL_PlayerWrapper *__pyx_v_self, float __pyx_v_fadeTime) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("pause", 0);

  /* "_PyXAL.pyx":557
 *         @param fadeTime: float the time in seconds for the sound to fade out (0.0 by default)
 *         '''
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 557; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 557; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 557; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = ((!__pyx_t_3) != 0);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":558
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__66, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 558; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 558; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "_PyXAL.pyx":559
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         self._pointer.pause(fadeTime)
 */
  __pyx_t_4 = (__pyx_v_self->destroyed != 0);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":560
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         self._pointer.pause(fadeTime)
 * 
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__67, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 560; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 560; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "_PyXAL.pyx":561
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         self._pointer.pause(fadeTime)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {
    __pyx_v_self->_pointer->pause(__pyx_v_fadeTime);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 561; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "_PyXAL.pyx":551
 *         self._pointer.stop(fadeTime)
 * 
 *     def pause(self, float fadeTime = 0.0):             # <<<<<<<<<<<<<<
 *         '''
 *         stop the sound playing keeping the current offset of the sound
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.PlayerWrapper.pause", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":573
 *     destroyed = False
 * 
 *     def __init__(self, filename):             # <<<<<<<<<<<<<<
 *         '''
 *         this creates a sound object from a file name
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_PyXAL_7PySound_1__init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6_PyXAL_7PySound___init__[] = "\n        this creates a sound object from a file name\n        ";
static PyMethodDef __pyx_mdef_6_PyXAL_7PySound_1__init__ = {__Pyx_NAMESTR("__init__"), (PyCFunction)__pyx_pw_6_PyXAL_7PySound_1__init__, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_7PySound___init__)};
static PyObject *__pyx_pw_6_PyXAL_7PySound_1__init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_filename = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_filename,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_filename)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 573; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 573; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_self = values[0];
    __pyx_v_filename = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 573; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("_PyXAL.PySound.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6_PyXAL_7PySound___init__(__pyx_self, __pyx_v_self, __pyx_v_filename);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_PyXAL_7PySound___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_filename) {
  PyObject *__pyx_v_path = NULL;
  hstr __pyx_v_file_str;
  hstr __pyx_v_path_str;
  hstr __pyx_v_category;
  xal::Sound *__pyx_v_sound;
  struct __pyx_obj_6_PyXAL_SoundWrapper *__pyx_v_wrapper = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  xal::Sound *__pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "_PyXAL.pyx":577
 *         this creates a sound object from a file name
 *         '''
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         path = os.path.split(filename)[0]
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 577; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 577; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 577; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = ((!__pyx_t_3) != 0);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":578
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         path = os.path.split(filename)[0]
 *         cdef hstr file_str = Py_to_Hstr(filename)
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__68, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 578; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 578; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "_PyXAL.pyx":579
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         path = os.path.split(filename)[0]             # <<<<<<<<<<<<<<
 *         cdef hstr file_str = Py_to_Hstr(filename)
 *         cdef hstr path_str = Py_to_Hstr(path)
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_os); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 579; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_path); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 579; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_split); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 579; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 579; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_filename);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_filename);
  __Pyx_GIVEREF(__pyx_v_filename);
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_1, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 579; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_5, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_1 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 579; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_path = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "_PyXAL.pyx":580
 *             raise RuntimeError("XAL is not Initialized")
 *         path = os.path.split(filename)[0]
 *         cdef hstr file_str = Py_to_Hstr(filename)             # <<<<<<<<<<<<<<
 *         cdef hstr path_str = Py_to_Hstr(path)
 *         cdef hstr category = Py_to_Hstr(self.CATEGORY_STR)
 */
  __pyx_v_file_str = __pyx_f_6_PyXAL_Py_to_Hstr(__pyx_v_filename);

  /* "_PyXAL.pyx":581
 *         path = os.path.split(filename)[0]
 *         cdef hstr file_str = Py_to_Hstr(filename)
 *         cdef hstr path_str = Py_to_Hstr(path)             # <<<<<<<<<<<<<<
 *         cdef hstr category = Py_to_Hstr(self.CATEGORY_STR)
 *         cdef XAL.Sound* sound
 */
  __pyx_v_path_str = __pyx_f_6_PyXAL_Py_to_Hstr(__pyx_v_path);

  /* "_PyXAL.pyx":582
 *         cdef hstr file_str = Py_to_Hstr(filename)
 *         cdef hstr path_str = Py_to_Hstr(path)
 *         cdef hstr category = Py_to_Hstr(self.CATEGORY_STR)             # <<<<<<<<<<<<<<
 *         cdef XAL.Sound* sound
 *         sound = XAL.mgr.createSound(file_str, category, path_str)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_CATEGORY_STR); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 582; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_category = __pyx_f_6_PyXAL_Py_to_Hstr(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "_PyXAL.pyx":584
 *         cdef hstr category = Py_to_Hstr(self.CATEGORY_STR)
 *         cdef XAL.Sound* sound
 *         sound = XAL.mgr.createSound(file_str, category, path_str)             # <<<<<<<<<<<<<<
 *         if sound == NULL:
 *             raise RuntimeError("XAL Failed to load file %s" % filename)
 */
  try {
    __pyx_t_6 = xal::mgr->createSound(__pyx_v_file_str, __pyx_v_category, __pyx_v_path_str);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 584; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_sound = __pyx_t_6;

  /* "_PyXAL.pyx":585
 *         cdef XAL.Sound* sound
 *         sound = XAL.mgr.createSound(file_str, category, path_str)
 *         if sound == NULL:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL Failed to load file %s" % filename)
 *         cdef SoundWrapper wrapper = SoundWrapper.__new__(SoundWrapper)
 */
  __pyx_t_4 = ((__pyx_v_sound == NULL) != 0);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":586
 *         sound = XAL.mgr.createSound(file_str, category, path_str)
 *         if sound == NULL:
 *             raise RuntimeError("XAL Failed to load file %s" % filename)             # <<<<<<<<<<<<<<
 *         cdef SoundWrapper wrapper = SoundWrapper.__new__(SoundWrapper)
 *         wrapper._pointer = sound
 */
    __pyx_t_1 = __Pyx_PyString_Format(__pyx_kp_s_XAL_Failed_to_load_file_s, __pyx_v_filename); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 586; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 586; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 586; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 586; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "_PyXAL.pyx":587
 *         if sound == NULL:
 *             raise RuntimeError("XAL Failed to load file %s" % filename)
 *         cdef SoundWrapper wrapper = SoundWrapper.__new__(SoundWrapper)             # <<<<<<<<<<<<<<
 *         wrapper._pointer = sound
 *         wrapper.destroyed = False
 */
  __pyx_t_1 = __pyx_tp_new_6_PyXAL_SoundWrapper(((PyTypeObject *)((PyObject*)__pyx_ptype_6_PyXAL_SoundWrapper)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 587; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_6_PyXAL_SoundWrapper)))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 587; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_wrapper = ((struct __pyx_obj_6_PyXAL_SoundWrapper *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "_PyXAL.pyx":588
 *             raise RuntimeError("XAL Failed to load file %s" % filename)
 *         cdef SoundWrapper wrapper = SoundWrapper.__new__(SoundWrapper)
 *         wrapper._pointer = sound             # <<<<<<<<<<<<<<
 *         wrapper.destroyed = False
 *         self._wrapper = wrapper
 */
  __pyx_v_wrapper->_pointer = __pyx_v_sound;

  /* "_PyXAL.pyx":589
 *         cdef SoundWrapper wrapper = SoundWrapper.__new__(SoundWrapper)
 *         wrapper._pointer = sound
 *         wrapper.destroyed = False             # <<<<<<<<<<<<<<
 *         self._wrapper = wrapper
 * 
 */
  __pyx_v_wrapper->destroyed = 0;

  /* "_PyXAL.pyx":590
 *         wrapper._pointer = sound
 *         wrapper.destroyed = False
 *         self._wrapper = wrapper             # <<<<<<<<<<<<<<
 * 
 *     def _destroy(self):
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_wrapper, ((PyObject *)__pyx_v_wrapper)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 590; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_PyXAL.pyx":573
 *     destroyed = False
 * 
 *     def __init__(self, filename):             # <<<<<<<<<<<<<<
 *         '''
 *         this creates a sound object from a file name
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("_PyXAL.PySound.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_path);
  __Pyx_XDECREF((PyObject *)__pyx_v_wrapper);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":592
 *         self._wrapper = wrapper
 * 
 *     def _destroy(self):             # <<<<<<<<<<<<<<
 *         if self.isXALInitialized() and not self.destroyed:
 *             self._wrapper._destroy()
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_PyXAL_7PySound_3_destroy(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static PyMethodDef __pyx_mdef_6_PyXAL_7PySound_3_destroy = {__Pyx_NAMESTR("_destroy"), (PyCFunction)__pyx_pw_6_PyXAL_7PySound_3_destroy, METH_O, __Pyx_DOCSTR(0)};
static PyObject *__pyx_pw_6_PyXAL_7PySound_3_destroy(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_destroy (wrapper)", 0);
  __pyx_r = __pyx_pf_6_PyXAL_7PySound_2_destroy(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_PyXAL_7PySound_2_destroy(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_destroy", 0);

  /* "_PyXAL.pyx":593
 * 
 *     def _destroy(self):
 *         if self.isXALInitialized() and not self.destroyed:             # <<<<<<<<<<<<<<
 *             self._wrapper._destroy()
 *             self.destroyed = True
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 593; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 593; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 593; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_destroyed); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 593; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 593; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_5 = (!__pyx_t_4);
    __pyx_t_4 = __pyx_t_5;
  } else {
    __pyx_t_4 = __pyx_t_3;
  }
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":594
 *     def _destroy(self):
 *         if self.isXALInitialized() and not self.destroyed:
 *             self._wrapper._destroy()             # <<<<<<<<<<<<<<
 *             self.destroyed = True
 * 
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_wrapper); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 594; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_destroy); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 594; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 594; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "_PyXAL.pyx":595
 *         if self.isXALInitialized() and not self.destroyed:
 *             self._wrapper._destroy()
 *             self.destroyed = True             # <<<<<<<<<<<<<<
 * 
 *     def __del__(self):
 */
    if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_destroyed, Py_True) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 595; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "_PyXAL.pyx":592
 *         self._wrapper = wrapper
 * 
 *     def _destroy(self):             # <<<<<<<<<<<<<<
 *         if self.isXALInitialized() and not self.destroyed:
 *             self._wrapper._destroy()
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.PySound._destroy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":597
 *             self.destroyed = True
 * 
 *     def __del__(self):             # <<<<<<<<<<<<<<
 *         if self.isXALInitialized():
 *             self._destroy()
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_PyXAL_7PySound_5__del__(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static PyMethodDef __pyx_mdef_6_PyXAL_7PySound_5__del__ = {__Pyx_NAMESTR("__del__"), (PyCFunction)__pyx_pw_6_PyXAL_7PySound_5__del__, METH_O, __Pyx_DOCSTR(0)};
static PyObject *__pyx_pw_6_PyXAL_7PySound_5__del__(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6_PyXAL_7PySound_4__del__(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_PyXAL_7PySound_4__del__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__del__", 0);

  /* "_PyXAL.pyx":598
 * 
 *     def __del__(self):
 *         if self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             self._destroy()
 *         del self._wrapper
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 598; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 598; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 598; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "_PyXAL.pyx":599
 *     def __del__(self):
 *         if self.isXALInitialized():
 *             self._destroy()             # <<<<<<<<<<<<<<
 *         del self._wrapper
 * 
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_destroy); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 599; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 599; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "_PyXAL.pyx":600
 *         if self.isXALInitialized():
 *             self._destroy()
 *         del self._wrapper             # <<<<<<<<<<<<<<
 * 
 *     def isXALInitialized(self):
 */
  if (__Pyx_PyObject_DelAttrStr(__pyx_v_self, __pyx_n_s_wrapper) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 600; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_PyXAL.pyx":597
 *             self.destroyed = True
 * 
 *     def __del__(self):             # <<<<<<<<<<<<<<
 *         if self.isXALInitialized():
 *             self._destroy()
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.PySound.__del__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":602
 *         del self._wrapper
 * 
 *     def isXALInitialized(self):             # <<<<<<<<<<<<<<
 *         '''
 *         returns true if the C++ side of the interface to XAL exists
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_PyXAL_7PySound_7isXALInitialized(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_6_PyXAL_7PySound_6isXALInitialized[] = "\n        returns true if the C++ side of the interface to XAL exists\n        ";
static PyMethodDef __pyx_mdef_6_PyXAL_7PySound_7isXALInitialized = {__Pyx_NAMESTR("isXALInitialized"), (PyCFunction)__pyx_pw_6_PyXAL_7PySound_7isXALInitialized, METH_O, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_7PySound_6isXALInitialized)};
static PyObject *__pyx_pw_6_PyXAL_7PySound_7isXALInitialized(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("isXALInitialized (wrapper)", 0);
  __pyx_r = __pyx_pf_6_PyXAL_7PySound_6isXALInitialized(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_PyXAL_7PySound_6isXALInitialized(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("isXALInitialized", 0);

  /* "_PyXAL.pyx":606
 *         returns true if the C++ side of the interface to XAL exists
 *         '''
 *         if XAL.mgr != NULL:             # <<<<<<<<<<<<<<
 *             return True
 *         else:
 */
  __pyx_t_1 = ((xal::mgr != NULL) != 0);
  if (__pyx_t_1) {

    /* "_PyXAL.pyx":607
 *         '''
 *         if XAL.mgr != NULL:
 *             return True             # <<<<<<<<<<<<<<
 *         else:
 *             return False
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_True);
    __pyx_r = Py_True;
    goto __pyx_L0;
  }
  /*else*/ {

    /* "_PyXAL.pyx":609
 *             return True
 *         else:
 *             return False             # <<<<<<<<<<<<<<
 * 
 *     def getName(self):
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_False);
    __pyx_r = Py_False;
    goto __pyx_L0;
  }

  /* "_PyXAL.pyx":602
 *         del self._wrapper
 * 
 *     def isXALInitialized(self):             # <<<<<<<<<<<<<<
 *         '''
 *         returns true if the C++ side of the interface to XAL exists
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":611
 *             return False
 * 
 *     def getName(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: returns the string name of the sound. it is normal the full path of teh sound file with out the file extention
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_PyXAL_7PySound_9getName(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_6_PyXAL_7PySound_8getName[] = "\n        @return: returns the string name of the sound. it is normal the full path of teh sound file with out the file extention\n        ";
static PyMethodDef __pyx_mdef_6_PyXAL_7PySound_9getName = {__Pyx_NAMESTR("getName"), (PyCFunction)__pyx_pw_6_PyXAL_7PySound_9getName, METH_O, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_7PySound_8getName)};
static PyObject *__pyx_pw_6_PyXAL_7PySound_9getName(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getName (wrapper)", 0);
  __pyx_r = __pyx_pf_6_PyXAL_7PySound_8getName(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_PyXAL_7PySound_8getName(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getName", 0);

  /* "_PyXAL.pyx":615
 *         @return: returns the string name of the sound. it is normal the full path of teh sound file with out the file extention
 *         '''
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 615; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 615; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 615; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = ((!__pyx_t_3) != 0);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":616
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__69, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 616; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 616; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "_PyXAL.pyx":617
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         return self._wrapper.getName()
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_destroyed); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 617; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 617; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":618
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         return self._wrapper.getName()
 * 
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__70, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 618; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 618; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "_PyXAL.pyx":619
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         return self._wrapper.getName()             # <<<<<<<<<<<<<<
 * 
 *     def getFilename(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_wrapper); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 619; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_getName); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 619; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 619; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "_PyXAL.pyx":611
 *             return False
 * 
 *     def getName(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: returns the string name of the sound. it is normal the full path of teh sound file with out the file extention
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.PySound.getName", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":621
 *         return self._wrapper.getName()
 * 
 *     def getFilename(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: returns a string containing the file name the sound was loaded from
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_PyXAL_7PySound_11getFilename(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_6_PyXAL_7PySound_10getFilename[] = "\n        @return: returns a string containing the file name the sound was loaded from\n        ";
static PyMethodDef __pyx_mdef_6_PyXAL_7PySound_11getFilename = {__Pyx_NAMESTR("getFilename"), (PyCFunction)__pyx_pw_6_PyXAL_7PySound_11getFilename, METH_O, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_7PySound_10getFilename)};
static PyObject *__pyx_pw_6_PyXAL_7PySound_11getFilename(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getFilename (wrapper)", 0);
  __pyx_r = __pyx_pf_6_PyXAL_7PySound_10getFilename(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_PyXAL_7PySound_10getFilename(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getFilename", 0);

  /* "_PyXAL.pyx":625
 *         @return: returns a string containing the file name the sound was loaded from
 *         '''
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 625; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 625; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 625; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = ((!__pyx_t_3) != 0);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":626
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__71, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 626; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 626; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "_PyXAL.pyx":627
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         return self._wrapper.getFilename()
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_destroyed); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 627; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 627; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":628
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         return self._wrapper.getFilename()
 * 
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__72, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 628; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 628; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "_PyXAL.pyx":629
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         return self._wrapper.getFilename()             # <<<<<<<<<<<<<<
 * 
 *     def getRealFilename(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_wrapper); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 629; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_getFilename); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 629; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 629; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "_PyXAL.pyx":621
 *         return self._wrapper.getName()
 * 
 *     def getFilename(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: returns a string containing the file name the sound was loaded from
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.PySound.getFilename", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":631
 *         return self._wrapper.getFilename()
 * 
 *     def getRealFilename(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: returns a string with the full path to the file the string was loaded from
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_PyXAL_7PySound_13getRealFilename(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_6_PyXAL_7PySound_12getRealFilename[] = "\n        @return: returns a string with the full path to the file the string was loaded from\n        ";
static PyMethodDef __pyx_mdef_6_PyXAL_7PySound_13getRealFilename = {__Pyx_NAMESTR("getRealFilename"), (PyCFunction)__pyx_pw_6_PyXAL_7PySound_13getRealFilename, METH_O, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_7PySound_12getRealFilename)};
static PyObject *__pyx_pw_6_PyXAL_7PySound_13getRealFilename(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getRealFilename (wrapper)", 0);
  __pyx_r = __pyx_pf_6_PyXAL_7PySound_12getRealFilename(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_PyXAL_7PySound_12getRealFilename(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getRealFilename", 0);

  /* "_PyXAL.pyx":635
 *         @return: returns a string with the full path to the file the string was loaded from
 *         '''
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 635; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 635; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 635; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = ((!__pyx_t_3) != 0);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":636
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__73, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 636; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 636; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "_PyXAL.pyx":637
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         return self._wrapper.getRealFilename()
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_destroyed); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 637; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 637; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":638
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         return self._wrapper.getRealFilename()
 * 
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__74, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 638; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 638; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "_PyXAL.pyx":639
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         return self._wrapper.getRealFilename()             # <<<<<<<<<<<<<<
 * 
 *     def getSize(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_wrapper); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 639; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_getRealFilename); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 639; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 639; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "_PyXAL.pyx":631
 *         return self._wrapper.getFilename()
 * 
 *     def getRealFilename(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: returns a string with the full path to the file the string was loaded from
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.PySound.getRealFilename", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":641
 *         return self._wrapper.getRealFilename()
 * 
 *     def getSize(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: int the size of the sound data in bits not bytes
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_PyXAL_7PySound_15getSize(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_6_PyXAL_7PySound_14getSize[] = "\n        @return: int the size of the sound data in bits not bytes\n        ";
static PyMethodDef __pyx_mdef_6_PyXAL_7PySound_15getSize = {__Pyx_NAMESTR("getSize"), (PyCFunction)__pyx_pw_6_PyXAL_7PySound_15getSize, METH_O, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_7PySound_14getSize)};
static PyObject *__pyx_pw_6_PyXAL_7PySound_15getSize(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getSize (wrapper)", 0);
  __pyx_r = __pyx_pf_6_PyXAL_7PySound_14getSize(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_PyXAL_7PySound_14getSize(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getSize", 0);

  /* "_PyXAL.pyx":645
 *         @return: int the size of the sound data in bits not bytes
 *         '''
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 645; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 645; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 645; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = ((!__pyx_t_3) != 0);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":646
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__75, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 646; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 646; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "_PyXAL.pyx":647
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         return self._wrapper.getSize()
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_destroyed); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 647; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 647; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":648
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         return self._wrapper.getSize()
 * 
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__76, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 648; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 648; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "_PyXAL.pyx":649
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         return self._wrapper.getSize()             # <<<<<<<<<<<<<<
 * 
 *     def getChannels(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_wrapper); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 649; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_getSize); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 649; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 649; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "_PyXAL.pyx":641
 *         return self._wrapper.getRealFilename()
 * 
 *     def getSize(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: int the size of the sound data in bits not bytes
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.PySound.getSize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":651
 *         return self._wrapper.getSize()
 * 
 *     def getChannels(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: int number of channels the sound has. 1 for mono or 2 for stereo
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_PyXAL_7PySound_17getChannels(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_6_PyXAL_7PySound_16getChannels[] = "\n        @return: int number of channels the sound has. 1 for mono or 2 for stereo \n        ";
static PyMethodDef __pyx_mdef_6_PyXAL_7PySound_17getChannels = {__Pyx_NAMESTR("getChannels"), (PyCFunction)__pyx_pw_6_PyXAL_7PySound_17getChannels, METH_O, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_7PySound_16getChannels)};
static PyObject *__pyx_pw_6_PyXAL_7PySound_17getChannels(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getChannels (wrapper)", 0);
  __pyx_r = __pyx_pf_6_PyXAL_7PySound_16getChannels(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_PyXAL_7PySound_16getChannels(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getChannels", 0);

  /* "_PyXAL.pyx":655
 *         @return: int number of channels the sound has. 1 for mono or 2 for stereo
 *         '''
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 655; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 655; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 655; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = ((!__pyx_t_3) != 0);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":656
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__77, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 656; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 656; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "_PyXAL.pyx":657
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         return self._wrapper.getChannels()
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_destroyed); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 657; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 657; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":658
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         return self._wrapper.getChannels()
 * 
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__78, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 658; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 658; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "_PyXAL.pyx":659
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         return self._wrapper.getChannels()             # <<<<<<<<<<<<<<
 * 
 *     def getSamplingRate(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_wrapper); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 659; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_getChannels); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 659; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 659; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "_PyXAL.pyx":651
 *         return self._wrapper.getSize()
 * 
 *     def getChannels(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: int number of channels the sound has. 1 for mono or 2 for stereo
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.PySound.getChannels", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":661
 *         return self._wrapper.getChannels()
 * 
 *     def getSamplingRate(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: int the sampeling rate for the sound in samples per second
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_PyXAL_7PySound_19getSamplingRate(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_6_PyXAL_7PySound_18getSamplingRate[] = "\n        @return: int the sampeling rate for the sound in samples per second\n        ";
static PyMethodDef __pyx_mdef_6_PyXAL_7PySound_19getSamplingRate = {__Pyx_NAMESTR("getSamplingRate"), (PyCFunction)__pyx_pw_6_PyXAL_7PySound_19getSamplingRate, METH_O, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_7PySound_18getSamplingRate)};
static PyObject *__pyx_pw_6_PyXAL_7PySound_19getSamplingRate(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getSamplingRate (wrapper)", 0);
  __pyx_r = __pyx_pf_6_PyXAL_7PySound_18getSamplingRate(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_PyXAL_7PySound_18getSamplingRate(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getSamplingRate", 0);

  /* "_PyXAL.pyx":665
 *         @return: int the sampeling rate for the sound in samples per second
 *         '''
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 665; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 665; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 665; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = ((!__pyx_t_3) != 0);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":666
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__79, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 666; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 666; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "_PyXAL.pyx":667
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         return self._wrapper.getSamplingRate()
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_destroyed); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 667; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 667; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":668
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         return self._wrapper.getSamplingRate()
 * 
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__80, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 668; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 668; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "_PyXAL.pyx":669
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         return self._wrapper.getSamplingRate()             # <<<<<<<<<<<<<<
 * 
 *     def getBitsPerSample(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_wrapper); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 669; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_getSamplingRate); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 669; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 669; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "_PyXAL.pyx":661
 *         return self._wrapper.getChannels()
 * 
 *     def getSamplingRate(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: int the sampeling rate for the sound in samples per second
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.PySound.getSamplingRate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":671
 *         return self._wrapper.getSamplingRate()
 * 
 *     def getBitsPerSample(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: int the bits per sample of data in the sound. usualy 8, 16, or 24, possibly 32 not sure
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_PyXAL_7PySound_21getBitsPerSample(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_6_PyXAL_7PySound_20getBitsPerSample[] = "\n        @return: int the bits per sample of data in the sound. usualy 8, 16, or 24, possibly 32 not sure\n        ";
static PyMethodDef __pyx_mdef_6_PyXAL_7PySound_21getBitsPerSample = {__Pyx_NAMESTR("getBitsPerSample"), (PyCFunction)__pyx_pw_6_PyXAL_7PySound_21getBitsPerSample, METH_O, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_7PySound_20getBitsPerSample)};
static PyObject *__pyx_pw_6_PyXAL_7PySound_21getBitsPerSample(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getBitsPerSample (wrapper)", 0);
  __pyx_r = __pyx_pf_6_PyXAL_7PySound_20getBitsPerSample(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_PyXAL_7PySound_20getBitsPerSample(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getBitsPerSample", 0);

  /* "_PyXAL.pyx":675
 *         @return: int the bits per sample of data in the sound. usualy 8, 16, or 24, possibly 32 not sure
 *         '''
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 675; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 675; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 675; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = ((!__pyx_t_3) != 0);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":676
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__81, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 676; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 676; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "_PyXAL.pyx":677
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         return self._wrapper.getBitsPerSample()
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_destroyed); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 677; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 677; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":678
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         return self._wrapper.getBitsPerSample()
 * 
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__82, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 678; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 678; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "_PyXAL.pyx":679
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         return self._wrapper.getBitsPerSample()             # <<<<<<<<<<<<<<
 * 
 *     def getDuration(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_wrapper); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 679; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_getBitsPerSample); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 679; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 679; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "_PyXAL.pyx":671
 *         return self._wrapper.getSamplingRate()
 * 
 *     def getBitsPerSample(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: int the bits per sample of data in the sound. usualy 8, 16, or 24, possibly 32 not sure
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.PySound.getBitsPerSample", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":681
 *         return self._wrapper.getBitsPerSample()
 * 
 *     def getDuration(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: float duration of the sound in seconds. it is a floating point number to acound for fractions of a second
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_PyXAL_7PySound_23getDuration(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_6_PyXAL_7PySound_22getDuration[] = "\n        @return: float duration of the sound in seconds. it is a floating point number to acound for fractions of a second\n        ";
static PyMethodDef __pyx_mdef_6_PyXAL_7PySound_23getDuration = {__Pyx_NAMESTR("getDuration"), (PyCFunction)__pyx_pw_6_PyXAL_7PySound_23getDuration, METH_O, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_7PySound_22getDuration)};
static PyObject *__pyx_pw_6_PyXAL_7PySound_23getDuration(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getDuration (wrapper)", 0);
  __pyx_r = __pyx_pf_6_PyXAL_7PySound_22getDuration(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_PyXAL_7PySound_22getDuration(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getDuration", 0);

  /* "_PyXAL.pyx":685
 *         @return: float duration of the sound in seconds. it is a floating point number to acound for fractions of a second
 *         '''
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 685; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 685; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 685; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = ((!__pyx_t_3) != 0);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":686
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__83, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 686; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 686; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "_PyXAL.pyx":687
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         return self._wrapper.getDuration()
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_destroyed); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 687; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 687; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":688
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         return self._wrapper.getDuration()
 * 
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__84, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 688; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 688; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "_PyXAL.pyx":689
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         return self._wrapper.getDuration()             # <<<<<<<<<<<<<<
 * 
 *     def getFormat(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_wrapper); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 689; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_getDuration); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 689; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 689; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "_PyXAL.pyx":681
 *         return self._wrapper.getBitsPerSample()
 * 
 *     def getDuration(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: float duration of the sound in seconds. it is a floating point number to acound for fractions of a second
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.PySound.getDuration", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":691
 *         return self._wrapper.getDuration()
 * 
 *     def getFormat(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: int the intrnal designation of the sound format. coresponds to a file type but as of now there is no way to tell for certin which is which
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_PyXAL_7PySound_25getFormat(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_6_PyXAL_7PySound_24getFormat[] = "\n        @return: int the intrnal designation of the sound format. coresponds to a file type but as of now there is no way to tell for certin which is which \n            as the nubers will change depending on what formats are currently suported by XAL\n        ";
static PyMethodDef __pyx_mdef_6_PyXAL_7PySound_25getFormat = {__Pyx_NAMESTR("getFormat"), (PyCFunction)__pyx_pw_6_PyXAL_7PySound_25getFormat, METH_O, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_7PySound_24getFormat)};
static PyObject *__pyx_pw_6_PyXAL_7PySound_25getFormat(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getFormat (wrapper)", 0);
  __pyx_r = __pyx_pf_6_PyXAL_7PySound_24getFormat(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_PyXAL_7PySound_24getFormat(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getFormat", 0);

  /* "_PyXAL.pyx":696
 *             as the nubers will change depending on what formats are currently suported by XAL
 *         '''
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 696; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 696; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 696; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = ((!__pyx_t_3) != 0);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":697
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__85, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 697; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 697; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "_PyXAL.pyx":698
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         return self._wrapper.getFormat()
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_destroyed); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 698; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 698; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":699
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         return self._wrapper.getFormat()
 * 
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__86, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 699; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 699; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "_PyXAL.pyx":700
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         return self._wrapper.getFormat()             # <<<<<<<<<<<<<<
 * 
 *     def isStreamed(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_wrapper); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 700; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_getFormat); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 700; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 700; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "_PyXAL.pyx":691
 *         return self._wrapper.getDuration()
 * 
 *     def getFormat(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: int the intrnal designation of the sound format. coresponds to a file type but as of now there is no way to tell for certin which is which
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.PySound.getFormat", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":702
 *         return self._wrapper.getFormat()
 * 
 *     def isStreamed(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: bool is the sound being streamed from it's file to the player? or is it comleatly loaded into memory.
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_PyXAL_7PySound_27isStreamed(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_6_PyXAL_7PySound_26isStreamed[] = "\n        @return: bool is the sound being streamed from it's file to the player? or is it comleatly loaded into memory. \n            should always return false in PyXAL as PyXAL uses full decoding mode\n        ";
static PyMethodDef __pyx_mdef_6_PyXAL_7PySound_27isStreamed = {__Pyx_NAMESTR("isStreamed"), (PyCFunction)__pyx_pw_6_PyXAL_7PySound_27isStreamed, METH_O, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_7PySound_26isStreamed)};
static PyObject *__pyx_pw_6_PyXAL_7PySound_27isStreamed(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("isStreamed (wrapper)", 0);
  __pyx_r = __pyx_pf_6_PyXAL_7PySound_26isStreamed(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_PyXAL_7PySound_26isStreamed(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("isStreamed", 0);

  /* "_PyXAL.pyx":707
 *             should always return false in PyXAL as PyXAL uses full decoding mode
 *         '''
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 707; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 707; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 707; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = ((!__pyx_t_3) != 0);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":708
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__87, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 708; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 708; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "_PyXAL.pyx":709
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         return self._wrapper.isStreamed()
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_destroyed); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 709; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 709; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":710
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         return self._wrapper.isStreamed()
 * 
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__88, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 710; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 710; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "_PyXAL.pyx":711
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         return self._wrapper.isStreamed()             # <<<<<<<<<<<<<<
 * 
 *     def readPcmData(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_wrapper); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 711; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_isStreamed); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 711; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 711; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "_PyXAL.pyx":702
 *         return self._wrapper.getFormat()
 * 
 *     def isStreamed(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: bool is the sound being streamed from it's file to the player? or is it comleatly loaded into memory.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.PySound.isStreamed", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":713
 *         return self._wrapper.isStreamed()
 * 
 *     def readPcmData(self):             # <<<<<<<<<<<<<<
 *         '''
 *         read the raw data of the sound and return it the format of said data can be determined from the size, chanels, bits per sample and sampleling rate of the sound
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_PyXAL_7PySound_29readPcmData(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_6_PyXAL_7PySound_28readPcmData[] = "\n        read the raw data of the sound and return it the format of said data can be determined from the size, chanels, bits per sample and sampleling rate of the sound\n        @return: a 2 tuple of (number of bits read, string of bytes read)\n        ";
static PyMethodDef __pyx_mdef_6_PyXAL_7PySound_29readPcmData = {__Pyx_NAMESTR("readPcmData"), (PyCFunction)__pyx_pw_6_PyXAL_7PySound_29readPcmData, METH_O, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_7PySound_28readPcmData)};
static PyObject *__pyx_pw_6_PyXAL_7PySound_29readPcmData(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("readPcmData (wrapper)", 0);
  __pyx_r = __pyx_pf_6_PyXAL_7PySound_28readPcmData(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_PyXAL_7PySound_28readPcmData(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("readPcmData", 0);

  /* "_PyXAL.pyx":718
 *         @return: a 2 tuple of (number of bits read, string of bytes read)
 *         '''
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 718; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 718; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 718; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = ((!__pyx_t_3) != 0);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":719
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__89, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 719; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 719; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "_PyXAL.pyx":720
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         return self._wrapper.readPcmData()
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_destroyed); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 720; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 720; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":721
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         return self._wrapper.readPcmData()
 * 
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__90, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 721; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 721; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "_PyXAL.pyx":722
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         return self._wrapper.readPcmData()             # <<<<<<<<<<<<<<
 * 
 * class PyPlayer(object):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_wrapper); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 722; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_readPcmData); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 722; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 722; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "_PyXAL.pyx":713
 *         return self._wrapper.isStreamed()
 * 
 *     def readPcmData(self):             # <<<<<<<<<<<<<<
 *         '''
 *         read the raw data of the sound and return it the format of said data can be determined from the size, chanels, bits per sample and sampleling rate of the sound
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.PySound.readPcmData", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":733
 *     destroyed = False
 * 
 *     def __init__(self, sound):             # <<<<<<<<<<<<<<
 *         '''
 *         a PyPlayer object created by bassing a PySound to the __init__ method
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_PyXAL_8PyPlayer_1__init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6_PyXAL_8PyPlayer___init__[] = "\n        a PyPlayer object created by bassing a PySound to the __init__ method\n        ";
static PyMethodDef __pyx_mdef_6_PyXAL_8PyPlayer_1__init__ = {__Pyx_NAMESTR("__init__"), (PyCFunction)__pyx_pw_6_PyXAL_8PyPlayer_1__init__, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_8PyPlayer___init__)};
static PyObject *__pyx_pw_6_PyXAL_8PyPlayer_1__init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_sound = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_sound,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sound)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 733; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 733; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_self = values[0];
    __pyx_v_sound = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 733; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("_PyXAL.PyPlayer.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6_PyXAL_8PyPlayer___init__(__pyx_self, __pyx_v_self, __pyx_v_sound);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_PyXAL_8PyPlayer___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_sound) {
  PyObject *__pyx_v_sound_name = NULL;
  hstr __pyx_v_hl_name;
  xal::Player *__pyx_v_player;
  struct __pyx_obj_6_PyXAL_PlayerWrapper *__pyx_v_wrapper = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  xal::Player *__pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "_PyXAL.pyx":737
 *         a PyPlayer object created by bassing a PySound to the __init__ method
 *         '''
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         if not isinstance(sound, PySound):
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 737; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 737; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 737; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = ((!__pyx_t_3) != 0);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":738
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if not isinstance(sound, PySound):
 *             raise TypeError("Expected argument 1 to be of type PySound got %s" % type(sound))
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__91, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 738; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 738; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "_PyXAL.pyx":739
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         if not isinstance(sound, PySound):             # <<<<<<<<<<<<<<
 *             raise TypeError("Expected argument 1 to be of type PySound got %s" % type(sound))
 *         sound_name = sound.getName()
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_PySound); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 739; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = PyObject_IsInstance(__pyx_v_sound, __pyx_t_2); if (unlikely(__pyx_t_4 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 739; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_3 = ((!(__pyx_t_4 != 0)) != 0);
  if (__pyx_t_3) {

    /* "_PyXAL.pyx":740
 *             raise RuntimeError("XAL is not Initialized")
 *         if not isinstance(sound, PySound):
 *             raise TypeError("Expected argument 1 to be of type PySound got %s" % type(sound))             # <<<<<<<<<<<<<<
 *         sound_name = sound.getName()
 *         cdef hstr hl_name = Py_to_Hstr(sound_name)
 */
    __pyx_t_2 = __Pyx_PyString_Format(__pyx_kp_s_Expected_argument_1_to_be_of_typ, ((PyObject *)Py_TYPE(__pyx_v_sound))); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 740; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 740; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 740; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 740; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "_PyXAL.pyx":741
 *         if not isinstance(sound, PySound):
 *             raise TypeError("Expected argument 1 to be of type PySound got %s" % type(sound))
 *         sound_name = sound.getName()             # <<<<<<<<<<<<<<
 *         cdef hstr hl_name = Py_to_Hstr(sound_name)
 *         cdef XAL.Player* player
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_sound, __pyx_n_s_getName); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 741; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 741; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_sound_name = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "_PyXAL.pyx":742
 *             raise TypeError("Expected argument 1 to be of type PySound got %s" % type(sound))
 *         sound_name = sound.getName()
 *         cdef hstr hl_name = Py_to_Hstr(sound_name)             # <<<<<<<<<<<<<<
 *         cdef XAL.Player* player
 *         player = XAL.mgr.createPlayer(hl_name)
 */
  __pyx_v_hl_name = __pyx_f_6_PyXAL_Py_to_Hstr(__pyx_v_sound_name);

  /* "_PyXAL.pyx":744
 *         cdef hstr hl_name = Py_to_Hstr(sound_name)
 *         cdef XAL.Player* player
 *         player = XAL.mgr.createPlayer(hl_name)             # <<<<<<<<<<<<<<
 *         if player == NULL:
 *             raise RuntimeError("XAL Failed to create a player for %s" % sound_name)
 */
  try {
    __pyx_t_5 = xal::mgr->createPlayer(__pyx_v_hl_name);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 744; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_player = __pyx_t_5;

  /* "_PyXAL.pyx":745
 *         cdef XAL.Player* player
 *         player = XAL.mgr.createPlayer(hl_name)
 *         if player == NULL:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL Failed to create a player for %s" % sound_name)
 *         cdef PlayerWrapper wrapper = PlayerWrapper.__new__(PlayerWrapper)
 */
  __pyx_t_3 = ((__pyx_v_player == NULL) != 0);
  if (__pyx_t_3) {

    /* "_PyXAL.pyx":746
 *         player = XAL.mgr.createPlayer(hl_name)
 *         if player == NULL:
 *             raise RuntimeError("XAL Failed to create a player for %s" % sound_name)             # <<<<<<<<<<<<<<
 *         cdef PlayerWrapper wrapper = PlayerWrapper.__new__(PlayerWrapper)
 *         wrapper._pointer = player
 */
    __pyx_t_1 = __Pyx_PyString_Format(__pyx_kp_s_XAL_Failed_to_create_a_player_fo, __pyx_v_sound_name); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 746; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 746; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 746; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 746; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "_PyXAL.pyx":747
 *         if player == NULL:
 *             raise RuntimeError("XAL Failed to create a player for %s" % sound_name)
 *         cdef PlayerWrapper wrapper = PlayerWrapper.__new__(PlayerWrapper)             # <<<<<<<<<<<<<<
 *         wrapper._pointer = player
 *         wrapper.destroyed = False
 */
  __pyx_t_1 = __pyx_tp_new_6_PyXAL_PlayerWrapper(((PyTypeObject *)((PyObject*)__pyx_ptype_6_PyXAL_PlayerWrapper)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 747; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_6_PyXAL_PlayerWrapper)))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 747; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_wrapper = ((struct __pyx_obj_6_PyXAL_PlayerWrapper *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "_PyXAL.pyx":748
 *             raise RuntimeError("XAL Failed to create a player for %s" % sound_name)
 *         cdef PlayerWrapper wrapper = PlayerWrapper.__new__(PlayerWrapper)
 *         wrapper._pointer = player             # <<<<<<<<<<<<<<
 *         wrapper.destroyed = False
 *         self._wrapper = wrapper
 */
  __pyx_v_wrapper->_pointer = __pyx_v_player;

  /* "_PyXAL.pyx":749
 *         cdef PlayerWrapper wrapper = PlayerWrapper.__new__(PlayerWrapper)
 *         wrapper._pointer = player
 *         wrapper.destroyed = False             # <<<<<<<<<<<<<<
 *         self._wrapper = wrapper
 *         self._sound = sound
 */
  __pyx_v_wrapper->destroyed = 0;

  /* "_PyXAL.pyx":750
 *         wrapper._pointer = player
 *         wrapper.destroyed = False
 *         self._wrapper = wrapper             # <<<<<<<<<<<<<<
 *         self._sound = sound
 * 
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_wrapper, ((PyObject *)__pyx_v_wrapper)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 750; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_PyXAL.pyx":751
 *         wrapper.destroyed = False
 *         self._wrapper = wrapper
 *         self._sound = sound             # <<<<<<<<<<<<<<
 * 
 *     def _destroy(self):
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_sound_2, __pyx_v_sound) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 751; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_PyXAL.pyx":733
 *     destroyed = False
 * 
 *     def __init__(self, sound):             # <<<<<<<<<<<<<<
 *         '''
 *         a PyPlayer object created by bassing a PySound to the __init__ method
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.PyPlayer.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_sound_name);
  __Pyx_XDECREF((PyObject *)__pyx_v_wrapper);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":753
 *         self._sound = sound
 * 
 *     def _destroy(self):             # <<<<<<<<<<<<<<
 *         if self.isXALInitialized() and not self.destroyed:
 *             self._wrapper._destroy()
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_PyXAL_8PyPlayer_3_destroy(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static PyMethodDef __pyx_mdef_6_PyXAL_8PyPlayer_3_destroy = {__Pyx_NAMESTR("_destroy"), (PyCFunction)__pyx_pw_6_PyXAL_8PyPlayer_3_destroy, METH_O, __Pyx_DOCSTR(0)};
static PyObject *__pyx_pw_6_PyXAL_8PyPlayer_3_destroy(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_destroy (wrapper)", 0);
  __pyx_r = __pyx_pf_6_PyXAL_8PyPlayer_2_destroy(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_PyXAL_8PyPlayer_2_destroy(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_destroy", 0);

  /* "_PyXAL.pyx":754
 * 
 *     def _destroy(self):
 *         if self.isXALInitialized() and not self.destroyed:             # <<<<<<<<<<<<<<
 *             self._wrapper._destroy()
 *             self.destroyed = True
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 754; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 754; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 754; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_destroyed); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 754; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 754; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_5 = (!__pyx_t_4);
    __pyx_t_4 = __pyx_t_5;
  } else {
    __pyx_t_4 = __pyx_t_3;
  }
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":755
 *     def _destroy(self):
 *         if self.isXALInitialized() and not self.destroyed:
 *             self._wrapper._destroy()             # <<<<<<<<<<<<<<
 *             self.destroyed = True
 * 
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_wrapper); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 755; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_destroy); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 755; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 755; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "_PyXAL.pyx":756
 *         if self.isXALInitialized() and not self.destroyed:
 *             self._wrapper._destroy()
 *             self.destroyed = True             # <<<<<<<<<<<<<<
 * 
 *     def __del__(self):
 */
    if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_destroyed, Py_True) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 756; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "_PyXAL.pyx":753
 *         self._sound = sound
 * 
 *     def _destroy(self):             # <<<<<<<<<<<<<<
 *         if self.isXALInitialized() and not self.destroyed:
 *             self._wrapper._destroy()
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.PyPlayer._destroy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":758
 *             self.destroyed = True
 * 
 *     def __del__(self):             # <<<<<<<<<<<<<<
 *         global Mgr
 *         if not self.destroyed:
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_PyXAL_8PyPlayer_5__del__(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static PyMethodDef __pyx_mdef_6_PyXAL_8PyPlayer_5__del__ = {__Pyx_NAMESTR("__del__"), (PyCFunction)__pyx_pw_6_PyXAL_8PyPlayer_5__del__, METH_O, __Pyx_DOCSTR(0)};
static PyObject *__pyx_pw_6_PyXAL_8PyPlayer_5__del__(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6_PyXAL_8PyPlayer_4__del__(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_PyXAL_8PyPlayer_4__del__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__del__", 0);

  /* "_PyXAL.pyx":760
 *     def __del__(self):
 *         global Mgr
 *         if not self.destroyed:             # <<<<<<<<<<<<<<
 *             if Mgr is not None:
 *                 if hasattr(Mgr, "_players"):
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_destroyed); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 760; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 760; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = ((!__pyx_t_2) != 0);
  if (__pyx_t_3) {

    /* "_PyXAL.pyx":761
 *         global Mgr
 *         if not self.destroyed:
 *             if Mgr is not None:             # <<<<<<<<<<<<<<
 *                 if hasattr(Mgr, "_players"):
 *                     if self.getName() in Mgr._players:
 */
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_Mgr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 761; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = (__pyx_t_1 != Py_None);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_2 = (__pyx_t_3 != 0);
    if (__pyx_t_2) {

      /* "_PyXAL.pyx":762
 *         if not self.destroyed:
 *             if Mgr is not None:
 *                 if hasattr(Mgr, "_players"):             # <<<<<<<<<<<<<<
 *                     if self.getName() in Mgr._players:
 *                         if self in Mgr._player[self.getName()]:
 */
      __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_Mgr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 762; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_2 = PyObject_HasAttr(__pyx_t_1, __pyx_n_s_players); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 762; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_3 = (__pyx_t_2 != 0);
      if (__pyx_t_3) {

        /* "_PyXAL.pyx":763
 *             if Mgr is not None:
 *                 if hasattr(Mgr, "_players"):
 *                     if self.getName() in Mgr._players:             # <<<<<<<<<<<<<<
 *                         if self in Mgr._player[self.getName()]:
 *                             Mgr.players[self.getName()].remove(self)
 */
        __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_getName); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 763; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 763; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_Mgr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 763; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_players); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 763; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_3 = (__Pyx_PySequence_Contains(__pyx_t_4, __pyx_t_5, Py_EQ)); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 763; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_2 = (__pyx_t_3 != 0);
        if (__pyx_t_2) {

          /* "_PyXAL.pyx":764
 *                 if hasattr(Mgr, "_players"):
 *                     if self.getName() in Mgr._players:
 *                         if self in Mgr._player[self.getName()]:             # <<<<<<<<<<<<<<
 *                             Mgr.players[self.getName()].remove(self)
 *             if self.isXALInitialized():
 */
          __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_Mgr); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 764; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_5);
          __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_player); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 764; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_getName); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 764; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_5);
          __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 764; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __pyx_t_5 = PyObject_GetItem(__pyx_t_4, __pyx_t_1); if (unlikely(__pyx_t_5 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 764; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __pyx_t_2 = (__Pyx_PySequence_Contains(__pyx_v_self, __pyx_t_5, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 764; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __pyx_t_3 = (__pyx_t_2 != 0);
          if (__pyx_t_3) {

            /* "_PyXAL.pyx":765
 *                     if self.getName() in Mgr._players:
 *                         if self in Mgr._player[self.getName()]:
 *                             Mgr.players[self.getName()].remove(self)             # <<<<<<<<<<<<<<
 *             if self.isXALInitialized():
 *                 self._destroy()
 */
            __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_Mgr); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 765; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_GOTREF(__pyx_t_5);
            __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_players_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 765; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_GOTREF(__pyx_t_1);
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_getName); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 765; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_GOTREF(__pyx_t_5);
            __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 765; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_GOTREF(__pyx_t_4);
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            __pyx_t_5 = PyObject_GetItem(__pyx_t_1, __pyx_t_4); if (unlikely(__pyx_t_5 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 765; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
            __Pyx_GOTREF(__pyx_t_5);
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_remove); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 765; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_GOTREF(__pyx_t_4);
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 765; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_GOTREF(__pyx_t_5);
            __Pyx_INCREF(__pyx_v_self);
            PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_v_self);
            __Pyx_GIVEREF(__pyx_v_self);
            __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 765; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_GOTREF(__pyx_t_1);
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
            goto __pyx_L7;
          }
          __pyx_L7:;
          goto __pyx_L6;
        }
        __pyx_L6:;
        goto __pyx_L5;
      }
      __pyx_L5:;
      goto __pyx_L4;
    }
    __pyx_L4:;

    /* "_PyXAL.pyx":766
 *                         if self in Mgr._player[self.getName()]:
 *                             Mgr.players[self.getName()].remove(self)
 *             if self.isXALInitialized():             # <<<<<<<<<<<<<<
 *                 self._destroy()
 *         del self._wrapper
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 766; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 766; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 766; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__pyx_t_3) {

      /* "_PyXAL.pyx":767
 *                             Mgr.players[self.getName()].remove(self)
 *             if self.isXALInitialized():
 *                 self._destroy()             # <<<<<<<<<<<<<<
 *         del self._wrapper
 *         del self._sound
 */
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_destroy); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 767; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 767; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L8;
    }
    __pyx_L8:;
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "_PyXAL.pyx":768
 *             if self.isXALInitialized():
 *                 self._destroy()
 *         del self._wrapper             # <<<<<<<<<<<<<<
 *         del self._sound
 * 
 */
  if (__Pyx_PyObject_DelAttrStr(__pyx_v_self, __pyx_n_s_wrapper) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 768; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_PyXAL.pyx":769
 *                 self._destroy()
 *         del self._wrapper
 *         del self._sound             # <<<<<<<<<<<<<<
 * 
 * 
 */
  if (__Pyx_PyObject_DelAttrStr(__pyx_v_self, __pyx_n_s_sound_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 769; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_PyXAL.pyx":758
 *             self.destroyed = True
 * 
 *     def __del__(self):             # <<<<<<<<<<<<<<
 *         global Mgr
 *         if not self.destroyed:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("_PyXAL.PyPlayer.__del__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":772
 * 
 * 
 *     def isXALInitialized(self):             # <<<<<<<<<<<<<<
 *         '''
 *         returns true if the C++ side of the interface to XAL exists
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_PyXAL_8PyPlayer_7isXALInitialized(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_6_PyXAL_8PyPlayer_6isXALInitialized[] = "\n        returns true if the C++ side of the interface to XAL exists\n        ";
static PyMethodDef __pyx_mdef_6_PyXAL_8PyPlayer_7isXALInitialized = {__Pyx_NAMESTR("isXALInitialized"), (PyCFunction)__pyx_pw_6_PyXAL_8PyPlayer_7isXALInitialized, METH_O, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_8PyPlayer_6isXALInitialized)};
static PyObject *__pyx_pw_6_PyXAL_8PyPlayer_7isXALInitialized(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("isXALInitialized (wrapper)", 0);
  __pyx_r = __pyx_pf_6_PyXAL_8PyPlayer_6isXALInitialized(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_PyXAL_8PyPlayer_6isXALInitialized(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("isXALInitialized", 0);

  /* "_PyXAL.pyx":776
 *         returns true if the C++ side of the interface to XAL exists
 *         '''
 *         if XAL.mgr != NULL:             # <<<<<<<<<<<<<<
 *             return True
 *         else:
 */
  __pyx_t_1 = ((xal::mgr != NULL) != 0);
  if (__pyx_t_1) {

    /* "_PyXAL.pyx":777
 *         '''
 *         if XAL.mgr != NULL:
 *             return True             # <<<<<<<<<<<<<<
 *         else:
 *             return False
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_True);
    __pyx_r = Py_True;
    goto __pyx_L0;
  }
  /*else*/ {

    /* "_PyXAL.pyx":779
 *             return True
 *         else:
 *             return False             # <<<<<<<<<<<<<<
 * 
 *     def getGain(self):
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_False);
    __pyx_r = Py_False;
    goto __pyx_L0;
  }

  /* "_PyXAL.pyx":772
 * 
 * 
 *     def isXALInitialized(self):             # <<<<<<<<<<<<<<
 *         '''
 *         returns true if the C++ side of the interface to XAL exists
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":781
 *             return False
 * 
 *     def getGain(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: float the current gain of the player (also knows as volume)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_PyXAL_8PyPlayer_9getGain(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_6_PyXAL_8PyPlayer_8getGain[] = "\n        @return: float the current gain of the player (also knows as volume)\n        ";
static PyMethodDef __pyx_mdef_6_PyXAL_8PyPlayer_9getGain = {__Pyx_NAMESTR("getGain"), (PyCFunction)__pyx_pw_6_PyXAL_8PyPlayer_9getGain, METH_O, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_8PyPlayer_8getGain)};
static PyObject *__pyx_pw_6_PyXAL_8PyPlayer_9getGain(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getGain (wrapper)", 0);
  __pyx_r = __pyx_pf_6_PyXAL_8PyPlayer_8getGain(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_PyXAL_8PyPlayer_8getGain(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getGain", 0);

  /* "_PyXAL.pyx":785
 *         @return: float the current gain of the player (also knows as volume)
 *         '''
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 785; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 785; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 785; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = ((!__pyx_t_3) != 0);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":786
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__92, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 786; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 786; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "_PyXAL.pyx":787
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         return self._wrapper.getGain()
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_destroyed); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 787; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 787; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":788
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         return self._wrapper.getGain()
 * 
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__93, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 788; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 788; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "_PyXAL.pyx":789
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         return self._wrapper.getGain()             # <<<<<<<<<<<<<<
 * 
 *     def setGain(self, float value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_wrapper); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 789; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_getGain); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 789; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 789; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "_PyXAL.pyx":781
 *             return False
 * 
 *     def getGain(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: float the current gain of the player (also knows as volume)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.PyPlayer.getGain", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":791
 *         return self._wrapper.getGain()
 * 
 *     def setGain(self, float value):             # <<<<<<<<<<<<<<
 *         '''
 *         set the gain of the player (also knows as volume)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_PyXAL_8PyPlayer_11setGain(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6_PyXAL_8PyPlayer_10setGain[] = "\n        set the gain of the player (also knows as volume)\n        @param value: float the value of the volume to set 1.0 is normal 2.0 is twice as loud 0.5 is half volume ect.\n        ";
static PyMethodDef __pyx_mdef_6_PyXAL_8PyPlayer_11setGain = {__Pyx_NAMESTR("setGain"), (PyCFunction)__pyx_pw_6_PyXAL_8PyPlayer_11setGain, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_8PyPlayer_10setGain)};
static PyObject *__pyx_pw_6_PyXAL_8PyPlayer_11setGain(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  float __pyx_v_value;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setGain (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_value,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setGain", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 791; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "setGain") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 791; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_self = values[0];
    __pyx_v_value = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_value == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 791; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setGain", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 791; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("_PyXAL.PyPlayer.setGain", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6_PyXAL_8PyPlayer_10setGain(__pyx_self, __pyx_v_self, __pyx_v_value);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_PyXAL_8PyPlayer_10setGain(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, float __pyx_v_value) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setGain", 0);

  /* "_PyXAL.pyx":796
 *         @param value: float the value of the volume to set 1.0 is normal 2.0 is twice as loud 0.5 is half volume ect.
 *         '''
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 796; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 796; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 796; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = ((!__pyx_t_3) != 0);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":797
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__94, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 797; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 797; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "_PyXAL.pyx":798
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         self._wrapper.setGain(value)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_destroyed); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 798; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 798; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":799
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         self._wrapper.setGain(value)
 * 
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__95, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 799; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 799; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "_PyXAL.pyx":800
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         self._wrapper.setGain(value)             # <<<<<<<<<<<<<<
 * 
 *     def getPitch(self):
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_wrapper); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 800; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_setGain); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 800; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_value); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 800; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 800; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 800; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "_PyXAL.pyx":791
 *         return self._wrapper.getGain()
 * 
 *     def setGain(self, float value):             # <<<<<<<<<<<<<<
 *         '''
 *         set the gain of the player (also knows as volume)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("_PyXAL.PyPlayer.setGain", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":802
 *         self._wrapper.setGain(value)
 * 
 *     def getPitch(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: float the current pitch of the player
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_PyXAL_8PyPlayer_13getPitch(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_6_PyXAL_8PyPlayer_12getPitch[] = "\n        @return: float the current pitch of the player\n        ";
static PyMethodDef __pyx_mdef_6_PyXAL_8PyPlayer_13getPitch = {__Pyx_NAMESTR("getPitch"), (PyCFunction)__pyx_pw_6_PyXAL_8PyPlayer_13getPitch, METH_O, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_8PyPlayer_12getPitch)};
static PyObject *__pyx_pw_6_PyXAL_8PyPlayer_13getPitch(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getPitch (wrapper)", 0);
  __pyx_r = __pyx_pf_6_PyXAL_8PyPlayer_12getPitch(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_PyXAL_8PyPlayer_12getPitch(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getPitch", 0);

  /* "_PyXAL.pyx":806
 *         @return: float the current pitch of the player
 *         '''
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 806; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 806; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 806; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = ((!__pyx_t_3) != 0);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":807
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__96, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 807; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 807; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "_PyXAL.pyx":808
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         return self._wrapper.getPitch()
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_destroyed); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 808; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 808; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":809
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         return self._wrapper.getPitch()
 * 
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__97, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 809; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 809; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "_PyXAL.pyx":810
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         return self._wrapper.getPitch()             # <<<<<<<<<<<<<<
 * 
 *     def setPitch(self, float value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_wrapper); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 810; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_getPitch); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 810; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 810; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "_PyXAL.pyx":802
 *         self._wrapper.setGain(value)
 * 
 *     def getPitch(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: float the current pitch of the player
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.PyPlayer.getPitch", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":812
 *         return self._wrapper.getPitch()
 * 
 *     def setPitch(self, float value):             # <<<<<<<<<<<<<<
 *         '''
 *         set the current pitch of the player
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_PyXAL_8PyPlayer_15setPitch(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6_PyXAL_8PyPlayer_14setPitch[] = "\n        set the current pitch of the player\n        @param value: float the value of the pitch to set to set 1.0 is normal 2.0 is a 200% shift 0.5 is a 50% shift\n        ";
static PyMethodDef __pyx_mdef_6_PyXAL_8PyPlayer_15setPitch = {__Pyx_NAMESTR("setPitch"), (PyCFunction)__pyx_pw_6_PyXAL_8PyPlayer_15setPitch, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_8PyPlayer_14setPitch)};
static PyObject *__pyx_pw_6_PyXAL_8PyPlayer_15setPitch(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  float __pyx_v_value;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setPitch (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_value,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setPitch", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 812; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "setPitch") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 812; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_self = values[0];
    __pyx_v_value = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_value == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 812; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setPitch", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 812; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("_PyXAL.PyPlayer.setPitch", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6_PyXAL_8PyPlayer_14setPitch(__pyx_self, __pyx_v_self, __pyx_v_value);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_PyXAL_8PyPlayer_14setPitch(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, float __pyx_v_value) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setPitch", 0);

  /* "_PyXAL.pyx":817
 *         @param value: float the value of the pitch to set to set 1.0 is normal 2.0 is a 200% shift 0.5 is a 50% shift
 *         '''
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 817; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 817; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 817; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = ((!__pyx_t_3) != 0);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":818
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__98, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 818; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 818; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "_PyXAL.pyx":819
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         self._wrapper.setPitch(value)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_destroyed); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 819; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 819; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":820
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         self._wrapper.setPitch(value)
 * 
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__99, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 820; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 820; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "_PyXAL.pyx":821
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         self._wrapper.setPitch(value)             # <<<<<<<<<<<<<<
 * 
 *     def getSound(self):
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_wrapper); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 821; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_setPitch); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 821; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_value); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 821; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 821; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 821; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "_PyXAL.pyx":812
 *         return self._wrapper.getPitch()
 * 
 *     def setPitch(self, float value):             # <<<<<<<<<<<<<<
 *         '''
 *         set the current pitch of the player
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("_PyXAL.PyPlayer.setPitch", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":823
 *         self._wrapper.setPitch(value)
 * 
 *     def getSound(self):             # <<<<<<<<<<<<<<
 *         '''
 *         return a PySound class wrapper for the sound object of the player
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_PyXAL_8PyPlayer_17getSound(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_6_PyXAL_8PyPlayer_16getSound[] = "\n        return a PySound class wrapper for the sound object of the player\n        ";
static PyMethodDef __pyx_mdef_6_PyXAL_8PyPlayer_17getSound = {__Pyx_NAMESTR("getSound"), (PyCFunction)__pyx_pw_6_PyXAL_8PyPlayer_17getSound, METH_O, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_8PyPlayer_16getSound)};
static PyObject *__pyx_pw_6_PyXAL_8PyPlayer_17getSound(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getSound (wrapper)", 0);
  __pyx_r = __pyx_pf_6_PyXAL_8PyPlayer_16getSound(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_PyXAL_8PyPlayer_16getSound(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getSound", 0);

  /* "_PyXAL.pyx":827
 *         return a PySound class wrapper for the sound object of the player
 *         '''
 *         return self._sound             # <<<<<<<<<<<<<<
 * 
 *     def getName(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_sound_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 827; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "_PyXAL.pyx":823
 *         self._wrapper.setPitch(value)
 * 
 *     def getSound(self):             # <<<<<<<<<<<<<<
 *         '''
 *         return a PySound class wrapper for the sound object of the player
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_PyXAL.PyPlayer.getSound", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":829
 *         return self._sound
 * 
 *     def getName(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: returns the string name of the sound. it is normal the full path of teh sound file with out the file extention
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_PyXAL_8PyPlayer_19getName(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_6_PyXAL_8PyPlayer_18getName[] = "\n        @return: returns the string name of the sound. it is normal the full path of teh sound file with out the file extention\n        ";
static PyMethodDef __pyx_mdef_6_PyXAL_8PyPlayer_19getName = {__Pyx_NAMESTR("getName"), (PyCFunction)__pyx_pw_6_PyXAL_8PyPlayer_19getName, METH_O, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_8PyPlayer_18getName)};
static PyObject *__pyx_pw_6_PyXAL_8PyPlayer_19getName(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getName (wrapper)", 0);
  __pyx_r = __pyx_pf_6_PyXAL_8PyPlayer_18getName(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_PyXAL_8PyPlayer_18getName(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getName", 0);

  /* "_PyXAL.pyx":833
 *         @return: returns the string name of the sound. it is normal the full path of teh sound file with out the file extention
 *         '''
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 833; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 833; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 833; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = ((!__pyx_t_3) != 0);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":834
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__100, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 834; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 834; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "_PyXAL.pyx":835
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         return self._wrapper.getName()
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_destroyed); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 835; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 835; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":836
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         return self._wrapper.getName()
 * 
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__101, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 836; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 836; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "_PyXAL.pyx":837
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         return self._wrapper.getName()             # <<<<<<<<<<<<<<
 * 
 *     def getFilename(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_wrapper); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 837; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_getName); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 837; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 837; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "_PyXAL.pyx":829
 *         return self._sound
 * 
 *     def getName(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: returns the string name of the sound. it is normal the full path of teh sound file with out the file extention
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.PyPlayer.getName", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":839
 *         return self._wrapper.getName()
 * 
 *     def getFilename(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: returns a string containing the file name the sound was loaded from
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_PyXAL_8PyPlayer_21getFilename(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_6_PyXAL_8PyPlayer_20getFilename[] = "\n        @return: returns a string containing the file name the sound was loaded from\n        ";
static PyMethodDef __pyx_mdef_6_PyXAL_8PyPlayer_21getFilename = {__Pyx_NAMESTR("getFilename"), (PyCFunction)__pyx_pw_6_PyXAL_8PyPlayer_21getFilename, METH_O, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_8PyPlayer_20getFilename)};
static PyObject *__pyx_pw_6_PyXAL_8PyPlayer_21getFilename(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getFilename (wrapper)", 0);
  __pyx_r = __pyx_pf_6_PyXAL_8PyPlayer_20getFilename(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_PyXAL_8PyPlayer_20getFilename(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getFilename", 0);

  /* "_PyXAL.pyx":843
 *         @return: returns a string containing the file name the sound was loaded from
 *         '''
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 843; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 843; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 843; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = ((!__pyx_t_3) != 0);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":844
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__102, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 844; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 844; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "_PyXAL.pyx":845
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         return self._wrapper.getFilename()
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_destroyed); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 845; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 845; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":846
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         return self._wrapper.getFilename()
 * 
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__103, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 846; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 846; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "_PyXAL.pyx":847
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         return self._wrapper.getFilename()             # <<<<<<<<<<<<<<
 * 
 *     def getRealFilename(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_wrapper); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 847; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_getFilename); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 847; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 847; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "_PyXAL.pyx":839
 *         return self._wrapper.getName()
 * 
 *     def getFilename(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: returns a string containing the file name the sound was loaded from
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.PyPlayer.getFilename", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":849
 *         return self._wrapper.getFilename()
 * 
 *     def getRealFilename(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: returns a string with the full path to the file the string was loaded from
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_PyXAL_8PyPlayer_23getRealFilename(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_6_PyXAL_8PyPlayer_22getRealFilename[] = "\n        @return: returns a string with the full path to the file the string was loaded from\n        ";
static PyMethodDef __pyx_mdef_6_PyXAL_8PyPlayer_23getRealFilename = {__Pyx_NAMESTR("getRealFilename"), (PyCFunction)__pyx_pw_6_PyXAL_8PyPlayer_23getRealFilename, METH_O, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_8PyPlayer_22getRealFilename)};
static PyObject *__pyx_pw_6_PyXAL_8PyPlayer_23getRealFilename(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getRealFilename (wrapper)", 0);
  __pyx_r = __pyx_pf_6_PyXAL_8PyPlayer_22getRealFilename(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_PyXAL_8PyPlayer_22getRealFilename(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getRealFilename", 0);

  /* "_PyXAL.pyx":853
 *         @return: returns a string with the full path to the file the string was loaded from
 *         '''
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 853; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 853; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 853; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = ((!__pyx_t_3) != 0);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":854
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__104, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 854; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 854; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "_PyXAL.pyx":855
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         return self._wrapper.getRealFilename()
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_destroyed); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 855; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 855; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":856
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         return self._wrapper.getRealFilename()
 * 
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__105, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 856; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 856; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "_PyXAL.pyx":857
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         return self._wrapper.getRealFilename()             # <<<<<<<<<<<<<<
 * 
 *     def getDuration(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_wrapper); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 857; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_getRealFilename); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 857; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 857; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "_PyXAL.pyx":849
 *         return self._wrapper.getFilename()
 * 
 *     def getRealFilename(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: returns a string with the full path to the file the string was loaded from
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.PyPlayer.getRealFilename", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":859
 *         return self._wrapper.getRealFilename()
 * 
 *     def getDuration(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: float duration of the sound in seconds. it is a floating point number to acound for fractions of a second
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_PyXAL_8PyPlayer_25getDuration(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_6_PyXAL_8PyPlayer_24getDuration[] = "\n        @return: float duration of the sound in seconds. it is a floating point number to acound for fractions of a second\n        ";
static PyMethodDef __pyx_mdef_6_PyXAL_8PyPlayer_25getDuration = {__Pyx_NAMESTR("getDuration"), (PyCFunction)__pyx_pw_6_PyXAL_8PyPlayer_25getDuration, METH_O, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_8PyPlayer_24getDuration)};
static PyObject *__pyx_pw_6_PyXAL_8PyPlayer_25getDuration(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getDuration (wrapper)", 0);
  __pyx_r = __pyx_pf_6_PyXAL_8PyPlayer_24getDuration(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_PyXAL_8PyPlayer_24getDuration(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getDuration", 0);

  /* "_PyXAL.pyx":863
 *         @return: float duration of the sound in seconds. it is a floating point number to acound for fractions of a second
 *         '''
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 863; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 863; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 863; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = ((!__pyx_t_3) != 0);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":864
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__106, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 864; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 864; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "_PyXAL.pyx":865
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         return self._wrapper.getDuration()
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_destroyed); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 865; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 865; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":866
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         return self._wrapper.getDuration()
 * 
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__107, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 866; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 866; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "_PyXAL.pyx":867
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         return self._wrapper.getDuration()             # <<<<<<<<<<<<<<
 * 
 *     def getSize(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_wrapper); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 867; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_getDuration); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 867; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 867; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "_PyXAL.pyx":859
 *         return self._wrapper.getRealFilename()
 * 
 *     def getDuration(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: float duration of the sound in seconds. it is a floating point number to acound for fractions of a second
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.PyPlayer.getDuration", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":869
 *         return self._wrapper.getDuration()
 * 
 *     def getSize(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: int the size of the sound data in bits not bytes
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_PyXAL_8PyPlayer_27getSize(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_6_PyXAL_8PyPlayer_26getSize[] = "\n        @return: int the size of the sound data in bits not bytes\n        ";
static PyMethodDef __pyx_mdef_6_PyXAL_8PyPlayer_27getSize = {__Pyx_NAMESTR("getSize"), (PyCFunction)__pyx_pw_6_PyXAL_8PyPlayer_27getSize, METH_O, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_8PyPlayer_26getSize)};
static PyObject *__pyx_pw_6_PyXAL_8PyPlayer_27getSize(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getSize (wrapper)", 0);
  __pyx_r = __pyx_pf_6_PyXAL_8PyPlayer_26getSize(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_PyXAL_8PyPlayer_26getSize(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getSize", 0);

  /* "_PyXAL.pyx":873
 *         @return: int the size of the sound data in bits not bytes
 *         '''
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 873; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 873; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 873; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = ((!__pyx_t_3) != 0);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":874
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__108, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 874; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 874; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "_PyXAL.pyx":875
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         return self._wrapper.getSize()
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_destroyed); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 875; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 875; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":876
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         return self._wrapper.getSize()
 * 
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__109, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 876; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 876; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "_PyXAL.pyx":877
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         return self._wrapper.getSize()             # <<<<<<<<<<<<<<
 * 
 *     def getTimePosition(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_wrapper); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 877; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_getSize); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 877; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 877; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "_PyXAL.pyx":869
 *         return self._wrapper.getDuration()
 * 
 *     def getSize(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: int the size of the sound data in bits not bytes
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.PyPlayer.getSize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":879
 *         return self._wrapper.getSize()
 * 
 *     def getTimePosition(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: float the time position in seconds
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_PyXAL_8PyPlayer_29getTimePosition(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_6_PyXAL_8PyPlayer_28getTimePosition[] = "\n        @return: float the time position in seconds\n        ";
static PyMethodDef __pyx_mdef_6_PyXAL_8PyPlayer_29getTimePosition = {__Pyx_NAMESTR("getTimePosition"), (PyCFunction)__pyx_pw_6_PyXAL_8PyPlayer_29getTimePosition, METH_O, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_8PyPlayer_28getTimePosition)};
static PyObject *__pyx_pw_6_PyXAL_8PyPlayer_29getTimePosition(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getTimePosition (wrapper)", 0);
  __pyx_r = __pyx_pf_6_PyXAL_8PyPlayer_28getTimePosition(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_PyXAL_8PyPlayer_28getTimePosition(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getTimePosition", 0);

  /* "_PyXAL.pyx":883
 *         @return: float the time position in seconds
 *         '''
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 883; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 883; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 883; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = ((!__pyx_t_3) != 0);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":884
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__110, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 884; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 884; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "_PyXAL.pyx":885
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         return self._wrapper.getTimePosition()
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_destroyed); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 885; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 885; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":886
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         return self._wrapper.getTimePosition()
 * 
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__111, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 886; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 886; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "_PyXAL.pyx":887
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         return self._wrapper.getTimePosition()             # <<<<<<<<<<<<<<
 * 
 *     def getSamplePosition(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_wrapper); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 887; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_getTimePosition); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 887; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 887; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "_PyXAL.pyx":879
 *         return self._wrapper.getSize()
 * 
 *     def getTimePosition(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: float the time position in seconds
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.PyPlayer.getTimePosition", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":889
 *         return self._wrapper.getTimePosition()
 * 
 *     def getSamplePosition(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: unsigned int the position in the buffer
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_PyXAL_8PyPlayer_31getSamplePosition(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_6_PyXAL_8PyPlayer_30getSamplePosition[] = "\n        @return: unsigned int the position in the buffer\n        ";
static PyMethodDef __pyx_mdef_6_PyXAL_8PyPlayer_31getSamplePosition = {__Pyx_NAMESTR("getSamplePosition"), (PyCFunction)__pyx_pw_6_PyXAL_8PyPlayer_31getSamplePosition, METH_O, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_8PyPlayer_30getSamplePosition)};
static PyObject *__pyx_pw_6_PyXAL_8PyPlayer_31getSamplePosition(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getSamplePosition (wrapper)", 0);
  __pyx_r = __pyx_pf_6_PyXAL_8PyPlayer_30getSamplePosition(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_PyXAL_8PyPlayer_30getSamplePosition(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getSamplePosition", 0);

  /* "_PyXAL.pyx":893
 *         @return: unsigned int the position in the buffer
 *         '''
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 893; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 893; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 893; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = ((!__pyx_t_3) != 0);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":894
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__112, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 894; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 894; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "_PyXAL.pyx":895
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         return self._wrapper.getSamplePosition()
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_destroyed); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 895; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 895; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":896
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         return self._wrapper.getSamplePosition()
 * 
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__113, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 896; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 896; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "_PyXAL.pyx":897
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         return self._wrapper.getSamplePosition()             # <<<<<<<<<<<<<<
 * 
 *     def isPlaying(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_wrapper); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 897; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_getSamplePosition); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 897; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 897; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "_PyXAL.pyx":889
 *         return self._wrapper.getTimePosition()
 * 
 *     def getSamplePosition(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: unsigned int the position in the buffer
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.PyPlayer.getSamplePosition", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":899
 *         return self._wrapper.getSamplePosition()
 * 
 *     def isPlaying(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: bool True of the sound is playing
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_PyXAL_8PyPlayer_33isPlaying(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_6_PyXAL_8PyPlayer_32isPlaying[] = "\n        @return: bool True of the sound is playing\n        ";
static PyMethodDef __pyx_mdef_6_PyXAL_8PyPlayer_33isPlaying = {__Pyx_NAMESTR("isPlaying"), (PyCFunction)__pyx_pw_6_PyXAL_8PyPlayer_33isPlaying, METH_O, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_8PyPlayer_32isPlaying)};
static PyObject *__pyx_pw_6_PyXAL_8PyPlayer_33isPlaying(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("isPlaying (wrapper)", 0);
  __pyx_r = __pyx_pf_6_PyXAL_8PyPlayer_32isPlaying(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_PyXAL_8PyPlayer_32isPlaying(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("isPlaying", 0);

  /* "_PyXAL.pyx":903
 *         @return: bool True of the sound is playing
 *         '''
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 903; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 903; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 903; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = ((!__pyx_t_3) != 0);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":904
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__114, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 904; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 904; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "_PyXAL.pyx":905
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         return self._wrapper.isPlaying()
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_destroyed); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 905; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 905; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":906
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         return self._wrapper.isPlaying()
 * 
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__115, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 906; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 906; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "_PyXAL.pyx":907
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         return self._wrapper.isPlaying()             # <<<<<<<<<<<<<<
 * 
 *     def isPaused(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_wrapper); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 907; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_isPlaying); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 907; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 907; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "_PyXAL.pyx":899
 *         return self._wrapper.getSamplePosition()
 * 
 *     def isPlaying(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: bool True of the sound is playing
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.PyPlayer.isPlaying", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":909
 *         return self._wrapper.isPlaying()
 * 
 *     def isPaused(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: bool True if the sound is paused
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_PyXAL_8PyPlayer_35isPaused(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_6_PyXAL_8PyPlayer_34isPaused[] = "\n        @return: bool True if the sound is paused\n        ";
static PyMethodDef __pyx_mdef_6_PyXAL_8PyPlayer_35isPaused = {__Pyx_NAMESTR("isPaused"), (PyCFunction)__pyx_pw_6_PyXAL_8PyPlayer_35isPaused, METH_O, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_8PyPlayer_34isPaused)};
static PyObject *__pyx_pw_6_PyXAL_8PyPlayer_35isPaused(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("isPaused (wrapper)", 0);
  __pyx_r = __pyx_pf_6_PyXAL_8PyPlayer_34isPaused(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_PyXAL_8PyPlayer_34isPaused(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("isPaused", 0);

  /* "_PyXAL.pyx":913
 *         @return: bool True if the sound is paused
 *         '''
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 913; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 913; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 913; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = ((!__pyx_t_3) != 0);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":914
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__116, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 914; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 914; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "_PyXAL.pyx":915
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         return self._wrapper.isPaused()
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_destroyed); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 915; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 915; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":916
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         return self._wrapper.isPaused()
 * 
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__117, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 916; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 916; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "_PyXAL.pyx":917
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         return self._wrapper.isPaused()             # <<<<<<<<<<<<<<
 * 
 *     def isFading(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_wrapper); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 917; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_isPaused); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 917; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 917; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "_PyXAL.pyx":909
 *         return self._wrapper.isPlaying()
 * 
 *     def isPaused(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: bool True if the sound is paused
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.PyPlayer.isPaused", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":919
 *         return self._wrapper.isPaused()
 * 
 *     def isFading(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: bool True if the sound is fading in or out
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_PyXAL_8PyPlayer_37isFading(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_6_PyXAL_8PyPlayer_36isFading[] = "\n        @return: bool True if the sound is fading in or out\n        ";
static PyMethodDef __pyx_mdef_6_PyXAL_8PyPlayer_37isFading = {__Pyx_NAMESTR("isFading"), (PyCFunction)__pyx_pw_6_PyXAL_8PyPlayer_37isFading, METH_O, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_8PyPlayer_36isFading)};
static PyObject *__pyx_pw_6_PyXAL_8PyPlayer_37isFading(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("isFading (wrapper)", 0);
  __pyx_r = __pyx_pf_6_PyXAL_8PyPlayer_36isFading(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_PyXAL_8PyPlayer_36isFading(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("isFading", 0);

  /* "_PyXAL.pyx":923
 *         @return: bool True if the sound is fading in or out
 *         '''
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 923; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 923; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 923; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = ((!__pyx_t_3) != 0);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":924
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__118, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 924; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 924; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "_PyXAL.pyx":925
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         return self._wrapper.isFading()
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_destroyed); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 925; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 925; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":926
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         return self._wrapper.isFading()
 * 
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__119, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 926; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 926; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "_PyXAL.pyx":927
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         return self._wrapper.isFading()             # <<<<<<<<<<<<<<
 * 
 *     def isFadingIn(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_wrapper); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 927; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_isFading); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 927; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 927; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "_PyXAL.pyx":919
 *         return self._wrapper.isPaused()
 * 
 *     def isFading(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: bool True if the sound is fading in or out
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.PyPlayer.isFading", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":929
 *         return self._wrapper.isFading()
 * 
 *     def isFadingIn(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: bool True if the sound is fading in
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_PyXAL_8PyPlayer_39isFadingIn(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_6_PyXAL_8PyPlayer_38isFadingIn[] = "\n        @return: bool True if the sound is fading in\n        ";
static PyMethodDef __pyx_mdef_6_PyXAL_8PyPlayer_39isFadingIn = {__Pyx_NAMESTR("isFadingIn"), (PyCFunction)__pyx_pw_6_PyXAL_8PyPlayer_39isFadingIn, METH_O, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_8PyPlayer_38isFadingIn)};
static PyObject *__pyx_pw_6_PyXAL_8PyPlayer_39isFadingIn(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("isFadingIn (wrapper)", 0);
  __pyx_r = __pyx_pf_6_PyXAL_8PyPlayer_38isFadingIn(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_PyXAL_8PyPlayer_38isFadingIn(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("isFadingIn", 0);

  /* "_PyXAL.pyx":933
 *         @return: bool True if the sound is fading in
 *         '''
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 933; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 933; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 933; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = ((!__pyx_t_3) != 0);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":934
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__120, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 934; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 934; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "_PyXAL.pyx":935
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         return self._wrapper.isFadingIn()
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_destroyed); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 935; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 935; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":936
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         return self._wrapper.isFadingIn()
 * 
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__121, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 936; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 936; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "_PyXAL.pyx":937
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         return self._wrapper.isFadingIn()             # <<<<<<<<<<<<<<
 * 
 *     def isFadingOut(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_wrapper); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 937; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_isFadingIn); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 937; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 937; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "_PyXAL.pyx":929
 *         return self._wrapper.isFading()
 * 
 *     def isFadingIn(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: bool True if the sound is fading in
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.PyPlayer.isFadingIn", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":939
 *         return self._wrapper.isFadingIn()
 * 
 *     def isFadingOut(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: bool True if teh sound is fading out
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_PyXAL_8PyPlayer_41isFadingOut(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_6_PyXAL_8PyPlayer_40isFadingOut[] = "\n        @return: bool True if teh sound is fading out\n        ";
static PyMethodDef __pyx_mdef_6_PyXAL_8PyPlayer_41isFadingOut = {__Pyx_NAMESTR("isFadingOut"), (PyCFunction)__pyx_pw_6_PyXAL_8PyPlayer_41isFadingOut, METH_O, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_8PyPlayer_40isFadingOut)};
static PyObject *__pyx_pw_6_PyXAL_8PyPlayer_41isFadingOut(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("isFadingOut (wrapper)", 0);
  __pyx_r = __pyx_pf_6_PyXAL_8PyPlayer_40isFadingOut(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_PyXAL_8PyPlayer_40isFadingOut(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("isFadingOut", 0);

  /* "_PyXAL.pyx":943
 *         @return: bool True if teh sound is fading out
 *         '''
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 943; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 943; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 943; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = ((!__pyx_t_3) != 0);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":944
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__122, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 944; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 944; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "_PyXAL.pyx":945
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         return self._wrapper.isFadingOut()
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_destroyed); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 945; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 945; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":946
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         return self._wrapper.isFadingOut()
 * 
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__123, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 946; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 946; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "_PyXAL.pyx":947
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         return self._wrapper.isFadingOut()             # <<<<<<<<<<<<<<
 * 
 *     def isLooping(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_wrapper); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 947; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_isFadingOut); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 947; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 947; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "_PyXAL.pyx":939
 *         return self._wrapper.isFadingIn()
 * 
 *     def isFadingOut(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: bool True if teh sound is fading out
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.PyPlayer.isFadingOut", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":949
 *         return self._wrapper.isFadingOut()
 * 
 *     def isLooping(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: bool True of the sound is looping
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_PyXAL_8PyPlayer_43isLooping(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_6_PyXAL_8PyPlayer_42isLooping[] = "\n        @return: bool True of the sound is looping\n        ";
static PyMethodDef __pyx_mdef_6_PyXAL_8PyPlayer_43isLooping = {__Pyx_NAMESTR("isLooping"), (PyCFunction)__pyx_pw_6_PyXAL_8PyPlayer_43isLooping, METH_O, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_8PyPlayer_42isLooping)};
static PyObject *__pyx_pw_6_PyXAL_8PyPlayer_43isLooping(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("isLooping (wrapper)", 0);
  __pyx_r = __pyx_pf_6_PyXAL_8PyPlayer_42isLooping(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_PyXAL_8PyPlayer_42isLooping(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("isLooping", 0);

  /* "_PyXAL.pyx":953
 *         @return: bool True of the sound is looping
 *         '''
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 953; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 953; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 953; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = ((!__pyx_t_3) != 0);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":954
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__124, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 954; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 954; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "_PyXAL.pyx":955
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         return self._wrapper.isLooping()
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_destroyed); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 955; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 955; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":956
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         return self._wrapper.isLooping()
 * 
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__125, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 956; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 956; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "_PyXAL.pyx":957
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         return self._wrapper.isLooping()             # <<<<<<<<<<<<<<
 * 
 *     def play(self, float fadeTime = 0.0, bool looping = False):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_wrapper); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 957; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_isLooping); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 957; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 957; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "_PyXAL.pyx":949
 *         return self._wrapper.isFadingOut()
 * 
 *     def isLooping(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: bool True of the sound is looping
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.PyPlayer.isLooping", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":959
 *         return self._wrapper.isLooping()
 * 
 *     def play(self, float fadeTime = 0.0, bool looping = False):             # <<<<<<<<<<<<<<
 *         '''
 *         start the sound playing at it's current offset, the offset starts at 0.0 when teh sound is first loaded
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_PyXAL_8PyPlayer_45play(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6_PyXAL_8PyPlayer_44play[] = "\n        start the sound playing at it's current offset, the offset starts at 0.0 when teh sound is first loaded\n        \n        @param fadeTime: float the time in seconds for the sound to fade in (0.0 by default)\n        @param looping: bool should the sound loop (False by default)\n        ";
static PyMethodDef __pyx_mdef_6_PyXAL_8PyPlayer_45play = {__Pyx_NAMESTR("play"), (PyCFunction)__pyx_pw_6_PyXAL_8PyPlayer_45play, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_8PyPlayer_44play)};
static PyObject *__pyx_pw_6_PyXAL_8PyPlayer_45play(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  float __pyx_v_fadeTime;
  bool __pyx_v_looping;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("play (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_fadeTime,&__pyx_n_s_looping,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_fadeTime);
          if (value) { values[1] = value; kw_args--; }
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_looping);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "play") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 959; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_self = values[0];
    if (values[1]) {
      __pyx_v_fadeTime = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_fadeTime == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 959; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_fadeTime = ((float)((double)0.0));
    }
    if (values[2]) {
      __pyx_v_looping = __Pyx_PyObject_IsTrue(values[2]); if (unlikely((__pyx_v_looping == (bool)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 959; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_looping = ((bool)((int)0));
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("play", 0, 1, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 959; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("_PyXAL.PyPlayer.play", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6_PyXAL_8PyPlayer_44play(__pyx_self, __pyx_v_self, __pyx_v_fadeTime, __pyx_v_looping);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_PyXAL_8PyPlayer_44play(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, float __pyx_v_fadeTime, bool __pyx_v_looping) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("play", 0);

  /* "_PyXAL.pyx":966
 *         @param looping: bool should the sound loop (False by default)
 *         '''
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 966; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 966; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 966; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = ((!__pyx_t_3) != 0);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":967
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__126, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 967; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 967; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "_PyXAL.pyx":968
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         self._wrapper.play(fadeTime, looping)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_destroyed); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 968; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 968; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":969
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         self._wrapper.play(fadeTime, looping)
 * 
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__127, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 969; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 969; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "_PyXAL.pyx":970
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         self._wrapper.play(fadeTime, looping)             # <<<<<<<<<<<<<<
 * 
 *     def stop(self, float fadeTime = 0.0):
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_wrapper); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 970; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_play); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 970; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_fadeTime); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 970; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_PyBool_FromLong(__pyx_v_looping); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 970; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 970; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  __pyx_t_2 = 0;
  __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_6, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 970; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "_PyXAL.pyx":959
 *         return self._wrapper.isLooping()
 * 
 *     def play(self, float fadeTime = 0.0, bool looping = False):             # <<<<<<<<<<<<<<
 *         '''
 *         start the sound playing at it's current offset, the offset starts at 0.0 when teh sound is first loaded
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("_PyXAL.PyPlayer.play", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":972
 *         self._wrapper.play(fadeTime, looping)
 * 
 *     def stop(self, float fadeTime = 0.0):             # <<<<<<<<<<<<<<
 *         '''
 *         stop the sound playing and rest set it's offset to 0.0
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_PyXAL_8PyPlayer_47stop(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6_PyXAL_8PyPlayer_46stop[] = "\n        stop the sound playing and rest set it's offset to 0.0\n        \n        @param fadeTime: float the time in seconds for the sound to fade out (0.0 by default)\n        ";
static PyMethodDef __pyx_mdef_6_PyXAL_8PyPlayer_47stop = {__Pyx_NAMESTR("stop"), (PyCFunction)__pyx_pw_6_PyXAL_8PyPlayer_47stop, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_8PyPlayer_46stop)};
static PyObject *__pyx_pw_6_PyXAL_8PyPlayer_47stop(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  float __pyx_v_fadeTime;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("stop (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_fadeTime,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_fadeTime);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "stop") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 972; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_self = values[0];
    if (values[1]) {
      __pyx_v_fadeTime = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_fadeTime == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 972; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_fadeTime = ((float)((double)0.0));
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("stop", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 972; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("_PyXAL.PyPlayer.stop", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6_PyXAL_8PyPlayer_46stop(__pyx_self, __pyx_v_self, __pyx_v_fadeTime);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_PyXAL_8PyPlayer_46stop(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, float __pyx_v_fadeTime) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("stop", 0);

  /* "_PyXAL.pyx":978
 *         @param fadeTime: float the time in seconds for the sound to fade out (0.0 by default)
 *         '''
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 978; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 978; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 978; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = ((!__pyx_t_3) != 0);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":979
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__128, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 979; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 979; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "_PyXAL.pyx":980
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         self._wrapper.stop(fadeTime)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_destroyed); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 980; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 980; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":981
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         self._wrapper.stop(fadeTime)
 * 
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__129, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 981; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 981; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "_PyXAL.pyx":982
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         self._wrapper.stop(fadeTime)             # <<<<<<<<<<<<<<
 * 
 *     def pause(self, float fadeTime = 0.0):
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_wrapper); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 982; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_stop); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 982; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_fadeTime); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 982; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 982; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 982; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "_PyXAL.pyx":972
 *         self._wrapper.play(fadeTime, looping)
 * 
 *     def stop(self, float fadeTime = 0.0):             # <<<<<<<<<<<<<<
 *         '''
 *         stop the sound playing and rest set it's offset to 0.0
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("_PyXAL.PyPlayer.stop", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":984
 *         self._wrapper.stop(fadeTime)
 * 
 *     def pause(self, float fadeTime = 0.0):             # <<<<<<<<<<<<<<
 *         '''
 *         stop the sound playing keeping the current offset of the sound
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_PyXAL_8PyPlayer_49pause(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6_PyXAL_8PyPlayer_48pause[] = "\n        stop the sound playing keeping the current offset of the sound\n        \n        @param fadeTime: float the time in seconds for the sound to fade out (0.0 by default)\n        ";
static PyMethodDef __pyx_mdef_6_PyXAL_8PyPlayer_49pause = {__Pyx_NAMESTR("pause"), (PyCFunction)__pyx_pw_6_PyXAL_8PyPlayer_49pause, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_8PyPlayer_48pause)};
static PyObject *__pyx_pw_6_PyXAL_8PyPlayer_49pause(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  float __pyx_v_fadeTime;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("pause (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_fadeTime,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_fadeTime);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "pause") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 984; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_self = values[0];
    if (values[1]) {
      __pyx_v_fadeTime = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_fadeTime == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 984; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_fadeTime = ((float)((double)0.0));
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("pause", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 984; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("_PyXAL.PyPlayer.pause", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6_PyXAL_8PyPlayer_48pause(__pyx_self, __pyx_v_self, __pyx_v_fadeTime);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_PyXAL_8PyPlayer_48pause(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, float __pyx_v_fadeTime) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("pause", 0);

  /* "_PyXAL.pyx":990
 *         @param fadeTime: float the time in seconds for the sound to fade out (0.0 by default)
 *         '''
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 990; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 990; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 990; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = ((!__pyx_t_3) != 0);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":991
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__130, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 991; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 991; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "_PyXAL.pyx":992
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         self._wrapper.pause(fadeTime)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_destroyed); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 992; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 992; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":993
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         self._wrapper.pause(fadeTime)
 * 
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__131, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 993; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 993; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "_PyXAL.pyx":994
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 *         self._wrapper.pause(fadeTime)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_wrapper); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 994; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_pause); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 994; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_fadeTime); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 994; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 994; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 994; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "_PyXAL.pyx":984
 *         self._wrapper.stop(fadeTime)
 * 
 *     def pause(self, float fadeTime = 0.0):             # <<<<<<<<<<<<<<
 *         '''
 *         stop the sound playing keeping the current offset of the sound
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("_PyXAL.PyPlayer.pause", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":1007
 *     cdef char* CATEGORY_STR
 * 
 *     def __init__(self, XAL.AudioSystemType type, int backendId, bint threaded = False, float updateTime = 0.01, char* deviceName = ""):             # <<<<<<<<<<<<<<
 *         '''
 *         sets up the interface and initializes XAL you SHOULD NOT BE CREATING THIS CLASS YOUR SELF call PyXAL.Init and use the object created at PyXAL.Mgr
 */

/* Python wrapper */
static int __pyx_pw_6_PyXAL_17XALManagerWrapper_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6_PyXAL_17XALManagerWrapper___init__[] = "\n        sets up the interface and initializes XAL you SHOULD NOT BE CREATING THIS CLASS YOUR SELF call PyXAL.Init and use the object created at PyXAL.Mgr\n        if PyXAL.Mgr is None call PyXAL.Destroy and then PyXAL.Init to set up the interface again\n        \n        @param systemname: string name of the back end system to use\n        @param backendId: int window handle of the calling aplication\n        @param threaded: bool should the system use a threaded interface? (False by defaut)\n        @param updateTime: float how offten should XAL update (0.01 by default)\n        @param deviceName: string arbatrary device name (\"\" by default)\n        ";
#if CYTHON_COMPILING_IN_CPYTHON
struct wrapperbase __pyx_wrapperbase_6_PyXAL_17XALManagerWrapper___init__;
#endif
static int __pyx_pw_6_PyXAL_17XALManagerWrapper_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  enum xal::AudioSystemType __pyx_v_type;
  int __pyx_v_backendId;
  int __pyx_v_threaded;
  float __pyx_v_updateTime;
  char *__pyx_v_deviceName;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_type,&__pyx_n_s_backendId,&__pyx_n_s_threaded,&__pyx_n_s_updateTime,&__pyx_n_s_deviceName,0};
    PyObject* values[5] = {0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_type)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_backendId)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 2, 5, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1007; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_threaded);
          if (value) { values[2] = value; kw_args--; }
        }
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_updateTime);
          if (value) { values[3] = value; kw_args--; }
        }
        case  4:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_deviceName);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1007; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_type = ((enum xal::AudioSystemType)PyInt_AsLong(values[0])); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1007; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_backendId = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_backendId == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1007; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    if (values[2]) {
      __pyx_v_threaded = __Pyx_PyObject_IsTrue(values[2]); if (unlikely((__pyx_v_threaded == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1007; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_threaded = ((int)0);
    }
    if (values[3]) {
      __pyx_v_updateTime = __pyx_PyFloat_AsFloat(values[3]); if (unlikely((__pyx_v_updateTime == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1007; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_updateTime = ((float)0.01);
    }
    if (values[4]) {
      __pyx_v_deviceName = __Pyx_PyObject_AsString(values[4]); if (unlikely((!__pyx_v_deviceName) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1007; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_deviceName = ((char *)__pyx_k__26);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 2, 5, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1007; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("_PyXAL.XALManagerWrapper.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6_PyXAL_17XALManagerWrapper___init__(((struct __pyx_obj_6_PyXAL_XALManagerWrapper *)__pyx_v_self), __pyx_v_type, __pyx_v_backendId, __pyx_v_threaded, __pyx_v_updateTime, __pyx_v_deviceName);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6_PyXAL_17XALManagerWrapper___init__(struct __pyx_obj_6_PyXAL_XALManagerWrapper *__pyx_v_self, enum xal::AudioSystemType __pyx_v_type, int __pyx_v_backendId, int __pyx_v_threaded, float __pyx_v_updateTime, char *__pyx_v_deviceName) {
  hstr __pyx_v_dname;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "_PyXAL.pyx":1019
 *         '''
 *         global Mgr
 *         if Mgr is not None:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("Only one XALManager interface allowed at a time, use the one at PyXAL.Mgr")
 *         self.CATEGORY_STR = "default"
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_Mgr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1019; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__pyx_t_1 != Py_None);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "_PyXAL.pyx":1020
 *         global Mgr
 *         if Mgr is not None:
 *             raise RuntimeError("Only one XALManager interface allowed at a time, use the one at PyXAL.Mgr")             # <<<<<<<<<<<<<<
 *         self.CATEGORY_STR = "default"
 *         cdef hstr dname = hstr(deviceName)
 */
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__132, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1020; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1020; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "_PyXAL.pyx":1021
 *         if Mgr is not None:
 *             raise RuntimeError("Only one XALManager interface allowed at a time, use the one at PyXAL.Mgr")
 *         self.CATEGORY_STR = "default"             # <<<<<<<<<<<<<<
 *         cdef hstr dname = hstr(deviceName)
 *         self._destroyXAL()
 */
  __pyx_v_self->CATEGORY_STR = __pyx_k_default;

  /* "_PyXAL.pyx":1022
 *             raise RuntimeError("Only one XALManager interface allowed at a time, use the one at PyXAL.Mgr")
 *         self.CATEGORY_STR = "default"
 *         cdef hstr dname = hstr(deviceName)             # <<<<<<<<<<<<<<
 *         self._destroyXAL()
 *         XAL.init(type, <void*>backendId, threaded, updateTime, dname)
 */
  __pyx_v_dname = hstr(__pyx_v_deviceName);

  /* "_PyXAL.pyx":1023
 *         self.CATEGORY_STR = "default"
 *         cdef hstr dname = hstr(deviceName)
 *         self._destroyXAL()             # <<<<<<<<<<<<<<
 *         XAL.init(type, <void*>backendId, threaded, updateTime, dname)
 *         self.inited = True
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_destroyXAL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1023; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1023; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "_PyXAL.pyx":1024
 *         cdef hstr dname = hstr(deviceName)
 *         self._destroyXAL()
 *         XAL.init(type, <void*>backendId, threaded, updateTime, dname)             # <<<<<<<<<<<<<<
 *         self.inited = True
 *         self.destroyed = False
 */
  try {
    xal::init(__pyx_v_type, ((void *)__pyx_v_backendId), __pyx_v_threaded, __pyx_v_updateTime, __pyx_v_dname);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1024; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "_PyXAL.pyx":1025
 *         self._destroyXAL()
 *         XAL.init(type, <void*>backendId, threaded, updateTime, dname)
 *         self.inited = True             # <<<<<<<<<<<<<<
 *         self.destroyed = False
 *         self.SetupXAL()
 */
  __pyx_v_self->inited = 1;

  /* "_PyXAL.pyx":1026
 *         XAL.init(type, <void*>backendId, threaded, updateTime, dname)
 *         self.inited = True
 *         self.destroyed = False             # <<<<<<<<<<<<<<
 *         self.SetupXAL()
 * 
 */
  __pyx_v_self->destroyed = 0;

  /* "_PyXAL.pyx":1027
 *         self.inited = True
 *         self.destroyed = False
 *         self.SetupXAL()             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_SetupXAL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1027; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1027; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "_PyXAL.pyx":1007
 *     cdef char* CATEGORY_STR
 * 
 *     def __init__(self, XAL.AudioSystemType type, int backendId, bint threaded = False, float updateTime = 0.01, char* deviceName = ""):             # <<<<<<<<<<<<<<
 *         '''
 *         sets up the interface and initializes XAL you SHOULD NOT BE CREATING THIS CLASS YOUR SELF call PyXAL.Init and use the object created at PyXAL.Mgr
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("_PyXAL.XALManagerWrapper.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":1029
 *         self.SetupXAL()
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if XAL.mgr != NULL:
 *             fade = 0.0
 */

/* Python wrapper */
static void __pyx_pw_6_PyXAL_17XALManagerWrapper_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_6_PyXAL_17XALManagerWrapper_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_6_PyXAL_17XALManagerWrapper_2__dealloc__(((struct __pyx_obj_6_PyXAL_XALManagerWrapper *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_6_PyXAL_17XALManagerWrapper_2__dealloc__(CYTHON_UNUSED struct __pyx_obj_6_PyXAL_XALManagerWrapper *__pyx_v_self) {
  double __pyx_v_fade;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "_PyXAL.pyx":1030
 * 
 *     def __dealloc__(self):
 *         if XAL.mgr != NULL:             # <<<<<<<<<<<<<<
 *             fade = 0.0
 *             XAL.mgr.stopAll(fade)
 */
  __pyx_t_1 = ((xal::mgr != NULL) != 0);
  if (__pyx_t_1) {

    /* "_PyXAL.pyx":1031
 *     def __dealloc__(self):
 *         if XAL.mgr != NULL:
 *             fade = 0.0             # <<<<<<<<<<<<<<
 *             XAL.mgr.stopAll(fade)
 *             XAL.destroy()
 */
    __pyx_v_fade = 0.0;

    /* "_PyXAL.pyx":1032
 *         if XAL.mgr != NULL:
 *             fade = 0.0
 *             XAL.mgr.stopAll(fade)             # <<<<<<<<<<<<<<
 *             XAL.destroy()
 * 
 */
    try {
      xal::mgr->stopAll(__pyx_v_fade);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1032; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }

    /* "_PyXAL.pyx":1033
 *             fade = 0.0
 *             XAL.mgr.stopAll(fade)
 *             XAL.destroy()             # <<<<<<<<<<<<<<
 * 
 *     def isXALInitialized(self):
 */
    try {
      xal::destroy();
    } catch(...) {
      __Pyx_CppExn2PyErr();
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1033; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "_PyXAL.pyx":1029
 *         self.SetupXAL()
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if XAL.mgr != NULL:
 *             fade = 0.0
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("_PyXAL.XALManagerWrapper.__dealloc__", __pyx_clineno, __pyx_lineno, __pyx_filename, 0);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "_PyXAL.pyx":1035
 *             XAL.destroy()
 * 
 *     def isXALInitialized(self):             # <<<<<<<<<<<<<<
 *         '''
 *         returns true if the C++ side of the interface to XAL exists
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_PyXAL_17XALManagerWrapper_5isXALInitialized(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6_PyXAL_17XALManagerWrapper_4isXALInitialized[] = "\n        returns true if the C++ side of the interface to XAL exists\n        ";
static PyObject *__pyx_pw_6_PyXAL_17XALManagerWrapper_5isXALInitialized(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("isXALInitialized (wrapper)", 0);
  __pyx_r = __pyx_pf_6_PyXAL_17XALManagerWrapper_4isXALInitialized(((struct __pyx_obj_6_PyXAL_XALManagerWrapper *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_PyXAL_17XALManagerWrapper_4isXALInitialized(CYTHON_UNUSED struct __pyx_obj_6_PyXAL_XALManagerWrapper *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("isXALInitialized", 0);

  /* "_PyXAL.pyx":1039
 *         returns true if the C++ side of the interface to XAL exists
 *         '''
 *         if XAL.mgr != NULL:             # <<<<<<<<<<<<<<
 *             return True
 *         else:
 */
  __pyx_t_1 = ((xal::mgr != NULL) != 0);
  if (__pyx_t_1) {

    /* "_PyXAL.pyx":1040
 *         '''
 *         if XAL.mgr != NULL:
 *             return True             # <<<<<<<<<<<<<<
 *         else:
 *             return False
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_True);
    __pyx_r = Py_True;
    goto __pyx_L0;
  }
  /*else*/ {

    /* "_PyXAL.pyx":1042
 *             return True
 *         else:
 *             return False             # <<<<<<<<<<<<<<
 * 
 *     def SetupXAL(self):
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_False);
    __pyx_r = Py_False;
    goto __pyx_L0;
  }

  /* "_PyXAL.pyx":1035
 *             XAL.destroy()
 * 
 *     def isXALInitialized(self):             # <<<<<<<<<<<<<<
 *         '''
 *         returns true if the C++ side of the interface to XAL exists
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":1044
 *             return False
 * 
 *     def SetupXAL(self):             # <<<<<<<<<<<<<<
 *         '''
 *         set up XAL and create the default sound catagory
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_PyXAL_17XALManagerWrapper_7SetupXAL(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6_PyXAL_17XALManagerWrapper_6SetupXAL[] = "\n        set up XAL and create the default sound catagory\n        ";
static PyObject *__pyx_pw_6_PyXAL_17XALManagerWrapper_7SetupXAL(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("SetupXAL (wrapper)", 0);
  __pyx_r = __pyx_pf_6_PyXAL_17XALManagerWrapper_6SetupXAL(((struct __pyx_obj_6_PyXAL_XALManagerWrapper *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_PyXAL_17XALManagerWrapper_6SetupXAL(struct __pyx_obj_6_PyXAL_XALManagerWrapper *__pyx_v_self) {
  hstr __pyx_v_category;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  xal::Category *__pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("SetupXAL", 0);

  /* "_PyXAL.pyx":1048
 *         set up XAL and create the default sound catagory
 *         '''
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         cdef hstr category = hstr(self.CATEGORY_STR)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1048; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1048; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1048; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = ((!__pyx_t_3) != 0);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":1049
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         cdef hstr category = hstr(self.CATEGORY_STR)
 *         self._category = XAL.mgr.createCategory(category, FULL, DISK)
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__133, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1049; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1049; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "_PyXAL.pyx":1050
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         cdef hstr category = hstr(self.CATEGORY_STR)             # <<<<<<<<<<<<<<
 *         self._category = XAL.mgr.createCategory(category, FULL, DISK)
 * 
 */
  __pyx_v_category = hstr(__pyx_v_self->CATEGORY_STR);

  /* "_PyXAL.pyx":1051
 *             raise RuntimeError("XAL is not Initialized")
 *         cdef hstr category = hstr(self.CATEGORY_STR)
 *         self._category = XAL.mgr.createCategory(category, FULL, DISK)             # <<<<<<<<<<<<<<
 * 
 *     def _destroyXAL(self):
 */
  try {
    __pyx_t_5 = xal::mgr->createCategory(__pyx_v_category, __pyx_v_6_PyXAL_FULL, __pyx_v_6_PyXAL_DISK);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1051; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_self->_category = __pyx_t_5;

  /* "_PyXAL.pyx":1044
 *             return False
 * 
 *     def SetupXAL(self):             # <<<<<<<<<<<<<<
 *         '''
 *         set up XAL and create the default sound catagory
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.XALManagerWrapper.SetupXAL", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":1053
 *         self._category = XAL.mgr.createCategory(category, FULL, DISK)
 * 
 *     def _destroyXAL(self):             # <<<<<<<<<<<<<<
 *         if XAL.mgr != NULL:
 *             fade = 0.0
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_PyXAL_17XALManagerWrapper_9_destroyXAL(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6_PyXAL_17XALManagerWrapper_9_destroyXAL(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_destroyXAL (wrapper)", 0);
  __pyx_r = __pyx_pf_6_PyXAL_17XALManagerWrapper_8_destroyXAL(((struct __pyx_obj_6_PyXAL_XALManagerWrapper *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_PyXAL_17XALManagerWrapper_8_destroyXAL(CYTHON_UNUSED struct __pyx_obj_6_PyXAL_XALManagerWrapper *__pyx_v_self) {
  double __pyx_v_fade;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_destroyXAL", 0);

  /* "_PyXAL.pyx":1054
 * 
 *     def _destroyXAL(self):
 *         if XAL.mgr != NULL:             # <<<<<<<<<<<<<<
 *             fade = 0.0
 *             XAL.mgr.stopAll(fade)
 */
  __pyx_t_1 = ((xal::mgr != NULL) != 0);
  if (__pyx_t_1) {

    /* "_PyXAL.pyx":1055
 *     def _destroyXAL(self):
 *         if XAL.mgr != NULL:
 *             fade = 0.0             # <<<<<<<<<<<<<<
 *             XAL.mgr.stopAll(fade)
 *             XAL.destroy()
 */
    __pyx_v_fade = 0.0;

    /* "_PyXAL.pyx":1056
 *         if XAL.mgr != NULL:
 *             fade = 0.0
 *             XAL.mgr.stopAll(fade)             # <<<<<<<<<<<<<<
 *             XAL.destroy()
 * 
 */
    try {
      xal::mgr->stopAll(__pyx_v_fade);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1056; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }

    /* "_PyXAL.pyx":1057
 *             fade = 0.0
 *             XAL.mgr.stopAll(fade)
 *             XAL.destroy()             # <<<<<<<<<<<<<<
 * 
 * class XALManager(object):
 */
    try {
      xal::destroy();
    } catch(...) {
      __Pyx_CppExn2PyErr();
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1057; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "_PyXAL.pyx":1053
 *         self._category = XAL.mgr.createCategory(category, FULL, DISK)
 * 
 *     def _destroyXAL(self):             # <<<<<<<<<<<<<<
 *         if XAL.mgr != NULL:
 *             fade = 0.0
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_PyXAL.XALManagerWrapper._destroyXAL", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":1073
 *     _wrapper = None
 * 
 *     def __init__(self, int backendId, bint threaded = False):             # <<<<<<<<<<<<<<
 *         '''
 *         sets up the interface and initializes XAL you SHOULD NOT BE CREATING THIS CLASS YOUR SELF call PyXAL.Init and use the object created at PyXAL.Mgr
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_PyXAL_10XALManager_1__init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6_PyXAL_10XALManager___init__[] = "\n        sets up the interface and initializes XAL you SHOULD NOT BE CREATING THIS CLASS YOUR SELF call PyXAL.Init and use the object created at PyXAL.Mgr\n        if PyXAL.Mgr is None call PyXAL.Destroy and then PyXAL.Init to set up the interface again\n        \n        @param backendId: int window handle of the calling aplication\n        @param threaded: bool should the system use a threaded interface? (False by defaut)\n        ";
static PyMethodDef __pyx_mdef_6_PyXAL_10XALManager_1__init__ = {__Pyx_NAMESTR("__init__"), (PyCFunction)__pyx_pw_6_PyXAL_10XALManager_1__init__, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_10XALManager___init__)};
static PyObject *__pyx_pw_6_PyXAL_10XALManager_1__init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  int __pyx_v_backendId;
  int __pyx_v_threaded;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_backendId,&__pyx_n_s_threaded,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_backendId)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 2, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1073; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_threaded);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1073; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_self = values[0];
    __pyx_v_backendId = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_backendId == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1073; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    if (values[2]) {
      __pyx_v_threaded = __Pyx_PyObject_IsTrue(values[2]); if (unlikely((__pyx_v_threaded == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1073; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_threaded = ((int)((int)0));
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1073; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("_PyXAL.XALManager.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6_PyXAL_10XALManager___init__(__pyx_self, __pyx_v_self, __pyx_v_backendId, __pyx_v_threaded);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_PyXAL_10XALManager___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, int __pyx_v_backendId, int __pyx_v_threaded) {
  struct __pyx_obj_6_PyXAL_XALManagerWrapper *__pyx_v_wrapper = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "_PyXAL.pyx":1082
 *         '''
 *         global Mgr
 *         if Mgr is not None:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("Only one XALManager interface allowed at a time, use the one at PyXAL.Mgr")
 *         cdef XALManagerWrapper wrapper = XALManagerWrapper(XAL_AS_DEFAULT, backendId, threaded)
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_Mgr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1082; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__pyx_t_1 != Py_None);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "_PyXAL.pyx":1083
 *         global Mgr
 *         if Mgr is not None:
 *             raise RuntimeError("Only one XALManager interface allowed at a time, use the one at PyXAL.Mgr")             # <<<<<<<<<<<<<<
 *         cdef XALManagerWrapper wrapper = XALManagerWrapper(XAL_AS_DEFAULT, backendId, threaded)
 *         self._wrapper = wrapper
 */
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__134, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1083; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1083; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "_PyXAL.pyx":1084
 *         if Mgr is not None:
 *             raise RuntimeError("Only one XALManager interface allowed at a time, use the one at PyXAL.Mgr")
 *         cdef XALManagerWrapper wrapper = XALManagerWrapper(XAL_AS_DEFAULT, backendId, threaded)             # <<<<<<<<<<<<<<
 *         self._wrapper = wrapper
 *         self._players = {}
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_backendId); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1084; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_v_threaded); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1084; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1084; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_INCREF(__pyx_v_6_PyXAL_XAL_AS_DEFAULT);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_v_6_PyXAL_XAL_AS_DEFAULT);
  __Pyx_GIVEREF(__pyx_v_6_PyXAL_XAL_AS_DEFAULT);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  __pyx_t_1 = 0;
  __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_6_PyXAL_XALManagerWrapper)), __pyx_t_5, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1084; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_wrapper = ((struct __pyx_obj_6_PyXAL_XALManagerWrapper *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "_PyXAL.pyx":1085
 *             raise RuntimeError("Only one XALManager interface allowed at a time, use the one at PyXAL.Mgr")
 *         cdef XALManagerWrapper wrapper = XALManagerWrapper(XAL_AS_DEFAULT, backendId, threaded)
 *         self._wrapper = wrapper             # <<<<<<<<<<<<<<
 *         self._players = {}
 * 
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_wrapper, ((PyObject *)__pyx_v_wrapper)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1085; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_PyXAL.pyx":1086
 *         cdef XALManagerWrapper wrapper = XALManagerWrapper(XAL_AS_DEFAULT, backendId, threaded)
 *         self._wrapper = wrapper
 *         self._players = {}             # <<<<<<<<<<<<<<
 * 
 *     def isXALInitialized(self):
 */
  __pyx_t_4 = PyDict_New(); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1086; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_players, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1086; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "_PyXAL.pyx":1073
 *     _wrapper = None
 * 
 *     def __init__(self, int backendId, bint threaded = False):             # <<<<<<<<<<<<<<
 *         '''
 *         sets up the interface and initializes XAL you SHOULD NOT BE CREATING THIS CLASS YOUR SELF call PyXAL.Init and use the object created at PyXAL.Mgr
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("_PyXAL.XALManager.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_wrapper);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":1088
 *         self._players = {}
 * 
 *     def isXALInitialized(self):             # <<<<<<<<<<<<<<
 *         '''
 *         returns true if the C++ side of the interface to XAL exists
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_PyXAL_10XALManager_3isXALInitialized(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_6_PyXAL_10XALManager_2isXALInitialized[] = "\n        returns true if the C++ side of the interface to XAL exists\n        ";
static PyMethodDef __pyx_mdef_6_PyXAL_10XALManager_3isXALInitialized = {__Pyx_NAMESTR("isXALInitialized"), (PyCFunction)__pyx_pw_6_PyXAL_10XALManager_3isXALInitialized, METH_O, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_10XALManager_2isXALInitialized)};
static PyObject *__pyx_pw_6_PyXAL_10XALManager_3isXALInitialized(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("isXALInitialized (wrapper)", 0);
  __pyx_r = __pyx_pf_6_PyXAL_10XALManager_2isXALInitialized(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_PyXAL_10XALManager_2isXALInitialized(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("isXALInitialized", 0);

  /* "_PyXAL.pyx":1092
 *         returns true if the C++ side of the interface to XAL exists
 *         '''
 *         if XAL.mgr is not NULL:             # <<<<<<<<<<<<<<
 *             return True
 *         else:
 */
  __pyx_t_1 = ((xal::mgr != NULL) != 0);
  if (__pyx_t_1) {

    /* "_PyXAL.pyx":1093
 *         '''
 *         if XAL.mgr is not NULL:
 *             return True             # <<<<<<<<<<<<<<
 *         else:
 *             return False
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_True);
    __pyx_r = Py_True;
    goto __pyx_L0;
  }
  /*else*/ {

    /* "_PyXAL.pyx":1095
 *             return True
 *         else:
 *             return False             # <<<<<<<<<<<<<<
 * 
 *     def __del__(self):
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_False);
    __pyx_r = Py_False;
    goto __pyx_L0;
  }

  /* "_PyXAL.pyx":1088
 *         self._players = {}
 * 
 *     def isXALInitialized(self):             # <<<<<<<<<<<<<<
 *         '''
 *         returns true if the C++ side of the interface to XAL exists
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":1097
 *             return False
 * 
 *     def __del__(self):             # <<<<<<<<<<<<<<
 *         '''
 *         make sure XAL is destroyed if the interface is destroyed
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_PyXAL_10XALManager_5__del__(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_6_PyXAL_10XALManager_4__del__[] = "\n        make sure XAL is destroyed if the interface is destroyed\n        ";
static PyMethodDef __pyx_mdef_6_PyXAL_10XALManager_5__del__ = {__Pyx_NAMESTR("__del__"), (PyCFunction)__pyx_pw_6_PyXAL_10XALManager_5__del__, METH_O, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_10XALManager_4__del__)};
static PyObject *__pyx_pw_6_PyXAL_10XALManager_5__del__(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6_PyXAL_10XALManager_4__del__(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_PyXAL_10XALManager_4__del__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__del__", 0);

  /* "_PyXAL.pyx":1101
 *         make sure XAL is destroyed if the interface is destroyed
 *         '''
 *         del self._players             # <<<<<<<<<<<<<<
 *         del self._wrapper
 * 
 */
  if (__Pyx_PyObject_DelAttrStr(__pyx_v_self, __pyx_n_s_players) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1101; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_PyXAL.pyx":1102
 *         '''
 *         del self._players
 *         del self._wrapper             # <<<<<<<<<<<<<<
 * 
 *     def clear(self):
 */
  if (__Pyx_PyObject_DelAttrStr(__pyx_v_self, __pyx_n_s_wrapper) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1102; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_PyXAL.pyx":1097
 *             return False
 * 
 *     def __del__(self):             # <<<<<<<<<<<<<<
 *         '''
 *         make sure XAL is destroyed if the interface is destroyed
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_PyXAL.XALManager.__del__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":1104
 *         del self._wrapper
 * 
 *     def clear(self):             # <<<<<<<<<<<<<<
 *         '''
 *         clear the XAL interface and reset it to be like it was freshly initialized all current sounds and players become invalid
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_PyXAL_10XALManager_7clear(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_6_PyXAL_10XALManager_6clear[] = "\n        clear the XAL interface and reset it to be like it was freshly initialized all current sounds and players become invalid\n        ";
static PyMethodDef __pyx_mdef_6_PyXAL_10XALManager_7clear = {__Pyx_NAMESTR("clear"), (PyCFunction)__pyx_pw_6_PyXAL_10XALManager_7clear, METH_O, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_10XALManager_6clear)};
static PyObject *__pyx_pw_6_PyXAL_10XALManager_7clear(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("clear (wrapper)", 0);
  __pyx_r = __pyx_pf_6_PyXAL_10XALManager_6clear(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_PyXAL_10XALManager_6clear(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  double __pyx_v_fade;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("clear", 0);

  /* "_PyXAL.pyx":1108
 *         clear the XAL interface and reset it to be like it was freshly initialized all current sounds and players become invalid
 *         '''
 *         self._players = {}             # <<<<<<<<<<<<<<
 *         if self.isXALInitialized():
 *             fade = 0.0
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1108; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_players, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1108; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "_PyXAL.pyx":1109
 *         '''
 *         self._players = {}
 *         if self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             fade = 0.0
 *             XAL.mgr.stopAll(fade)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1109; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1109; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1109; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "_PyXAL.pyx":1110
 *         self._players = {}
 *         if self.isXALInitialized():
 *             fade = 0.0             # <<<<<<<<<<<<<<
 *             XAL.mgr.stopAll(fade)
 *             XAL.mgr.clear()
 */
    __pyx_v_fade = 0.0;

    /* "_PyXAL.pyx":1111
 *         if self.isXALInitialized():
 *             fade = 0.0
 *             XAL.mgr.stopAll(fade)             # <<<<<<<<<<<<<<
 *             XAL.mgr.clear()
 * 
 */
    try {
      xal::mgr->stopAll(__pyx_v_fade);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1111; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }

    /* "_PyXAL.pyx":1112
 *             fade = 0.0
 *             XAL.mgr.stopAll(fade)
 *             XAL.mgr.clear()             # <<<<<<<<<<<<<<
 * 
 *     def createSound(self, filename):
 */
    xal::mgr->clear();
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "_PyXAL.pyx":1104
 *         del self._wrapper
 * 
 *     def clear(self):             # <<<<<<<<<<<<<<
 *         '''
 *         clear the XAL interface and reset it to be like it was freshly initialized all current sounds and players become invalid
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.XALManager.clear", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":1114
 *             XAL.mgr.clear()
 * 
 *     def createSound(self, filename):             # <<<<<<<<<<<<<<
 *         '''
 *         create a sound object
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_PyXAL_10XALManager_9createSound(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6_PyXAL_10XALManager_8createSound[] = "\n        create a sound object\n        raises a runtime error if the sound fails to load so be sure to put this call in a try except block\n        \n        @param filename: string full path to a sound file to load\n        @return: a PySound wraper to the sound object\n        ";
static PyMethodDef __pyx_mdef_6_PyXAL_10XALManager_9createSound = {__Pyx_NAMESTR("createSound"), (PyCFunction)__pyx_pw_6_PyXAL_10XALManager_9createSound, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_10XALManager_8createSound)};
static PyObject *__pyx_pw_6_PyXAL_10XALManager_9createSound(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_filename = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("createSound (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_filename,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_filename)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("createSound", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1114; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "createSound") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1114; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_self = values[0];
    __pyx_v_filename = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("createSound", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1114; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("_PyXAL.XALManager.createSound", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6_PyXAL_10XALManager_8createSound(__pyx_self, __pyx_v_self, __pyx_v_filename);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_PyXAL_10XALManager_8createSound(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_filename) {
  PyObject *__pyx_v_pysound = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("createSound", 0);

  /* "_PyXAL.pyx":1122
 *         @return: a PySound wraper to the sound object
 *         '''
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         pysound = PySound(filename)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1122; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1122; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1122; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = ((!__pyx_t_3) != 0);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":1123
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         pysound = PySound(filename)
 *         return pysound
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__135, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1123; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1123; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "_PyXAL.pyx":1124
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         pysound = PySound(filename)             # <<<<<<<<<<<<<<
 *         return pysound
 * 
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_PySound); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1124; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1124; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_filename);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_filename);
  __Pyx_GIVEREF(__pyx_v_filename);
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_1, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1124; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_pysound = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "_PyXAL.pyx":1125
 *             raise RuntimeError("XAL is not Initialized")
 *         pysound = PySound(filename)
 *         return pysound             # <<<<<<<<<<<<<<
 * 
 *     def createPlayer(self, sound):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_pysound);
  __pyx_r = __pyx_v_pysound;
  goto __pyx_L0;

  /* "_PyXAL.pyx":1114
 *             XAL.mgr.clear()
 * 
 *     def createSound(self, filename):             # <<<<<<<<<<<<<<
 *         '''
 *         create a sound object
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("_PyXAL.XALManager.createSound", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_pysound);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":1127
 *         return pysound
 * 
 *     def createPlayer(self, sound):             # <<<<<<<<<<<<<<
 *         '''
 *         create a player from a sound object
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_PyXAL_10XALManager_11createPlayer(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6_PyXAL_10XALManager_10createPlayer[] = "\n        create a player from a sound object\n        raises a runtime error if XAL fails to create a player so be sure to put this call in a try except block\n        \n        @param sound: a PySound wrapper to a sound object\n        @return: a PyPlayer wraper to the player object\n        ";
static PyMethodDef __pyx_mdef_6_PyXAL_10XALManager_11createPlayer = {__Pyx_NAMESTR("createPlayer"), (PyCFunction)__pyx_pw_6_PyXAL_10XALManager_11createPlayer, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_10XALManager_10createPlayer)};
static PyObject *__pyx_pw_6_PyXAL_10XALManager_11createPlayer(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_sound = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("createPlayer (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_sound,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sound)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("createPlayer", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1127; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "createPlayer") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1127; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_self = values[0];
    __pyx_v_sound = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("createPlayer", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1127; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("_PyXAL.XALManager.createPlayer", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6_PyXAL_10XALManager_10createPlayer(__pyx_self, __pyx_v_self, __pyx_v_sound);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_PyXAL_10XALManager_10createPlayer(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_sound) {
  PyObject *__pyx_v_sound_name = NULL;
  PyObject *__pyx_v_pyplayer = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("createPlayer", 0);

  /* "_PyXAL.pyx":1135
 *         @return: a PyPlayer wraper to the player object
 *         '''
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         if not isinstance(sound, PySound):
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1135; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1135; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1135; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = ((!__pyx_t_3) != 0);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":1136
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if not isinstance(sound, PySound):
 *             raise TypeError("Expected argument 1 to be of type PySound got %s" % type(sound))
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__136, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1136; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1136; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "_PyXAL.pyx":1137
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         if not isinstance(sound, PySound):             # <<<<<<<<<<<<<<
 *             raise TypeError("Expected argument 1 to be of type PySound got %s" % type(sound))
 *         sound_name = sound.getName()
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_PySound); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1137; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = PyObject_IsInstance(__pyx_v_sound, __pyx_t_2); if (unlikely(__pyx_t_4 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1137; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_3 = ((!(__pyx_t_4 != 0)) != 0);
  if (__pyx_t_3) {

    /* "_PyXAL.pyx":1138
 *             raise RuntimeError("XAL is not Initialized")
 *         if not isinstance(sound, PySound):
 *             raise TypeError("Expected argument 1 to be of type PySound got %s" % type(sound))             # <<<<<<<<<<<<<<
 *         sound_name = sound.getName()
 *         if not sound_name in self._players:
 */
    __pyx_t_2 = __Pyx_PyString_Format(__pyx_kp_s_Expected_argument_1_to_be_of_typ, ((PyObject *)Py_TYPE(__pyx_v_sound))); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1138; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1138; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1138; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1138; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "_PyXAL.pyx":1139
 *         if not isinstance(sound, PySound):
 *             raise TypeError("Expected argument 1 to be of type PySound got %s" % type(sound))
 *         sound_name = sound.getName()             # <<<<<<<<<<<<<<
 *         if not sound_name in self._players:
 *             self._players[sound_name] = []
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_sound, __pyx_n_s_getName); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1139; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1139; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_sound_name = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "_PyXAL.pyx":1140
 *             raise TypeError("Expected argument 1 to be of type PySound got %s" % type(sound))
 *         sound_name = sound.getName()
 *         if not sound_name in self._players:             # <<<<<<<<<<<<<<
 *             self._players[sound_name] = []
 *         pyplayer = PyPlayer(sound)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_players); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1140; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = (__Pyx_PySequence_Contains(__pyx_v_sound_name, __pyx_t_1, Py_NE)); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1140; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":1141
 *         sound_name = sound.getName()
 *         if not sound_name in self._players:
 *             self._players[sound_name] = []             # <<<<<<<<<<<<<<
 *         pyplayer = PyPlayer(sound)
 *         self._players[sound_name].append(pyplayer)
 */
    __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1141; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_players); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1141; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    if (unlikely(PyObject_SetItem(__pyx_t_2, __pyx_v_sound_name, __pyx_t_1) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1141; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "_PyXAL.pyx":1142
 *         if not sound_name in self._players:
 *             self._players[sound_name] = []
 *         pyplayer = PyPlayer(sound)             # <<<<<<<<<<<<<<
 *         self._players[sound_name].append(pyplayer)
 *         return pyplayer
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_PyPlayer); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1142; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1142; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_sound);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_sound);
  __Pyx_GIVEREF(__pyx_v_sound);
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1142; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_pyplayer = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "_PyXAL.pyx":1143
 *             self._players[sound_name] = []
 *         pyplayer = PyPlayer(sound)
 *         self._players[sound_name].append(pyplayer)             # <<<<<<<<<<<<<<
 *         return pyplayer
 * 
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_players); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1143; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_2 = PyObject_GetItem(__pyx_t_5, __pyx_v_sound_name); if (unlikely(__pyx_t_2 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1143; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_6 = __Pyx_PyObject_Append(__pyx_t_2, __pyx_v_pyplayer); if (unlikely(__pyx_t_6 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1143; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "_PyXAL.pyx":1144
 *         pyplayer = PyPlayer(sound)
 *         self._players[sound_name].append(pyplayer)
 *         return pyplayer             # <<<<<<<<<<<<<<
 * 
 *     def destroyPlayer(self, player):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_pyplayer);
  __pyx_r = __pyx_v_pyplayer;
  goto __pyx_L0;

  /* "_PyXAL.pyx":1127
 *         return pysound
 * 
 *     def createPlayer(self, sound):             # <<<<<<<<<<<<<<
 *         '''
 *         create a player from a sound object
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("_PyXAL.XALManager.createPlayer", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_sound_name);
  __Pyx_XDECREF(__pyx_v_pyplayer);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":1146
 *         return pyplayer
 * 
 *     def destroyPlayer(self, player):             # <<<<<<<<<<<<<<
 *         '''
 *         destroy a player object
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_PyXAL_10XALManager_13destroyPlayer(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6_PyXAL_10XALManager_12destroyPlayer[] = "\n        destroy a player object\n        destroyes the C++ interface. the object is unusable after this\n        \n        @param pyplayer: the PyPlayer wrapper for the player to destory\n        ";
static PyMethodDef __pyx_mdef_6_PyXAL_10XALManager_13destroyPlayer = {__Pyx_NAMESTR("destroyPlayer"), (PyCFunction)__pyx_pw_6_PyXAL_10XALManager_13destroyPlayer, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_10XALManager_12destroyPlayer)};
static PyObject *__pyx_pw_6_PyXAL_10XALManager_13destroyPlayer(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_player = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("destroyPlayer (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_player_2,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_player_2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("destroyPlayer", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1146; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "destroyPlayer") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1146; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_self = values[0];
    __pyx_v_player = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("destroyPlayer", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1146; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("_PyXAL.XALManager.destroyPlayer", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6_PyXAL_10XALManager_12destroyPlayer(__pyx_self, __pyx_v_self, __pyx_v_player);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_PyXAL_10XALManager_12destroyPlayer(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_player) {
  PyObject *__pyx_v_name = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("destroyPlayer", 0);

  /* "_PyXAL.pyx":1153
 *         @param pyplayer: the PyPlayer wrapper for the player to destory
 *         '''
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         if not isinstance(player, PyPlayer):
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1153; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1153; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1153; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = ((!__pyx_t_3) != 0);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":1154
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if not isinstance(player, PyPlayer):
 *             raise TypeError("Expected argument 1 to be of type PyPlayer got %s" % type(player))
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__137, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1154; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1154; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "_PyXAL.pyx":1155
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         if not isinstance(player, PyPlayer):             # <<<<<<<<<<<<<<
 *             raise TypeError("Expected argument 1 to be of type PyPlayer got %s" % type(player))
 *         name = player.getName()
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_PyPlayer); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1155; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = PyObject_IsInstance(__pyx_v_player, __pyx_t_2); if (unlikely(__pyx_t_4 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1155; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_3 = ((!(__pyx_t_4 != 0)) != 0);
  if (__pyx_t_3) {

    /* "_PyXAL.pyx":1156
 *             raise RuntimeError("XAL is not Initialized")
 *         if not isinstance(player, PyPlayer):
 *             raise TypeError("Expected argument 1 to be of type PyPlayer got %s" % type(player))             # <<<<<<<<<<<<<<
 *         name = player.getName()
 *         if name in self._players:
 */
    __pyx_t_2 = __Pyx_PyString_Format(__pyx_kp_s_Expected_argument_1_to_be_of_typ_2, ((PyObject *)Py_TYPE(__pyx_v_player))); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1156; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1156; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1156; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1156; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "_PyXAL.pyx":1157
 *         if not isinstance(player, PyPlayer):
 *             raise TypeError("Expected argument 1 to be of type PyPlayer got %s" % type(player))
 *         name = player.getName()             # <<<<<<<<<<<<<<
 *         if name in self._players:
 *             if player in self._players[name]:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_player, __pyx_n_s_getName); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1157; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1157; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_name = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "_PyXAL.pyx":1158
 *             raise TypeError("Expected argument 1 to be of type PyPlayer got %s" % type(player))
 *         name = player.getName()
 *         if name in self._players:             # <<<<<<<<<<<<<<
 *             if player in self._players[name]:
 *                 self._players[name].remove(player)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_players); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1158; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = (__Pyx_PySequence_Contains(__pyx_v_name, __pyx_t_1, Py_EQ)); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1158; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":1159
 *         name = player.getName()
 *         if name in self._players:
 *             if player in self._players[name]:             # <<<<<<<<<<<<<<
 *                 self._players[name].remove(player)
 *         player._destroy()
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_players); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1159; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyObject_GetItem(__pyx_t_1, __pyx_v_name); if (unlikely(__pyx_t_2 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1159; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_4 = (__Pyx_PySequence_Contains(__pyx_v_player, __pyx_t_2, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1159; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_3 = (__pyx_t_4 != 0);
    if (__pyx_t_3) {

      /* "_PyXAL.pyx":1160
 *         if name in self._players:
 *             if player in self._players[name]:
 *                 self._players[name].remove(player)             # <<<<<<<<<<<<<<
 *         player._destroy()
 * 
 */
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_players); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1160; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_1 = PyObject_GetItem(__pyx_t_2, __pyx_v_name); if (unlikely(__pyx_t_1 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1160; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_remove); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1160; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1160; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_INCREF(__pyx_v_player);
      PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_player);
      __Pyx_GIVEREF(__pyx_v_player);
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_1, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1160; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      goto __pyx_L6;
    }
    __pyx_L6:;
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "_PyXAL.pyx":1161
 *             if player in self._players[name]:
 *                 self._players[name].remove(player)
 *         player._destroy()             # <<<<<<<<<<<<<<
 * 
 *     def destroySound(self, sound):
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_player, __pyx_n_s_destroy); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1161; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1161; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "_PyXAL.pyx":1146
 *         return pyplayer
 * 
 *     def destroyPlayer(self, player):             # <<<<<<<<<<<<<<
 *         '''
 *         destroy a player object
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("_PyXAL.XALManager.destroyPlayer", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_name);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":1163
 *         player._destroy()
 * 
 *     def destroySound(self, sound):             # <<<<<<<<<<<<<<
 *         '''
 *         destroy a sound object
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_PyXAL_10XALManager_15destroySound(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6_PyXAL_10XALManager_14destroySound[] = "\n        destroy a sound object\n        destroyes the C++ interface. the object is unusable after this and so is any player that uses the sound\n        \n        @param pyplayer: the Pysound wrapper for the sound to destory\n        ";
static PyMethodDef __pyx_mdef_6_PyXAL_10XALManager_15destroySound = {__Pyx_NAMESTR("destroySound"), (PyCFunction)__pyx_pw_6_PyXAL_10XALManager_15destroySound, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_10XALManager_14destroySound)};
static PyObject *__pyx_pw_6_PyXAL_10XALManager_15destroySound(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_sound = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("destroySound (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_sound,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sound)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("destroySound", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1163; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "destroySound") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1163; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_self = values[0];
    __pyx_v_sound = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("destroySound", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1163; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("_PyXAL.XALManager.destroySound", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6_PyXAL_10XALManager_14destroySound(__pyx_self, __pyx_v_self, __pyx_v_sound);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_PyXAL_10XALManager_14destroySound(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_sound) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("destroySound", 0);

  /* "_PyXAL.pyx":1170
 *         @param pyplayer: the Pysound wrapper for the sound to destory
 *         '''
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         if not isinstance(sound, PySound):
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1170; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1170; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1170; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = ((!__pyx_t_3) != 0);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":1171
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if not isinstance(sound, PySound):
 *             raise TypeError("Expected argument 1 to be of type PySound got %s" % type(sound))
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__138, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1171; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1171; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "_PyXAL.pyx":1172
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         if not isinstance(sound, PySound):             # <<<<<<<<<<<<<<
 *             raise TypeError("Expected argument 1 to be of type PySound got %s" % type(sound))
 *         sound._destroy()
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_PySound); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1172; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = PyObject_IsInstance(__pyx_v_sound, __pyx_t_2); if (unlikely(__pyx_t_4 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1172; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_3 = ((!(__pyx_t_4 != 0)) != 0);
  if (__pyx_t_3) {

    /* "_PyXAL.pyx":1173
 *             raise RuntimeError("XAL is not Initialized")
 *         if not isinstance(sound, PySound):
 *             raise TypeError("Expected argument 1 to be of type PySound got %s" % type(sound))             # <<<<<<<<<<<<<<
 *         sound._destroy()
 * 
 */
    __pyx_t_2 = __Pyx_PyString_Format(__pyx_kp_s_Expected_argument_1_to_be_of_typ, ((PyObject *)Py_TYPE(__pyx_v_sound))); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1173; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1173; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1173; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1173; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "_PyXAL.pyx":1174
 *         if not isinstance(sound, PySound):
 *             raise TypeError("Expected argument 1 to be of type PySound got %s" % type(sound))
 *         sound._destroy()             # <<<<<<<<<<<<<<
 * 
 *     def findPlayer(self, str name):
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_sound, __pyx_n_s_destroy); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1174; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1174; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "_PyXAL.pyx":1163
 *         player._destroy()
 * 
 *     def destroySound(self, sound):             # <<<<<<<<<<<<<<
 *         '''
 *         destroy a sound object
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.XALManager.destroySound", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":1176
 *         sound._destroy()
 * 
 *     def findPlayer(self, str name):             # <<<<<<<<<<<<<<
 *         '''
 *         tries to find a player for the sound whos name is passed. it find the player useing the intrealy kept list of wrpaed player instances. returns the first player in the list
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_PyXAL_10XALManager_17findPlayer(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6_PyXAL_10XALManager_16findPlayer[] = "\n        tries to find a player for the sound whos name is passed. it find the player useing the intrealy kept list of wrpaed player instances. returns the first player in the list\n        \n        @param name: string the name of the soudn to find a player for\n        @return: a PyPlayer wraper to the player object or None if no player is found\n        ";
static PyMethodDef __pyx_mdef_6_PyXAL_10XALManager_17findPlayer = {__Pyx_NAMESTR("findPlayer"), (PyCFunction)__pyx_pw_6_PyXAL_10XALManager_17findPlayer, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_10XALManager_16findPlayer)};
static PyObject *__pyx_pw_6_PyXAL_10XALManager_17findPlayer(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_name = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("findPlayer (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_name,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_name)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("findPlayer", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1176; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "findPlayer") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1176; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_self = values[0];
    __pyx_v_name = ((PyObject*)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("findPlayer", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1176; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("_PyXAL.XALManager.findPlayer", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_name), (&PyString_Type), 1, "name", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1176; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_6_PyXAL_10XALManager_16findPlayer(__pyx_self, __pyx_v_self, __pyx_v_name);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_PyXAL_10XALManager_16findPlayer(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_name) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("findPlayer", 0);

  /* "_PyXAL.pyx":1183
 *         @return: a PyPlayer wraper to the player object or None if no player is found
 *         '''
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         if name in self._players:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1183; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1183; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1183; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = ((!__pyx_t_3) != 0);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":1184
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if name in self._players:
 *             if len(self._players[name]) > 0:
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__139, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1184; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1184; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "_PyXAL.pyx":1185
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         if name in self._players:             # <<<<<<<<<<<<<<
 *             if len(self._players[name]) > 0:
 *                 return self._players[name][0]
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_players); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1185; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = (__Pyx_PySequence_Contains(__pyx_v_name, __pyx_t_2, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1185; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_3 = (__pyx_t_4 != 0);
  if (__pyx_t_3) {

    /* "_PyXAL.pyx":1186
 *             raise RuntimeError("XAL is not Initialized")
 *         if name in self._players:
 *             if len(self._players[name]) > 0:             # <<<<<<<<<<<<<<
 *                 return self._players[name][0]
 *         return None
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_players); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1186; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = PyObject_GetItem(__pyx_t_2, __pyx_v_name); if (unlikely(__pyx_t_1 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1186; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_5 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_5 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1186; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_3 = ((__pyx_t_5 > 0) != 0);
    if (__pyx_t_3) {

      /* "_PyXAL.pyx":1187
 *         if name in self._players:
 *             if len(self._players[name]) > 0:
 *                 return self._players[name][0]             # <<<<<<<<<<<<<<
 *         return None
 * 
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_players); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1187; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_2 = PyObject_GetItem(__pyx_t_1, __pyx_v_name); if (unlikely(__pyx_t_2 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1187; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_2, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_1 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1187; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_r = __pyx_t_1;
      __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    goto __pyx_L4;
  }
  __pyx_L4:;

  /* "_PyXAL.pyx":1188
 *             if len(self._players[name]) > 0:
 *                 return self._players[name][0]
 *         return None             # <<<<<<<<<<<<<<
 * 
 *     def play(self, name, float fadeTime = 0.0, bool looping = False, float gain = 1.0):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(Py_None);
  __pyx_r = Py_None;
  goto __pyx_L0;

  /* "_PyXAL.pyx":1176
 *         sound._destroy()
 * 
 *     def findPlayer(self, str name):             # <<<<<<<<<<<<<<
 *         '''
 *         tries to find a player for the sound whos name is passed. it find the player useing the intrealy kept list of wrpaed player instances. returns the first player in the list
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.XALManager.findPlayer", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":1190
 *         return None
 * 
 *     def play(self, name, float fadeTime = 0.0, bool looping = False, float gain = 1.0):             # <<<<<<<<<<<<<<
 *         '''
 *         play the sound identified by the name passed (it must of alrady been created)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_PyXAL_10XALManager_19play(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6_PyXAL_10XALManager_18play[] = "\n        play the sound identified by the name passed (it must of alrady been created)\n        \n        @param name: string the name of the sound to play. it must alrady of been created\n        @param fadeTime: float time is seconds for teh sound to fade in (0.0 by default)\n        @param looping: bool should the sound loop? (False by default)\n        @param gain: float the volume to play the sound at. 1.0 is normal 0.5 is half 2.0 is twice the volume ect. (1.0 by default)\n        ";
static PyMethodDef __pyx_mdef_6_PyXAL_10XALManager_19play = {__Pyx_NAMESTR("play"), (PyCFunction)__pyx_pw_6_PyXAL_10XALManager_19play, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_10XALManager_18play)};
static PyObject *__pyx_pw_6_PyXAL_10XALManager_19play(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_name = 0;
  float __pyx_v_fadeTime;
  bool __pyx_v_looping;
  float __pyx_v_gain;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("play (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_name,&__pyx_n_s_fadeTime,&__pyx_n_s_looping,&__pyx_n_s_gain,0};
    PyObject* values[5] = {0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_name)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("play", 0, 2, 5, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1190; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_fadeTime);
          if (value) { values[2] = value; kw_args--; }
        }
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_looping);
          if (value) { values[3] = value; kw_args--; }
        }
        case  4:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_gain);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "play") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1190; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_self = values[0];
    __pyx_v_name = values[1];
    if (values[2]) {
      __pyx_v_fadeTime = __pyx_PyFloat_AsFloat(values[2]); if (unlikely((__pyx_v_fadeTime == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1190; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_fadeTime = ((float)((double)0.0));
    }
    if (values[3]) {
      __pyx_v_looping = __Pyx_PyObject_IsTrue(values[3]); if (unlikely((__pyx_v_looping == (bool)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1190; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_looping = ((bool)((int)0));
    }
    if (values[4]) {
      __pyx_v_gain = __pyx_PyFloat_AsFloat(values[4]); if (unlikely((__pyx_v_gain == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1190; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_gain = ((float)((double)1.0));
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("play", 0, 2, 5, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1190; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("_PyXAL.XALManager.play", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6_PyXAL_10XALManager_18play(__pyx_self, __pyx_v_self, __pyx_v_name, __pyx_v_fadeTime, __pyx_v_looping, __pyx_v_gain);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_PyXAL_10XALManager_18play(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_name, float __pyx_v_fadeTime, bool __pyx_v_looping, float __pyx_v_gain) {
  hstr __pyx_v_hl_name;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("play", 0);

  /* "_PyXAL.pyx":1199
 *         @param gain: float the volume to play the sound at. 1.0 is normal 0.5 is half 2.0 is twice the volume ect. (1.0 by default)
 *         '''
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         cdef hstr hl_name = Py_to_Hstr(name)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1199; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1199; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1199; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = ((!__pyx_t_3) != 0);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":1200
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         cdef hstr hl_name = Py_to_Hstr(name)
 *         XAL.mgr.play(hl_name, fadeTime, looping, gain)
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__140, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1200; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1200; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "_PyXAL.pyx":1201
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         cdef hstr hl_name = Py_to_Hstr(name)             # <<<<<<<<<<<<<<
 *         XAL.mgr.play(hl_name, fadeTime, looping, gain)
 * 
 */
  __pyx_v_hl_name = __pyx_f_6_PyXAL_Py_to_Hstr(__pyx_v_name);

  /* "_PyXAL.pyx":1202
 *             raise RuntimeError("XAL is not Initialized")
 *         cdef hstr hl_name = Py_to_Hstr(name)
 *         XAL.mgr.play(hl_name, fadeTime, looping, gain)             # <<<<<<<<<<<<<<
 * 
 *     def stop(self, name, float fadeTime = 0.0):
 */
  try {
    xal::mgr->play(__pyx_v_hl_name, __pyx_v_fadeTime, __pyx_v_looping, __pyx_v_gain);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1202; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "_PyXAL.pyx":1190
 *         return None
 * 
 *     def play(self, name, float fadeTime = 0.0, bool looping = False, float gain = 1.0):             # <<<<<<<<<<<<<<
 *         '''
 *         play the sound identified by the name passed (it must of alrady been created)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.XALManager.play", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":1204
 *         XAL.mgr.play(hl_name, fadeTime, looping, gain)
 * 
 *     def stop(self, name, float fadeTime = 0.0):             # <<<<<<<<<<<<<<
 *         '''
 *         stop playing the sound identifed by the name passed
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_PyXAL_10XALManager_21stop(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6_PyXAL_10XALManager_20stop[] = "\n        stop playing the sound identifed by the name passed\n        \n        @param name: string the name of the sound to stop\n        @param fadeTime: float the time is second for the sound to fade out (0.0 by default)\n        ";
static PyMethodDef __pyx_mdef_6_PyXAL_10XALManager_21stop = {__Pyx_NAMESTR("stop"), (PyCFunction)__pyx_pw_6_PyXAL_10XALManager_21stop, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_10XALManager_20stop)};
static PyObject *__pyx_pw_6_PyXAL_10XALManager_21stop(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_name = 0;
  float __pyx_v_fadeTime;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("stop (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_name,&__pyx_n_s_fadeTime,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_name)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("stop", 0, 2, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1204; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_fadeTime);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "stop") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1204; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_self = values[0];
    __pyx_v_name = values[1];
    if (values[2]) {
      __pyx_v_fadeTime = __pyx_PyFloat_AsFloat(values[2]); if (unlikely((__pyx_v_fadeTime == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1204; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_fadeTime = ((float)((double)0.0));
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("stop", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1204; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("_PyXAL.XALManager.stop", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6_PyXAL_10XALManager_20stop(__pyx_self, __pyx_v_self, __pyx_v_name, __pyx_v_fadeTime);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_PyXAL_10XALManager_20stop(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_name, float __pyx_v_fadeTime) {
  hstr __pyx_v_hl_name;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("stop", 0);

  /* "_PyXAL.pyx":1211
 *         @param fadeTime: float the time is second for the sound to fade out (0.0 by default)
 *         '''
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         cdef hstr hl_name = Py_to_Hstr(name)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1211; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1211; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1211; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = ((!__pyx_t_3) != 0);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":1212
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         cdef hstr hl_name = Py_to_Hstr(name)
 *         XAL.mgr.stop(hl_name, fadeTime)
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__141, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1212; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1212; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "_PyXAL.pyx":1213
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         cdef hstr hl_name = Py_to_Hstr(name)             # <<<<<<<<<<<<<<
 *         XAL.mgr.stop(hl_name, fadeTime)
 * 
 */
  __pyx_v_hl_name = __pyx_f_6_PyXAL_Py_to_Hstr(__pyx_v_name);

  /* "_PyXAL.pyx":1214
 *             raise RuntimeError("XAL is not Initialized")
 *         cdef hstr hl_name = Py_to_Hstr(name)
 *         XAL.mgr.stop(hl_name, fadeTime)             # <<<<<<<<<<<<<<
 * 
 *     def stopFirst(self, name, float fadeTime = 0.0):
 */
  try {
    xal::mgr->stop(__pyx_v_hl_name, __pyx_v_fadeTime);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1214; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "_PyXAL.pyx":1204
 *         XAL.mgr.play(hl_name, fadeTime, looping, gain)
 * 
 *     def stop(self, name, float fadeTime = 0.0):             # <<<<<<<<<<<<<<
 *         '''
 *         stop playing the sound identifed by the name passed
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.XALManager.stop", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":1216
 *         XAL.mgr.stop(hl_name, fadeTime)
 * 
 *     def stopFirst(self, name, float fadeTime = 0.0):             # <<<<<<<<<<<<<<
 *         '''
 *         stop playing the first player of the sound identifed by the name passed
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_PyXAL_10XALManager_23stopFirst(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6_PyXAL_10XALManager_22stopFirst[] = "\n        stop playing the first player of the sound identifed by the name passed\n        \n        @param name: string the name of the sound to stop\n        @param fadeTime: float the time is second for the sound to fade out (0.0 by default)\n        ";
static PyMethodDef __pyx_mdef_6_PyXAL_10XALManager_23stopFirst = {__Pyx_NAMESTR("stopFirst"), (PyCFunction)__pyx_pw_6_PyXAL_10XALManager_23stopFirst, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_10XALManager_22stopFirst)};
static PyObject *__pyx_pw_6_PyXAL_10XALManager_23stopFirst(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_name = 0;
  float __pyx_v_fadeTime;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("stopFirst (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_name,&__pyx_n_s_fadeTime,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_name)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("stopFirst", 0, 2, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1216; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_fadeTime);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "stopFirst") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1216; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_self = values[0];
    __pyx_v_name = values[1];
    if (values[2]) {
      __pyx_v_fadeTime = __pyx_PyFloat_AsFloat(values[2]); if (unlikely((__pyx_v_fadeTime == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1216; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_fadeTime = ((float)((double)0.0));
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("stopFirst", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1216; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("_PyXAL.XALManager.stopFirst", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6_PyXAL_10XALManager_22stopFirst(__pyx_self, __pyx_v_self, __pyx_v_name, __pyx_v_fadeTime);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_PyXAL_10XALManager_22stopFirst(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_name, float __pyx_v_fadeTime) {
  hstr __pyx_v_hl_name;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("stopFirst", 0);

  /* "_PyXAL.pyx":1223
 *         @param fadeTime: float the time is second for the sound to fade out (0.0 by default)
 *         '''
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         cdef hstr hl_name = Py_to_Hstr(name)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1223; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1223; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1223; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = ((!__pyx_t_3) != 0);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":1224
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         cdef hstr hl_name = Py_to_Hstr(name)
 *         XAL.mgr.stopFirst(hl_name, fadeTime)
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__142, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1224; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1224; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "_PyXAL.pyx":1225
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         cdef hstr hl_name = Py_to_Hstr(name)             # <<<<<<<<<<<<<<
 *         XAL.mgr.stopFirst(hl_name, fadeTime)
 * 
 */
  __pyx_v_hl_name = __pyx_f_6_PyXAL_Py_to_Hstr(__pyx_v_name);

  /* "_PyXAL.pyx":1226
 *             raise RuntimeError("XAL is not Initialized")
 *         cdef hstr hl_name = Py_to_Hstr(name)
 *         XAL.mgr.stopFirst(hl_name, fadeTime)             # <<<<<<<<<<<<<<
 * 
 *     def stopAll(self, float fadeTime = 0.0):
 */
  try {
    xal::mgr->stopFirst(__pyx_v_hl_name, __pyx_v_fadeTime);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1226; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "_PyXAL.pyx":1216
 *         XAL.mgr.stop(hl_name, fadeTime)
 * 
 *     def stopFirst(self, name, float fadeTime = 0.0):             # <<<<<<<<<<<<<<
 *         '''
 *         stop playing the first player of the sound identifed by the name passed
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.XALManager.stopFirst", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":1228
 *         XAL.mgr.stopFirst(hl_name, fadeTime)
 * 
 *     def stopAll(self, float fadeTime = 0.0):             # <<<<<<<<<<<<<<
 *         '''
 *         stop playing the all players of the sound identifed by the name passed
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_PyXAL_10XALManager_25stopAll(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6_PyXAL_10XALManager_24stopAll[] = "\n        stop playing the all players of the sound identifed by the name passed\n        \n        @param name: string the name of the sound to stop\n        @param fadeTime: float the time is second for the sound to fade out (0.0 by default)\n        ";
static PyMethodDef __pyx_mdef_6_PyXAL_10XALManager_25stopAll = {__Pyx_NAMESTR("stopAll"), (PyCFunction)__pyx_pw_6_PyXAL_10XALManager_25stopAll, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_10XALManager_24stopAll)};
static PyObject *__pyx_pw_6_PyXAL_10XALManager_25stopAll(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  float __pyx_v_fadeTime;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("stopAll (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_fadeTime,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_fadeTime);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "stopAll") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1228; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_self = values[0];
    if (values[1]) {
      __pyx_v_fadeTime = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_fadeTime == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1228; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_fadeTime = ((float)((double)0.0));
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("stopAll", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1228; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("_PyXAL.XALManager.stopAll", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6_PyXAL_10XALManager_24stopAll(__pyx_self, __pyx_v_self, __pyx_v_fadeTime);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_PyXAL_10XALManager_24stopAll(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, float __pyx_v_fadeTime) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("stopAll", 0);

  /* "_PyXAL.pyx":1235
 *         @param fadeTime: float the time is second for the sound to fade out (0.0 by default)
 *         '''
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         XAL.mgr.stopAll(fadeTime)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1235; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1235; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1235; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = ((!__pyx_t_3) != 0);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":1236
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         XAL.mgr.stopAll(fadeTime)
 * 
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__143, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1236; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1236; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "_PyXAL.pyx":1237
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         XAL.mgr.stopAll(fadeTime)             # <<<<<<<<<<<<<<
 * 
 *     def isAnyPlaying(self, name):
 */
  try {
    xal::mgr->stopAll(__pyx_v_fadeTime);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1237; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "_PyXAL.pyx":1228
 *         XAL.mgr.stopFirst(hl_name, fadeTime)
 * 
 *     def stopAll(self, float fadeTime = 0.0):             # <<<<<<<<<<<<<<
 *         '''
 *         stop playing the all players of the sound identifed by the name passed
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.XALManager.stopAll", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":1239
 *         XAL.mgr.stopAll(fadeTime)
 * 
 *     def isAnyPlaying(self, name):             # <<<<<<<<<<<<<<
 *         '''
 *         @param name: sting name of sound to check
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_PyXAL_10XALManager_27isAnyPlaying(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6_PyXAL_10XALManager_26isAnyPlaying[] = "\n        @param name: sting name of sound to check\n        @return: bool True if there is a sound by this name playing\n        ";
static PyMethodDef __pyx_mdef_6_PyXAL_10XALManager_27isAnyPlaying = {__Pyx_NAMESTR("isAnyPlaying"), (PyCFunction)__pyx_pw_6_PyXAL_10XALManager_27isAnyPlaying, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_10XALManager_26isAnyPlaying)};
static PyObject *__pyx_pw_6_PyXAL_10XALManager_27isAnyPlaying(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_name = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("isAnyPlaying (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_name,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_name)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("isAnyPlaying", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1239; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "isAnyPlaying") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1239; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_self = values[0];
    __pyx_v_name = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("isAnyPlaying", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1239; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("_PyXAL.XALManager.isAnyPlaying", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6_PyXAL_10XALManager_26isAnyPlaying(__pyx_self, __pyx_v_self, __pyx_v_name);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_PyXAL_10XALManager_26isAnyPlaying(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_name) {
  hstr __pyx_v_hl_name;
  int __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  bool __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("isAnyPlaying", 0);

  /* "_PyXAL.pyx":1244
 *         @return: bool True if there is a sound by this name playing
 *         '''
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         cdef hstr hl_name = Py_to_Hstr(name)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1244; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1244; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1244; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = ((!__pyx_t_3) != 0);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":1245
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         cdef hstr hl_name = Py_to_Hstr(name)
 *         cdef bint result = XAL.mgr.isAnyPlaying(hl_name)
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__144, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1245; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1245; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "_PyXAL.pyx":1246
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         cdef hstr hl_name = Py_to_Hstr(name)             # <<<<<<<<<<<<<<
 *         cdef bint result = XAL.mgr.isAnyPlaying(hl_name)
 *         return result
 */
  __pyx_v_hl_name = __pyx_f_6_PyXAL_Py_to_Hstr(__pyx_v_name);

  /* "_PyXAL.pyx":1247
 *             raise RuntimeError("XAL is not Initialized")
 *         cdef hstr hl_name = Py_to_Hstr(name)
 *         cdef bint result = XAL.mgr.isAnyPlaying(hl_name)             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  try {
    __pyx_t_5 = xal::mgr->isAnyPlaying(__pyx_v_hl_name);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1247; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_result = __pyx_t_5;

  /* "_PyXAL.pyx":1248
 *         cdef hstr hl_name = Py_to_Hstr(name)
 *         cdef bint result = XAL.mgr.isAnyPlaying(hl_name)
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     def isAnyFading(self, name):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_result); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1248; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "_PyXAL.pyx":1239
 *         XAL.mgr.stopAll(fadeTime)
 * 
 *     def isAnyPlaying(self, name):             # <<<<<<<<<<<<<<
 *         '''
 *         @param name: sting name of sound to check
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.XALManager.isAnyPlaying", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":1250
 *         return result
 * 
 *     def isAnyFading(self, name):             # <<<<<<<<<<<<<<
 *         '''
 *         @param name: sting name of sound to check
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_PyXAL_10XALManager_29isAnyFading(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6_PyXAL_10XALManager_28isAnyFading[] = "\n        @param name: sting name of sound to check\n        @return: bool True if there is a sound by this name fading in or out\n        ";
static PyMethodDef __pyx_mdef_6_PyXAL_10XALManager_29isAnyFading = {__Pyx_NAMESTR("isAnyFading"), (PyCFunction)__pyx_pw_6_PyXAL_10XALManager_29isAnyFading, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_10XALManager_28isAnyFading)};
static PyObject *__pyx_pw_6_PyXAL_10XALManager_29isAnyFading(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_name = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("isAnyFading (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_name,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_name)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("isAnyFading", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1250; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "isAnyFading") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1250; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_self = values[0];
    __pyx_v_name = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("isAnyFading", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1250; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("_PyXAL.XALManager.isAnyFading", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6_PyXAL_10XALManager_28isAnyFading(__pyx_self, __pyx_v_self, __pyx_v_name);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_PyXAL_10XALManager_28isAnyFading(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_name) {
  hstr __pyx_v_hl_name;
  int __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  bool __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("isAnyFading", 0);

  /* "_PyXAL.pyx":1255
 *         @return: bool True if there is a sound by this name fading in or out
 *         '''
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         cdef hstr hl_name = Py_to_Hstr(name)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1255; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1255; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1255; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = ((!__pyx_t_3) != 0);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":1256
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         cdef hstr hl_name = Py_to_Hstr(name)
 *         cdef bint result = XAL.mgr.isAnyFading(hl_name)
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__145, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1256; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1256; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "_PyXAL.pyx":1257
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         cdef hstr hl_name = Py_to_Hstr(name)             # <<<<<<<<<<<<<<
 *         cdef bint result = XAL.mgr.isAnyFading(hl_name)
 *         return result
 */
  __pyx_v_hl_name = __pyx_f_6_PyXAL_Py_to_Hstr(__pyx_v_name);

  /* "_PyXAL.pyx":1258
 *             raise RuntimeError("XAL is not Initialized")
 *         cdef hstr hl_name = Py_to_Hstr(name)
 *         cdef bint result = XAL.mgr.isAnyFading(hl_name)             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  try {
    __pyx_t_5 = xal::mgr->isAnyFading(__pyx_v_hl_name);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1258; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_result = __pyx_t_5;

  /* "_PyXAL.pyx":1259
 *         cdef hstr hl_name = Py_to_Hstr(name)
 *         cdef bint result = XAL.mgr.isAnyFading(hl_name)
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     def isAnyFadingIn(self, name):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_result); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1259; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "_PyXAL.pyx":1250
 *         return result
 * 
 *     def isAnyFading(self, name):             # <<<<<<<<<<<<<<
 *         '''
 *         @param name: sting name of sound to check
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.XALManager.isAnyFading", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":1261
 *         return result
 * 
 *     def isAnyFadingIn(self, name):             # <<<<<<<<<<<<<<
 *         '''
 *         @param name: sting name of sound to check
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_PyXAL_10XALManager_31isAnyFadingIn(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6_PyXAL_10XALManager_30isAnyFadingIn[] = "\n        @param name: sting name of sound to check\n        @return: bool True if there is a sound by this name fading in\n        ";
static PyMethodDef __pyx_mdef_6_PyXAL_10XALManager_31isAnyFadingIn = {__Pyx_NAMESTR("isAnyFadingIn"), (PyCFunction)__pyx_pw_6_PyXAL_10XALManager_31isAnyFadingIn, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_10XALManager_30isAnyFadingIn)};
static PyObject *__pyx_pw_6_PyXAL_10XALManager_31isAnyFadingIn(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_name = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("isAnyFadingIn (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_name,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_name)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("isAnyFadingIn", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1261; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "isAnyFadingIn") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1261; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_self = values[0];
    __pyx_v_name = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("isAnyFadingIn", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1261; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("_PyXAL.XALManager.isAnyFadingIn", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6_PyXAL_10XALManager_30isAnyFadingIn(__pyx_self, __pyx_v_self, __pyx_v_name);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_PyXAL_10XALManager_30isAnyFadingIn(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_name) {
  hstr __pyx_v_hl_name;
  int __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  bool __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("isAnyFadingIn", 0);

  /* "_PyXAL.pyx":1266
 *         @return: bool True if there is a sound by this name fading in
 *         '''
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         cdef hstr hl_name = Py_to_Hstr(name)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1266; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1266; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1266; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = ((!__pyx_t_3) != 0);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":1267
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         cdef hstr hl_name = Py_to_Hstr(name)
 *         cdef bint result = XAL.mgr.isAnyFadingIn(hl_name)
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__146, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1267; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1267; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "_PyXAL.pyx":1268
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         cdef hstr hl_name = Py_to_Hstr(name)             # <<<<<<<<<<<<<<
 *         cdef bint result = XAL.mgr.isAnyFadingIn(hl_name)
 *         return result
 */
  __pyx_v_hl_name = __pyx_f_6_PyXAL_Py_to_Hstr(__pyx_v_name);

  /* "_PyXAL.pyx":1269
 *             raise RuntimeError("XAL is not Initialized")
 *         cdef hstr hl_name = Py_to_Hstr(name)
 *         cdef bint result = XAL.mgr.isAnyFadingIn(hl_name)             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  try {
    __pyx_t_5 = xal::mgr->isAnyFadingIn(__pyx_v_hl_name);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1269; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_result = __pyx_t_5;

  /* "_PyXAL.pyx":1270
 *         cdef hstr hl_name = Py_to_Hstr(name)
 *         cdef bint result = XAL.mgr.isAnyFadingIn(hl_name)
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     def isAnyFadingOut(self, name):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_result); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1270; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "_PyXAL.pyx":1261
 *         return result
 * 
 *     def isAnyFadingIn(self, name):             # <<<<<<<<<<<<<<
 *         '''
 *         @param name: sting name of sound to check
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.XALManager.isAnyFadingIn", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":1272
 *         return result
 * 
 *     def isAnyFadingOut(self, name):             # <<<<<<<<<<<<<<
 *         '''
 *         @param name: sting name of sound to check
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_PyXAL_10XALManager_33isAnyFadingOut(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6_PyXAL_10XALManager_32isAnyFadingOut[] = "\n        @param name: sting name of sound to check\n        @return: bool True if there is a sound by this name fading out\n        ";
static PyMethodDef __pyx_mdef_6_PyXAL_10XALManager_33isAnyFadingOut = {__Pyx_NAMESTR("isAnyFadingOut"), (PyCFunction)__pyx_pw_6_PyXAL_10XALManager_33isAnyFadingOut, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_10XALManager_32isAnyFadingOut)};
static PyObject *__pyx_pw_6_PyXAL_10XALManager_33isAnyFadingOut(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_name = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("isAnyFadingOut (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_name,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_name)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("isAnyFadingOut", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1272; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "isAnyFadingOut") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1272; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_self = values[0];
    __pyx_v_name = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("isAnyFadingOut", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1272; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("_PyXAL.XALManager.isAnyFadingOut", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6_PyXAL_10XALManager_32isAnyFadingOut(__pyx_self, __pyx_v_self, __pyx_v_name);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_PyXAL_10XALManager_32isAnyFadingOut(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_name) {
  hstr __pyx_v_hl_name;
  int __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  bool __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("isAnyFadingOut", 0);

  /* "_PyXAL.pyx":1277
 *         @return: bool True if there is a sound by this name fading out
 *         '''
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         cdef hstr hl_name = Py_to_Hstr(name)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1277; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1277; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1277; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = ((!__pyx_t_3) != 0);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":1278
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         cdef hstr hl_name = Py_to_Hstr(name)
 *         cdef bint result = XAL.mgr.isAnyFadingOut(hl_name)
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__147, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1278; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1278; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "_PyXAL.pyx":1279
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         cdef hstr hl_name = Py_to_Hstr(name)             # <<<<<<<<<<<<<<
 *         cdef bint result = XAL.mgr.isAnyFadingOut(hl_name)
 *         return result
 */
  __pyx_v_hl_name = __pyx_f_6_PyXAL_Py_to_Hstr(__pyx_v_name);

  /* "_PyXAL.pyx":1280
 *             raise RuntimeError("XAL is not Initialized")
 *         cdef hstr hl_name = Py_to_Hstr(name)
 *         cdef bint result = XAL.mgr.isAnyFadingOut(hl_name)             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  try {
    __pyx_t_5 = xal::mgr->isAnyFadingOut(__pyx_v_hl_name);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1280; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_result = __pyx_t_5;

  /* "_PyXAL.pyx":1281
 *         cdef hstr hl_name = Py_to_Hstr(name)
 *         cdef bint result = XAL.mgr.isAnyFadingOut(hl_name)
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     def suspendAudio(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_result); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1281; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "_PyXAL.pyx":1272
 *         return result
 * 
 *     def isAnyFadingOut(self, name):             # <<<<<<<<<<<<<<
 *         '''
 *         @param name: sting name of sound to check
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.XALManager.isAnyFadingOut", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":1283
 *         return result
 * 
 *     def suspendAudio(self):             # <<<<<<<<<<<<<<
 *         '''
 *         pause all sounds and players
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_PyXAL_10XALManager_35suspendAudio(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_6_PyXAL_10XALManager_34suspendAudio[] = "\n        pause all sounds and players\n        \n        @param fadeTime: float the time is second for the sound to fade out (0.0 by default)\n        ";
static PyMethodDef __pyx_mdef_6_PyXAL_10XALManager_35suspendAudio = {__Pyx_NAMESTR("suspendAudio"), (PyCFunction)__pyx_pw_6_PyXAL_10XALManager_35suspendAudio, METH_O, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_10XALManager_34suspendAudio)};
static PyObject *__pyx_pw_6_PyXAL_10XALManager_35suspendAudio(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("suspendAudio (wrapper)", 0);
  __pyx_r = __pyx_pf_6_PyXAL_10XALManager_34suspendAudio(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_PyXAL_10XALManager_34suspendAudio(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("suspendAudio", 0);

  /* "_PyXAL.pyx":1289
 *         @param fadeTime: float the time is second for the sound to fade out (0.0 by default)
 *         '''
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         XAL.mgr.suspendAudio()
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1289; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1289; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1289; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = ((!__pyx_t_3) != 0);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":1290
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         XAL.mgr.suspendAudio()
 * 
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__148, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1290; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1290; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "_PyXAL.pyx":1291
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         XAL.mgr.suspendAudio()             # <<<<<<<<<<<<<<
 * 
 *     def resumeAudio(self):
 */
  try {
    xal::mgr->suspendAudio();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1291; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "_PyXAL.pyx":1283
 *         return result
 * 
 *     def suspendAudio(self):             # <<<<<<<<<<<<<<
 *         '''
 *         pause all sounds and players
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.XALManager.suspendAudio", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":1293
 *         XAL.mgr.suspendAudio()
 * 
 *     def resumeAudio(self):             # <<<<<<<<<<<<<<
 *         '''
 *         resume all sounds and players
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_PyXAL_10XALManager_37resumeAudio(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_6_PyXAL_10XALManager_36resumeAudio[] = "\n        resume all sounds and players\n        \n        @param fadeTime: float the time is second for the sound to fade in (0.0 by default)\n        ";
static PyMethodDef __pyx_mdef_6_PyXAL_10XALManager_37resumeAudio = {__Pyx_NAMESTR("resumeAudio"), (PyCFunction)__pyx_pw_6_PyXAL_10XALManager_37resumeAudio, METH_O, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_10XALManager_36resumeAudio)};
static PyObject *__pyx_pw_6_PyXAL_10XALManager_37resumeAudio(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("resumeAudio (wrapper)", 0);
  __pyx_r = __pyx_pf_6_PyXAL_10XALManager_36resumeAudio(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_PyXAL_10XALManager_36resumeAudio(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("resumeAudio", 0);

  /* "_PyXAL.pyx":1299
 *         @param fadeTime: float the time is second for the sound to fade in (0.0 by default)
 *         '''
 *         if not self.isXALInitialized():             # <<<<<<<<<<<<<<
 *             raise RuntimeError("XAL is not Initialized")
 *         XAL.mgr.resumeAudio()
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_isXALInitialized); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1299; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1299; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1299; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = ((!__pyx_t_3) != 0);
  if (__pyx_t_4) {

    /* "_PyXAL.pyx":1300
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         XAL.mgr.resumeAudio()
 * 
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__149, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1300; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1300; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "_PyXAL.pyx":1301
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")
 *         XAL.mgr.resumeAudio()             # <<<<<<<<<<<<<<
 * 
 * def Init(int backendId, bint threaded = True):
 */
  try {
    xal::mgr->resumeAudio();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1301; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "_PyXAL.pyx":1293
 *         XAL.mgr.suspendAudio()
 * 
 *     def resumeAudio(self):             # <<<<<<<<<<<<<<
 *         '''
 *         resume all sounds and players
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_PyXAL.XALManager.resumeAudio", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":1303
 *         XAL.mgr.resumeAudio()
 * 
 * def Init(int backendId, bint threaded = True):             # <<<<<<<<<<<<<<
 *     '''
 *     Setup XAL and create an XALManager interface at PyXAL.Mgr
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_PyXAL_1Init(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6_PyXAL_Init[] = "\n    Setup XAL and create an XALManager interface at PyXAL.Mgr\n    \n    @param backendId: int window handel in the calling aplication\n    @param threaded: bool should XAL use a threaded interface? (True by default)\n    ";
static PyMethodDef __pyx_mdef_6_PyXAL_1Init = {__Pyx_NAMESTR("Init"), (PyCFunction)__pyx_pw_6_PyXAL_1Init, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_Init)};
static PyObject *__pyx_pw_6_PyXAL_1Init(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_backendId;
  int __pyx_v_threaded;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("Init (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_backendId,&__pyx_n_s_threaded,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_backendId)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_threaded);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "Init") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1303; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_backendId = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_backendId == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1303; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    if (values[1]) {
      __pyx_v_threaded = __Pyx_PyObject_IsTrue(values[1]); if (unlikely((__pyx_v_threaded == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1303; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_threaded = ((int)1);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("Init", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1303; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("_PyXAL.Init", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6_PyXAL_Init(__pyx_self, __pyx_v_backendId, __pyx_v_threaded);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_PyXAL_Init(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_backendId, int __pyx_v_threaded) {
  double __pyx_v_fade;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("Init", 0);

  /* "_PyXAL.pyx":1311
 *     '''
 *     global Mgr
 *     if Mgr is None:             # <<<<<<<<<<<<<<
 *         if XAL.mgr is not NULL:
 *             fade = 0.0
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_Mgr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1311; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__pyx_t_1 == Py_None);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "_PyXAL.pyx":1312
 *     global Mgr
 *     if Mgr is None:
 *         if XAL.mgr is not NULL:             # <<<<<<<<<<<<<<
 *             fade = 0.0
 *             XAL.mgr.stopAll(fade)
 */
    __pyx_t_3 = ((xal::mgr != NULL) != 0);
    if (__pyx_t_3) {

      /* "_PyXAL.pyx":1313
 *     if Mgr is None:
 *         if XAL.mgr is not NULL:
 *             fade = 0.0             # <<<<<<<<<<<<<<
 *             XAL.mgr.stopAll(fade)
 *             XAL.destroy()
 */
      __pyx_v_fade = 0.0;

      /* "_PyXAL.pyx":1314
 *         if XAL.mgr is not NULL:
 *             fade = 0.0
 *             XAL.mgr.stopAll(fade)             # <<<<<<<<<<<<<<
 *             XAL.destroy()
 *         Mgr = XALManager(backendId, threaded)
 */
      try {
        xal::mgr->stopAll(__pyx_v_fade);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1314; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }

      /* "_PyXAL.pyx":1315
 *             fade = 0.0
 *             XAL.mgr.stopAll(fade)
 *             XAL.destroy()             # <<<<<<<<<<<<<<
 *         Mgr = XALManager(backendId, threaded)
 * 
 */
      try {
        xal::destroy();
      } catch(...) {
        __Pyx_CppExn2PyErr();
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1315; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      goto __pyx_L4;
    }
    __pyx_L4:;

    /* "_PyXAL.pyx":1316
 *             XAL.mgr.stopAll(fade)
 *             XAL.destroy()
 *         Mgr = XALManager(backendId, threaded)             # <<<<<<<<<<<<<<
 * 
 * def Destroy():
 */
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_XALManager); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1316; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_backendId); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1316; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyBool_FromLong(__pyx_v_threaded); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1316; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1316; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    __pyx_t_4 = 0;
    __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_6, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1316; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (PyDict_SetItem(__pyx_d, __pyx_n_s_Mgr, __pyx_t_5) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1316; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "_PyXAL.pyx":1303
 *         XAL.mgr.resumeAudio()
 * 
 * def Init(int backendId, bint threaded = True):             # <<<<<<<<<<<<<<
 *     '''
 *     Setup XAL and create an XALManager interface at PyXAL.Mgr
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("_PyXAL.Init", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_PyXAL.pyx":1318
 *         Mgr = XALManager(backendId, threaded)
 * 
 * def Destroy():             # <<<<<<<<<<<<<<
 *     '''
 *     Destroy XAL and remove the interface at PyXAL setting it to None
 */

/* Python wrapper */
static PyObject *__pyx_pw_6_PyXAL_3Destroy(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6_PyXAL_2Destroy[] = "\n    Destroy XAL and remove the interface at PyXAL setting it to None\n    ";
static PyMethodDef __pyx_mdef_6_PyXAL_3Destroy = {__Pyx_NAMESTR("Destroy"), (PyCFunction)__pyx_pw_6_PyXAL_3Destroy, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_2Destroy)};
static PyObject *__pyx_pw_6_PyXAL_3Destroy(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("Destroy (wrapper)", 0);
  __pyx_r = __pyx_pf_6_PyXAL_2Destroy(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6_PyXAL_2Destroy(CYTHON_UNUSED PyObject *__pyx_self) {
  double __pyx_v_fade;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("Destroy", 0);

  /* "_PyXAL.pyx":1323
 *     '''
 *     global Mgr
 *     if XAL.mgr is not NULL:             # <<<<<<<<<<<<<<
 *         fade = 0.0
 *         XAL.mgr.stopAll(fade)
 */
  __pyx_t_1 = ((xal::mgr != NULL) != 0);
  if (__pyx_t_1) {

    /* "_PyXAL.pyx":1324
 *     global Mgr
 *     if XAL.mgr is not NULL:
 *         fade = 0.0             # <<<<<<<<<<<<<<
 *         XAL.mgr.stopAll(fade)
 *         XAL.destroy()
 */
    __pyx_v_fade = 0.0;

    /* "_PyXAL.pyx":1325
 *     if XAL.mgr is not NULL:
 *         fade = 0.0
 *         XAL.mgr.stopAll(fade)             # <<<<<<<<<<<<<<
 *         XAL.destroy()
 *     Mgr = None
 */
    try {
      xal::mgr->stopAll(__pyx_v_fade);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1325; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }

    /* "_PyXAL.pyx":1326
 *         fade = 0.0
 *         XAL.mgr.stopAll(fade)
 *         XAL.destroy()             # <<<<<<<<<<<<<<
 *     Mgr = None
 */
    try {
      xal::destroy();
    } catch(...) {
      __Pyx_CppExn2PyErr();
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1326; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "_PyXAL.pyx":1327
 *         XAL.mgr.stopAll(fade)
 *         XAL.destroy()
 *     Mgr = None             # <<<<<<<<<<<<<<
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Mgr, Py_None) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1327; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_PyXAL.pyx":1318
 *         Mgr = XALManager(backendId, threaded)
 * 
 * def Destroy():             # <<<<<<<<<<<<<<
 *     '''
 *     Destroy XAL and remove the interface at PyXAL setting it to None
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_PyXAL.Destroy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_tp_new_6_PyXAL_PyAudioManager(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  return o;
}

static void __pyx_tp_dealloc_6_PyXAL_PyAudioManager(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_6_PyXAL_PyAudioManager[] = {
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_6_PyXAL_PyAudioManager = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("_PyXAL.PyAudioManager"), /*tp_name*/
  sizeof(struct __pyx_obj_6_PyXAL_PyAudioManager), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6_PyXAL_PyAudioManager, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  __Pyx_DOCSTR("\n    A wrapper for the C++ xal::AudioManager class. it is currently not used\n    "), /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6_PyXAL_PyAudioManager, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_6_PyXAL_14PyAudioManager_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6_PyXAL_PyAudioManager, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_6_PyXAL_SoundWrapper(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  return o;
}

static void __pyx_tp_dealloc_6_PyXAL_SoundWrapper(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_6_PyXAL_12SoundWrapper_5__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_6_PyXAL_SoundWrapper[] = {
  {__Pyx_NAMESTR("_destroy"), (PyCFunction)__pyx_pw_6_PyXAL_12SoundWrapper_3_destroy, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("isXALInitialized"), (PyCFunction)__pyx_pw_6_PyXAL_12SoundWrapper_7isXALInitialized, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_12SoundWrapper_6isXALInitialized)},
  {__Pyx_NAMESTR("getName"), (PyCFunction)__pyx_pw_6_PyXAL_12SoundWrapper_9getName, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_12SoundWrapper_8getName)},
  {__Pyx_NAMESTR("getFilename"), (PyCFunction)__pyx_pw_6_PyXAL_12SoundWrapper_11getFilename, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_12SoundWrapper_10getFilename)},
  {__Pyx_NAMESTR("getRealFilename"), (PyCFunction)__pyx_pw_6_PyXAL_12SoundWrapper_13getRealFilename, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_12SoundWrapper_12getRealFilename)},
  {__Pyx_NAMESTR("getSize"), (PyCFunction)__pyx_pw_6_PyXAL_12SoundWrapper_15getSize, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_12SoundWrapper_14getSize)},
  {__Pyx_NAMESTR("getChannels"), (PyCFunction)__pyx_pw_6_PyXAL_12SoundWrapper_17getChannels, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_12SoundWrapper_16getChannels)},
  {__Pyx_NAMESTR("getSamplingRate"), (PyCFunction)__pyx_pw_6_PyXAL_12SoundWrapper_19getSamplingRate, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_12SoundWrapper_18getSamplingRate)},
  {__Pyx_NAMESTR("getBitsPerSample"), (PyCFunction)__pyx_pw_6_PyXAL_12SoundWrapper_21getBitsPerSample, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_12SoundWrapper_20getBitsPerSample)},
  {__Pyx_NAMESTR("getDuration"), (PyCFunction)__pyx_pw_6_PyXAL_12SoundWrapper_23getDuration, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_12SoundWrapper_22getDuration)},
  {__Pyx_NAMESTR("getFormat"), (PyCFunction)__pyx_pw_6_PyXAL_12SoundWrapper_25getFormat, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_12SoundWrapper_24getFormat)},
  {__Pyx_NAMESTR("isStreamed"), (PyCFunction)__pyx_pw_6_PyXAL_12SoundWrapper_27isStreamed, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_12SoundWrapper_26isStreamed)},
  {__Pyx_NAMESTR("readPcmData"), (PyCFunction)__pyx_pw_6_PyXAL_12SoundWrapper_29readPcmData, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_12SoundWrapper_28readPcmData)},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_6_PyXAL_SoundWrapper = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("_PyXAL.SoundWrapper"), /*tp_name*/
  sizeof(struct __pyx_obj_6_PyXAL_SoundWrapper), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6_PyXAL_SoundWrapper, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  __Pyx_DOCSTR("\n    A wrapper class for the C++ xal::Sound class. it is returned by the XALManager.createSound and PyPlayer.getSound methods\n    "), /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6_PyXAL_SoundWrapper, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_6_PyXAL_12SoundWrapper_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6_PyXAL_SoundWrapper, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_6_PyXAL_PlayerWrapper(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  return o;
}

static void __pyx_tp_dealloc_6_PyXAL_PlayerWrapper(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_6_PyXAL_13PlayerWrapper_5__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_6_PyXAL_PlayerWrapper[] = {
  {__Pyx_NAMESTR("_destroy"), (PyCFunction)__pyx_pw_6_PyXAL_13PlayerWrapper_3_destroy, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("isXALInitialized"), (PyCFunction)__pyx_pw_6_PyXAL_13PlayerWrapper_7isXALInitialized, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_13PlayerWrapper_6isXALInitialized)},
  {__Pyx_NAMESTR("getGain"), (PyCFunction)__pyx_pw_6_PyXAL_13PlayerWrapper_9getGain, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_13PlayerWrapper_8getGain)},
  {__Pyx_NAMESTR("setGain"), (PyCFunction)__pyx_pw_6_PyXAL_13PlayerWrapper_11setGain, METH_O, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_13PlayerWrapper_10setGain)},
  {__Pyx_NAMESTR("getPitch"), (PyCFunction)__pyx_pw_6_PyXAL_13PlayerWrapper_13getPitch, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_13PlayerWrapper_12getPitch)},
  {__Pyx_NAMESTR("setPitch"), (PyCFunction)__pyx_pw_6_PyXAL_13PlayerWrapper_15setPitch, METH_O, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_13PlayerWrapper_14setPitch)},
  {__Pyx_NAMESTR("getName"), (PyCFunction)__pyx_pw_6_PyXAL_13PlayerWrapper_17getName, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_13PlayerWrapper_16getName)},
  {__Pyx_NAMESTR("getFilename"), (PyCFunction)__pyx_pw_6_PyXAL_13PlayerWrapper_19getFilename, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_13PlayerWrapper_18getFilename)},
  {__Pyx_NAMESTR("getRealFilename"), (PyCFunction)__pyx_pw_6_PyXAL_13PlayerWrapper_21getRealFilename, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_13PlayerWrapper_20getRealFilename)},
  {__Pyx_NAMESTR("getDuration"), (PyCFunction)__pyx_pw_6_PyXAL_13PlayerWrapper_23getDuration, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_13PlayerWrapper_22getDuration)},
  {__Pyx_NAMESTR("getSize"), (PyCFunction)__pyx_pw_6_PyXAL_13PlayerWrapper_25getSize, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_13PlayerWrapper_24getSize)},
  {__Pyx_NAMESTR("getTimePosition"), (PyCFunction)__pyx_pw_6_PyXAL_13PlayerWrapper_27getTimePosition, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_13PlayerWrapper_26getTimePosition)},
  {__Pyx_NAMESTR("getSamplePosition"), (PyCFunction)__pyx_pw_6_PyXAL_13PlayerWrapper_29getSamplePosition, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_13PlayerWrapper_28getSamplePosition)},
  {__Pyx_NAMESTR("isPlaying"), (PyCFunction)__pyx_pw_6_PyXAL_13PlayerWrapper_31isPlaying, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_13PlayerWrapper_30isPlaying)},
  {__Pyx_NAMESTR("isPaused"), (PyCFunction)__pyx_pw_6_PyXAL_13PlayerWrapper_33isPaused, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_13PlayerWrapper_32isPaused)},
  {__Pyx_NAMESTR("isFading"), (PyCFunction)__pyx_pw_6_PyXAL_13PlayerWrapper_35isFading, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_13PlayerWrapper_34isFading)},
  {__Pyx_NAMESTR("isFadingIn"), (PyCFunction)__pyx_pw_6_PyXAL_13PlayerWrapper_37isFadingIn, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_13PlayerWrapper_36isFadingIn)},
  {__Pyx_NAMESTR("isFadingOut"), (PyCFunction)__pyx_pw_6_PyXAL_13PlayerWrapper_39isFadingOut, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_13PlayerWrapper_38isFadingOut)},
  {__Pyx_NAMESTR("isLooping"), (PyCFunction)__pyx_pw_6_PyXAL_13PlayerWrapper_41isLooping, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_13PlayerWrapper_40isLooping)},
  {__Pyx_NAMESTR("play"), (PyCFunction)__pyx_pw_6_PyXAL_13PlayerWrapper_43play, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_13PlayerWrapper_42play)},
  {__Pyx_NAMESTR("stop"), (PyCFunction)__pyx_pw_6_PyXAL_13PlayerWrapper_45stop, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_13PlayerWrapper_44stop)},
  {__Pyx_NAMESTR("pause"), (PyCFunction)__pyx_pw_6_PyXAL_13PlayerWrapper_47pause, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_13PlayerWrapper_46pause)},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_6_PyXAL_PlayerWrapper = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("_PyXAL.PlayerWrapper"), /*tp_name*/
  sizeof(struct __pyx_obj_6_PyXAL_PlayerWrapper), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6_PyXAL_PlayerWrapper, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  __Pyx_DOCSTR("\n    a wraper for the C++ class xal::Player. it is retuned by the XALManager.createPlayer method\n    "), /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6_PyXAL_PlayerWrapper, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_6_PyXAL_13PlayerWrapper_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6_PyXAL_PlayerWrapper, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_6_PyXAL_XALManagerWrapper(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  return o;
}

static void __pyx_tp_dealloc_6_PyXAL_XALManagerWrapper(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_6_PyXAL_17XALManagerWrapper_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_6_PyXAL_XALManagerWrapper[] = {
  {__Pyx_NAMESTR("isXALInitialized"), (PyCFunction)__pyx_pw_6_PyXAL_17XALManagerWrapper_5isXALInitialized, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_17XALManagerWrapper_4isXALInitialized)},
  {__Pyx_NAMESTR("SetupXAL"), (PyCFunction)__pyx_pw_6_PyXAL_17XALManagerWrapper_7SetupXAL, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_6_PyXAL_17XALManagerWrapper_6SetupXAL)},
  {__Pyx_NAMESTR("_destroyXAL"), (PyCFunction)__pyx_pw_6_PyXAL_17XALManagerWrapper_9_destroyXAL, METH_NOARGS, __Pyx_DOCSTR(0)},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_6_PyXAL_XALManagerWrapper = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("_PyXAL.XALManagerWrapper"), /*tp_name*/
  sizeof(struct __pyx_obj_6_PyXAL_XALManagerWrapper), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6_PyXAL_XALManagerWrapper, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  __Pyx_DOCSTR("\n    a wrapper for the xal::mgr object which is a xal::AudioManager. in other words this is the main interface to XAL you SHOLD NOT create an instance of the class yourself.\n    call PyXAL.Init to set up XAL. an instance of this class will be made avalable at PyXAL.Mgr\n    "), /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6_PyXAL_XALManagerWrapper, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_6_PyXAL_17XALManagerWrapper_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6_PyXAL_XALManagerWrapper, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
static struct PyModuleDef __pyx_moduledef = {
  #if PY_VERSION_HEX < 0x03020000
    { PyObject_HEAD_INIT(NULL) NULL, 0, NULL },
  #else
    PyModuleDef_HEAD_INIT,
  #endif
    __Pyx_NAMESTR("_PyXAL"),
    0, /* m_doc */
    -1, /* m_size */
    __pyx_methods /* m_methods */,
    NULL, /* m_reload */
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_n_s_CATEGORY_STR, __pyx_k_CATEGORY_STR, sizeof(__pyx_k_CATEGORY_STR), 0, 0, 1, 1},
  {&__pyx_n_s_Destroy, __pyx_k_Destroy, sizeof(__pyx_k_Destroy), 0, 0, 1, 1},
  {&__pyx_kp_s_E_Projects_ARC_editor_Welder_src, __pyx_k_E_Projects_ARC_editor_Welder_src, sizeof(__pyx_k_E_Projects_ARC_editor_Welder_src), 0, 0, 1, 0},
  {&__pyx_kp_s_Expected_argument_1_to_be_of_typ, __pyx_k_Expected_argument_1_to_be_of_typ, sizeof(__pyx_k_Expected_argument_1_to_be_of_typ), 0, 0, 1, 0},
  {&__pyx_kp_s_Expected_argument_1_to_be_of_typ_2, __pyx_k_Expected_argument_1_to_be_of_typ_2, sizeof(__pyx_k_Expected_argument_1_to_be_of_typ_2), 0, 0, 1, 0},
  {&__pyx_n_s_Init, __pyx_k_Init, sizeof(__pyx_k_Init), 0, 0, 1, 1},
  {&__pyx_n_s_Mgr, __pyx_k_Mgr, sizeof(__pyx_k_Mgr), 0, 0, 1, 1},
  {&__pyx_kp_s_Only_one_XALManager_interface_al, __pyx_k_Only_one_XALManager_interface_al, sizeof(__pyx_k_Only_one_XALManager_interface_al), 0, 0, 1, 0},
  {&__pyx_kp_s_PyAudioManager_Can_not_be_initia, __pyx_k_PyAudioManager_Can_not_be_initia, sizeof(__pyx_k_PyAudioManager_Can_not_be_initia), 0, 0, 1, 0},
  {&__pyx_n_s_PyPlayer, __pyx_k_PyPlayer, sizeof(__pyx_k_PyPlayer), 0, 0, 1, 1},
  {&__pyx_kp_s_PyPlayer_Can_not_be_initialized, __pyx_k_PyPlayer_Can_not_be_initialized, sizeof(__pyx_k_PyPlayer_Can_not_be_initialized), 0, 0, 1, 0},
  {&__pyx_n_s_PyPlayer___del, __pyx_k_PyPlayer___del, sizeof(__pyx_k_PyPlayer___del), 0, 0, 1, 1},
  {&__pyx_n_s_PyPlayer___init, __pyx_k_PyPlayer___init, sizeof(__pyx_k_PyPlayer___init), 0, 0, 1, 1},
  {&__pyx_n_s_PyPlayer__destroy, __pyx_k_PyPlayer__destroy, sizeof(__pyx_k_PyPlayer__destroy), 0, 0, 1, 1},
  {&__pyx_n_s_PyPlayer_getDuration, __pyx_k_PyPlayer_getDuration, sizeof(__pyx_k_PyPlayer_getDuration), 0, 0, 1, 1},
  {&__pyx_n_s_PyPlayer_getFilename, __pyx_k_PyPlayer_getFilename, sizeof(__pyx_k_PyPlayer_getFilename), 0, 0, 1, 1},
  {&__pyx_n_s_PyPlayer_getGain, __pyx_k_PyPlayer_getGain, sizeof(__pyx_k_PyPlayer_getGain), 0, 0, 1, 1},
  {&__pyx_n_s_PyPlayer_getName, __pyx_k_PyPlayer_getName, sizeof(__pyx_k_PyPlayer_getName), 0, 0, 1, 1},
  {&__pyx_n_s_PyPlayer_getPitch, __pyx_k_PyPlayer_getPitch, sizeof(__pyx_k_PyPlayer_getPitch), 0, 0, 1, 1},
  {&__pyx_n_s_PyPlayer_getRealFilename, __pyx_k_PyPlayer_getRealFilename, sizeof(__pyx_k_PyPlayer_getRealFilename), 0, 0, 1, 1},
  {&__pyx_n_s_PyPlayer_getSamplePosition, __pyx_k_PyPlayer_getSamplePosition, sizeof(__pyx_k_PyPlayer_getSamplePosition), 0, 0, 1, 1},
  {&__pyx_n_s_PyPlayer_getSize, __pyx_k_PyPlayer_getSize, sizeof(__pyx_k_PyPlayer_getSize), 0, 0, 1, 1},
  {&__pyx_n_s_PyPlayer_getSound, __pyx_k_PyPlayer_getSound, sizeof(__pyx_k_PyPlayer_getSound), 0, 0, 1, 1},
  {&__pyx_n_s_PyPlayer_getTimePosition, __pyx_k_PyPlayer_getTimePosition, sizeof(__pyx_k_PyPlayer_getTimePosition), 0, 0, 1, 1},
  {&__pyx_n_s_PyPlayer_isFading, __pyx_k_PyPlayer_isFading, sizeof(__pyx_k_PyPlayer_isFading), 0, 0, 1, 1},
  {&__pyx_n_s_PyPlayer_isFadingIn, __pyx_k_PyPlayer_isFadingIn, sizeof(__pyx_k_PyPlayer_isFadingIn), 0, 0, 1, 1},
  {&__pyx_n_s_PyPlayer_isFadingOut, __pyx_k_PyPlayer_isFadingOut, sizeof(__pyx_k_PyPlayer_isFadingOut), 0, 0, 1, 1},
  {&__pyx_n_s_PyPlayer_isLooping, __pyx_k_PyPlayer_isLooping, sizeof(__pyx_k_PyPlayer_isLooping), 0, 0, 1, 1},
  {&__pyx_n_s_PyPlayer_isPaused, __pyx_k_PyPlayer_isPaused, sizeof(__pyx_k_PyPlayer_isPaused), 0, 0, 1, 1},
  {&__pyx_n_s_PyPlayer_isPlaying, __pyx_k_PyPlayer_isPlaying, sizeof(__pyx_k_PyPlayer_isPlaying), 0, 0, 1, 1},
  {&__pyx_n_s_PyPlayer_isXALInitialized, __pyx_k_PyPlayer_isXALInitialized, sizeof(__pyx_k_PyPlayer_isXALInitialized), 0, 0, 1, 1},
  {&__pyx_n_s_PyPlayer_pause, __pyx_k_PyPlayer_pause, sizeof(__pyx_k_PyPlayer_pause), 0, 0, 1, 1},
  {&__pyx_n_s_PyPlayer_play, __pyx_k_PyPlayer_play, sizeof(__pyx_k_PyPlayer_play), 0, 0, 1, 1},
  {&__pyx_n_s_PyPlayer_setGain, __pyx_k_PyPlayer_setGain, sizeof(__pyx_k_PyPlayer_setGain), 0, 0, 1, 1},
  {&__pyx_n_s_PyPlayer_setPitch, __pyx_k_PyPlayer_setPitch, sizeof(__pyx_k_PyPlayer_setPitch), 0, 0, 1, 1},
  {&__pyx_n_s_PyPlayer_stop, __pyx_k_PyPlayer_stop, sizeof(__pyx_k_PyPlayer_stop), 0, 0, 1, 1},
  {&__pyx_n_s_PySound, __pyx_k_PySound, sizeof(__pyx_k_PySound), 0, 0, 1, 1},
  {&__pyx_kp_s_PySound_Can_not_be_initialized_f, __pyx_k_PySound_Can_not_be_initialized_f, sizeof(__pyx_k_PySound_Can_not_be_initialized_f), 0, 0, 1, 0},
  {&__pyx_n_s_PySound___del, __pyx_k_PySound___del, sizeof(__pyx_k_PySound___del), 0, 0, 1, 1},
  {&__pyx_n_s_PySound___init, __pyx_k_PySound___init, sizeof(__pyx_k_PySound___init), 0, 0, 1, 1},
  {&__pyx_n_s_PySound__destroy, __pyx_k_PySound__destroy, sizeof(__pyx_k_PySound__destroy), 0, 0, 1, 1},
  {&__pyx_n_s_PySound_getBitsPerSample, __pyx_k_PySound_getBitsPerSample, sizeof(__pyx_k_PySound_getBitsPerSample), 0, 0, 1, 1},
  {&__pyx_n_s_PySound_getChannels, __pyx_k_PySound_getChannels, sizeof(__pyx_k_PySound_getChannels), 0, 0, 1, 1},
  {&__pyx_n_s_PySound_getDuration, __pyx_k_PySound_getDuration, sizeof(__pyx_k_PySound_getDuration), 0, 0, 1, 1},
  {&__pyx_n_s_PySound_getFilename, __pyx_k_PySound_getFilename, sizeof(__pyx_k_PySound_getFilename), 0, 0, 1, 1},
  {&__pyx_n_s_PySound_getFormat, __pyx_k_PySound_getFormat, sizeof(__pyx_k_PySound_getFormat), 0, 0, 1, 1},
  {&__pyx_n_s_PySound_getName, __pyx_k_PySound_getName, sizeof(__pyx_k_PySound_getName), 0, 0, 1, 1},
  {&__pyx_n_s_PySound_getRealFilename, __pyx_k_PySound_getRealFilename, sizeof(__pyx_k_PySound_getRealFilename), 0, 0, 1, 1},
  {&__pyx_n_s_PySound_getSamplingRate, __pyx_k_PySound_getSamplingRate, sizeof(__pyx_k_PySound_getSamplingRate), 0, 0, 1, 1},
  {&__pyx_n_s_PySound_getSize, __pyx_k_PySound_getSize, sizeof(__pyx_k_PySound_getSize), 0, 0, 1, 1},
  {&__pyx_n_s_PySound_isStreamed, __pyx_k_PySound_isStreamed, sizeof(__pyx_k_PySound_isStreamed), 0, 0, 1, 1},
  {&__pyx_n_s_PySound_isXALInitialized, __pyx_k_PySound_isXALInitialized, sizeof(__pyx_k_PySound_isXALInitialized), 0, 0, 1, 1},
  {&__pyx_n_s_PySound_readPcmData, __pyx_k_PySound_readPcmData, sizeof(__pyx_k_PySound_readPcmData), 0, 0, 1, 1},
  {&__pyx_n_s_PyXAL, __pyx_k_PyXAL, sizeof(__pyx_k_PyXAL), 0, 0, 1, 1},
  {&__pyx_n_s_RuntimeError, __pyx_k_RuntimeError, sizeof(__pyx_k_RuntimeError), 0, 0, 1, 1},
  {&__pyx_n_s_SetupXAL, __pyx_k_SetupXAL, sizeof(__pyx_k_SetupXAL), 0, 0, 1, 1},
  {&__pyx_n_s_TypeError, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
  {&__pyx_kp_s_UTF_8, __pyx_k_UTF_8, sizeof(__pyx_k_UTF_8), 0, 0, 1, 0},
  {&__pyx_n_s_XALManager, __pyx_k_XALManager, sizeof(__pyx_k_XALManager), 0, 0, 1, 1},
  {&__pyx_n_s_XALManager___del, __pyx_k_XALManager___del, sizeof(__pyx_k_XALManager___del), 0, 0, 1, 1},
  {&__pyx_n_s_XALManager___init, __pyx_k_XALManager___init, sizeof(__pyx_k_XALManager___init), 0, 0, 1, 1},
  {&__pyx_n_s_XALManager_clear, __pyx_k_XALManager_clear, sizeof(__pyx_k_XALManager_clear), 0, 0, 1, 1},
  {&__pyx_n_s_XALManager_createPlayer, __pyx_k_XALManager_createPlayer, sizeof(__pyx_k_XALManager_createPlayer), 0, 0, 1, 1},
  {&__pyx_n_s_XALManager_createSound, __pyx_k_XALManager_createSound, sizeof(__pyx_k_XALManager_createSound), 0, 0, 1, 1},
  {&__pyx_n_s_XALManager_destroyPlayer, __pyx_k_XALManager_destroyPlayer, sizeof(__pyx_k_XALManager_destroyPlayer), 0, 0, 1, 1},
  {&__pyx_n_s_XALManager_destroySound, __pyx_k_XALManager_destroySound, sizeof(__pyx_k_XALManager_destroySound), 0, 0, 1, 1},
  {&__pyx_n_s_XALManager_findPlayer, __pyx_k_XALManager_findPlayer, sizeof(__pyx_k_XALManager_findPlayer), 0, 0, 1, 1},
  {&__pyx_n_s_XALManager_isAnyFading, __pyx_k_XALManager_isAnyFading, sizeof(__pyx_k_XALManager_isAnyFading), 0, 0, 1, 1},
  {&__pyx_n_s_XALManager_isAnyFadingIn, __pyx_k_XALManager_isAnyFadingIn, sizeof(__pyx_k_XALManager_isAnyFadingIn), 0, 0, 1, 1},
  {&__pyx_n_s_XALManager_isAnyFadingOut, __pyx_k_XALManager_isAnyFadingOut, sizeof(__pyx_k_XALManager_isAnyFadingOut), 0, 0, 1, 1},
  {&__pyx_n_s_XALManager_isAnyPlaying, __pyx_k_XALManager_isAnyPlaying, sizeof(__pyx_k_XALManager_isAnyPlaying), 0, 0, 1, 1},
  {&__pyx_n_s_XALManager_isXALInitialized, __pyx_k_XALManager_isXALInitialized, sizeof(__pyx_k_XALManager_isXALInitialized), 0, 0, 1, 1},
  {&__pyx_n_s_XALManager_play, __pyx_k_XALManager_play, sizeof(__pyx_k_XALManager_play), 0, 0, 1, 1},
  {&__pyx_n_s_XALManager_resumeAudio, __pyx_k_XALManager_resumeAudio, sizeof(__pyx_k_XALManager_resumeAudio), 0, 0, 1, 1},
  {&__pyx_n_s_XALManager_stop, __pyx_k_XALManager_stop, sizeof(__pyx_k_XALManager_stop), 0, 0, 1, 1},
  {&__pyx_n_s_XALManager_stopAll, __pyx_k_XALManager_stopAll, sizeof(__pyx_k_XALManager_stopAll), 0, 0, 1, 1},
  {&__pyx_n_s_XALManager_stopFirst, __pyx_k_XALManager_stopFirst, sizeof(__pyx_k_XALManager_stopFirst), 0, 0, 1, 1},
  {&__pyx_n_s_XALManager_suspendAudio, __pyx_k_XALManager_suspendAudio, sizeof(__pyx_k_XALManager_suspendAudio), 0, 0, 1, 1},
  {&__pyx_kp_s_XAL_Failed_to_create_a_player_fo, __pyx_k_XAL_Failed_to_create_a_player_fo, sizeof(__pyx_k_XAL_Failed_to_create_a_player_fo), 0, 0, 1, 0},
  {&__pyx_kp_s_XAL_Failed_to_load_file_s, __pyx_k_XAL_Failed_to_load_file_s, sizeof(__pyx_k_XAL_Failed_to_load_file_s), 0, 0, 1, 0},
  {&__pyx_kp_s_XAL_is_not_Initialized, __pyx_k_XAL_is_not_Initialized, sizeof(__pyx_k_XAL_is_not_Initialized), 0, 0, 1, 0},
  {&__pyx_kp_s__26, __pyx_k__26, sizeof(__pyx_k__26), 0, 0, 1, 0},
  {&__pyx_kp_s_a_interface_for_the_C_wrapper, __pyx_k_a_interface_for_the_C_wrapper, sizeof(__pyx_k_a_interface_for_the_C_wrapper), 0, 0, 1, 0},
  {&__pyx_kp_s_a_interface_for_the_wrapper_of, __pyx_k_a_interface_for_the_wrapper_of, sizeof(__pyx_k_a_interface_for_the_wrapper_of), 0, 0, 1, 0},
  {&__pyx_kp_s_a_wrapper_for_the_xal_mgr_objec, __pyx_k_a_wrapper_for_the_xal_mgr_objec, sizeof(__pyx_k_a_wrapper_for_the_xal_mgr_objec), 0, 0, 1, 0},
  {&__pyx_n_s_append, __pyx_k_append, sizeof(__pyx_k_append), 0, 0, 1, 1},
  {&__pyx_n_s_backendId, __pyx_k_backendId, sizeof(__pyx_k_backendId), 0, 0, 1, 1},
  {&__pyx_n_s_category, __pyx_k_category, sizeof(__pyx_k_category), 0, 0, 1, 1},
  {&__pyx_n_s_clear, __pyx_k_clear, sizeof(__pyx_k_clear), 0, 0, 1, 1},
  {&__pyx_n_s_createPlayer, __pyx_k_createPlayer, sizeof(__pyx_k_createPlayer), 0, 0, 1, 1},
  {&__pyx_n_s_createSound, __pyx_k_createSound, sizeof(__pyx_k_createSound), 0, 0, 1, 1},
  {&__pyx_n_s_default, __pyx_k_default, sizeof(__pyx_k_default), 0, 0, 1, 1},
  {&__pyx_n_s_del, __pyx_k_del, sizeof(__pyx_k_del), 0, 0, 1, 1},
  {&__pyx_n_s_destroy, __pyx_k_destroy, sizeof(__pyx_k_destroy), 0, 0, 1, 1},
  {&__pyx_n_s_destroyPlayer, __pyx_k_destroyPlayer, sizeof(__pyx_k_destroyPlayer), 0, 0, 1, 1},
  {&__pyx_n_s_destroySound, __pyx_k_destroySound, sizeof(__pyx_k_destroySound), 0, 0, 1, 1},
  {&__pyx_n_s_destroyXAL, __pyx_k_destroyXAL, sizeof(__pyx_k_destroyXAL), 0, 0, 1, 1},
  {&__pyx_n_s_destroyed, __pyx_k_destroyed, sizeof(__pyx_k_destroyed), 0, 0, 1, 1},
  {&__pyx_n_s_deviceName, __pyx_k_deviceName, sizeof(__pyx_k_deviceName), 0, 0, 1, 1},
  {&__pyx_n_s_doc, __pyx_k_doc, sizeof(__pyx_k_doc), 0, 0, 1, 1},
  {&__pyx_n_s_encode, __pyx_k_encode, sizeof(__pyx_k_encode), 0, 0, 1, 1},
  {&__pyx_n_s_fade, __pyx_k_fade, sizeof(__pyx_k_fade), 0, 0, 1, 1},
  {&__pyx_n_s_fadeTime, __pyx_k_fadeTime, sizeof(__pyx_k_fadeTime), 0, 0, 1, 1},
  {&__pyx_n_s_file_str, __pyx_k_file_str, sizeof(__pyx_k_file_str), 0, 0, 1, 1},
  {&__pyx_n_s_filename, __pyx_k_filename, sizeof(__pyx_k_filename), 0, 0, 1, 1},
  {&__pyx_n_s_findPlayer, __pyx_k_findPlayer, sizeof(__pyx_k_findPlayer), 0, 0, 1, 1},
  {&__pyx_n_s_gain, __pyx_k_gain, sizeof(__pyx_k_gain), 0, 0, 1, 1},
  {&__pyx_n_s_getBitsPerSample, __pyx_k_getBitsPerSample, sizeof(__pyx_k_getBitsPerSample), 0, 0, 1, 1},
  {&__pyx_n_s_getChannels, __pyx_k_getChannels, sizeof(__pyx_k_getChannels), 0, 0, 1, 1},
  {&__pyx_n_s_getDuration, __pyx_k_getDuration, sizeof(__pyx_k_getDuration), 0, 0, 1, 1},
  {&__pyx_n_s_getFilename, __pyx_k_getFilename, sizeof(__pyx_k_getFilename), 0, 0, 1, 1},
  {&__pyx_n_s_getFormat, __pyx_k_getFormat, sizeof(__pyx_k_getFormat), 0, 0, 1, 1},
  {&__pyx_n_s_getGain, __pyx_k_getGain, sizeof(__pyx_k_getGain), 0, 0, 1, 1},
  {&__pyx_n_s_getName, __pyx_k_getName, sizeof(__pyx_k_getName), 0, 0, 1, 1},
  {&__pyx_n_s_getPitch, __pyx_k_getPitch, sizeof(__pyx_k_getPitch), 0, 0, 1, 1},
  {&__pyx_n_s_getRealFilename, __pyx_k_getRealFilename, sizeof(__pyx_k_getRealFilename), 0, 0, 1, 1},
  {&__pyx_n_s_getSamplePosition, __pyx_k_getSamplePosition, sizeof(__pyx_k_getSamplePosition), 0, 0, 1, 1},
  {&__pyx_n_s_getSamplingRate, __pyx_k_getSamplingRate, sizeof(__pyx_k_getSamplingRate), 0, 0, 1, 1},
  {&__pyx_n_s_getSize, __pyx_k_getSize, sizeof(__pyx_k_getSize), 0, 0, 1, 1},
  {&__pyx_n_s_getSound, __pyx_k_getSound, sizeof(__pyx_k_getSound), 0, 0, 1, 1},
  {&__pyx_n_s_getTimePosition, __pyx_k_getTimePosition, sizeof(__pyx_k_getTimePosition), 0, 0, 1, 1},
  {&__pyx_n_s_hl_name, __pyx_k_hl_name, sizeof(__pyx_k_hl_name), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_init, __pyx_k_init, sizeof(__pyx_k_init), 0, 0, 1, 1},
  {&__pyx_n_s_inited, __pyx_k_inited, sizeof(__pyx_k_inited), 0, 0, 1, 1},
  {&__pyx_n_s_isAnyFading, __pyx_k_isAnyFading, sizeof(__pyx_k_isAnyFading), 0, 0, 1, 1},
  {&__pyx_n_s_isAnyFadingIn, __pyx_k_isAnyFadingIn, sizeof(__pyx_k_isAnyFadingIn), 0, 0, 1, 1},
  {&__pyx_n_s_isAnyFadingOut, __pyx_k_isAnyFadingOut, sizeof(__pyx_k_isAnyFadingOut), 0, 0, 1, 1},
  {&__pyx_n_s_isAnyPlaying, __pyx_k_isAnyPlaying, sizeof(__pyx_k_isAnyPlaying), 0, 0, 1, 1},
  {&__pyx_n_s_isFading, __pyx_k_isFading, sizeof(__pyx_k_isFading), 0, 0, 1, 1},
  {&__pyx_n_s_isFadingIn, __pyx_k_isFadingIn, sizeof(__pyx_k_isFadingIn), 0, 0, 1, 1},
  {&__pyx_n_s_isFadingOut, __pyx_k_isFadingOut, sizeof(__pyx_k_isFadingOut), 0, 0, 1, 1},
  {&__pyx_n_s_isLooping, __pyx_k_isLooping, sizeof(__pyx_k_isLooping), 0, 0, 1, 1},
  {&__pyx_n_s_isPaused, __pyx_k_isPaused, sizeof(__pyx_k_isPaused), 0, 0, 1, 1},
  {&__pyx_n_s_isPlaying, __pyx_k_isPlaying, sizeof(__pyx_k_isPlaying), 0, 0, 1, 1},
  {&__pyx_n_s_isStreamed, __pyx_k_isStreamed, sizeof(__pyx_k_isStreamed), 0, 0, 1, 1},
  {&__pyx_n_s_isXALInitialized, __pyx_k_isXALInitialized, sizeof(__pyx_k_isXALInitialized), 0, 0, 1, 1},
  {&__pyx_n_s_looping, __pyx_k_looping, sizeof(__pyx_k_looping), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_metaclass, __pyx_k_metaclass, sizeof(__pyx_k_metaclass), 0, 0, 1, 1},
  {&__pyx_n_s_module, __pyx_k_module, sizeof(__pyx_k_module), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_s_object, __pyx_k_object, sizeof(__pyx_k_object), 0, 0, 1, 1},
  {&__pyx_n_s_os, __pyx_k_os, sizeof(__pyx_k_os), 0, 0, 1, 1},
  {&__pyx_n_s_path, __pyx_k_path, sizeof(__pyx_k_path), 0, 0, 1, 1},
  {&__pyx_n_s_path_str, __pyx_k_path_str, sizeof(__pyx_k_path_str), 0, 0, 1, 1},
  {&__pyx_n_s_pause, __pyx_k_pause, sizeof(__pyx_k_pause), 0, 0, 1, 1},
  {&__pyx_n_s_play, __pyx_k_play, sizeof(__pyx_k_play), 0, 0, 1, 1},
  {&__pyx_n_s_player, __pyx_k_player, sizeof(__pyx_k_player), 0, 0, 1, 1},
  {&__pyx_n_s_player_2, __pyx_k_player_2, sizeof(__pyx_k_player_2), 0, 0, 1, 1},
  {&__pyx_n_s_players, __pyx_k_players, sizeof(__pyx_k_players), 0, 0, 1, 1},
  {&__pyx_n_s_players_2, __pyx_k_players_2, sizeof(__pyx_k_players_2), 0, 0, 1, 1},
  {&__pyx_n_s_prepare, __pyx_k_prepare, sizeof(__pyx_k_prepare), 0, 0, 1, 1},
  {&__pyx_n_s_pyplayer, __pyx_k_pyplayer, sizeof(__pyx_k_pyplayer), 0, 0, 1, 1},
  {&__pyx_n_s_pysound, __pyx_k_pysound, sizeof(__pyx_k_pysound), 0, 0, 1, 1},
  {&__pyx_n_s_qualname, __pyx_k_qualname, sizeof(__pyx_k_qualname), 0, 0, 1, 1},
  {&__pyx_n_s_readPcmData, __pyx_k_readPcmData, sizeof(__pyx_k_readPcmData), 0, 0, 1, 1},
  {&__pyx_n_s_remove, __pyx_k_remove, sizeof(__pyx_k_remove), 0, 0, 1, 1},
  {&__pyx_n_s_result, __pyx_k_result, sizeof(__pyx_k_result), 0, 0, 1, 1},
  {&__pyx_n_s_resumeAudio, __pyx_k_resumeAudio, sizeof(__pyx_k_resumeAudio), 0, 0, 1, 1},
  {&__pyx_n_s_self, __pyx_k_self, sizeof(__pyx_k_self), 0, 0, 1, 1},
  {&__pyx_n_s_setGain, __pyx_k_setGain, sizeof(__pyx_k_setGain), 0, 0, 1, 1},
  {&__pyx_n_s_setPitch, __pyx_k_setPitch, sizeof(__pyx_k_setPitch), 0, 0, 1, 1},
  {&__pyx_n_s_sound, __pyx_k_sound, sizeof(__pyx_k_sound), 0, 0, 1, 1},
  {&__pyx_n_s_sound_2, __pyx_k_sound_2, sizeof(__pyx_k_sound_2), 0, 0, 1, 1},
  {&__pyx_n_s_sound_name, __pyx_k_sound_name, sizeof(__pyx_k_sound_name), 0, 0, 1, 1},
  {&__pyx_n_s_split, __pyx_k_split, sizeof(__pyx_k_split), 0, 0, 1, 1},
  {&__pyx_n_s_stop, __pyx_k_stop, sizeof(__pyx_k_stop), 0, 0, 1, 1},
  {&__pyx_n_s_stopAll, __pyx_k_stopAll, sizeof(__pyx_k_stopAll), 0, 0, 1, 1},
  {&__pyx_n_s_stopFirst, __pyx_k_stopFirst, sizeof(__pyx_k_stopFirst), 0, 0, 1, 1},
  {&__pyx_n_s_suspendAudio, __pyx_k_suspendAudio, sizeof(__pyx_k_suspendAudio), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_kp_s_the_C_interface_for_this_object, __pyx_k_the_C_interface_for_this_object, sizeof(__pyx_k_the_C_interface_for_this_object), 0, 0, 1, 0},
  {&__pyx_n_s_threaded, __pyx_k_threaded, sizeof(__pyx_k_threaded), 0, 0, 1, 1},
  {&__pyx_n_s_type, __pyx_k_type, sizeof(__pyx_k_type), 0, 0, 1, 1},
  {&__pyx_n_s_updateTime, __pyx_k_updateTime, sizeof(__pyx_k_updateTime), 0, 0, 1, 1},
  {&__pyx_n_s_value, __pyx_k_value, sizeof(__pyx_k_value), 0, 0, 1, 1},
  {&__pyx_n_s_wrapper, __pyx_k_wrapper, sizeof(__pyx_k_wrapper), 0, 0, 1, 1},
  {&__pyx_n_s_wrapper_2, __pyx_k_wrapper_2, sizeof(__pyx_k_wrapper_2), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_object = __Pyx_GetBuiltinName(__pyx_n_s_object); if (!__pyx_builtin_object) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 564; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_RuntimeError = __Pyx_GetBuiltinName(__pyx_n_s_RuntimeError); if (!__pyx_builtin_RuntimeError) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 132; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_TypeError = __Pyx_GetBuiltinName(__pyx_n_s_TypeError); if (!__pyx_builtin_TypeError) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 740; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "_PyXAL.pyx":107
 * 
 * cdef hstr Py_to_Hstr (string):
 *     py_byte_string = string.encode('UTF-8')             # <<<<<<<<<<<<<<
 *     cdef char* c_str = py_byte_string
 *     cdef hstr hstring = hstr(c_str)
 */
  __pyx_tuple_ = PyTuple_Pack(1, __pyx_kp_s_UTF_8); if (unlikely(!__pyx_tuple_)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 107; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple_);
  __Pyx_GIVEREF(__pyx_tuple_);

  /* "_PyXAL.pyx":132
 *         as such calling the __init__ method will raise a Runtime Error
 *         '''
 *         raise RuntimeError("PyAudioManager Can not be initialized from python")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_tuple__2 = PyTuple_Pack(1, __pyx_kp_s_PyAudioManager_Can_not_be_initia); if (unlikely(!__pyx_tuple__2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 132; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__2);
  __Pyx_GIVEREF(__pyx_tuple__2);

  /* "_PyXAL.pyx":148
 *         as such calling the __init__ method will raise a Runtime Error
 *         '''
 *         raise RuntimeError("PySound Can not be initialized from python")             # <<<<<<<<<<<<<<
 * 
 *     def _destroy(self):
 */
  __pyx_tuple__3 = PyTuple_Pack(1, __pyx_kp_s_PySound_Can_not_be_initialized_f); if (unlikely(!__pyx_tuple__3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 148; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__3);
  __Pyx_GIVEREF(__pyx_tuple__3);

  /* "_PyXAL.pyx":174
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
  __pyx_tuple__4 = PyTuple_Pack(1, __pyx_kp_s_XAL_is_not_Initialized); if (unlikely(!__pyx_tuple__4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 174; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__4);
  __Pyx_GIVEREF(__pyx_tuple__4);

  /* "_PyXAL.pyx":176
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         cdef hstr hl_name = self._pointer.getName()
 *         name = Hstr_to_Py(hl_name)
 */
  __pyx_tuple__5 = PyTuple_Pack(1, __pyx_kp_s_the_C_interface_for_this_object); if (unlikely(!__pyx_tuple__5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 176; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__5);
  __Pyx_GIVEREF(__pyx_tuple__5);

  /* "_PyXAL.pyx":186
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
  __pyx_tuple__6 = PyTuple_Pack(1, __pyx_kp_s_XAL_is_not_Initialized); if (unlikely(!__pyx_tuple__6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 186; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__6);
  __Pyx_GIVEREF(__pyx_tuple__6);

  /* "_PyXAL.pyx":188
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         cdef hstr hl_name = self._pointer.getFilename()
 *         name = Hstr_to_Py(hl_name)
 */
  __pyx_tuple__7 = PyTuple_Pack(1, __pyx_kp_s_the_C_interface_for_this_object); if (unlikely(!__pyx_tuple__7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 188; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__7);
  __Pyx_GIVEREF(__pyx_tuple__7);

  /* "_PyXAL.pyx":198
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
  __pyx_tuple__8 = PyTuple_Pack(1, __pyx_kp_s_XAL_is_not_Initialized); if (unlikely(!__pyx_tuple__8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 198; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__8);
  __Pyx_GIVEREF(__pyx_tuple__8);

  /* "_PyXAL.pyx":200
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         cdef hstr hl_name = self._pointer.getRealFilename()
 *         name = Hstr_to_Py(hl_name)
 */
  __pyx_tuple__9 = PyTuple_Pack(1, __pyx_kp_s_the_C_interface_for_this_object); if (unlikely(!__pyx_tuple__9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 200; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__9);
  __Pyx_GIVEREF(__pyx_tuple__9);

  /* "_PyXAL.pyx":210
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
  __pyx_tuple__10 = PyTuple_Pack(1, __pyx_kp_s_XAL_is_not_Initialized); if (unlikely(!__pyx_tuple__10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 210; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__10);
  __Pyx_GIVEREF(__pyx_tuple__10);

  /* "_PyXAL.pyx":212
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         cdef int size = self._pointer.getSize()
 *         return size
 */
  __pyx_tuple__11 = PyTuple_Pack(1, __pyx_kp_s_the_C_interface_for_this_object); if (unlikely(!__pyx_tuple__11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 212; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__11);
  __Pyx_GIVEREF(__pyx_tuple__11);

  /* "_PyXAL.pyx":221
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
  __pyx_tuple__12 = PyTuple_Pack(1, __pyx_kp_s_XAL_is_not_Initialized); if (unlikely(!__pyx_tuple__12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 221; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__12);
  __Pyx_GIVEREF(__pyx_tuple__12);

  /* "_PyXAL.pyx":223
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         cdef int channels = self._pointer.getChannels()
 *         return channels
 */
  __pyx_tuple__13 = PyTuple_Pack(1, __pyx_kp_s_the_C_interface_for_this_object); if (unlikely(!__pyx_tuple__13)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 223; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__13);
  __Pyx_GIVEREF(__pyx_tuple__13);

  /* "_PyXAL.pyx":232
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
  __pyx_tuple__14 = PyTuple_Pack(1, __pyx_kp_s_XAL_is_not_Initialized); if (unlikely(!__pyx_tuple__14)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 232; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__14);
  __Pyx_GIVEREF(__pyx_tuple__14);

  /* "_PyXAL.pyx":234
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         cdef int rate = self._pointer.getSamplingRate()
 *         return rate
 */
  __pyx_tuple__15 = PyTuple_Pack(1, __pyx_kp_s_the_C_interface_for_this_object); if (unlikely(!__pyx_tuple__15)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 234; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__15);
  __Pyx_GIVEREF(__pyx_tuple__15);

  /* "_PyXAL.pyx":243
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
  __pyx_tuple__16 = PyTuple_Pack(1, __pyx_kp_s_XAL_is_not_Initialized); if (unlikely(!__pyx_tuple__16)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 243; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__16);
  __Pyx_GIVEREF(__pyx_tuple__16);

  /* "_PyXAL.pyx":245
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         cdef int rate = self._pointer.getBitsPerSample()
 *         return rate
 */
  __pyx_tuple__17 = PyTuple_Pack(1, __pyx_kp_s_the_C_interface_for_this_object); if (unlikely(!__pyx_tuple__17)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 245; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__17);
  __Pyx_GIVEREF(__pyx_tuple__17);

  /* "_PyXAL.pyx":254
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
  __pyx_tuple__18 = PyTuple_Pack(1, __pyx_kp_s_XAL_is_not_Initialized); if (unlikely(!__pyx_tuple__18)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 254; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__18);
  __Pyx_GIVEREF(__pyx_tuple__18);

  /* "_PyXAL.pyx":256
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         cdef float duration = self._pointer.getDuration()
 *         return duration
 */
  __pyx_tuple__19 = PyTuple_Pack(1, __pyx_kp_s_the_C_interface_for_this_object); if (unlikely(!__pyx_tuple__19)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 256; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__19);
  __Pyx_GIVEREF(__pyx_tuple__19);

  /* "_PyXAL.pyx":266
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
  __pyx_tuple__20 = PyTuple_Pack(1, __pyx_kp_s_XAL_is_not_Initialized); if (unlikely(!__pyx_tuple__20)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 266; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__20);
  __Pyx_GIVEREF(__pyx_tuple__20);

  /* "_PyXAL.pyx":268
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         cdef int format = <int>self._pointer.getFormat()
 *         return format
 */
  __pyx_tuple__21 = PyTuple_Pack(1, __pyx_kp_s_the_C_interface_for_this_object); if (unlikely(!__pyx_tuple__21)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 268; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__21);
  __Pyx_GIVEREF(__pyx_tuple__21);

  /* "_PyXAL.pyx":278
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
  __pyx_tuple__22 = PyTuple_Pack(1, __pyx_kp_s_XAL_is_not_Initialized); if (unlikely(!__pyx_tuple__22)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 278; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__22);
  __Pyx_GIVEREF(__pyx_tuple__22);

  /* "_PyXAL.pyx":280
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         cdef bint streamed = self._pointer.isStreamed()
 *         return streamed
 */
  __pyx_tuple__23 = PyTuple_Pack(1, __pyx_kp_s_the_C_interface_for_this_object); if (unlikely(!__pyx_tuple__23)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 280; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__23);
  __Pyx_GIVEREF(__pyx_tuple__23);

  /* "_PyXAL.pyx":290
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
  __pyx_tuple__24 = PyTuple_Pack(1, __pyx_kp_s_XAL_is_not_Initialized); if (unlikely(!__pyx_tuple__24)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 290; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__24);
  __Pyx_GIVEREF(__pyx_tuple__24);

  /* "_PyXAL.pyx":292
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         cdef unsigned char* pcm_data
 *         cdef int pcm_size
 */
  __pyx_tuple__25 = PyTuple_Pack(1, __pyx_kp_s_the_C_interface_for_this_object); if (unlikely(!__pyx_tuple__25)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 292; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__25);
  __Pyx_GIVEREF(__pyx_tuple__25);

  /* "_PyXAL.pyx":321
 *         as such calling the __init__ method will raise a Runtime Error
 *         '''
 *         raise RuntimeError("PyPlayer Can not be initialized from python")             # <<<<<<<<<<<<<<
 * 
 *     def _destroy(self):
 */
  __pyx_tuple__27 = PyTuple_Pack(1, __pyx_kp_s_PyPlayer_Can_not_be_initialized); if (unlikely(!__pyx_tuple__27)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 321; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__27);
  __Pyx_GIVEREF(__pyx_tuple__27);

  /* "_PyXAL.pyx":347
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
  __pyx_tuple__28 = PyTuple_Pack(1, __pyx_kp_s_XAL_is_not_Initialized); if (unlikely(!__pyx_tuple__28)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 347; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__28);
  __Pyx_GIVEREF(__pyx_tuple__28);

  /* "_PyXAL.pyx":349
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         cdef float gain = self._pointer.getGain()
 *         return gain
 */
  __pyx_tuple__29 = PyTuple_Pack(1, __pyx_kp_s_the_C_interface_for_this_object); if (unlikely(!__pyx_tuple__29)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 349; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__29);
  __Pyx_GIVEREF(__pyx_tuple__29);

  /* "_PyXAL.pyx":359
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
  __pyx_tuple__30 = PyTuple_Pack(1, __pyx_kp_s_XAL_is_not_Initialized); if (unlikely(!__pyx_tuple__30)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 359; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__30);
  __Pyx_GIVEREF(__pyx_tuple__30);

  /* "_PyXAL.pyx":361
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         self._pointer.setGain(value)
 * 
 */
  __pyx_tuple__31 = PyTuple_Pack(1, __pyx_kp_s_the_C_interface_for_this_object); if (unlikely(!__pyx_tuple__31)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 361; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__31);
  __Pyx_GIVEREF(__pyx_tuple__31);

  /* "_PyXAL.pyx":369
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
  __pyx_tuple__32 = PyTuple_Pack(1, __pyx_kp_s_XAL_is_not_Initialized); if (unlikely(!__pyx_tuple__32)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 369; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__32);
  __Pyx_GIVEREF(__pyx_tuple__32);

  /* "_PyXAL.pyx":371
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         cdef float offset = self._pointer.getPitch()
 *         return offset
 */
  __pyx_tuple__33 = PyTuple_Pack(1, __pyx_kp_s_the_C_interface_for_this_object); if (unlikely(!__pyx_tuple__33)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 371; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__33);
  __Pyx_GIVEREF(__pyx_tuple__33);

  /* "_PyXAL.pyx":381
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
  __pyx_tuple__34 = PyTuple_Pack(1, __pyx_kp_s_XAL_is_not_Initialized); if (unlikely(!__pyx_tuple__34)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 381; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__34);
  __Pyx_GIVEREF(__pyx_tuple__34);

  /* "_PyXAL.pyx":383
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         self._pointer.setPitch(value)
 * 
 */
  __pyx_tuple__35 = PyTuple_Pack(1, __pyx_kp_s_the_C_interface_for_this_object); if (unlikely(!__pyx_tuple__35)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 383; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__35);
  __Pyx_GIVEREF(__pyx_tuple__35);

  /* "_PyXAL.pyx":391
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
  __pyx_tuple__36 = PyTuple_Pack(1, __pyx_kp_s_XAL_is_not_Initialized); if (unlikely(!__pyx_tuple__36)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 391; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__36);
  __Pyx_GIVEREF(__pyx_tuple__36);

  /* "_PyXAL.pyx":393
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         cdef hstr hl_name = self._pointer.getName()
 *         name = Hstr_to_Py(hl_name)
 */
  __pyx_tuple__37 = PyTuple_Pack(1, __pyx_kp_s_the_C_interface_for_this_object); if (unlikely(!__pyx_tuple__37)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 393; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__37);
  __Pyx_GIVEREF(__pyx_tuple__37);

  /* "_PyXAL.pyx":403
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
  __pyx_tuple__38 = PyTuple_Pack(1, __pyx_kp_s_XAL_is_not_Initialized); if (unlikely(!__pyx_tuple__38)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 403; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__38);
  __Pyx_GIVEREF(__pyx_tuple__38);

  /* "_PyXAL.pyx":405
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         cdef hstr hl_name = self._pointer.getFilename()
 *         name = Hstr_to_Py(hl_name)
 */
  __pyx_tuple__39 = PyTuple_Pack(1, __pyx_kp_s_the_C_interface_for_this_object); if (unlikely(!__pyx_tuple__39)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 405; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__39);
  __Pyx_GIVEREF(__pyx_tuple__39);

  /* "_PyXAL.pyx":415
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
  __pyx_tuple__40 = PyTuple_Pack(1, __pyx_kp_s_XAL_is_not_Initialized); if (unlikely(!__pyx_tuple__40)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 415; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__40);
  __Pyx_GIVEREF(__pyx_tuple__40);

  /* "_PyXAL.pyx":417
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         cdef hstr hl_name = self._pointer.getRealFilename()
 *         name = Hstr_to_Py(hl_name)
 */
  __pyx_tuple__41 = PyTuple_Pack(1, __pyx_kp_s_the_C_interface_for_this_object); if (unlikely(!__pyx_tuple__41)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 417; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__41);
  __Pyx_GIVEREF(__pyx_tuple__41);

  /* "_PyXAL.pyx":427
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
  __pyx_tuple__42 = PyTuple_Pack(1, __pyx_kp_s_XAL_is_not_Initialized); if (unlikely(!__pyx_tuple__42)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 427; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__42);
  __Pyx_GIVEREF(__pyx_tuple__42);

  /* "_PyXAL.pyx":429
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         cdef float duration = self._pointer.getDuration()
 *         return duration
 */
  __pyx_tuple__43 = PyTuple_Pack(1, __pyx_kp_s_the_C_interface_for_this_object); if (unlikely(!__pyx_tuple__43)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 429; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__43);
  __Pyx_GIVEREF(__pyx_tuple__43);

  /* "_PyXAL.pyx":438
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
  __pyx_tuple__44 = PyTuple_Pack(1, __pyx_kp_s_XAL_is_not_Initialized); if (unlikely(!__pyx_tuple__44)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 438; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__44);
  __Pyx_GIVEREF(__pyx_tuple__44);

  /* "_PyXAL.pyx":440
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         cdef int size = self._pointer.getSize()
 *         return size
 */
  __pyx_tuple__45 = PyTuple_Pack(1, __pyx_kp_s_the_C_interface_for_this_object); if (unlikely(!__pyx_tuple__45)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 440; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__45);
  __Pyx_GIVEREF(__pyx_tuple__45);

  /* "_PyXAL.pyx":449
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
  __pyx_tuple__46 = PyTuple_Pack(1, __pyx_kp_s_XAL_is_not_Initialized); if (unlikely(!__pyx_tuple__46)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 449; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__46);
  __Pyx_GIVEREF(__pyx_tuple__46);

  /* "_PyXAL.pyx":451
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         cdef float size = self._pointer.getTimePosition()
 *         return size
 */
  __pyx_tuple__47 = PyTuple_Pack(1, __pyx_kp_s_the_C_interface_for_this_object); if (unlikely(!__pyx_tuple__47)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 451; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__47);
  __Pyx_GIVEREF(__pyx_tuple__47);

  /* "_PyXAL.pyx":460
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
  __pyx_tuple__48 = PyTuple_Pack(1, __pyx_kp_s_XAL_is_not_Initialized); if (unlikely(!__pyx_tuple__48)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 460; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__48);
  __Pyx_GIVEREF(__pyx_tuple__48);

  /* "_PyXAL.pyx":462
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         cdef unsigned int size = self._pointer.getSamplePosition()
 *         return size
 */
  __pyx_tuple__49 = PyTuple_Pack(1, __pyx_kp_s_the_C_interface_for_this_object); if (unlikely(!__pyx_tuple__49)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 462; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__49);
  __Pyx_GIVEREF(__pyx_tuple__49);

  /* "_PyXAL.pyx":471
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
  __pyx_tuple__50 = PyTuple_Pack(1, __pyx_kp_s_XAL_is_not_Initialized); if (unlikely(!__pyx_tuple__50)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 471; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__50);
  __Pyx_GIVEREF(__pyx_tuple__50);

  /* "_PyXAL.pyx":473
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         return self._pointer.isPlaying()
 * 
 */
  __pyx_tuple__51 = PyTuple_Pack(1, __pyx_kp_s_the_C_interface_for_this_object); if (unlikely(!__pyx_tuple__51)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 473; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__51);
  __Pyx_GIVEREF(__pyx_tuple__51);

  /* "_PyXAL.pyx":481
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
  __pyx_tuple__52 = PyTuple_Pack(1, __pyx_kp_s_XAL_is_not_Initialized); if (unlikely(!__pyx_tuple__52)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 481; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__52);
  __Pyx_GIVEREF(__pyx_tuple__52);

  /* "_PyXAL.pyx":483
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         return self._pointer.isPaused()
 * 
 */
  __pyx_tuple__53 = PyTuple_Pack(1, __pyx_kp_s_the_C_interface_for_this_object); if (unlikely(!__pyx_tuple__53)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 483; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__53);
  __Pyx_GIVEREF(__pyx_tuple__53);

  /* "_PyXAL.pyx":491
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
  __pyx_tuple__54 = PyTuple_Pack(1, __pyx_kp_s_XAL_is_not_Initialized); if (unlikely(!__pyx_tuple__54)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 491; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__54);
  __Pyx_GIVEREF(__pyx_tuple__54);

  /* "_PyXAL.pyx":493
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         return self._pointer.isFading()
 * 
 */
  __pyx_tuple__55 = PyTuple_Pack(1, __pyx_kp_s_the_C_interface_for_this_object); if (unlikely(!__pyx_tuple__55)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 493; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__55);
  __Pyx_GIVEREF(__pyx_tuple__55);

  /* "_PyXAL.pyx":501
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
  __pyx_tuple__56 = PyTuple_Pack(1, __pyx_kp_s_XAL_is_not_Initialized); if (unlikely(!__pyx_tuple__56)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 501; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__56);
  __Pyx_GIVEREF(__pyx_tuple__56);

  /* "_PyXAL.pyx":503
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         return self._pointer.isFadingIn()
 * 
 */
  __pyx_tuple__57 = PyTuple_Pack(1, __pyx_kp_s_the_C_interface_for_this_object); if (unlikely(!__pyx_tuple__57)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 503; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__57);
  __Pyx_GIVEREF(__pyx_tuple__57);

  /* "_PyXAL.pyx":511
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
  __pyx_tuple__58 = PyTuple_Pack(1, __pyx_kp_s_XAL_is_not_Initialized); if (unlikely(!__pyx_tuple__58)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 511; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__58);
  __Pyx_GIVEREF(__pyx_tuple__58);

  /* "_PyXAL.pyx":513
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         return self._pointer.isFadingOut()
 * 
 */
  __pyx_tuple__59 = PyTuple_Pack(1, __pyx_kp_s_the_C_interface_for_this_object); if (unlikely(!__pyx_tuple__59)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 513; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__59);
  __Pyx_GIVEREF(__pyx_tuple__59);

  /* "_PyXAL.pyx":521
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
  __pyx_tuple__60 = PyTuple_Pack(1, __pyx_kp_s_XAL_is_not_Initialized); if (unlikely(!__pyx_tuple__60)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 521; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__60);
  __Pyx_GIVEREF(__pyx_tuple__60);

  /* "_PyXAL.pyx":523
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         return self._pointer.isLooping()
 * 
 */
  __pyx_tuple__61 = PyTuple_Pack(1, __pyx_kp_s_the_C_interface_for_this_object); if (unlikely(!__pyx_tuple__61)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 523; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__61);
  __Pyx_GIVEREF(__pyx_tuple__61);

  /* "_PyXAL.pyx":534
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
  __pyx_tuple__62 = PyTuple_Pack(1, __pyx_kp_s_XAL_is_not_Initialized); if (unlikely(!__pyx_tuple__62)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 534; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__62);
  __Pyx_GIVEREF(__pyx_tuple__62);

  /* "_PyXAL.pyx":536
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         self._pointer.play(fadeTime, looping)
 * 
 */
  __pyx_tuple__63 = PyTuple_Pack(1, __pyx_kp_s_the_C_interface_for_this_object); if (unlikely(!__pyx_tuple__63)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 536; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__63);
  __Pyx_GIVEREF(__pyx_tuple__63);

  /* "_PyXAL.pyx":546
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
  __pyx_tuple__64 = PyTuple_Pack(1, __pyx_kp_s_XAL_is_not_Initialized); if (unlikely(!__pyx_tuple__64)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 546; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__64);
  __Pyx_GIVEREF(__pyx_tuple__64);

  /* "_PyXAL.pyx":548
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         self._pointer.stop(fadeTime)
 * 
 */
  __pyx_tuple__65 = PyTuple_Pack(1, __pyx_kp_s_the_C_interface_for_this_object); if (unlikely(!__pyx_tuple__65)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 548; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__65);
  __Pyx_GIVEREF(__pyx_tuple__65);

  /* "_PyXAL.pyx":558
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
  __pyx_tuple__66 = PyTuple_Pack(1, __pyx_kp_s_XAL_is_not_Initialized); if (unlikely(!__pyx_tuple__66)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 558; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__66);
  __Pyx_GIVEREF(__pyx_tuple__66);

  /* "_PyXAL.pyx":560
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         self._pointer.pause(fadeTime)
 * 
 */
  __pyx_tuple__67 = PyTuple_Pack(1, __pyx_kp_s_the_C_interface_for_this_object); if (unlikely(!__pyx_tuple__67)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 560; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__67);
  __Pyx_GIVEREF(__pyx_tuple__67);

  /* "_PyXAL.pyx":578
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         path = os.path.split(filename)[0]
 *         cdef hstr file_str = Py_to_Hstr(filename)
 */
  __pyx_tuple__68 = PyTuple_Pack(1, __pyx_kp_s_XAL_is_not_Initialized); if (unlikely(!__pyx_tuple__68)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 578; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__68);
  __Pyx_GIVEREF(__pyx_tuple__68);

  /* "_PyXAL.pyx":616
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
  __pyx_tuple__69 = PyTuple_Pack(1, __pyx_kp_s_XAL_is_not_Initialized); if (unlikely(!__pyx_tuple__69)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 616; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__69);
  __Pyx_GIVEREF(__pyx_tuple__69);

  /* "_PyXAL.pyx":618
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         return self._wrapper.getName()
 * 
 */
  __pyx_tuple__70 = PyTuple_Pack(1, __pyx_kp_s_the_C_interface_for_this_object); if (unlikely(!__pyx_tuple__70)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 618; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__70);
  __Pyx_GIVEREF(__pyx_tuple__70);

  /* "_PyXAL.pyx":626
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
  __pyx_tuple__71 = PyTuple_Pack(1, __pyx_kp_s_XAL_is_not_Initialized); if (unlikely(!__pyx_tuple__71)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 626; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__71);
  __Pyx_GIVEREF(__pyx_tuple__71);

  /* "_PyXAL.pyx":628
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         return self._wrapper.getFilename()
 * 
 */
  __pyx_tuple__72 = PyTuple_Pack(1, __pyx_kp_s_the_C_interface_for_this_object); if (unlikely(!__pyx_tuple__72)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 628; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__72);
  __Pyx_GIVEREF(__pyx_tuple__72);

  /* "_PyXAL.pyx":636
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
  __pyx_tuple__73 = PyTuple_Pack(1, __pyx_kp_s_XAL_is_not_Initialized); if (unlikely(!__pyx_tuple__73)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 636; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__73);
  __Pyx_GIVEREF(__pyx_tuple__73);

  /* "_PyXAL.pyx":638
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         return self._wrapper.getRealFilename()
 * 
 */
  __pyx_tuple__74 = PyTuple_Pack(1, __pyx_kp_s_the_C_interface_for_this_object); if (unlikely(!__pyx_tuple__74)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 638; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__74);
  __Pyx_GIVEREF(__pyx_tuple__74);

  /* "_PyXAL.pyx":646
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
  __pyx_tuple__75 = PyTuple_Pack(1, __pyx_kp_s_XAL_is_not_Initialized); if (unlikely(!__pyx_tuple__75)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 646; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__75);
  __Pyx_GIVEREF(__pyx_tuple__75);

  /* "_PyXAL.pyx":648
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         return self._wrapper.getSize()
 * 
 */
  __pyx_tuple__76 = PyTuple_Pack(1, __pyx_kp_s_the_C_interface_for_this_object); if (unlikely(!__pyx_tuple__76)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 648; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__76);
  __Pyx_GIVEREF(__pyx_tuple__76);

  /* "_PyXAL.pyx":656
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
  __pyx_tuple__77 = PyTuple_Pack(1, __pyx_kp_s_XAL_is_not_Initialized); if (unlikely(!__pyx_tuple__77)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 656; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__77);
  __Pyx_GIVEREF(__pyx_tuple__77);

  /* "_PyXAL.pyx":658
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         return self._wrapper.getChannels()
 * 
 */
  __pyx_tuple__78 = PyTuple_Pack(1, __pyx_kp_s_the_C_interface_for_this_object); if (unlikely(!__pyx_tuple__78)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 658; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__78);
  __Pyx_GIVEREF(__pyx_tuple__78);

  /* "_PyXAL.pyx":666
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
  __pyx_tuple__79 = PyTuple_Pack(1, __pyx_kp_s_XAL_is_not_Initialized); if (unlikely(!__pyx_tuple__79)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 666; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__79);
  __Pyx_GIVEREF(__pyx_tuple__79);

  /* "_PyXAL.pyx":668
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         return self._wrapper.getSamplingRate()
 * 
 */
  __pyx_tuple__80 = PyTuple_Pack(1, __pyx_kp_s_the_C_interface_for_this_object); if (unlikely(!__pyx_tuple__80)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 668; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__80);
  __Pyx_GIVEREF(__pyx_tuple__80);

  /* "_PyXAL.pyx":676
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
  __pyx_tuple__81 = PyTuple_Pack(1, __pyx_kp_s_XAL_is_not_Initialized); if (unlikely(!__pyx_tuple__81)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 676; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__81);
  __Pyx_GIVEREF(__pyx_tuple__81);

  /* "_PyXAL.pyx":678
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         return self._wrapper.getBitsPerSample()
 * 
 */
  __pyx_tuple__82 = PyTuple_Pack(1, __pyx_kp_s_the_C_interface_for_this_object); if (unlikely(!__pyx_tuple__82)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 678; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__82);
  __Pyx_GIVEREF(__pyx_tuple__82);

  /* "_PyXAL.pyx":686
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
  __pyx_tuple__83 = PyTuple_Pack(1, __pyx_kp_s_XAL_is_not_Initialized); if (unlikely(!__pyx_tuple__83)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 686; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__83);
  __Pyx_GIVEREF(__pyx_tuple__83);

  /* "_PyXAL.pyx":688
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         return self._wrapper.getDuration()
 * 
 */
  __pyx_tuple__84 = PyTuple_Pack(1, __pyx_kp_s_the_C_interface_for_this_object); if (unlikely(!__pyx_tuple__84)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 688; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__84);
  __Pyx_GIVEREF(__pyx_tuple__84);

  /* "_PyXAL.pyx":697
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
  __pyx_tuple__85 = PyTuple_Pack(1, __pyx_kp_s_XAL_is_not_Initialized); if (unlikely(!__pyx_tuple__85)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 697; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__85);
  __Pyx_GIVEREF(__pyx_tuple__85);

  /* "_PyXAL.pyx":699
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         return self._wrapper.getFormat()
 * 
 */
  __pyx_tuple__86 = PyTuple_Pack(1, __pyx_kp_s_the_C_interface_for_this_object); if (unlikely(!__pyx_tuple__86)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 699; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__86);
  __Pyx_GIVEREF(__pyx_tuple__86);

  /* "_PyXAL.pyx":708
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
  __pyx_tuple__87 = PyTuple_Pack(1, __pyx_kp_s_XAL_is_not_Initialized); if (unlikely(!__pyx_tuple__87)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 708; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__87);
  __Pyx_GIVEREF(__pyx_tuple__87);

  /* "_PyXAL.pyx":710
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         return self._wrapper.isStreamed()
 * 
 */
  __pyx_tuple__88 = PyTuple_Pack(1, __pyx_kp_s_the_C_interface_for_this_object); if (unlikely(!__pyx_tuple__88)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 710; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__88);
  __Pyx_GIVEREF(__pyx_tuple__88);

  /* "_PyXAL.pyx":719
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
  __pyx_tuple__89 = PyTuple_Pack(1, __pyx_kp_s_XAL_is_not_Initialized); if (unlikely(!__pyx_tuple__89)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 719; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__89);
  __Pyx_GIVEREF(__pyx_tuple__89);

  /* "_PyXAL.pyx":721
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         return self._wrapper.readPcmData()
 * 
 */
  __pyx_tuple__90 = PyTuple_Pack(1, __pyx_kp_s_the_C_interface_for_this_object); if (unlikely(!__pyx_tuple__90)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 721; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__90);
  __Pyx_GIVEREF(__pyx_tuple__90);

  /* "_PyXAL.pyx":738
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if not isinstance(sound, PySound):
 *             raise TypeError("Expected argument 1 to be of type PySound got %s" % type(sound))
 */
  __pyx_tuple__91 = PyTuple_Pack(1, __pyx_kp_s_XAL_is_not_Initialized); if (unlikely(!__pyx_tuple__91)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 738; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__91);
  __Pyx_GIVEREF(__pyx_tuple__91);

  /* "_PyXAL.pyx":786
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
  __pyx_tuple__92 = PyTuple_Pack(1, __pyx_kp_s_XAL_is_not_Initialized); if (unlikely(!__pyx_tuple__92)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 786; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__92);
  __Pyx_GIVEREF(__pyx_tuple__92);

  /* "_PyXAL.pyx":788
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         return self._wrapper.getGain()
 * 
 */
  __pyx_tuple__93 = PyTuple_Pack(1, __pyx_kp_s_the_C_interface_for_this_object); if (unlikely(!__pyx_tuple__93)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 788; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__93);
  __Pyx_GIVEREF(__pyx_tuple__93);

  /* "_PyXAL.pyx":797
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
  __pyx_tuple__94 = PyTuple_Pack(1, __pyx_kp_s_XAL_is_not_Initialized); if (unlikely(!__pyx_tuple__94)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 797; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__94);
  __Pyx_GIVEREF(__pyx_tuple__94);

  /* "_PyXAL.pyx":799
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         self._wrapper.setGain(value)
 * 
 */
  __pyx_tuple__95 = PyTuple_Pack(1, __pyx_kp_s_the_C_interface_for_this_object); if (unlikely(!__pyx_tuple__95)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 799; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__95);
  __Pyx_GIVEREF(__pyx_tuple__95);

  /* "_PyXAL.pyx":807
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
  __pyx_tuple__96 = PyTuple_Pack(1, __pyx_kp_s_XAL_is_not_Initialized); if (unlikely(!__pyx_tuple__96)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 807; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__96);
  __Pyx_GIVEREF(__pyx_tuple__96);

  /* "_PyXAL.pyx":809
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         return self._wrapper.getPitch()
 * 
 */
  __pyx_tuple__97 = PyTuple_Pack(1, __pyx_kp_s_the_C_interface_for_this_object); if (unlikely(!__pyx_tuple__97)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 809; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__97);
  __Pyx_GIVEREF(__pyx_tuple__97);

  /* "_PyXAL.pyx":818
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
  __pyx_tuple__98 = PyTuple_Pack(1, __pyx_kp_s_XAL_is_not_Initialized); if (unlikely(!__pyx_tuple__98)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 818; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__98);
  __Pyx_GIVEREF(__pyx_tuple__98);

  /* "_PyXAL.pyx":820
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         self._wrapper.setPitch(value)
 * 
 */
  __pyx_tuple__99 = PyTuple_Pack(1, __pyx_kp_s_the_C_interface_for_this_object); if (unlikely(!__pyx_tuple__99)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 820; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__99);
  __Pyx_GIVEREF(__pyx_tuple__99);

  /* "_PyXAL.pyx":834
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
  __pyx_tuple__100 = PyTuple_Pack(1, __pyx_kp_s_XAL_is_not_Initialized); if (unlikely(!__pyx_tuple__100)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 834; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__100);
  __Pyx_GIVEREF(__pyx_tuple__100);

  /* "_PyXAL.pyx":836
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         return self._wrapper.getName()
 * 
 */
  __pyx_tuple__101 = PyTuple_Pack(1, __pyx_kp_s_the_C_interface_for_this_object); if (unlikely(!__pyx_tuple__101)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 836; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__101);
  __Pyx_GIVEREF(__pyx_tuple__101);

  /* "_PyXAL.pyx":844
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
  __pyx_tuple__102 = PyTuple_Pack(1, __pyx_kp_s_XAL_is_not_Initialized); if (unlikely(!__pyx_tuple__102)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 844; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__102);
  __Pyx_GIVEREF(__pyx_tuple__102);

  /* "_PyXAL.pyx":846
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         return self._wrapper.getFilename()
 * 
 */
  __pyx_tuple__103 = PyTuple_Pack(1, __pyx_kp_s_the_C_interface_for_this_object); if (unlikely(!__pyx_tuple__103)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 846; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__103);
  __Pyx_GIVEREF(__pyx_tuple__103);

  /* "_PyXAL.pyx":854
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
  __pyx_tuple__104 = PyTuple_Pack(1, __pyx_kp_s_XAL_is_not_Initialized); if (unlikely(!__pyx_tuple__104)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 854; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__104);
  __Pyx_GIVEREF(__pyx_tuple__104);

  /* "_PyXAL.pyx":856
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         return self._wrapper.getRealFilename()
 * 
 */
  __pyx_tuple__105 = PyTuple_Pack(1, __pyx_kp_s_the_C_interface_for_this_object); if (unlikely(!__pyx_tuple__105)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 856; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__105);
  __Pyx_GIVEREF(__pyx_tuple__105);

  /* "_PyXAL.pyx":864
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
  __pyx_tuple__106 = PyTuple_Pack(1, __pyx_kp_s_XAL_is_not_Initialized); if (unlikely(!__pyx_tuple__106)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 864; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__106);
  __Pyx_GIVEREF(__pyx_tuple__106);

  /* "_PyXAL.pyx":866
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         return self._wrapper.getDuration()
 * 
 */
  __pyx_tuple__107 = PyTuple_Pack(1, __pyx_kp_s_the_C_interface_for_this_object); if (unlikely(!__pyx_tuple__107)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 866; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__107);
  __Pyx_GIVEREF(__pyx_tuple__107);

  /* "_PyXAL.pyx":874
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
  __pyx_tuple__108 = PyTuple_Pack(1, __pyx_kp_s_XAL_is_not_Initialized); if (unlikely(!__pyx_tuple__108)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 874; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__108);
  __Pyx_GIVEREF(__pyx_tuple__108);

  /* "_PyXAL.pyx":876
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         return self._wrapper.getSize()
 * 
 */
  __pyx_tuple__109 = PyTuple_Pack(1, __pyx_kp_s_the_C_interface_for_this_object); if (unlikely(!__pyx_tuple__109)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 876; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__109);
  __Pyx_GIVEREF(__pyx_tuple__109);

  /* "_PyXAL.pyx":884
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
  __pyx_tuple__110 = PyTuple_Pack(1, __pyx_kp_s_XAL_is_not_Initialized); if (unlikely(!__pyx_tuple__110)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 884; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__110);
  __Pyx_GIVEREF(__pyx_tuple__110);

  /* "_PyXAL.pyx":886
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         return self._wrapper.getTimePosition()
 * 
 */
  __pyx_tuple__111 = PyTuple_Pack(1, __pyx_kp_s_the_C_interface_for_this_object); if (unlikely(!__pyx_tuple__111)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 886; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__111);
  __Pyx_GIVEREF(__pyx_tuple__111);

  /* "_PyXAL.pyx":894
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
  __pyx_tuple__112 = PyTuple_Pack(1, __pyx_kp_s_XAL_is_not_Initialized); if (unlikely(!__pyx_tuple__112)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 894; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__112);
  __Pyx_GIVEREF(__pyx_tuple__112);

  /* "_PyXAL.pyx":896
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         return self._wrapper.getSamplePosition()
 * 
 */
  __pyx_tuple__113 = PyTuple_Pack(1, __pyx_kp_s_the_C_interface_for_this_object); if (unlikely(!__pyx_tuple__113)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 896; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__113);
  __Pyx_GIVEREF(__pyx_tuple__113);

  /* "_PyXAL.pyx":904
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
  __pyx_tuple__114 = PyTuple_Pack(1, __pyx_kp_s_XAL_is_not_Initialized); if (unlikely(!__pyx_tuple__114)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 904; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__114);
  __Pyx_GIVEREF(__pyx_tuple__114);

  /* "_PyXAL.pyx":906
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         return self._wrapper.isPlaying()
 * 
 */
  __pyx_tuple__115 = PyTuple_Pack(1, __pyx_kp_s_the_C_interface_for_this_object); if (unlikely(!__pyx_tuple__115)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 906; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__115);
  __Pyx_GIVEREF(__pyx_tuple__115);

  /* "_PyXAL.pyx":914
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
  __pyx_tuple__116 = PyTuple_Pack(1, __pyx_kp_s_XAL_is_not_Initialized); if (unlikely(!__pyx_tuple__116)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 914; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__116);
  __Pyx_GIVEREF(__pyx_tuple__116);

  /* "_PyXAL.pyx":916
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         return self._wrapper.isPaused()
 * 
 */
  __pyx_tuple__117 = PyTuple_Pack(1, __pyx_kp_s_the_C_interface_for_this_object); if (unlikely(!__pyx_tuple__117)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 916; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__117);
  __Pyx_GIVEREF(__pyx_tuple__117);

  /* "_PyXAL.pyx":924
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
  __pyx_tuple__118 = PyTuple_Pack(1, __pyx_kp_s_XAL_is_not_Initialized); if (unlikely(!__pyx_tuple__118)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 924; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__118);
  __Pyx_GIVEREF(__pyx_tuple__118);

  /* "_PyXAL.pyx":926
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         return self._wrapper.isFading()
 * 
 */
  __pyx_tuple__119 = PyTuple_Pack(1, __pyx_kp_s_the_C_interface_for_this_object); if (unlikely(!__pyx_tuple__119)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 926; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__119);
  __Pyx_GIVEREF(__pyx_tuple__119);

  /* "_PyXAL.pyx":934
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
  __pyx_tuple__120 = PyTuple_Pack(1, __pyx_kp_s_XAL_is_not_Initialized); if (unlikely(!__pyx_tuple__120)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 934; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__120);
  __Pyx_GIVEREF(__pyx_tuple__120);

  /* "_PyXAL.pyx":936
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         return self._wrapper.isFadingIn()
 * 
 */
  __pyx_tuple__121 = PyTuple_Pack(1, __pyx_kp_s_the_C_interface_for_this_object); if (unlikely(!__pyx_tuple__121)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 936; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__121);
  __Pyx_GIVEREF(__pyx_tuple__121);

  /* "_PyXAL.pyx":944
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
  __pyx_tuple__122 = PyTuple_Pack(1, __pyx_kp_s_XAL_is_not_Initialized); if (unlikely(!__pyx_tuple__122)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 944; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__122);
  __Pyx_GIVEREF(__pyx_tuple__122);

  /* "_PyXAL.pyx":946
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         return self._wrapper.isFadingOut()
 * 
 */
  __pyx_tuple__123 = PyTuple_Pack(1, __pyx_kp_s_the_C_interface_for_this_object); if (unlikely(!__pyx_tuple__123)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 946; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__123);
  __Pyx_GIVEREF(__pyx_tuple__123);

  /* "_PyXAL.pyx":954
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
  __pyx_tuple__124 = PyTuple_Pack(1, __pyx_kp_s_XAL_is_not_Initialized); if (unlikely(!__pyx_tuple__124)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 954; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__124);
  __Pyx_GIVEREF(__pyx_tuple__124);

  /* "_PyXAL.pyx":956
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         return self._wrapper.isLooping()
 * 
 */
  __pyx_tuple__125 = PyTuple_Pack(1, __pyx_kp_s_the_C_interface_for_this_object); if (unlikely(!__pyx_tuple__125)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 956; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__125);
  __Pyx_GIVEREF(__pyx_tuple__125);

  /* "_PyXAL.pyx":967
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
  __pyx_tuple__126 = PyTuple_Pack(1, __pyx_kp_s_XAL_is_not_Initialized); if (unlikely(!__pyx_tuple__126)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 967; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__126);
  __Pyx_GIVEREF(__pyx_tuple__126);

  /* "_PyXAL.pyx":969
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         self._wrapper.play(fadeTime, looping)
 * 
 */
  __pyx_tuple__127 = PyTuple_Pack(1, __pyx_kp_s_the_C_interface_for_this_object); if (unlikely(!__pyx_tuple__127)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 969; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__127);
  __Pyx_GIVEREF(__pyx_tuple__127);

  /* "_PyXAL.pyx":979
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
  __pyx_tuple__128 = PyTuple_Pack(1, __pyx_kp_s_XAL_is_not_Initialized); if (unlikely(!__pyx_tuple__128)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 979; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__128);
  __Pyx_GIVEREF(__pyx_tuple__128);

  /* "_PyXAL.pyx":981
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         self._wrapper.stop(fadeTime)
 * 
 */
  __pyx_tuple__129 = PyTuple_Pack(1, __pyx_kp_s_the_C_interface_for_this_object); if (unlikely(!__pyx_tuple__129)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 981; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__129);
  __Pyx_GIVEREF(__pyx_tuple__129);

  /* "_PyXAL.pyx":991
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")
 */
  __pyx_tuple__130 = PyTuple_Pack(1, __pyx_kp_s_XAL_is_not_Initialized); if (unlikely(!__pyx_tuple__130)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 991; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__130);
  __Pyx_GIVEREF(__pyx_tuple__130);

  /* "_PyXAL.pyx":993
 *             raise RuntimeError("XAL is not Initialized")
 *         if self.destroyed:
 *             raise RuntimeError("the C++ interface for this object has been destroyed")             # <<<<<<<<<<<<<<
 *         self._wrapper.pause(fadeTime)
 * 
 */
  __pyx_tuple__131 = PyTuple_Pack(1, __pyx_kp_s_the_C_interface_for_this_object); if (unlikely(!__pyx_tuple__131)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 993; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__131);
  __Pyx_GIVEREF(__pyx_tuple__131);

  /* "_PyXAL.pyx":1020
 *         global Mgr
 *         if Mgr is not None:
 *             raise RuntimeError("Only one XALManager interface allowed at a time, use the one at PyXAL.Mgr")             # <<<<<<<<<<<<<<
 *         self.CATEGORY_STR = "default"
 *         cdef hstr dname = hstr(deviceName)
 */
  __pyx_tuple__132 = PyTuple_Pack(1, __pyx_kp_s_Only_one_XALManager_interface_al); if (unlikely(!__pyx_tuple__132)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1020; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__132);
  __Pyx_GIVEREF(__pyx_tuple__132);

  /* "_PyXAL.pyx":1049
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         cdef hstr category = hstr(self.CATEGORY_STR)
 *         self._category = XAL.mgr.createCategory(category, FULL, DISK)
 */
  __pyx_tuple__133 = PyTuple_Pack(1, __pyx_kp_s_XAL_is_not_Initialized); if (unlikely(!__pyx_tuple__133)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1049; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__133);
  __Pyx_GIVEREF(__pyx_tuple__133);

  /* "_PyXAL.pyx":1083
 *         global Mgr
 *         if Mgr is not None:
 *             raise RuntimeError("Only one XALManager interface allowed at a time, use the one at PyXAL.Mgr")             # <<<<<<<<<<<<<<
 *         cdef XALManagerWrapper wrapper = XALManagerWrapper(XAL_AS_DEFAULT, backendId, threaded)
 *         self._wrapper = wrapper
 */
  __pyx_tuple__134 = PyTuple_Pack(1, __pyx_kp_s_Only_one_XALManager_interface_al); if (unlikely(!__pyx_tuple__134)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1083; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__134);
  __Pyx_GIVEREF(__pyx_tuple__134);

  /* "_PyXAL.pyx":1123
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         pysound = PySound(filename)
 *         return pysound
 */
  __pyx_tuple__135 = PyTuple_Pack(1, __pyx_kp_s_XAL_is_not_Initialized); if (unlikely(!__pyx_tuple__135)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1123; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__135);
  __Pyx_GIVEREF(__pyx_tuple__135);

  /* "_PyXAL.pyx":1136
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if not isinstance(sound, PySound):
 *             raise TypeError("Expected argument 1 to be of type PySound got %s" % type(sound))
 */
  __pyx_tuple__136 = PyTuple_Pack(1, __pyx_kp_s_XAL_is_not_Initialized); if (unlikely(!__pyx_tuple__136)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1136; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__136);
  __Pyx_GIVEREF(__pyx_tuple__136);

  /* "_PyXAL.pyx":1154
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if not isinstance(player, PyPlayer):
 *             raise TypeError("Expected argument 1 to be of type PyPlayer got %s" % type(player))
 */
  __pyx_tuple__137 = PyTuple_Pack(1, __pyx_kp_s_XAL_is_not_Initialized); if (unlikely(!__pyx_tuple__137)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1154; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__137);
  __Pyx_GIVEREF(__pyx_tuple__137);

  /* "_PyXAL.pyx":1171
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if not isinstance(sound, PySound):
 *             raise TypeError("Expected argument 1 to be of type PySound got %s" % type(sound))
 */
  __pyx_tuple__138 = PyTuple_Pack(1, __pyx_kp_s_XAL_is_not_Initialized); if (unlikely(!__pyx_tuple__138)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1171; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__138);
  __Pyx_GIVEREF(__pyx_tuple__138);

  /* "_PyXAL.pyx":1184
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         if name in self._players:
 *             if len(self._players[name]) > 0:
 */
  __pyx_tuple__139 = PyTuple_Pack(1, __pyx_kp_s_XAL_is_not_Initialized); if (unlikely(!__pyx_tuple__139)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1184; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__139);
  __Pyx_GIVEREF(__pyx_tuple__139);

  /* "_PyXAL.pyx":1200
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         cdef hstr hl_name = Py_to_Hstr(name)
 *         XAL.mgr.play(hl_name, fadeTime, looping, gain)
 */
  __pyx_tuple__140 = PyTuple_Pack(1, __pyx_kp_s_XAL_is_not_Initialized); if (unlikely(!__pyx_tuple__140)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1200; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__140);
  __Pyx_GIVEREF(__pyx_tuple__140);

  /* "_PyXAL.pyx":1212
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         cdef hstr hl_name = Py_to_Hstr(name)
 *         XAL.mgr.stop(hl_name, fadeTime)
 */
  __pyx_tuple__141 = PyTuple_Pack(1, __pyx_kp_s_XAL_is_not_Initialized); if (unlikely(!__pyx_tuple__141)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1212; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__141);
  __Pyx_GIVEREF(__pyx_tuple__141);

  /* "_PyXAL.pyx":1224
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         cdef hstr hl_name = Py_to_Hstr(name)
 *         XAL.mgr.stopFirst(hl_name, fadeTime)
 */
  __pyx_tuple__142 = PyTuple_Pack(1, __pyx_kp_s_XAL_is_not_Initialized); if (unlikely(!__pyx_tuple__142)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1224; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__142);
  __Pyx_GIVEREF(__pyx_tuple__142);

  /* "_PyXAL.pyx":1236
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         XAL.mgr.stopAll(fadeTime)
 * 
 */
  __pyx_tuple__143 = PyTuple_Pack(1, __pyx_kp_s_XAL_is_not_Initialized); if (unlikely(!__pyx_tuple__143)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1236; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__143);
  __Pyx_GIVEREF(__pyx_tuple__143);

  /* "_PyXAL.pyx":1245
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         cdef hstr hl_name = Py_to_Hstr(name)
 *         cdef bint result = XAL.mgr.isAnyPlaying(hl_name)
 */
  __pyx_tuple__144 = PyTuple_Pack(1, __pyx_kp_s_XAL_is_not_Initialized); if (unlikely(!__pyx_tuple__144)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1245; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__144);
  __Pyx_GIVEREF(__pyx_tuple__144);

  /* "_PyXAL.pyx":1256
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         cdef hstr hl_name = Py_to_Hstr(name)
 *         cdef bint result = XAL.mgr.isAnyFading(hl_name)
 */
  __pyx_tuple__145 = PyTuple_Pack(1, __pyx_kp_s_XAL_is_not_Initialized); if (unlikely(!__pyx_tuple__145)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1256; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__145);
  __Pyx_GIVEREF(__pyx_tuple__145);

  /* "_PyXAL.pyx":1267
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         cdef hstr hl_name = Py_to_Hstr(name)
 *         cdef bint result = XAL.mgr.isAnyFadingIn(hl_name)
 */
  __pyx_tuple__146 = PyTuple_Pack(1, __pyx_kp_s_XAL_is_not_Initialized); if (unlikely(!__pyx_tuple__146)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1267; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__146);
  __Pyx_GIVEREF(__pyx_tuple__146);

  /* "_PyXAL.pyx":1278
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         cdef hstr hl_name = Py_to_Hstr(name)
 *         cdef bint result = XAL.mgr.isAnyFadingOut(hl_name)
 */
  __pyx_tuple__147 = PyTuple_Pack(1, __pyx_kp_s_XAL_is_not_Initialized); if (unlikely(!__pyx_tuple__147)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1278; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__147);
  __Pyx_GIVEREF(__pyx_tuple__147);

  /* "_PyXAL.pyx":1290
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         XAL.mgr.suspendAudio()
 * 
 */
  __pyx_tuple__148 = PyTuple_Pack(1, __pyx_kp_s_XAL_is_not_Initialized); if (unlikely(!__pyx_tuple__148)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1290; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__148);
  __Pyx_GIVEREF(__pyx_tuple__148);

  /* "_PyXAL.pyx":1300
 *         '''
 *         if not self.isXALInitialized():
 *             raise RuntimeError("XAL is not Initialized")             # <<<<<<<<<<<<<<
 *         XAL.mgr.resumeAudio()
 * 
 */
  __pyx_tuple__149 = PyTuple_Pack(1, __pyx_kp_s_XAL_is_not_Initialized); if (unlikely(!__pyx_tuple__149)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1300; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__149);
  __Pyx_GIVEREF(__pyx_tuple__149);

  /* "_PyXAL.pyx":573
 *     destroyed = False
 * 
 *     def __init__(self, filename):             # <<<<<<<<<<<<<<
 *         '''
 *         this creates a sound object from a file name
 */
  __pyx_tuple__150 = PyTuple_Pack(8, __pyx_n_s_self, __pyx_n_s_filename, __pyx_n_s_path, __pyx_n_s_file_str, __pyx_n_s_path_str, __pyx_n_s_category, __pyx_n_s_sound, __pyx_n_s_wrapper_2); if (unlikely(!__pyx_tuple__150)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 573; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__150);
  __Pyx_GIVEREF(__pyx_tuple__150);
  __pyx_codeobj__151 = (PyObject*)__Pyx_PyCode_New(2, 0, 8, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__150, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_E_Projects_ARC_editor_Welder_src, __pyx_n_s_init, 573, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__151)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 573; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_PyXAL.pyx":592
 *         self._wrapper = wrapper
 * 
 *     def _destroy(self):             # <<<<<<<<<<<<<<
 *         if self.isXALInitialized() and not self.destroyed:
 *             self._wrapper._destroy()
 */
  __pyx_tuple__152 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__152)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 592; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__152);
  __Pyx_GIVEREF(__pyx_tuple__152);
  __pyx_codeobj__153 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__152, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_E_Projects_ARC_editor_Welder_src, __pyx_n_s_destroy, 592, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__153)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 592; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_PyXAL.pyx":597
 *             self.destroyed = True
 * 
 *     def __del__(self):             # <<<<<<<<<<<<<<
 *         if self.isXALInitialized():
 *             self._destroy()
 */
  __pyx_tuple__154 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__154)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 597; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__154);
  __Pyx_GIVEREF(__pyx_tuple__154);
  __pyx_codeobj__155 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__154, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_E_Projects_ARC_editor_Welder_src, __pyx_n_s_del, 597, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__155)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 597; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_PyXAL.pyx":602
 *         del self._wrapper
 * 
 *     def isXALInitialized(self):             # <<<<<<<<<<<<<<
 *         '''
 *         returns true if the C++ side of the interface to XAL exists
 */
  __pyx_tuple__156 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__156)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 602; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__156);
  __Pyx_GIVEREF(__pyx_tuple__156);
  __pyx_codeobj__157 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__156, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_E_Projects_ARC_editor_Welder_src, __pyx_n_s_isXALInitialized, 602, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__157)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 602; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_PyXAL.pyx":611
 *             return False
 * 
 *     def getName(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: returns the string name of the sound. it is normal the full path of teh sound file with out the file extention
 */
  __pyx_tuple__158 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__158)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 611; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__158);
  __Pyx_GIVEREF(__pyx_tuple__158);
  __pyx_codeobj__159 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__158, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_E_Projects_ARC_editor_Welder_src, __pyx_n_s_getName, 611, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__159)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 611; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_PyXAL.pyx":621
 *         return self._wrapper.getName()
 * 
 *     def getFilename(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: returns a string containing the file name the sound was loaded from
 */
  __pyx_tuple__160 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__160)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 621; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__160);
  __Pyx_GIVEREF(__pyx_tuple__160);
  __pyx_codeobj__161 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__160, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_E_Projects_ARC_editor_Welder_src, __pyx_n_s_getFilename, 621, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__161)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 621; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_PyXAL.pyx":631
 *         return self._wrapper.getFilename()
 * 
 *     def getRealFilename(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: returns a string with the full path to the file the string was loaded from
 */
  __pyx_tuple__162 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__162)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 631; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__162);
  __Pyx_GIVEREF(__pyx_tuple__162);
  __pyx_codeobj__163 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__162, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_E_Projects_ARC_editor_Welder_src, __pyx_n_s_getRealFilename, 631, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__163)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 631; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_PyXAL.pyx":641
 *         return self._wrapper.getRealFilename()
 * 
 *     def getSize(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: int the size of the sound data in bits not bytes
 */
  __pyx_tuple__164 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__164)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 641; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__164);
  __Pyx_GIVEREF(__pyx_tuple__164);
  __pyx_codeobj__165 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__164, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_E_Projects_ARC_editor_Welder_src, __pyx_n_s_getSize, 641, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__165)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 641; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_PyXAL.pyx":651
 *         return self._wrapper.getSize()
 * 
 *     def getChannels(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: int number of channels the sound has. 1 for mono or 2 for stereo
 */
  __pyx_tuple__166 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__166)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 651; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__166);
  __Pyx_GIVEREF(__pyx_tuple__166);
  __pyx_codeobj__167 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__166, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_E_Projects_ARC_editor_Welder_src, __pyx_n_s_getChannels, 651, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__167)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 651; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_PyXAL.pyx":661
 *         return self._wrapper.getChannels()
 * 
 *     def getSamplingRate(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: int the sampeling rate for the sound in samples per second
 */
  __pyx_tuple__168 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__168)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 661; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__168);
  __Pyx_GIVEREF(__pyx_tuple__168);
  __pyx_codeobj__169 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__168, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_E_Projects_ARC_editor_Welder_src, __pyx_n_s_getSamplingRate, 661, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__169)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 661; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_PyXAL.pyx":671
 *         return self._wrapper.getSamplingRate()
 * 
 *     def getBitsPerSample(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: int the bits per sample of data in the sound. usualy 8, 16, or 24, possibly 32 not sure
 */
  __pyx_tuple__170 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__170)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 671; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__170);
  __Pyx_GIVEREF(__pyx_tuple__170);
  __pyx_codeobj__171 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__170, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_E_Projects_ARC_editor_Welder_src, __pyx_n_s_getBitsPerSample, 671, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__171)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 671; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_PyXAL.pyx":681
 *         return self._wrapper.getBitsPerSample()
 * 
 *     def getDuration(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: float duration of the sound in seconds. it is a floating point number to acound for fractions of a second
 */
  __pyx_tuple__172 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__172)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 681; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__172);
  __Pyx_GIVEREF(__pyx_tuple__172);
  __pyx_codeobj__173 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__172, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_E_Projects_ARC_editor_Welder_src, __pyx_n_s_getDuration, 681, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__173)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 681; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_PyXAL.pyx":691
 *         return self._wrapper.getDuration()
 * 
 *     def getFormat(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: int the intrnal designation of the sound format. coresponds to a file type but as of now there is no way to tell for certin which is which
 */
  __pyx_tuple__174 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__174)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 691; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__174);
  __Pyx_GIVEREF(__pyx_tuple__174);
  __pyx_codeobj__175 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__174, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_E_Projects_ARC_editor_Welder_src, __pyx_n_s_getFormat, 691, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__175)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 691; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_PyXAL.pyx":702
 *         return self._wrapper.getFormat()
 * 
 *     def isStreamed(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: bool is the sound being streamed from it's file to the player? or is it comleatly loaded into memory.
 */
  __pyx_tuple__176 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__176)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 702; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__176);
  __Pyx_GIVEREF(__pyx_tuple__176);
  __pyx_codeobj__177 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__176, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_E_Projects_ARC_editor_Welder_src, __pyx_n_s_isStreamed, 702, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__177)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 702; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_PyXAL.pyx":713
 *         return self._wrapper.isStreamed()
 * 
 *     def readPcmData(self):             # <<<<<<<<<<<<<<
 *         '''
 *         read the raw data of the sound and return it the format of said data can be determined from the size, chanels, bits per sample and sampleling rate of the sound
 */
  __pyx_tuple__178 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__178)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 713; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__178);
  __Pyx_GIVEREF(__pyx_tuple__178);
  __pyx_codeobj__179 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__178, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_E_Projects_ARC_editor_Welder_src, __pyx_n_s_readPcmData, 713, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__179)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 713; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_PyXAL.pyx":733
 *     destroyed = False
 * 
 *     def __init__(self, sound):             # <<<<<<<<<<<<<<
 *         '''
 *         a PyPlayer object created by bassing a PySound to the __init__ method
 */
  __pyx_tuple__180 = PyTuple_Pack(6, __pyx_n_s_self, __pyx_n_s_sound, __pyx_n_s_sound_name, __pyx_n_s_hl_name, __pyx_n_s_player_2, __pyx_n_s_wrapper_2); if (unlikely(!__pyx_tuple__180)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 733; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__180);
  __Pyx_GIVEREF(__pyx_tuple__180);
  __pyx_codeobj__181 = (PyObject*)__Pyx_PyCode_New(2, 0, 6, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__180, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_E_Projects_ARC_editor_Welder_src, __pyx_n_s_init, 733, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__181)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 733; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_PyXAL.pyx":753
 *         self._sound = sound
 * 
 *     def _destroy(self):             # <<<<<<<<<<<<<<
 *         if self.isXALInitialized() and not self.destroyed:
 *             self._wrapper._destroy()
 */
  __pyx_tuple__182 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__182)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 753; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__182);
  __Pyx_GIVEREF(__pyx_tuple__182);
  __pyx_codeobj__183 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__182, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_E_Projects_ARC_editor_Welder_src, __pyx_n_s_destroy, 753, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__183)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 753; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_PyXAL.pyx":758
 *             self.destroyed = True
 * 
 *     def __del__(self):             # <<<<<<<<<<<<<<
 *         global Mgr
 *         if not self.destroyed:
 */
  __pyx_tuple__184 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__184)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 758; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__184);
  __Pyx_GIVEREF(__pyx_tuple__184);
  __pyx_codeobj__185 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__184, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_E_Projects_ARC_editor_Welder_src, __pyx_n_s_del, 758, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__185)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 758; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_PyXAL.pyx":772
 * 
 * 
 *     def isXALInitialized(self):             # <<<<<<<<<<<<<<
 *         '''
 *         returns true if the C++ side of the interface to XAL exists
 */
  __pyx_tuple__186 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__186)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 772; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__186);
  __Pyx_GIVEREF(__pyx_tuple__186);
  __pyx_codeobj__187 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__186, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_E_Projects_ARC_editor_Welder_src, __pyx_n_s_isXALInitialized, 772, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__187)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 772; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_PyXAL.pyx":781
 *             return False
 * 
 *     def getGain(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: float the current gain of the player (also knows as volume)
 */
  __pyx_tuple__188 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__188)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 781; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__188);
  __Pyx_GIVEREF(__pyx_tuple__188);
  __pyx_codeobj__189 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__188, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_E_Projects_ARC_editor_Welder_src, __pyx_n_s_getGain, 781, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__189)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 781; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_PyXAL.pyx":791
 *         return self._wrapper.getGain()
 * 
 *     def setGain(self, float value):             # <<<<<<<<<<<<<<
 *         '''
 *         set the gain of the player (also knows as volume)
 */
  __pyx_tuple__190 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_value); if (unlikely(!__pyx_tuple__190)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 791; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__190);
  __Pyx_GIVEREF(__pyx_tuple__190);
  __pyx_codeobj__191 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__190, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_E_Projects_ARC_editor_Welder_src, __pyx_n_s_setGain, 791, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__191)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 791; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_PyXAL.pyx":802
 *         self._wrapper.setGain(value)
 * 
 *     def getPitch(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: float the current pitch of the player
 */
  __pyx_tuple__192 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__192)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 802; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__192);
  __Pyx_GIVEREF(__pyx_tuple__192);
  __pyx_codeobj__193 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__192, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_E_Projects_ARC_editor_Welder_src, __pyx_n_s_getPitch, 802, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__193)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 802; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_PyXAL.pyx":812
 *         return self._wrapper.getPitch()
 * 
 *     def setPitch(self, float value):             # <<<<<<<<<<<<<<
 *         '''
 *         set the current pitch of the player
 */
  __pyx_tuple__194 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_value); if (unlikely(!__pyx_tuple__194)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 812; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__194);
  __Pyx_GIVEREF(__pyx_tuple__194);
  __pyx_codeobj__195 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__194, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_E_Projects_ARC_editor_Welder_src, __pyx_n_s_setPitch, 812, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__195)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 812; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_PyXAL.pyx":823
 *         self._wrapper.setPitch(value)
 * 
 *     def getSound(self):             # <<<<<<<<<<<<<<
 *         '''
 *         return a PySound class wrapper for the sound object of the player
 */
  __pyx_tuple__196 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__196)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 823; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__196);
  __Pyx_GIVEREF(__pyx_tuple__196);
  __pyx_codeobj__197 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__196, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_E_Projects_ARC_editor_Welder_src, __pyx_n_s_getSound, 823, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__197)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 823; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_PyXAL.pyx":829
 *         return self._sound
 * 
 *     def getName(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: returns the string name of the sound. it is normal the full path of teh sound file with out the file extention
 */
  __pyx_tuple__198 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__198)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 829; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__198);
  __Pyx_GIVEREF(__pyx_tuple__198);
  __pyx_codeobj__199 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__198, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_E_Projects_ARC_editor_Welder_src, __pyx_n_s_getName, 829, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__199)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 829; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_PyXAL.pyx":839
 *         return self._wrapper.getName()
 * 
 *     def getFilename(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: returns a string containing the file name the sound was loaded from
 */
  __pyx_tuple__200 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__200)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 839; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__200);
  __Pyx_GIVEREF(__pyx_tuple__200);
  __pyx_codeobj__201 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__200, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_E_Projects_ARC_editor_Welder_src, __pyx_n_s_getFilename, 839, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__201)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 839; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_PyXAL.pyx":849
 *         return self._wrapper.getFilename()
 * 
 *     def getRealFilename(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: returns a string with the full path to the file the string was loaded from
 */
  __pyx_tuple__202 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__202)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 849; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__202);
  __Pyx_GIVEREF(__pyx_tuple__202);
  __pyx_codeobj__203 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__202, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_E_Projects_ARC_editor_Welder_src, __pyx_n_s_getRealFilename, 849, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__203)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 849; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_PyXAL.pyx":859
 *         return self._wrapper.getRealFilename()
 * 
 *     def getDuration(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: float duration of the sound in seconds. it is a floating point number to acound for fractions of a second
 */
  __pyx_tuple__204 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__204)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 859; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__204);
  __Pyx_GIVEREF(__pyx_tuple__204);
  __pyx_codeobj__205 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__204, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_E_Projects_ARC_editor_Welder_src, __pyx_n_s_getDuration, 859, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__205)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 859; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_PyXAL.pyx":869
 *         return self._wrapper.getDuration()
 * 
 *     def getSize(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: int the size of the sound data in bits not bytes
 */
  __pyx_tuple__206 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__206)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 869; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__206);
  __Pyx_GIVEREF(__pyx_tuple__206);
  __pyx_codeobj__207 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__206, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_E_Projects_ARC_editor_Welder_src, __pyx_n_s_getSize, 869, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__207)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 869; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_PyXAL.pyx":879
 *         return self._wrapper.getSize()
 * 
 *     def getTimePosition(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: float the time position in seconds
 */
  __pyx_tuple__208 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__208)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 879; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__208);
  __Pyx_GIVEREF(__pyx_tuple__208);
  __pyx_codeobj__209 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__208, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_E_Projects_ARC_editor_Welder_src, __pyx_n_s_getTimePosition, 879, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__209)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 879; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_PyXAL.pyx":889
 *         return self._wrapper.getTimePosition()
 * 
 *     def getSamplePosition(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: unsigned int the position in the buffer
 */
  __pyx_tuple__210 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__210)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 889; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__210);
  __Pyx_GIVEREF(__pyx_tuple__210);
  __pyx_codeobj__211 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__210, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_E_Projects_ARC_editor_Welder_src, __pyx_n_s_getSamplePosition, 889, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__211)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 889; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_PyXAL.pyx":899
 *         return self._wrapper.getSamplePosition()
 * 
 *     def isPlaying(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: bool True of the sound is playing
 */
  __pyx_tuple__212 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__212)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 899; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__212);
  __Pyx_GIVEREF(__pyx_tuple__212);
  __pyx_codeobj__213 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__212, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_E_Projects_ARC_editor_Welder_src, __pyx_n_s_isPlaying, 899, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__213)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 899; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_PyXAL.pyx":909
 *         return self._wrapper.isPlaying()
 * 
 *     def isPaused(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: bool True if the sound is paused
 */
  __pyx_tuple__214 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__214)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 909; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__214);
  __Pyx_GIVEREF(__pyx_tuple__214);
  __pyx_codeobj__215 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__214, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_E_Projects_ARC_editor_Welder_src, __pyx_n_s_isPaused, 909, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__215)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 909; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_PyXAL.pyx":919
 *         return self._wrapper.isPaused()
 * 
 *     def isFading(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: bool True if the sound is fading in or out
 */
  __pyx_tuple__216 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__216)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 919; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__216);
  __Pyx_GIVEREF(__pyx_tuple__216);
  __pyx_codeobj__217 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__216, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_E_Projects_ARC_editor_Welder_src, __pyx_n_s_isFading, 919, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__217)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 919; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_PyXAL.pyx":929
 *         return self._wrapper.isFading()
 * 
 *     def isFadingIn(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: bool True if the sound is fading in
 */
  __pyx_tuple__218 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__218)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 929; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__218);
  __Pyx_GIVEREF(__pyx_tuple__218);
  __pyx_codeobj__219 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__218, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_E_Projects_ARC_editor_Welder_src, __pyx_n_s_isFadingIn, 929, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__219)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 929; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_PyXAL.pyx":939
 *         return self._wrapper.isFadingIn()
 * 
 *     def isFadingOut(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: bool True if teh sound is fading out
 */
  __pyx_tuple__220 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__220)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 939; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__220);
  __Pyx_GIVEREF(__pyx_tuple__220);
  __pyx_codeobj__221 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__220, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_E_Projects_ARC_editor_Welder_src, __pyx_n_s_isFadingOut, 939, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__221)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 939; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_PyXAL.pyx":949
 *         return self._wrapper.isFadingOut()
 * 
 *     def isLooping(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: bool True of the sound is looping
 */
  __pyx_tuple__222 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__222)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 949; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__222);
  __Pyx_GIVEREF(__pyx_tuple__222);
  __pyx_codeobj__223 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__222, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_E_Projects_ARC_editor_Welder_src, __pyx_n_s_isLooping, 949, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__223)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 949; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_PyXAL.pyx":959
 *         return self._wrapper.isLooping()
 * 
 *     def play(self, float fadeTime = 0.0, bool looping = False):             # <<<<<<<<<<<<<<
 *         '''
 *         start the sound playing at it's current offset, the offset starts at 0.0 when teh sound is first loaded
 */
  __pyx_tuple__224 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_fadeTime, __pyx_n_s_looping); if (unlikely(!__pyx_tuple__224)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 959; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__224);
  __Pyx_GIVEREF(__pyx_tuple__224);
  __pyx_codeobj__225 = (PyObject*)__Pyx_PyCode_New(3, 0, 3, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__224, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_E_Projects_ARC_editor_Welder_src, __pyx_n_s_play, 959, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__225)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 959; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_PyXAL.pyx":972
 *         self._wrapper.play(fadeTime, looping)
 * 
 *     def stop(self, float fadeTime = 0.0):             # <<<<<<<<<<<<<<
 *         '''
 *         stop the sound playing and rest set it's offset to 0.0
 */
  __pyx_tuple__226 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_fadeTime); if (unlikely(!__pyx_tuple__226)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 972; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__226);
  __Pyx_GIVEREF(__pyx_tuple__226);
  __pyx_codeobj__227 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__226, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_E_Projects_ARC_editor_Welder_src, __pyx_n_s_stop, 972, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__227)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 972; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_PyXAL.pyx":984
 *         self._wrapper.stop(fadeTime)
 * 
 *     def pause(self, float fadeTime = 0.0):             # <<<<<<<<<<<<<<
 *         '''
 *         stop the sound playing keeping the current offset of the sound
 */
  __pyx_tuple__228 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_fadeTime); if (unlikely(!__pyx_tuple__228)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 984; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__228);
  __Pyx_GIVEREF(__pyx_tuple__228);
  __pyx_codeobj__229 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__228, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_E_Projects_ARC_editor_Welder_src, __pyx_n_s_pause, 984, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__229)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 984; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_PyXAL.pyx":1073
 *     _wrapper = None
 * 
 *     def __init__(self, int backendId, bint threaded = False):             # <<<<<<<<<<<<<<
 *         '''
 *         sets up the interface and initializes XAL you SHOULD NOT BE CREATING THIS CLASS YOUR SELF call PyXAL.Init and use the object created at PyXAL.Mgr
 */
  __pyx_tuple__230 = PyTuple_Pack(4, __pyx_n_s_self, __pyx_n_s_backendId, __pyx_n_s_threaded, __pyx_n_s_wrapper_2); if (unlikely(!__pyx_tuple__230)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1073; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__230);
  __Pyx_GIVEREF(__pyx_tuple__230);
  __pyx_codeobj__231 = (PyObject*)__Pyx_PyCode_New(3, 0, 4, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__230, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_E_Projects_ARC_editor_Welder_src, __pyx_n_s_init, 1073, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__231)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1073; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_PyXAL.pyx":1088
 *         self._players = {}
 * 
 *     def isXALInitialized(self):             # <<<<<<<<<<<<<<
 *         '''
 *         returns true if the C++ side of the interface to XAL exists
 */
  __pyx_tuple__232 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__232)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1088; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__232);
  __Pyx_GIVEREF(__pyx_tuple__232);
  __pyx_codeobj__233 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__232, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_E_Projects_ARC_editor_Welder_src, __pyx_n_s_isXALInitialized, 1088, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__233)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1088; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_PyXAL.pyx":1097
 *             return False
 * 
 *     def __del__(self):             # <<<<<<<<<<<<<<
 *         '''
 *         make sure XAL is destroyed if the interface is destroyed
 */
  __pyx_tuple__234 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__234)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1097; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__234);
  __Pyx_GIVEREF(__pyx_tuple__234);
  __pyx_codeobj__235 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__234, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_E_Projects_ARC_editor_Welder_src, __pyx_n_s_del, 1097, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__235)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1097; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_PyXAL.pyx":1104
 *         del self._wrapper
 * 
 *     def clear(self):             # <<<<<<<<<<<<<<
 *         '''
 *         clear the XAL interface and reset it to be like it was freshly initialized all current sounds and players become invalid
 */
  __pyx_tuple__236 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_fade); if (unlikely(!__pyx_tuple__236)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1104; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__236);
  __Pyx_GIVEREF(__pyx_tuple__236);
  __pyx_codeobj__237 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__236, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_E_Projects_ARC_editor_Welder_src, __pyx_n_s_clear, 1104, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__237)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1104; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_PyXAL.pyx":1114
 *             XAL.mgr.clear()
 * 
 *     def createSound(self, filename):             # <<<<<<<<<<<<<<
 *         '''
 *         create a sound object
 */
  __pyx_tuple__238 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_filename, __pyx_n_s_pysound); if (unlikely(!__pyx_tuple__238)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1114; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__238);
  __Pyx_GIVEREF(__pyx_tuple__238);
  __pyx_codeobj__239 = (PyObject*)__Pyx_PyCode_New(2, 0, 3, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__238, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_E_Projects_ARC_editor_Welder_src, __pyx_n_s_createSound, 1114, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__239)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1114; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_PyXAL.pyx":1127
 *         return pysound
 * 
 *     def createPlayer(self, sound):             # <<<<<<<<<<<<<<
 *         '''
 *         create a player from a sound object
 */
  __pyx_tuple__240 = PyTuple_Pack(4, __pyx_n_s_self, __pyx_n_s_sound, __pyx_n_s_sound_name, __pyx_n_s_pyplayer); if (unlikely(!__pyx_tuple__240)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1127; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__240);
  __Pyx_GIVEREF(__pyx_tuple__240);
  __pyx_codeobj__241 = (PyObject*)__Pyx_PyCode_New(2, 0, 4, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__240, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_E_Projects_ARC_editor_Welder_src, __pyx_n_s_createPlayer, 1127, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__241)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1127; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_PyXAL.pyx":1146
 *         return pyplayer
 * 
 *     def destroyPlayer(self, player):             # <<<<<<<<<<<<<<
 *         '''
 *         destroy a player object
 */
  __pyx_tuple__242 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_player_2, __pyx_n_s_name); if (unlikely(!__pyx_tuple__242)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1146; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__242);
  __Pyx_GIVEREF(__pyx_tuple__242);
  __pyx_codeobj__243 = (PyObject*)__Pyx_PyCode_New(2, 0, 3, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__242, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_E_Projects_ARC_editor_Welder_src, __pyx_n_s_destroyPlayer, 1146, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__243)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1146; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_PyXAL.pyx":1163
 *         player._destroy()
 * 
 *     def destroySound(self, sound):             # <<<<<<<<<<<<<<
 *         '''
 *         destroy a sound object
 */
  __pyx_tuple__244 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_sound); if (unlikely(!__pyx_tuple__244)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1163; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__244);
  __Pyx_GIVEREF(__pyx_tuple__244);
  __pyx_codeobj__245 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__244, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_E_Projects_ARC_editor_Welder_src, __pyx_n_s_destroySound, 1163, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__245)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1163; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_PyXAL.pyx":1176
 *         sound._destroy()
 * 
 *     def findPlayer(self, str name):             # <<<<<<<<<<<<<<
 *         '''
 *         tries to find a player for the sound whos name is passed. it find the player useing the intrealy kept list of wrpaed player instances. returns the first player in the list
 */
  __pyx_tuple__246 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_name); if (unlikely(!__pyx_tuple__246)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1176; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__246);
  __Pyx_GIVEREF(__pyx_tuple__246);
  __pyx_codeobj__247 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__246, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_E_Projects_ARC_editor_Welder_src, __pyx_n_s_findPlayer, 1176, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__247)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1176; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_PyXAL.pyx":1190
 *         return None
 * 
 *     def play(self, name, float fadeTime = 0.0, bool looping = False, float gain = 1.0):             # <<<<<<<<<<<<<<
 *         '''
 *         play the sound identified by the name passed (it must of alrady been created)
 */
  __pyx_tuple__248 = PyTuple_Pack(6, __pyx_n_s_self, __pyx_n_s_name, __pyx_n_s_fadeTime, __pyx_n_s_looping, __pyx_n_s_gain, __pyx_n_s_hl_name); if (unlikely(!__pyx_tuple__248)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1190; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__248);
  __Pyx_GIVEREF(__pyx_tuple__248);
  __pyx_codeobj__249 = (PyObject*)__Pyx_PyCode_New(5, 0, 6, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__248, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_E_Projects_ARC_editor_Welder_src, __pyx_n_s_play, 1190, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__249)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1190; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_PyXAL.pyx":1204
 *         XAL.mgr.play(hl_name, fadeTime, looping, gain)
 * 
 *     def stop(self, name, float fadeTime = 0.0):             # <<<<<<<<<<<<<<
 *         '''
 *         stop playing the sound identifed by the name passed
 */
  __pyx_tuple__250 = PyTuple_Pack(4, __pyx_n_s_self, __pyx_n_s_name, __pyx_n_s_fadeTime, __pyx_n_s_hl_name); if (unlikely(!__pyx_tuple__250)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1204; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__250);
  __Pyx_GIVEREF(__pyx_tuple__250);
  __pyx_codeobj__251 = (PyObject*)__Pyx_PyCode_New(3, 0, 4, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__250, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_E_Projects_ARC_editor_Welder_src, __pyx_n_s_stop, 1204, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__251)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1204; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_PyXAL.pyx":1216
 *         XAL.mgr.stop(hl_name, fadeTime)
 * 
 *     def stopFirst(self, name, float fadeTime = 0.0):             # <<<<<<<<<<<<<<
 *         '''
 *         stop playing the first player of the sound identifed by the name passed
 */
  __pyx_tuple__252 = PyTuple_Pack(4, __pyx_n_s_self, __pyx_n_s_name, __pyx_n_s_fadeTime, __pyx_n_s_hl_name); if (unlikely(!__pyx_tuple__252)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1216; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__252);
  __Pyx_GIVEREF(__pyx_tuple__252);
  __pyx_codeobj__253 = (PyObject*)__Pyx_PyCode_New(3, 0, 4, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__252, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_E_Projects_ARC_editor_Welder_src, __pyx_n_s_stopFirst, 1216, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__253)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1216; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_PyXAL.pyx":1228
 *         XAL.mgr.stopFirst(hl_name, fadeTime)
 * 
 *     def stopAll(self, float fadeTime = 0.0):             # <<<<<<<<<<<<<<
 *         '''
 *         stop playing the all players of the sound identifed by the name passed
 */
  __pyx_tuple__254 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_fadeTime); if (unlikely(!__pyx_tuple__254)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1228; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__254);
  __Pyx_GIVEREF(__pyx_tuple__254);
  __pyx_codeobj__255 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__254, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_E_Projects_ARC_editor_Welder_src, __pyx_n_s_stopAll, 1228, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__255)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1228; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_PyXAL.pyx":1239
 *         XAL.mgr.stopAll(fadeTime)
 * 
 *     def isAnyPlaying(self, name):             # <<<<<<<<<<<<<<
 *         '''
 *         @param name: sting name of sound to check
 */
  __pyx_tuple__256 = PyTuple_Pack(4, __pyx_n_s_self, __pyx_n_s_name, __pyx_n_s_hl_name, __pyx_n_s_result); if (unlikely(!__pyx_tuple__256)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1239; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__256);
  __Pyx_GIVEREF(__pyx_tuple__256);
  __pyx_codeobj__257 = (PyObject*)__Pyx_PyCode_New(2, 0, 4, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__256, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_E_Projects_ARC_editor_Welder_src, __pyx_n_s_isAnyPlaying, 1239, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__257)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1239; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_PyXAL.pyx":1250
 *         return result
 * 
 *     def isAnyFading(self, name):             # <<<<<<<<<<<<<<
 *         '''
 *         @param name: sting name of sound to check
 */
  __pyx_tuple__258 = PyTuple_Pack(4, __pyx_n_s_self, __pyx_n_s_name, __pyx_n_s_hl_name, __pyx_n_s_result); if (unlikely(!__pyx_tuple__258)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1250; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__258);
  __Pyx_GIVEREF(__pyx_tuple__258);
  __pyx_codeobj__259 = (PyObject*)__Pyx_PyCode_New(2, 0, 4, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__258, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_E_Projects_ARC_editor_Welder_src, __pyx_n_s_isAnyFading, 1250, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__259)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1250; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_PyXAL.pyx":1261
 *         return result
 * 
 *     def isAnyFadingIn(self, name):             # <<<<<<<<<<<<<<
 *         '''
 *         @param name: sting name of sound to check
 */
  __pyx_tuple__260 = PyTuple_Pack(4, __pyx_n_s_self, __pyx_n_s_name, __pyx_n_s_hl_name, __pyx_n_s_result); if (unlikely(!__pyx_tuple__260)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1261; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__260);
  __Pyx_GIVEREF(__pyx_tuple__260);
  __pyx_codeobj__261 = (PyObject*)__Pyx_PyCode_New(2, 0, 4, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__260, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_E_Projects_ARC_editor_Welder_src, __pyx_n_s_isAnyFadingIn, 1261, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__261)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1261; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_PyXAL.pyx":1272
 *         return result
 * 
 *     def isAnyFadingOut(self, name):             # <<<<<<<<<<<<<<
 *         '''
 *         @param name: sting name of sound to check
 */
  __pyx_tuple__262 = PyTuple_Pack(4, __pyx_n_s_self, __pyx_n_s_name, __pyx_n_s_hl_name, __pyx_n_s_result); if (unlikely(!__pyx_tuple__262)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1272; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__262);
  __Pyx_GIVEREF(__pyx_tuple__262);
  __pyx_codeobj__263 = (PyObject*)__Pyx_PyCode_New(2, 0, 4, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__262, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_E_Projects_ARC_editor_Welder_src, __pyx_n_s_isAnyFadingOut, 1272, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__263)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1272; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_PyXAL.pyx":1283
 *         return result
 * 
 *     def suspendAudio(self):             # <<<<<<<<<<<<<<
 *         '''
 *         pause all sounds and players
 */
  __pyx_tuple__264 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__264)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1283; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__264);
  __Pyx_GIVEREF(__pyx_tuple__264);
  __pyx_codeobj__265 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__264, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_E_Projects_ARC_editor_Welder_src, __pyx_n_s_suspendAudio, 1283, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__265)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1283; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_PyXAL.pyx":1293
 *         XAL.mgr.suspendAudio()
 * 
 *     def resumeAudio(self):             # <<<<<<<<<<<<<<
 *         '''
 *         resume all sounds and players
 */
  __pyx_tuple__266 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__266)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1293; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__266);
  __Pyx_GIVEREF(__pyx_tuple__266);
  __pyx_codeobj__267 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__266, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_E_Projects_ARC_editor_Welder_src, __pyx_n_s_resumeAudio, 1293, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__267)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1293; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_PyXAL.pyx":1303
 *         XAL.mgr.resumeAudio()
 * 
 * def Init(int backendId, bint threaded = True):             # <<<<<<<<<<<<<<
 *     '''
 *     Setup XAL and create an XALManager interface at PyXAL.Mgr
 */
  __pyx_tuple__268 = PyTuple_Pack(3, __pyx_n_s_backendId, __pyx_n_s_threaded, __pyx_n_s_fade); if (unlikely(!__pyx_tuple__268)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1303; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__268);
  __Pyx_GIVEREF(__pyx_tuple__268);
  __pyx_codeobj__269 = (PyObject*)__Pyx_PyCode_New(2, 0, 3, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__268, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_E_Projects_ARC_editor_Welder_src, __pyx_n_s_Init, 1303, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__269)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1303; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_PyXAL.pyx":1318
 *         Mgr = XALManager(backendId, threaded)
 * 
 * def Destroy():             # <<<<<<<<<<<<<<
 *     '''
 *     Destroy XAL and remove the interface at PyXAL setting it to None
 */
  __pyx_tuple__270 = PyTuple_Pack(1, __pyx_n_s_fade); if (unlikely(!__pyx_tuple__270)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1318; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__270);
  __Pyx_GIVEREF(__pyx_tuple__270);
  __pyx_codeobj__271 = (PyObject*)__Pyx_PyCode_New(0, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__270, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_E_Projects_ARC_editor_Welder_src, __pyx_n_s_Destroy, 1318, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__271)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1318; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  return 0;
  __pyx_L1_error:;
  return -1;
}

#if PY_MAJOR_VERSION < 3
PyMODINIT_FUNC init_PyXAL(void); /*proto*/
PyMODINIT_FUNC init_PyXAL(void)
#else
PyMODINIT_FUNC PyInit__PyXAL(void); /*proto*/
PyMODINIT_FUNC PyInit__PyXAL(void)
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_REFNANNY
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
  if (!__Pyx_RefNanny) {
      PyErr_Clear();
      __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
      if (!__Pyx_RefNanny)
          Py_FatalError("failed to import 'refnanny' module");
  }
  #endif
  __Pyx_RefNannySetupContext("PyMODINIT_FUNC PyInit__PyXAL(void)", 0);
  if ( __Pyx_check_binary_version() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #ifdef __Pyx_CyFunction_USED
  if (__Pyx_CyFunction_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4(__Pyx_NAMESTR("_PyXAL"), __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_NAMESTR(__Pyx_BUILTIN_MODULE_NAME)); if (unlikely(!__pyx_b)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #if CYTHON_COMPILING_IN_PYPY
  Py_INCREF(__pyx_b);
  #endif
  if (__Pyx_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  /*--- Initialize various global constants etc. ---*/
  if (unlikely(__Pyx_InitGlobals() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  if (__pyx_module_is_main__PyXAL) {
    if (__Pyx_SetAttrString(__pyx_m, "__name__", __pyx_n_s_main) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (!PyDict_GetItemString(modules, "_PyXAL")) {
      if (unlikely(PyDict_SetItemString(modules, "_PyXAL", __pyx_m) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (unlikely(__Pyx_InitCachedBuiltins() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Constants init code ---*/
  if (unlikely(__Pyx_InitCachedConstants() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Global init code ---*/
  __pyx_v_6_PyXAL_XAL_AS_DEFAULT = Py_None; Py_INCREF(Py_None);
  __pyx_v_6_PyXAL_XAL_AS_DISABLED = Py_None; Py_INCREF(Py_None);
  __pyx_v_6_PyXAL_XAL_AS_DIRECTSOUND = Py_None; Py_INCREF(Py_None);
  __pyx_v_6_PyXAL_XAL_AS_OPENAL = Py_None; Py_INCREF(Py_None);
  __pyx_v_6_PyXAL_XAL_AS_OPENSLES = Py_None; Py_INCREF(Py_None);
  __pyx_v_6_PyXAL_XAL_AS_SDL = Py_None; Py_INCREF(Py_None);
  __pyx_v_6_PyXAL_XAL_AS_XAUDIO2 = Py_None; Py_INCREF(Py_None);
  __pyx_v_6_PyXAL_XAL_AS_AVFOUNDATION = Py_None; Py_INCREF(Py_None);
  __pyx_v_6_PyXAL_XAL_AS_COREAUDIO = Py_None; Py_INCREF(Py_None);
  /*--- Variable export code ---*/
  /*--- Function export code ---*/
  /*--- Type init code ---*/
  if (PyType_Ready(&__pyx_type_6_PyXAL_PyAudioManager) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 119; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_6_PyXAL_PyAudioManager.tp_print = 0;
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = __Pyx_GetAttrString((PyObject *)&__pyx_type_6_PyXAL_PyAudioManager, "__init__"); if (unlikely(!wrapper)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 119; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_6_PyXAL_14PyAudioManager___init__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_6_PyXAL_14PyAudioManager___init__.doc = __pyx_doc_6_PyXAL_14PyAudioManager___init__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_6_PyXAL_14PyAudioManager___init__;
    }
  }
  #endif
  if (__Pyx_SetAttrString(__pyx_m, "PyAudioManager", (PyObject *)&__pyx_type_6_PyXAL_PyAudioManager) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 119; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_6_PyXAL_PyAudioManager = &__pyx_type_6_PyXAL_PyAudioManager;
  if (PyType_Ready(&__pyx_type_6_PyXAL_SoundWrapper) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 135; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_6_PyXAL_SoundWrapper.tp_print = 0;
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = __Pyx_GetAttrString((PyObject *)&__pyx_type_6_PyXAL_SoundWrapper, "__init__"); if (unlikely(!wrapper)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 135; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_6_PyXAL_12SoundWrapper___init__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_6_PyXAL_12SoundWrapper___init__.doc = __pyx_doc_6_PyXAL_12SoundWrapper___init__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_6_PyXAL_12SoundWrapper___init__;
    }
  }
  #endif
  if (__Pyx_SetAttrString(__pyx_m, "SoundWrapper", (PyObject *)&__pyx_type_6_PyXAL_SoundWrapper) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 135; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_6_PyXAL_SoundWrapper = &__pyx_type_6_PyXAL_SoundWrapper;
  if (PyType_Ready(&__pyx_type_6_PyXAL_PlayerWrapper) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 308; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_6_PyXAL_PlayerWrapper.tp_print = 0;
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = __Pyx_GetAttrString((PyObject *)&__pyx_type_6_PyXAL_PlayerWrapper, "__init__"); if (unlikely(!wrapper)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 308; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_6_PyXAL_13PlayerWrapper___init__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_6_PyXAL_13PlayerWrapper___init__.doc = __pyx_doc_6_PyXAL_13PlayerWrapper___init__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_6_PyXAL_13PlayerWrapper___init__;
    }
  }
  #endif
  if (__Pyx_SetAttrString(__pyx_m, "PlayerWrapper", (PyObject *)&__pyx_type_6_PyXAL_PlayerWrapper) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 308; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_6_PyXAL_PlayerWrapper = &__pyx_type_6_PyXAL_PlayerWrapper;
  if (PyType_Ready(&__pyx_type_6_PyXAL_XALManagerWrapper) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 997; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_6_PyXAL_XALManagerWrapper.tp_print = 0;
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = __Pyx_GetAttrString((PyObject *)&__pyx_type_6_PyXAL_XALManagerWrapper, "__init__"); if (unlikely(!wrapper)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 997; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_6_PyXAL_17XALManagerWrapper___init__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_6_PyXAL_17XALManagerWrapper___init__.doc = __pyx_doc_6_PyXAL_17XALManagerWrapper___init__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_6_PyXAL_17XALManagerWrapper___init__;
    }
  }
  #endif
  if (__Pyx_SetAttrString(__pyx_m, "XALManagerWrapper", (PyObject *)&__pyx_type_6_PyXAL_XALManagerWrapper) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 997; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_6_PyXAL_XALManagerWrapper = &__pyx_type_6_PyXAL_XALManagerWrapper;
  /*--- Type import code ---*/
  /*--- Variable import code ---*/
  /*--- Function import code ---*/
  /*--- Execution code ---*/

  /* "_PyXAL.pyx":8
 * cimport XAL
 * 
 * import os             # <<<<<<<<<<<<<<
 * 
 * cdef XAL_AS_DEFAULT = XAL.AS_DEFAULT
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_os, 0, -1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 8; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_os, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 8; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "_PyXAL.pyx":10
 * import os
 * 
 * cdef XAL_AS_DEFAULT = XAL.AS_DEFAULT             # <<<<<<<<<<<<<<
 * cdef XAL_AS_DISABLED = XAL.AS_DISABLED
 * cdef XAL_AS_DIRECTSOUND = XAL.AS_DIRECTSOUND
 */
  __pyx_t_1 = PyInt_FromLong(xal::AS_DEFAULT); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 10; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_XGOTREF(__pyx_v_6_PyXAL_XAL_AS_DEFAULT);
  __Pyx_DECREF_SET(__pyx_v_6_PyXAL_XAL_AS_DEFAULT, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "_PyXAL.pyx":11
 * 
 * cdef XAL_AS_DEFAULT = XAL.AS_DEFAULT
 * cdef XAL_AS_DISABLED = XAL.AS_DISABLED             # <<<<<<<<<<<<<<
 * cdef XAL_AS_DIRECTSOUND = XAL.AS_DIRECTSOUND
 * cdef XAL_AS_OPENAL = XAL.AS_OPENAL
 */
  __pyx_t_1 = PyInt_FromLong(xal::AS_DISABLED); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 11; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_XGOTREF(__pyx_v_6_PyXAL_XAL_AS_DISABLED);
  __Pyx_DECREF_SET(__pyx_v_6_PyXAL_XAL_AS_DISABLED, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "_PyXAL.pyx":12
 * cdef XAL_AS_DEFAULT = XAL.AS_DEFAULT
 * cdef XAL_AS_DISABLED = XAL.AS_DISABLED
 * cdef XAL_AS_DIRECTSOUND = XAL.AS_DIRECTSOUND             # <<<<<<<<<<<<<<
 * cdef XAL_AS_OPENAL = XAL.AS_OPENAL
 * cdef XAL_AS_OPENSLES = XAL.AS_OPENSLES
 */
  __pyx_t_1 = PyInt_FromLong(xal::AS_DIRECTSOUND); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 12; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_XGOTREF(__pyx_v_6_PyXAL_XAL_AS_DIRECTSOUND);
  __Pyx_DECREF_SET(__pyx_v_6_PyXAL_XAL_AS_DIRECTSOUND, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "_PyXAL.pyx":13
 * cdef XAL_AS_DISABLED = XAL.AS_DISABLED
 * cdef XAL_AS_DIRECTSOUND = XAL.AS_DIRECTSOUND
 * cdef XAL_AS_OPENAL = XAL.AS_OPENAL             # <<<<<<<<<<<<<<
 * cdef XAL_AS_OPENSLES = XAL.AS_OPENSLES
 * cdef XAL_AS_SDL = XAL.AS_SDL
 */
  __pyx_t_1 = PyInt_FromLong(xal::AS_OPENAL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 13; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_XGOTREF(__pyx_v_6_PyXAL_XAL_AS_OPENAL);
  __Pyx_DECREF_SET(__pyx_v_6_PyXAL_XAL_AS_OPENAL, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "_PyXAL.pyx":14
 * cdef XAL_AS_DIRECTSOUND = XAL.AS_DIRECTSOUND
 * cdef XAL_AS_OPENAL = XAL.AS_OPENAL
 * cdef XAL_AS_OPENSLES = XAL.AS_OPENSLES             # <<<<<<<<<<<<<<
 * cdef XAL_AS_SDL = XAL.AS_SDL
 * cdef XAL_AS_XAUDIO2 = XAL.AS_XAUDIO2
 */
  __pyx_t_1 = PyInt_FromLong(xal::AS_OPENSLES); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 14; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_XGOTREF(__pyx_v_6_PyXAL_XAL_AS_OPENSLES);
  __Pyx_DECREF_SET(__pyx_v_6_PyXAL_XAL_AS_OPENSLES, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "_PyXAL.pyx":15
 * cdef XAL_AS_OPENAL = XAL.AS_OPENAL
 * cdef XAL_AS_OPENSLES = XAL.AS_OPENSLES
 * cdef XAL_AS_SDL = XAL.AS_SDL             # <<<<<<<<<<<<<<
 * cdef XAL_AS_XAUDIO2 = XAL.AS_XAUDIO2
 * cdef XAL_AS_AVFOUNDATION = XAL.AS_AVFOUNDATION
 */
  __pyx_t_1 = PyInt_FromLong(xal::AS_SDL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 15; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_XGOTREF(__pyx_v_6_PyXAL_XAL_AS_SDL);
  __Pyx_DECREF_SET(__pyx_v_6_PyXAL_XAL_AS_SDL, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "_PyXAL.pyx":16
 * cdef XAL_AS_OPENSLES = XAL.AS_OPENSLES
 * cdef XAL_AS_SDL = XAL.AS_SDL
 * cdef XAL_AS_XAUDIO2 = XAL.AS_XAUDIO2             # <<<<<<<<<<<<<<
 * cdef XAL_AS_AVFOUNDATION = XAL.AS_AVFOUNDATION
 * cdef XAL_AS_COREAUDIO = XAL.AS_COREAUDIO
 */
  __pyx_t_1 = PyInt_FromLong(xal::AS_XAUDIO2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 16; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_XGOTREF(__pyx_v_6_PyXAL_XAL_AS_XAUDIO2);
  __Pyx_DECREF_SET(__pyx_v_6_PyXAL_XAL_AS_XAUDIO2, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "_PyXAL.pyx":17
 * cdef XAL_AS_SDL = XAL.AS_SDL
 * cdef XAL_AS_XAUDIO2 = XAL.AS_XAUDIO2
 * cdef XAL_AS_AVFOUNDATION = XAL.AS_AVFOUNDATION             # <<<<<<<<<<<<<<
 * cdef XAL_AS_COREAUDIO = XAL.AS_COREAUDIO
 * 
 */
  __pyx_t_1 = PyInt_FromLong(xal::AS_AVFOUNDATION); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 17; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_XGOTREF(__pyx_v_6_PyXAL_XAL_AS_AVFOUNDATION);
  __Pyx_DECREF_SET(__pyx_v_6_PyXAL_XAL_AS_AVFOUNDATION, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "_PyXAL.pyx":18
 * cdef XAL_AS_XAUDIO2 = XAL.AS_XAUDIO2
 * cdef XAL_AS_AVFOUNDATION = XAL.AS_AVFOUNDATION
 * cdef XAL_AS_COREAUDIO = XAL.AS_COREAUDIO             # <<<<<<<<<<<<<<
 * 
 * cdef XAL.BufferMode FULL = XAL.FULL
 */
  __pyx_t_1 = PyInt_FromLong(xal::AS_COREAUDIO); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 18; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_XGOTREF(__pyx_v_6_PyXAL_XAL_AS_COREAUDIO);
  __Pyx_DECREF_SET(__pyx_v_6_PyXAL_XAL_AS_COREAUDIO, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "_PyXAL.pyx":20
 * cdef XAL_AS_COREAUDIO = XAL.AS_COREAUDIO
 * 
 * cdef XAL.BufferMode FULL = XAL.FULL             # <<<<<<<<<<<<<<
 * cdef XAL.BufferMode LAZY = XAL.LAZY
 * cdef XAL.BufferMode MANAGED = XAL.MANAGED
 */
  __pyx_v_6_PyXAL_FULL = xal::FULL;

  /* "_PyXAL.pyx":21
 * 
 * cdef XAL.BufferMode FULL = XAL.FULL
 * cdef XAL.BufferMode LAZY = XAL.LAZY             # <<<<<<<<<<<<<<
 * cdef XAL.BufferMode MANAGED = XAL.MANAGED
 * cdef XAL.BufferMode ON_DEMAND = XAL.ON_DEMAND
 */
  __pyx_v_6_PyXAL_LAZY = xal::LAZY;

  /* "_PyXAL.pyx":22
 * cdef XAL.BufferMode FULL = XAL.FULL
 * cdef XAL.BufferMode LAZY = XAL.LAZY
 * cdef XAL.BufferMode MANAGED = XAL.MANAGED             # <<<<<<<<<<<<<<
 * cdef XAL.BufferMode ON_DEMAND = XAL.ON_DEMAND
 * cdef XAL.BufferMode STREAMED = XAL.STREAMED
 */
  __pyx_v_6_PyXAL_MANAGED = xal::MANAGED;

  /* "_PyXAL.pyx":23
 * cdef XAL.BufferMode LAZY = XAL.LAZY
 * cdef XAL.BufferMode MANAGED = XAL.MANAGED
 * cdef XAL.BufferMode ON_DEMAND = XAL.ON_DEMAND             # <<<<<<<<<<<<<<
 * cdef XAL.BufferMode STREAMED = XAL.STREAMED
 * 
 */
  __pyx_v_6_PyXAL_ON_DEMAND = xal::ON_DEMAND;

  /* "_PyXAL.pyx":24
 * cdef XAL.BufferMode MANAGED = XAL.MANAGED
 * cdef XAL.BufferMode ON_DEMAND = XAL.ON_DEMAND
 * cdef XAL.BufferMode STREAMED = XAL.STREAMED             # <<<<<<<<<<<<<<
 * 
 * cdef XAL.SourceMode DISK = XAL.DISK
 */
  __pyx_v_6_PyXAL_STREAMED = xal::STREAMED;

  /* "_PyXAL.pyx":26
 * cdef XAL.BufferMode STREAMED = XAL.STREAMED
 * 
 * cdef XAL.SourceMode DISK = XAL.DISK             # <<<<<<<<<<<<<<
 * cdef XAL.SourceMode RAM = XAL.RAM
 * 
 */
  __pyx_v_6_PyXAL_DISK = xal::DISK;

  /* "_PyXAL.pyx":27
 * 
 * cdef XAL.SourceMode DISK = XAL.DISK
 * cdef XAL.SourceMode RAM = XAL.RAM             # <<<<<<<<<<<<<<
 * 
 * cdef XAL.Format FLAC = XAL.FLAC
 */
  __pyx_v_6_PyXAL_RAM = xal::RAM;

  /* "_PyXAL.pyx":29
 * cdef XAL.SourceMode RAM = XAL.RAM
 * 
 * cdef XAL.Format FLAC = XAL.FLAC             # <<<<<<<<<<<<<<
 * cdef XAL.Format M4A = XAL.M4A
 * cdef XAL.Format OGG = XAL.OGG
 */
  __pyx_v_6_PyXAL_FLAC = xal::FLAC;

  /* "_PyXAL.pyx":30
 * 
 * cdef XAL.Format FLAC = XAL.FLAC
 * cdef XAL.Format M4A = XAL.M4A             # <<<<<<<<<<<<<<
 * cdef XAL.Format OGG = XAL.OGG
 * cdef XAL.Format SPX = XAL.SPX
 */
  __pyx_v_6_PyXAL_M4A = xal::M4A;

  /* "_PyXAL.pyx":31
 * cdef XAL.Format FLAC = XAL.FLAC
 * cdef XAL.Format M4A = XAL.M4A
 * cdef XAL.Format OGG = XAL.OGG             # <<<<<<<<<<<<<<
 * cdef XAL.Format SPX = XAL.SPX
 * cdef XAL.Format WAV = XAL.WAV
 */
  __pyx_v_6_PyXAL_OGG = xal::OGG;

  /* "_PyXAL.pyx":32
 * cdef XAL.Format M4A = XAL.M4A
 * cdef XAL.Format OGG = XAL.OGG
 * cdef XAL.Format SPX = XAL.SPX             # <<<<<<<<<<<<<<
 * cdef XAL.Format WAV = XAL.WAV
 * cdef XAL.Format UNKNOWN = XAL.UNKNOWN
 */
  __pyx_v_6_PyXAL_SPX = xal::SPX;

  /* "_PyXAL.pyx":33
 * cdef XAL.Format OGG = XAL.OGG
 * cdef XAL.Format SPX = XAL.SPX
 * cdef XAL.Format WAV = XAL.WAV             # <<<<<<<<<<<<<<
 * cdef XAL.Format UNKNOWN = XAL.UNKNOWN
 * 
 */
  __pyx_v_6_PyXAL_WAV = xal::WAV;

  /* "_PyXAL.pyx":34
 * cdef XAL.Format SPX = XAL.SPX
 * cdef XAL.Format WAV = XAL.WAV
 * cdef XAL.Format UNKNOWN = XAL.UNKNOWN             # <<<<<<<<<<<<<<
 * 
 * cdef extern from *:
 */
  __pyx_v_6_PyXAL_UNKNOWN = xal::UNKNOWN;

  /* "_PyXAL.pyx":104
 * # XAL.setLogFunction(Log)
 * 
 * Mgr = None             # <<<<<<<<<<<<<<
 * 
 * cdef hstr Py_to_Hstr (string):
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Mgr, Py_None) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 104; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_PyXAL.pyx":564
 * 
 * 
 * class PySound(object):             # <<<<<<<<<<<<<<
 *     '''
 *     a interface for the wrapper of the xal::Sound class
 */
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 564; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_builtin_object);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_builtin_object);
  __Pyx_GIVEREF(__pyx_builtin_object);
  __pyx_t_2 = __Pyx_CalculateMetaclass(NULL, __pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 564; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_Py3MetaclassPrepare(__pyx_t_2, __pyx_t_1, __pyx_n_s_PySound, __pyx_n_s_PySound, (PyObject *) NULL, __pyx_n_s_PyXAL, __pyx_kp_s_a_interface_for_the_wrapper_of); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 564; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);

  /* "_PyXAL.pyx":569
 *     '''
 * 
 *     CATEGORY_STR = "default"             # <<<<<<<<<<<<<<
 *     _wrapper = None
 *     destroyed = False
 */
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_CATEGORY_STR, __pyx_n_s_default) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 569; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_PyXAL.pyx":570
 * 
 *     CATEGORY_STR = "default"
 *     _wrapper = None             # <<<<<<<<<<<<<<
 *     destroyed = False
 * 
 */
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_wrapper, Py_None) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 570; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_PyXAL.pyx":571
 *     CATEGORY_STR = "default"
 *     _wrapper = None
 *     destroyed = False             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, filename):
 */
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_destroyed, Py_False) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 571; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_PyXAL.pyx":573
 *     destroyed = False
 * 
 *     def __init__(self, filename):             # <<<<<<<<<<<<<<
 *         '''
 *         this creates a sound object from a file name
 */
  __pyx_t_4 = __Pyx_CyFunction_NewEx(&__pyx_mdef_6_PyXAL_7PySound_1__init__, 0, __pyx_n_s_PySound___init, NULL, __pyx_n_s_PyXAL, PyModule_GetDict(__pyx_m), ((PyObject *)__pyx_codeobj__151)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 573; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_init, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 573; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "_PyXAL.pyx":592
 *         self._wrapper = wrapper
 * 
 *     def _destroy(self):             # <<<<<<<<<<<<<<
 *         if self.isXALInitialized() and not self.destroyed:
 *             self._wrapper._destroy()
 */
  __pyx_t_4 = __Pyx_CyFunction_NewEx(&__pyx_mdef_6_PyXAL_7PySound_3_destroy, 0, __pyx_n_s_PySound__destroy, NULL, __pyx_n_s_PyXAL, PyModule_GetDict(__pyx_m), ((PyObject *)__pyx_codeobj__153)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 592; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_destroy, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 592; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "_PyXAL.pyx":597
 *             self.destroyed = True
 * 
 *     def __del__(self):             # <<<<<<<<<<<<<<
 *         if self.isXALInitialized():
 *             self._destroy()
 */
  __pyx_t_4 = __Pyx_CyFunction_NewEx(&__pyx_mdef_6_PyXAL_7PySound_5__del__, 0, __pyx_n_s_PySound___del, NULL, __pyx_n_s_PyXAL, PyModule_GetDict(__pyx_m), ((PyObject *)__pyx_codeobj__155)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 597; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_del, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 597; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "_PyXAL.pyx":602
 *         del self._wrapper
 * 
 *     def isXALInitialized(self):             # <<<<<<<<<<<<<<
 *         '''
 *         returns true if the C++ side of the interface to XAL exists
 */
  __pyx_t_4 = __Pyx_CyFunction_NewEx(&__pyx_mdef_6_PyXAL_7PySound_7isXALInitialized, 0, __pyx_n_s_PySound_isXALInitialized, NULL, __pyx_n_s_PyXAL, PyModule_GetDict(__pyx_m), ((PyObject *)__pyx_codeobj__157)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 602; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_isXALInitialized, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 602; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "_PyXAL.pyx":611
 *             return False
 * 
 *     def getName(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: returns the string name of the sound. it is normal the full path of teh sound file with out the file extention
 */
  __pyx_t_4 = __Pyx_CyFunction_NewEx(&__pyx_mdef_6_PyXAL_7PySound_9getName, 0, __pyx_n_s_PySound_getName, NULL, __pyx_n_s_PyXAL, PyModule_GetDict(__pyx_m), ((PyObject *)__pyx_codeobj__159)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 611; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_getName, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 611; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "_PyXAL.pyx":621
 *         return self._wrapper.getName()
 * 
 *     def getFilename(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: returns a string containing the file name the sound was loaded from
 */
  __pyx_t_4 = __Pyx_CyFunction_NewEx(&__pyx_mdef_6_PyXAL_7PySound_11getFilename, 0, __pyx_n_s_PySound_getFilename, NULL, __pyx_n_s_PyXAL, PyModule_GetDict(__pyx_m), ((PyObject *)__pyx_codeobj__161)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 621; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_getFilename, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 621; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "_PyXAL.pyx":631
 *         return self._wrapper.getFilename()
 * 
 *     def getRealFilename(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: returns a string with the full path to the file the string was loaded from
 */
  __pyx_t_4 = __Pyx_CyFunction_NewEx(&__pyx_mdef_6_PyXAL_7PySound_13getRealFilename, 0, __pyx_n_s_PySound_getRealFilename, NULL, __pyx_n_s_PyXAL, PyModule_GetDict(__pyx_m), ((PyObject *)__pyx_codeobj__163)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 631; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_getRealFilename, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 631; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "_PyXAL.pyx":641
 *         return self._wrapper.getRealFilename()
 * 
 *     def getSize(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: int the size of the sound data in bits not bytes
 */
  __pyx_t_4 = __Pyx_CyFunction_NewEx(&__pyx_mdef_6_PyXAL_7PySound_15getSize, 0, __pyx_n_s_PySound_getSize, NULL, __pyx_n_s_PyXAL, PyModule_GetDict(__pyx_m), ((PyObject *)__pyx_codeobj__165)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 641; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_getSize, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 641; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "_PyXAL.pyx":651
 *         return self._wrapper.getSize()
 * 
 *     def getChannels(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: int number of channels the sound has. 1 for mono or 2 for stereo
 */
  __pyx_t_4 = __Pyx_CyFunction_NewEx(&__pyx_mdef_6_PyXAL_7PySound_17getChannels, 0, __pyx_n_s_PySound_getChannels, NULL, __pyx_n_s_PyXAL, PyModule_GetDict(__pyx_m), ((PyObject *)__pyx_codeobj__167)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 651; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_getChannels, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 651; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "_PyXAL.pyx":661
 *         return self._wrapper.getChannels()
 * 
 *     def getSamplingRate(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: int the sampeling rate for the sound in samples per second
 */
  __pyx_t_4 = __Pyx_CyFunction_NewEx(&__pyx_mdef_6_PyXAL_7PySound_19getSamplingRate, 0, __pyx_n_s_PySound_getSamplingRate, NULL, __pyx_n_s_PyXAL, PyModule_GetDict(__pyx_m), ((PyObject *)__pyx_codeobj__169)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 661; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_getSamplingRate, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 661; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "_PyXAL.pyx":671
 *         return self._wrapper.getSamplingRate()
 * 
 *     def getBitsPerSample(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: int the bits per sample of data in the sound. usualy 8, 16, or 24, possibly 32 not sure
 */
  __pyx_t_4 = __Pyx_CyFunction_NewEx(&__pyx_mdef_6_PyXAL_7PySound_21getBitsPerSample, 0, __pyx_n_s_PySound_getBitsPerSample, NULL, __pyx_n_s_PyXAL, PyModule_GetDict(__pyx_m), ((PyObject *)__pyx_codeobj__171)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 671; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_getBitsPerSample, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 671; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "_PyXAL.pyx":681
 *         return self._wrapper.getBitsPerSample()
 * 
 *     def getDuration(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: float duration of the sound in seconds. it is a floating point number to acound for fractions of a second
 */
  __pyx_t_4 = __Pyx_CyFunction_NewEx(&__pyx_mdef_6_PyXAL_7PySound_23getDuration, 0, __pyx_n_s_PySound_getDuration, NULL, __pyx_n_s_PyXAL, PyModule_GetDict(__pyx_m), ((PyObject *)__pyx_codeobj__173)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 681; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_getDuration, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 681; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "_PyXAL.pyx":691
 *         return self._wrapper.getDuration()
 * 
 *     def getFormat(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: int the intrnal designation of the sound format. coresponds to a file type but as of now there is no way to tell for certin which is which
 */
  __pyx_t_4 = __Pyx_CyFunction_NewEx(&__pyx_mdef_6_PyXAL_7PySound_25getFormat, 0, __pyx_n_s_PySound_getFormat, NULL, __pyx_n_s_PyXAL, PyModule_GetDict(__pyx_m), ((PyObject *)__pyx_codeobj__175)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 691; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_getFormat, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 691; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "_PyXAL.pyx":702
 *         return self._wrapper.getFormat()
 * 
 *     def isStreamed(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: bool is the sound being streamed from it's file to the player? or is it comleatly loaded into memory.
 */
  __pyx_t_4 = __Pyx_CyFunction_NewEx(&__pyx_mdef_6_PyXAL_7PySound_27isStreamed, 0, __pyx_n_s_PySound_isStreamed, NULL, __pyx_n_s_PyXAL, PyModule_GetDict(__pyx_m), ((PyObject *)__pyx_codeobj__177)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 702; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_isStreamed, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 702; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "_PyXAL.pyx":713
 *         return self._wrapper.isStreamed()
 * 
 *     def readPcmData(self):             # <<<<<<<<<<<<<<
 *         '''
 *         read the raw data of the sound and return it the format of said data can be determined from the size, chanels, bits per sample and sampleling rate of the sound
 */
  __pyx_t_4 = __Pyx_CyFunction_NewEx(&__pyx_mdef_6_PyXAL_7PySound_29readPcmData, 0, __pyx_n_s_PySound_readPcmData, NULL, __pyx_n_s_PyXAL, PyModule_GetDict(__pyx_m), ((PyObject *)__pyx_codeobj__179)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 713; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_readPcmData, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 713; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "_PyXAL.pyx":564
 * 
 * 
 * class PySound(object):             # <<<<<<<<<<<<<<
 *     '''
 *     a interface for the wrapper of the xal::Sound class
 */
  __pyx_t_4 = __Pyx_Py3ClassCreate(__pyx_t_2, __pyx_n_s_PySound, __pyx_t_1, __pyx_t_3, NULL, 0, 1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 564; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_PySound, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 564; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "_PyXAL.pyx":724
 *         return self._wrapper.readPcmData()
 * 
 * class PyPlayer(object):             # <<<<<<<<<<<<<<
 *     '''
 *     a interface for the C++ wrapper
 */
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 724; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_builtin_object);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_builtin_object);
  __Pyx_GIVEREF(__pyx_builtin_object);
  __pyx_t_2 = __Pyx_CalculateMetaclass(NULL, __pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 724; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_Py3MetaclassPrepare(__pyx_t_2, __pyx_t_1, __pyx_n_s_PyPlayer, __pyx_n_s_PyPlayer, (PyObject *) NULL, __pyx_n_s_PyXAL, __pyx_kp_s_a_interface_for_the_C_wrapper); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 724; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);

  /* "_PyXAL.pyx":729
 *     '''
 * 
 *     _wrapper = None             # <<<<<<<<<<<<<<
 *     _sound = None
 *     destroyed = False
 */
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_wrapper, Py_None) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 729; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_PyXAL.pyx":730
 * 
 *     _wrapper = None
 *     _sound = None             # <<<<<<<<<<<<<<
 *     destroyed = False
 * 
 */
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_sound_2, Py_None) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 730; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_PyXAL.pyx":731
 *     _wrapper = None
 *     _sound = None
 *     destroyed = False             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, sound):
 */
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_destroyed, Py_False) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 731; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_PyXAL.pyx":733
 *     destroyed = False
 * 
 *     def __init__(self, sound):             # <<<<<<<<<<<<<<
 *         '''
 *         a PyPlayer object created by bassing a PySound to the __init__ method
 */
  __pyx_t_4 = __Pyx_CyFunction_NewEx(&__pyx_mdef_6_PyXAL_8PyPlayer_1__init__, 0, __pyx_n_s_PyPlayer___init, NULL, __pyx_n_s_PyXAL, PyModule_GetDict(__pyx_m), ((PyObject *)__pyx_codeobj__181)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 733; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_init, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 733; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "_PyXAL.pyx":753
 *         self._sound = sound
 * 
 *     def _destroy(self):             # <<<<<<<<<<<<<<
 *         if self.isXALInitialized() and not self.destroyed:
 *             self._wrapper._destroy()
 */
  __pyx_t_4 = __Pyx_CyFunction_NewEx(&__pyx_mdef_6_PyXAL_8PyPlayer_3_destroy, 0, __pyx_n_s_PyPlayer__destroy, NULL, __pyx_n_s_PyXAL, PyModule_GetDict(__pyx_m), ((PyObject *)__pyx_codeobj__183)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 753; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_destroy, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 753; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "_PyXAL.pyx":758
 *             self.destroyed = True
 * 
 *     def __del__(self):             # <<<<<<<<<<<<<<
 *         global Mgr
 *         if not self.destroyed:
 */
  __pyx_t_4 = __Pyx_CyFunction_NewEx(&__pyx_mdef_6_PyXAL_8PyPlayer_5__del__, 0, __pyx_n_s_PyPlayer___del, NULL, __pyx_n_s_PyXAL, PyModule_GetDict(__pyx_m), ((PyObject *)__pyx_codeobj__185)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 758; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_del, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 758; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "_PyXAL.pyx":772
 * 
 * 
 *     def isXALInitialized(self):             # <<<<<<<<<<<<<<
 *         '''
 *         returns true if the C++ side of the interface to XAL exists
 */
  __pyx_t_4 = __Pyx_CyFunction_NewEx(&__pyx_mdef_6_PyXAL_8PyPlayer_7isXALInitialized, 0, __pyx_n_s_PyPlayer_isXALInitialized, NULL, __pyx_n_s_PyXAL, PyModule_GetDict(__pyx_m), ((PyObject *)__pyx_codeobj__187)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 772; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_isXALInitialized, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 772; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "_PyXAL.pyx":781
 *             return False
 * 
 *     def getGain(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: float the current gain of the player (also knows as volume)
 */
  __pyx_t_4 = __Pyx_CyFunction_NewEx(&__pyx_mdef_6_PyXAL_8PyPlayer_9getGain, 0, __pyx_n_s_PyPlayer_getGain, NULL, __pyx_n_s_PyXAL, PyModule_GetDict(__pyx_m), ((PyObject *)__pyx_codeobj__189)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 781; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_getGain, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 781; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "_PyXAL.pyx":791
 *         return self._wrapper.getGain()
 * 
 *     def setGain(self, float value):             # <<<<<<<<<<<<<<
 *         '''
 *         set the gain of the player (also knows as volume)
 */
  __pyx_t_4 = __Pyx_CyFunction_NewEx(&__pyx_mdef_6_PyXAL_8PyPlayer_11setGain, 0, __pyx_n_s_PyPlayer_setGain, NULL, __pyx_n_s_PyXAL, PyModule_GetDict(__pyx_m), ((PyObject *)__pyx_codeobj__191)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 791; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_setGain, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 791; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "_PyXAL.pyx":802
 *         self._wrapper.setGain(value)
 * 
 *     def getPitch(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: float the current pitch of the player
 */
  __pyx_t_4 = __Pyx_CyFunction_NewEx(&__pyx_mdef_6_PyXAL_8PyPlayer_13getPitch, 0, __pyx_n_s_PyPlayer_getPitch, NULL, __pyx_n_s_PyXAL, PyModule_GetDict(__pyx_m), ((PyObject *)__pyx_codeobj__193)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 802; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_getPitch, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 802; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "_PyXAL.pyx":812
 *         return self._wrapper.getPitch()
 * 
 *     def setPitch(self, float value):             # <<<<<<<<<<<<<<
 *         '''
 *         set the current pitch of the player
 */
  __pyx_t_4 = __Pyx_CyFunction_NewEx(&__pyx_mdef_6_PyXAL_8PyPlayer_15setPitch, 0, __pyx_n_s_PyPlayer_setPitch, NULL, __pyx_n_s_PyXAL, PyModule_GetDict(__pyx_m), ((PyObject *)__pyx_codeobj__195)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 812; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_setPitch, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 812; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "_PyXAL.pyx":823
 *         self._wrapper.setPitch(value)
 * 
 *     def getSound(self):             # <<<<<<<<<<<<<<
 *         '''
 *         return a PySound class wrapper for the sound object of the player
 */
  __pyx_t_4 = __Pyx_CyFunction_NewEx(&__pyx_mdef_6_PyXAL_8PyPlayer_17getSound, 0, __pyx_n_s_PyPlayer_getSound, NULL, __pyx_n_s_PyXAL, PyModule_GetDict(__pyx_m), ((PyObject *)__pyx_codeobj__197)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 823; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_getSound, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 823; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "_PyXAL.pyx":829
 *         return self._sound
 * 
 *     def getName(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: returns the string name of the sound. it is normal the full path of teh sound file with out the file extention
 */
  __pyx_t_4 = __Pyx_CyFunction_NewEx(&__pyx_mdef_6_PyXAL_8PyPlayer_19getName, 0, __pyx_n_s_PyPlayer_getName, NULL, __pyx_n_s_PyXAL, PyModule_GetDict(__pyx_m), ((PyObject *)__pyx_codeobj__199)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 829; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_getName, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 829; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "_PyXAL.pyx":839
 *         return self._wrapper.getName()
 * 
 *     def getFilename(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: returns a string containing the file name the sound was loaded from
 */
  __pyx_t_4 = __Pyx_CyFunction_NewEx(&__pyx_mdef_6_PyXAL_8PyPlayer_21getFilename, 0, __pyx_n_s_PyPlayer_getFilename, NULL, __pyx_n_s_PyXAL, PyModule_GetDict(__pyx_m), ((PyObject *)__pyx_codeobj__201)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 839; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_getFilename, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 839; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "_PyXAL.pyx":849
 *         return self._wrapper.getFilename()
 * 
 *     def getRealFilename(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: returns a string with the full path to the file the string was loaded from
 */
  __pyx_t_4 = __Pyx_CyFunction_NewEx(&__pyx_mdef_6_PyXAL_8PyPlayer_23getRealFilename, 0, __pyx_n_s_PyPlayer_getRealFilename, NULL, __pyx_n_s_PyXAL, PyModule_GetDict(__pyx_m), ((PyObject *)__pyx_codeobj__203)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 849; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_getRealFilename, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 849; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "_PyXAL.pyx":859
 *         return self._wrapper.getRealFilename()
 * 
 *     def getDuration(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: float duration of the sound in seconds. it is a floating point number to acound for fractions of a second
 */
  __pyx_t_4 = __Pyx_CyFunction_NewEx(&__pyx_mdef_6_PyXAL_8PyPlayer_25getDuration, 0, __pyx_n_s_PyPlayer_getDuration, NULL, __pyx_n_s_PyXAL, PyModule_GetDict(__pyx_m), ((PyObject *)__pyx_codeobj__205)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 859; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_getDuration, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 859; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "_PyXAL.pyx":869
 *         return self._wrapper.getDuration()
 * 
 *     def getSize(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: int the size of the sound data in bits not bytes
 */
  __pyx_t_4 = __Pyx_CyFunction_NewEx(&__pyx_mdef_6_PyXAL_8PyPlayer_27getSize, 0, __pyx_n_s_PyPlayer_getSize, NULL, __pyx_n_s_PyXAL, PyModule_GetDict(__pyx_m), ((PyObject *)__pyx_codeobj__207)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 869; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_getSize, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 869; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "_PyXAL.pyx":879
 *         return self._wrapper.getSize()
 * 
 *     def getTimePosition(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: float the time position in seconds
 */
  __pyx_t_4 = __Pyx_CyFunction_NewEx(&__pyx_mdef_6_PyXAL_8PyPlayer_29getTimePosition, 0, __pyx_n_s_PyPlayer_getTimePosition, NULL, __pyx_n_s_PyXAL, PyModule_GetDict(__pyx_m), ((PyObject *)__pyx_codeobj__209)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 879; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_getTimePosition, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 879; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "_PyXAL.pyx":889
 *         return self._wrapper.getTimePosition()
 * 
 *     def getSamplePosition(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: unsigned int the position in the buffer
 */
  __pyx_t_4 = __Pyx_CyFunction_NewEx(&__pyx_mdef_6_PyXAL_8PyPlayer_31getSamplePosition, 0, __pyx_n_s_PyPlayer_getSamplePosition, NULL, __pyx_n_s_PyXAL, PyModule_GetDict(__pyx_m), ((PyObject *)__pyx_codeobj__211)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 889; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_getSamplePosition, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 889; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "_PyXAL.pyx":899
 *         return self._wrapper.getSamplePosition()
 * 
 *     def isPlaying(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: bool True of the sound is playing
 */
  __pyx_t_4 = __Pyx_CyFunction_NewEx(&__pyx_mdef_6_PyXAL_8PyPlayer_33isPlaying, 0, __pyx_n_s_PyPlayer_isPlaying, NULL, __pyx_n_s_PyXAL, PyModule_GetDict(__pyx_m), ((PyObject *)__pyx_codeobj__213)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 899; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_isPlaying, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 899; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "_PyXAL.pyx":909
 *         return self._wrapper.isPlaying()
 * 
 *     def isPaused(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: bool True if the sound is paused
 */
  __pyx_t_4 = __Pyx_CyFunction_NewEx(&__pyx_mdef_6_PyXAL_8PyPlayer_35isPaused, 0, __pyx_n_s_PyPlayer_isPaused, NULL, __pyx_n_s_PyXAL, PyModule_GetDict(__pyx_m), ((PyObject *)__pyx_codeobj__215)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 909; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_isPaused, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 909; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "_PyXAL.pyx":919
 *         return self._wrapper.isPaused()
 * 
 *     def isFading(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: bool True if the sound is fading in or out
 */
  __pyx_t_4 = __Pyx_CyFunction_NewEx(&__pyx_mdef_6_PyXAL_8PyPlayer_37isFading, 0, __pyx_n_s_PyPlayer_isFading, NULL, __pyx_n_s_PyXAL, PyModule_GetDict(__pyx_m), ((PyObject *)__pyx_codeobj__217)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 919; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_isFading, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 919; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "_PyXAL.pyx":929
 *         return self._wrapper.isFading()
 * 
 *     def isFadingIn(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: bool True if the sound is fading in
 */
  __pyx_t_4 = __Pyx_CyFunction_NewEx(&__pyx_mdef_6_PyXAL_8PyPlayer_39isFadingIn, 0, __pyx_n_s_PyPlayer_isFadingIn, NULL, __pyx_n_s_PyXAL, PyModule_GetDict(__pyx_m), ((PyObject *)__pyx_codeobj__219)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 929; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_isFadingIn, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 929; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "_PyXAL.pyx":939
 *         return self._wrapper.isFadingIn()
 * 
 *     def isFadingOut(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: bool True if teh sound is fading out
 */
  __pyx_t_4 = __Pyx_CyFunction_NewEx(&__pyx_mdef_6_PyXAL_8PyPlayer_41isFadingOut, 0, __pyx_n_s_PyPlayer_isFadingOut, NULL, __pyx_n_s_PyXAL, PyModule_GetDict(__pyx_m), ((PyObject *)__pyx_codeobj__221)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 939; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_isFadingOut, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 939; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "_PyXAL.pyx":949
 *         return self._wrapper.isFadingOut()
 * 
 *     def isLooping(self):             # <<<<<<<<<<<<<<
 *         '''
 *         @return: bool True of the sound is looping
 */
  __pyx_t_4 = __Pyx_CyFunction_NewEx(&__pyx_mdef_6_PyXAL_8PyPlayer_43isLooping, 0, __pyx_n_s_PyPlayer_isLooping, NULL, __pyx_n_s_PyXAL, PyModule_GetDict(__pyx_m), ((PyObject *)__pyx_codeobj__223)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 949; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_isLooping, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 949; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "_PyXAL.pyx":959
 *         return self._wrapper.isLooping()
 * 
 *     def play(self, float fadeTime = 0.0, bool looping = False):             # <<<<<<<<<<<<<<
 *         '''
 *         start the sound playing at it's current offset, the offset starts at 0.0 when teh sound is first loaded
 */
  __pyx_t_4 = PyFloat_FromDouble(((double)0.0)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 959; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyBool_FromLong(((int)0)); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 959; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 959; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  __pyx_t_4 = 0;
  __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_CyFunction_NewEx(&__pyx_mdef_6_PyXAL_8PyPlayer_45play, 0, __pyx_n_s_PyPlayer_play, NULL, __pyx_n_s_PyXAL, PyModule_GetDict(__pyx_m), ((PyObject *)__pyx_codeobj__225)); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 959; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_5, __pyx_t_6);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_play, __pyx_t_5) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 959; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "_PyXAL.pyx":972
 *         self._wrapper.play(fadeTime, looping)
 * 
 *     def stop(self, float fadeTime = 0.0):             # <<<<<<<<<<<<<<
 *         '''
 *         stop the sound playing and rest set it's offset to 0.0
 */
  __pyx_t_5 = PyFloat_FromDouble(((double)0.0)); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 972; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 972; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_CyFunction_NewEx(&__pyx_mdef_6_PyXAL_8PyPlayer_47stop, 0, __pyx_n_s_PyPlayer_stop, NULL, __pyx_n_s_PyXAL, PyModule_GetDict(__pyx_m), ((PyObject *)__pyx_codeobj__227)); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 972; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_5, __pyx_t_6);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_stop, __pyx_t_5) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 972; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "_PyXAL.pyx":984
 *         self._wrapper.stop(fadeTime)
 * 
 *     def pause(self, float fadeTime = 0.0):             # <<<<<<<<<<<<<<
 *         '''
 *         stop the sound playing keeping the current offset of the sound
 */
  __pyx_t_5 = PyFloat_FromDouble(((double)0.0)); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 984; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 984; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_CyFunction_NewEx(&__pyx_mdef_6_PyXAL_8PyPlayer_49pause, 0, __pyx_n_s_PyPlayer_pause, NULL, __pyx_n_s_PyXAL, PyModule_GetDict(__pyx_m), ((PyObject *)__pyx_codeobj__229)); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 984; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_5, __pyx_t_6);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_pause, __pyx_t_5) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 984; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "_PyXAL.pyx":724
 *         return self._wrapper.readPcmData()
 * 
 * class PyPlayer(object):             # <<<<<<<<<<<<<<
 *     '''
 *     a interface for the C++ wrapper
 */
  __pyx_t_5 = __Pyx_Py3ClassCreate(__pyx_t_2, __pyx_n_s_PyPlayer, __pyx_t_1, __pyx_t_3, NULL, 0, 1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 724; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_PyPlayer, __pyx_t_5) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 724; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "_PyXAL.pyx":1059
 *             XAL.destroy()
 * 
 * class XALManager(object):             # <<<<<<<<<<<<<<
 *     '''
 *     a wrapper for the xal::mgr object which is a xal::AudioManager. in other words this is the main interface to XAL you SHOLD NOT create an instance of the class yourself.
 */
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1059; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_builtin_object);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_builtin_object);
  __Pyx_GIVEREF(__pyx_builtin_object);
  __pyx_t_2 = __Pyx_CalculateMetaclass(NULL, __pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1059; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_Py3MetaclassPrepare(__pyx_t_2, __pyx_t_1, __pyx_n_s_XALManager, __pyx_n_s_XALManager, (PyObject *) NULL, __pyx_n_s_PyXAL, __pyx_kp_s_a_wrapper_for_the_xal_mgr_objec); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1059; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);

  /* "_PyXAL.pyx":1065
 *     '''
 * 
 *     destroyed = False             # <<<<<<<<<<<<<<
 *     inited = False
 * 
 */
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_destroyed, Py_False) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1065; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_PyXAL.pyx":1066
 * 
 *     destroyed = False
 *     inited = False             # <<<<<<<<<<<<<<
 * 
 *     CATEGORY_STR = "default"
 */
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_inited, Py_False) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1066; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_PyXAL.pyx":1068
 *     inited = False
 * 
 *     CATEGORY_STR = "default"             # <<<<<<<<<<<<<<
 * 
 *     _players = {}
 */
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_CATEGORY_STR, __pyx_n_s_default) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1068; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_PyXAL.pyx":1070
 *     CATEGORY_STR = "default"
 * 
 *     _players = {}             # <<<<<<<<<<<<<<
 *     _wrapper = None
 * 
 */
  __pyx_t_5 = PyDict_New(); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1070; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_players, __pyx_t_5) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1070; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "_PyXAL.pyx":1071
 * 
 *     _players = {}
 *     _wrapper = None             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, int backendId, bint threaded = False):
 */
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_wrapper, Py_None) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1071; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_PyXAL.pyx":1073
 *     _wrapper = None
 * 
 *     def __init__(self, int backendId, bint threaded = False):             # <<<<<<<<<<<<<<
 *         '''
 *         sets up the interface and initializes XAL you SHOULD NOT BE CREATING THIS CLASS YOUR SELF call PyXAL.Init and use the object created at PyXAL.Mgr
 */
  __pyx_t_5 = __Pyx_PyBool_FromLong(((int)0)); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1073; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1073; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_CyFunction_NewEx(&__pyx_mdef_6_PyXAL_10XALManager_1__init__, 0, __pyx_n_s_XALManager___init, NULL, __pyx_n_s_PyXAL, PyModule_GetDict(__pyx_m), ((PyObject *)__pyx_codeobj__231)); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1073; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_5, __pyx_t_6);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_init, __pyx_t_5) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1073; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "_PyXAL.pyx":1088
 *         self._players = {}
 * 
 *     def isXALInitialized(self):             # <<<<<<<<<<<<<<
 *         '''
 *         returns true if the C++ side of the interface to XAL exists
 */
  __pyx_t_5 = __Pyx_CyFunction_NewEx(&__pyx_mdef_6_PyXAL_10XALManager_3isXALInitialized, 0, __pyx_n_s_XALManager_isXALInitialized, NULL, __pyx_n_s_PyXAL, PyModule_GetDict(__pyx_m), ((PyObject *)__pyx_codeobj__233)); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1088; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_isXALInitialized, __pyx_t_5) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1088; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "_PyXAL.pyx":1097
 *             return False
 * 
 *     def __del__(self):             # <<<<<<<<<<<<<<
 *         '''
 *         make sure XAL is destroyed if the interface is destroyed
 */
  __pyx_t_5 = __Pyx_CyFunction_NewEx(&__pyx_mdef_6_PyXAL_10XALManager_5__del__, 0, __pyx_n_s_XALManager___del, NULL, __pyx_n_s_PyXAL, PyModule_GetDict(__pyx_m), ((PyObject *)__pyx_codeobj__235)); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1097; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_del, __pyx_t_5) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1097; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "_PyXAL.pyx":1104
 *         del self._wrapper
 * 
 *     def clear(self):             # <<<<<<<<<<<<<<
 *         '''
 *         clear the XAL interface and reset it to be like it was freshly initialized all current sounds and players become invalid
 */
  __pyx_t_5 = __Pyx_CyFunction_NewEx(&__pyx_mdef_6_PyXAL_10XALManager_7clear, 0, __pyx_n_s_XALManager_clear, NULL, __pyx_n_s_PyXAL, PyModule_GetDict(__pyx_m), ((PyObject *)__pyx_codeobj__237)); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1104; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_clear, __pyx_t_5) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1104; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "_PyXAL.pyx":1114
 *             XAL.mgr.clear()
 * 
 *     def createSound(self, filename):             # <<<<<<<<<<<<<<
 *         '''
 *         create a sound object
 */
  __pyx_t_5 = __Pyx_CyFunction_NewEx(&__pyx_mdef_6_PyXAL_10XALManager_9createSound, 0, __pyx_n_s_XALManager_createSound, NULL, __pyx_n_s_PyXAL, PyModule_GetDict(__pyx_m), ((PyObject *)__pyx_codeobj__239)); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1114; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_createSound, __pyx_t_5) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1114; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "_PyXAL.pyx":1127
 *         return pysound
 * 
 *     def createPlayer(self, sound):             # <<<<<<<<<<<<<<
 *         '''
 *         create a player from a sound object
 */
  __pyx_t_5 = __Pyx_CyFunction_NewEx(&__pyx_mdef_6_PyXAL_10XALManager_11createPlayer, 0, __pyx_n_s_XALManager_createPlayer, NULL, __pyx_n_s_PyXAL, PyModule_GetDict(__pyx_m), ((PyObject *)__pyx_codeobj__241)); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1127; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_createPlayer, __pyx_t_5) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1127; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "_PyXAL.pyx":1146
 *         return pyplayer
 * 
 *     def destroyPlayer(self, player):             # <<<<<<<<<<<<<<
 *         '''
 *         destroy a player object
 */
  __pyx_t_5 = __Pyx_CyFunction_NewEx(&__pyx_mdef_6_PyXAL_10XALManager_13destroyPlayer, 0, __pyx_n_s_XALManager_destroyPlayer, NULL, __pyx_n_s_PyXAL, PyModule_GetDict(__pyx_m), ((PyObject *)__pyx_codeobj__243)); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1146; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_destroyPlayer, __pyx_t_5) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1146; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "_PyXAL.pyx":1163
 *         player._destroy()
 * 
 *     def destroySound(self, sound):             # <<<<<<<<<<<<<<
 *         '''
 *         destroy a sound object
 */
  __pyx_t_5 = __Pyx_CyFunction_NewEx(&__pyx_mdef_6_PyXAL_10XALManager_15destroySound, 0, __pyx_n_s_XALManager_destroySound, NULL, __pyx_n_s_PyXAL, PyModule_GetDict(__pyx_m), ((PyObject *)__pyx_codeobj__245)); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1163; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_destroySound, __pyx_t_5) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1163; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "_PyXAL.pyx":1176
 *         sound._destroy()
 * 
 *     def findPlayer(self, str name):             # <<<<<<<<<<<<<<
 *         '''
 *         tries to find a player for the sound whos name is passed. it find the player useing the intrealy kept list of wrpaed player instances. returns the first player in the list
 */
  __pyx_t_5 = __Pyx_CyFunction_NewEx(&__pyx_mdef_6_PyXAL_10XALManager_17findPlayer, 0, __pyx_n_s_XALManager_findPlayer, NULL, __pyx_n_s_PyXAL, PyModule_GetDict(__pyx_m), ((PyObject *)__pyx_codeobj__247)); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1176; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_findPlayer, __pyx_t_5) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1176; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "_PyXAL.pyx":1190
 *         return None
 * 
 *     def play(self, name, float fadeTime = 0.0, bool looping = False, float gain = 1.0):             # <<<<<<<<<<<<<<
 *         '''
 *         play the sound identified by the name passed (it must of alrady been created)
 */
  __pyx_t_5 = PyFloat_FromDouble(((double)0.0)); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1190; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyBool_FromLong(((int)0)); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1190; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_4 = PyFloat_FromDouble(((double)1.0)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1190; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_7 = PyTuple_New(3); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1190; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_7, 2, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  __pyx_t_5 = 0;
  __pyx_t_6 = 0;
  __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_CyFunction_NewEx(&__pyx_mdef_6_PyXAL_10XALManager_19play, 0, __pyx_n_s_XALManager_play, NULL, __pyx_n_s_PyXAL, PyModule_GetDict(__pyx_m), ((PyObject *)__pyx_codeobj__249)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1190; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_4, __pyx_t_7);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_play, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1190; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "_PyXAL.pyx":1204
 *         XAL.mgr.play(hl_name, fadeTime, looping, gain)
 * 
 *     def stop(self, name, float fadeTime = 0.0):             # <<<<<<<<<<<<<<
 *         '''
 *         stop playing the sound identifed by the name passed
 */
  __pyx_t_4 = PyFloat_FromDouble(((double)0.0)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1204; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1204; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_CyFunction_NewEx(&__pyx_mdef_6_PyXAL_10XALManager_21stop, 0, __pyx_n_s_XALManager_stop, NULL, __pyx_n_s_PyXAL, PyModule_GetDict(__pyx_m), ((PyObject *)__pyx_codeobj__251)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1204; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_4, __pyx_t_7);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_stop, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1204; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "_PyXAL.pyx":1216
 *         XAL.mgr.stop(hl_name, fadeTime)
 * 
 *     def stopFirst(self, name, float fadeTime = 0.0):             # <<<<<<<<<<<<<<
 *         '''
 *         stop playing the first player of the sound identifed by the name passed
 */
  __pyx_t_4 = PyFloat_FromDouble(((double)0.0)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1216; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1216; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_CyFunction_NewEx(&__pyx_mdef_6_PyXAL_10XALManager_23stopFirst, 0, __pyx_n_s_XALManager_stopFirst, NULL, __pyx_n_s_PyXAL, PyModule_GetDict(__pyx_m), ((PyObject *)__pyx_codeobj__253)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1216; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_4, __pyx_t_7);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_stopFirst, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1216; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "_PyXAL.pyx":1228
 *         XAL.mgr.stopFirst(hl_name, fadeTime)
 * 
 *     def stopAll(self, float fadeTime = 0.0):             # <<<<<<<<<<<<<<
 *         '''
 *         stop playing the all players of the sound identifed by the name passed
 */
  __pyx_t_4 = PyFloat_FromDouble(((double)0.0)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1228; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1228; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_CyFunction_NewEx(&__pyx_mdef_6_PyXAL_10XALManager_25stopAll, 0, __pyx_n_s_XALManager_stopAll, NULL, __pyx_n_s_PyXAL, PyModule_GetDict(__pyx_m), ((PyObject *)__pyx_codeobj__255)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1228; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_4, __pyx_t_7);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_stopAll, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1228; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "_PyXAL.pyx":1239
 *         XAL.mgr.stopAll(fadeTime)
 * 
 *     def isAnyPlaying(self, name):             # <<<<<<<<<<<<<<
 *         '''
 *         @param name: sting name of sound to check
 */
  __pyx_t_4 = __Pyx_CyFunction_NewEx(&__pyx_mdef_6_PyXAL_10XALManager_27isAnyPlaying, 0, __pyx_n_s_XALManager_isAnyPlaying, NULL, __pyx_n_s_PyXAL, PyModule_GetDict(__pyx_m), ((PyObject *)__pyx_codeobj__257)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1239; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_isAnyPlaying, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1239; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "_PyXAL.pyx":1250
 *         return result
 * 
 *     def isAnyFading(self, name):             # <<<<<<<<<<<<<<
 *         '''
 *         @param name: sting name of sound to check
 */
  __pyx_t_4 = __Pyx_CyFunction_NewEx(&__pyx_mdef_6_PyXAL_10XALManager_29isAnyFading, 0, __pyx_n_s_XALManager_isAnyFading, NULL, __pyx_n_s_PyXAL, PyModule_GetDict(__pyx_m), ((PyObject *)__pyx_codeobj__259)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1250; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_isAnyFading, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1250; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "_PyXAL.pyx":1261
 *         return result
 * 
 *     def isAnyFadingIn(self, name):             # <<<<<<<<<<<<<<
 *         '''
 *         @param name: sting name of sound to check
 */
  __pyx_t_4 = __Pyx_CyFunction_NewEx(&__pyx_mdef_6_PyXAL_10XALManager_31isAnyFadingIn, 0, __pyx_n_s_XALManager_isAnyFadingIn, NULL, __pyx_n_s_PyXAL, PyModule_GetDict(__pyx_m), ((PyObject *)__pyx_codeobj__261)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1261; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_isAnyFadingIn, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1261; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "_PyXAL.pyx":1272
 *         return result
 * 
 *     def isAnyFadingOut(self, name):             # <<<<<<<<<<<<<<
 *         '''
 *         @param name: sting name of sound to check
 */
  __pyx_t_4 = __Pyx_CyFunction_NewEx(&__pyx_mdef_6_PyXAL_10XALManager_33isAnyFadingOut, 0, __pyx_n_s_XALManager_isAnyFadingOut, NULL, __pyx_n_s_PyXAL, PyModule_GetDict(__pyx_m), ((PyObject *)__pyx_codeobj__263)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1272; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_isAnyFadingOut, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1272; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "_PyXAL.pyx":1283
 *         return result
 * 
 *     def suspendAudio(self):             # <<<<<<<<<<<<<<
 *         '''
 *         pause all sounds and players
 */
  __pyx_t_4 = __Pyx_CyFunction_NewEx(&__pyx_mdef_6_PyXAL_10XALManager_35suspendAudio, 0, __pyx_n_s_XALManager_suspendAudio, NULL, __pyx_n_s_PyXAL, PyModule_GetDict(__pyx_m), ((PyObject *)__pyx_codeobj__265)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1283; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_suspendAudio, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1283; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "_PyXAL.pyx":1293
 *         XAL.mgr.suspendAudio()
 * 
 *     def resumeAudio(self):             # <<<<<<<<<<<<<<
 *         '''
 *         resume all sounds and players
 */
  __pyx_t_4 = __Pyx_CyFunction_NewEx(&__pyx_mdef_6_PyXAL_10XALManager_37resumeAudio, 0, __pyx_n_s_XALManager_resumeAudio, NULL, __pyx_n_s_PyXAL, PyModule_GetDict(__pyx_m), ((PyObject *)__pyx_codeobj__267)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1293; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_resumeAudio, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1293; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "_PyXAL.pyx":1059
 *             XAL.destroy()
 * 
 * class XALManager(object):             # <<<<<<<<<<<<<<
 *     '''
 *     a wrapper for the xal::mgr object which is a xal::AudioManager. in other words this is the main interface to XAL you SHOLD NOT create an instance of the class yourself.
 */
  __pyx_t_4 = __Pyx_Py3ClassCreate(__pyx_t_2, __pyx_n_s_XALManager, __pyx_t_1, __pyx_t_3, NULL, 0, 1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1059; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_XALManager, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1059; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "_PyXAL.pyx":1303
 *         XAL.mgr.resumeAudio()
 * 
 * def Init(int backendId, bint threaded = True):             # <<<<<<<<<<<<<<
 *     '''
 *     Setup XAL and create an XALManager interface at PyXAL.Mgr
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6_PyXAL_1Init, NULL, __pyx_n_s_PyXAL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1303; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Init, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1303; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "_PyXAL.pyx":1318
 *         Mgr = XALManager(backendId, threaded)
 * 
 * def Destroy():             # <<<<<<<<<<<<<<
 *     '''
 *     Destroy XAL and remove the interface at PyXAL setting it to None
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6_PyXAL_3Destroy, NULL, __pyx_n_s_PyXAL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1318; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Destroy, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1318; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "_PyXAL.pyx":1
 * from cython.operator cimport dereference as deref             # <<<<<<<<<<<<<<
 * from libc.stdlib cimport free
 * from libcpp cimport bool
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  if (__pyx_m) {
    __Pyx_AddTraceback("init _PyXAL", __pyx_clineno, __pyx_lineno, __pyx_filename);
    Py_DECREF(__pyx_m); __pyx_m = 0;
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init _PyXAL");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if PY_MAJOR_VERSION < 3
  return;
  #else
  return __pyx_m;
  #endif
}

/* Runtime support code */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule((char *)modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif /* CYTHON_REFNANNY */

static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
#if PY_VERSION_HEX >= 0x02060000
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
#endif
    result = (*call)(func, arg, kw);
#if PY_VERSION_HEX >= 0x02060000
    Py_LeaveRecursiveCall();
#endif
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

static CYTHON_INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyThreadState *tstate = PyThreadState_GET();
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_Restore(type, value, tb);
#endif
}
static CYTHON_INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyThreadState *tstate = PyThreadState_GET();
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(type, value, tb);
#endif
}

static void __Pyx_WriteUnraisable(const char *name, CYTHON_UNUSED int clineno,
                                  CYTHON_UNUSED int lineno, CYTHON_UNUSED const char *filename,
                                  int full_traceback) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    if (full_traceback) {
        Py_XINCREF(old_exc);
        Py_XINCREF(old_val);
        Py_XINCREF(old_tb);
        __Pyx_ErrRestore(old_exc, old_val, old_tb);
        PyErr_PrintEx(1);
    }
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
}

static CYTHON_INLINE PyObject* __Pyx_decode_c_string(
         const char* cstring, Py_ssize_t start, Py_ssize_t stop,
         const char* encoding, const char* errors,
         PyObject* (*decode_func)(const char *s, Py_ssize_t size, const char *errors)) {
    Py_ssize_t length;
    if (unlikely((start < 0) | (stop < 0))) {
        length = strlen(cstring);
        if (start < 0) {
            start += length;
            if (start < 0)
                start = 0;
        }
        if (stop < 0)
            stop += length;
    }
    length = stop - start;
    if (unlikely(length <= 0))
        return PyUnicode_FromUnicode(NULL, 0);
    cstring += start;
    if (decode_func) {
        return decode_func(cstring, length, errors);
    } else {
        return PyUnicode_Decode(cstring, length, encoding, errors);
    }
}

static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

static CYTHON_INLINE int __Pyx_CheckKeywordStrings(
    PyObject *kwdict,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
#if CYTHON_COMPILING_IN_PYPY
    if (!kw_allowed && PyDict_Next(kwdict, &pos, &key, 0))
        goto invalid_keyword;
    return 1;
#else
    while (PyDict_Next(kwdict, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_CheckExact(key)) && unlikely(!PyString_Check(key)))
        #endif
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
    }
    if ((!kw_allowed) && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    return 0;
#endif
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}

#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    #if PY_VERSION_HEX < 0x02050000
    if (PyClass_Check(type)) {
    #else
    if (PyType_Check(type)) {
    #endif
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        #if PY_VERSION_HEX < 0x02050000
        if (PyInstance_Check(type)) {
            type = (PyObject*) ((PyInstanceObject*)type)->in_class;
            Py_INCREF(type);
        } else {
            type = 0;
            PyErr_SetString(PyExc_TypeError,
                "raise: exception must be an old-style class or instance");
            goto raise_error;
        }
        #else
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
        #endif
    }
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else /* Python 3+ */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                if (PyObject_IsSubclass(instance_class, type)) {
                    type = instance_class;
                } else {
                    instance_class = NULL;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
#if PY_VERSION_HEX >= 0x03030000
    if (cause) {
#else
    if (cause && cause != Py_None) {
#endif
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
        PyThreadState *tstate = PyThreadState_GET();
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *local_type, *local_value, *local_tb;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyThreadState *tstate = PyThreadState_GET();
    local_type = tstate->curexc_type;
    local_value = tstate->curexc_value;
    local_tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(&local_type, &local_value, &local_tb);
#endif
    PyErr_NormalizeException(&local_type, &local_value, &local_tb);
#if CYTHON_COMPILING_IN_CPYTHON
    if (unlikely(tstate->curexc_type))
#else
    if (unlikely(PyErr_Occurred()))
#endif
        goto bad;
    #if PY_MAJOR_VERSION >= 3
    if (local_tb) {
        if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
            goto bad;
    }
    #endif
    Py_XINCREF(local_tb);
    Py_XINCREF(local_type);
    Py_XINCREF(local_value);
    *type = local_type;
    *value = local_value;
    *tb = local_tb;
#if CYTHON_COMPILING_IN_CPYTHON
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = local_type;
    tstate->exc_value = local_value;
    tstate->exc_traceback = local_tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(local_type, local_value, local_tb);
#endif
    return 0;
bad:
    *type = 0;
    *value = 0;
    *tb = 0;
    Py_XDECREF(local_type);
    Py_XDECREF(local_value);
    Py_XDECREF(local_tb);
    return -1;
}

static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
#if CYTHON_COMPILING_IN_CPYTHON
    PyThreadState *tstate = PyThreadState_GET();
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = *type;
    tstate->exc_value = *value;
    tstate->exc_traceback = *tb;
#else
    PyErr_GetExcInfo(&tmp_type, &tmp_value, &tmp_tb);
    PyErr_SetExcInfo(*type, *value, *tb);
#endif
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}

static CYTHON_INLINE void __Pyx_ExceptionSave(PyObject **type, PyObject **value, PyObject **tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyThreadState *tstate = PyThreadState_GET();
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
#else
    PyErr_GetExcInfo(type, value, tb);
#endif
}
static void __Pyx_ExceptionReset(PyObject *type, PyObject *value, PyObject *tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyThreadState *tstate = PyThreadState_GET();
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(type, value, tb);
#endif
}

static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_CheckExact(key)) || likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (PyUnicode_GET_SIZE(**name) != PyUnicode_GET_SIZE(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (PyUnicode_GET_SIZE(**argname) != PyUnicode_GET_SIZE(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name) {
    PyObject *result;
#if CYTHON_COMPILING_IN_CPYTHON
    result = PyDict_GetItem(__pyx_d, name);
    if (result) {
        Py_INCREF(result);
    } else {
#else
    result = PyObject_GetItem(__pyx_d, name);
    if (!result) {
        PyErr_Clear();
#endif
        result = __Pyx_GetBuiltinName(name);
    }
    return result;
}

static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck) {
#if CYTHON_COMPILING_IN_CPYTHON
    if (wraparound & unlikely(i < 0)) i += PyList_GET_SIZE(o);
    if ((!boundscheck) || likely((0 <= i) & (i < PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck) {
#if CYTHON_COMPILING_IN_CPYTHON
    if (wraparound & unlikely(i < 0)) i += PyTuple_GET_SIZE(o);
    if ((!boundscheck) || likely((0 <= i) & (i < PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck) {
#if CYTHON_COMPILING_IN_CPYTHON
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely((n >= 0) & (n < PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely((n >= 0) & (n < PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (PyErr_ExceptionMatches(PyExc_OverflowError))
                        PyErr_Clear();
                    else
                        return NULL;
                }
            }
            return m->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(PyObject_TypeCheck(obj, type)))
        return 1;
    PyErr_Format(PyExc_TypeError, "Cannot convert %.200s to %.200s",
                 Py_TYPE(obj)->tp_name, type->tp_name);
    return 0;
}

static CYTHON_INLINE int __Pyx_PyObject_Append(PyObject* L, PyObject* x) {
    if (likely(PyList_CheckExact(L))) {
        if (unlikely(__Pyx_PyList_Append(L, x) < 0)) return -1;
    } else {
        PyObject* retval = __Pyx_PyObject_CallMethod1(L, __pyx_n_s_append, x);
        if (unlikely(!retval))
            return -1;
        Py_DECREF(retval);
    }
    return 0;
}

static void __Pyx_RaiseArgumentTypeInvalid(const char* name, PyObject *obj, PyTypeObject *type) {
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected %.200s, got %.200s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
}
static CYTHON_INLINE int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact)
{
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (none_allowed && obj == Py_None) return 1;
    else if (exact) {
        if (likely(Py_TYPE(obj) == type)) return 1;
        #if PY_MAJOR_VERSION == 2
        else if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(PyObject_TypeCheck(obj, type))) return 1;
    }
    __Pyx_RaiseArgumentTypeInvalid(name, obj, type);
    return 0;
}

static PyObject *__Pyx_CalculateMetaclass(PyTypeObject *metaclass, PyObject *bases) {
    Py_ssize_t i, nbases = PyTuple_GET_SIZE(bases);
    for (i=0; i < nbases; i++) {
        PyTypeObject *tmptype;
        PyObject *tmp = PyTuple_GET_ITEM(bases, i);
        tmptype = Py_TYPE(tmp);
#if PY_MAJOR_VERSION < 3
        if (tmptype == &PyClass_Type)
            continue;
#endif
        if (!metaclass) {
            metaclass = tmptype;
            continue;
        }
        if (PyType_IsSubtype(metaclass, tmptype))
            continue;
        if (PyType_IsSubtype(tmptype, metaclass)) {
            metaclass = tmptype;
            continue;
        }
        PyErr_SetString(PyExc_TypeError,
                        "metaclass conflict: "
                        "the metaclass of a derived class "
                        "must be a (non-strict) subclass "
                        "of the metaclasses of all its bases");
        return NULL;
    }
    if (!metaclass) {
#if PY_MAJOR_VERSION < 3
        metaclass = &PyClass_Type;
#else
        metaclass = &PyType_Type;
#endif
    }
    Py_INCREF((PyObject*) metaclass);
    return (PyObject*) metaclass;
}

static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type) {
    PyObject* fake_module;
    PyTypeObject* cached_type = NULL;
    fake_module = PyImport_AddModule((char*) "_cython_" CYTHON_ABI);
    if (!fake_module) return NULL;
    Py_INCREF(fake_module);
    cached_type = (PyTypeObject*) PyObject_GetAttrString(fake_module, type->tp_name);
    if (cached_type) {
        if (!PyType_Check((PyObject*)cached_type)) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s is not a type object",
                type->tp_name);
            goto bad;
        }
        if (cached_type->tp_basicsize != type->tp_basicsize) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s has the wrong size, try recompiling",
                type->tp_name);
            goto bad;
        }
    } else {
        if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
        PyErr_Clear();
        if (PyType_Ready(type) < 0) goto bad;
        if (PyObject_SetAttrString(fake_module, type->tp_name, (PyObject*) type) < 0)
            goto bad;
        Py_INCREF(type);
        cached_type = type;
    }
done:
    Py_DECREF(fake_module);
    return cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}

static PyObject *
__Pyx_CyFunction_get_doc(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *closure)
{
    if (unlikely(op->func_doc == NULL)) {
        if (op->func.m_ml->ml_doc) {
#if PY_MAJOR_VERSION >= 3
            op->func_doc = PyUnicode_FromString(op->func.m_ml->ml_doc);
#else
            op->func_doc = PyString_FromString(op->func.m_ml->ml_doc);
#endif
            if (unlikely(op->func_doc == NULL))
                return NULL;
        } else {
            Py_INCREF(Py_None);
            return Py_None;
        }
    }
    Py_INCREF(op->func_doc);
    return op->func_doc;
}
static int
__Pyx_CyFunction_set_doc(__pyx_CyFunctionObject *op, PyObject *value)
{
    PyObject *tmp = op->func_doc;
    if (value == NULL)
        value = Py_None; /* Mark as deleted */
    Py_INCREF(value);
    op->func_doc = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_name(__pyx_CyFunctionObject *op)
{
    if (unlikely(op->func_name == NULL)) {
#if PY_MAJOR_VERSION >= 3
        op->func_name = PyUnicode_InternFromString(op->func.m_ml->ml_name);
#else
        op->func_name = PyString_InternFromString(op->func.m_ml->ml_name);
#endif
        if (unlikely(op->func_name == NULL))
            return NULL;
    }
    Py_INCREF(op->func_name);
    return op->func_name;
}
static int
__Pyx_CyFunction_set_name(__pyx_CyFunctionObject *op, PyObject *value)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value))) {
#else
    if (unlikely(value == NULL || !PyString_Check(value))) {
#endif
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    tmp = op->func_name;
    Py_INCREF(value);
    op->func_name = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_qualname(__pyx_CyFunctionObject *op)
{
    Py_INCREF(op->func_qualname);
    return op->func_qualname;
}
static int
__Pyx_CyFunction_set_qualname(__pyx_CyFunctionObject *op, PyObject *value)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value))) {
#else
    if (unlikely(value == NULL || !PyString_Check(value))) {
#endif
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    tmp = op->func_qualname;
    Py_INCREF(value);
    op->func_qualname = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_self(__pyx_CyFunctionObject *m, CYTHON_UNUSED void *closure)
{
    PyObject *self;
    self = m->func_closure;
    if (self == NULL)
        self = Py_None;
    Py_INCREF(self);
    return self;
}
static PyObject *
__Pyx_CyFunction_get_dict(__pyx_CyFunctionObject *op)
{
    if (unlikely(op->func_dict == NULL)) {
        op->func_dict = PyDict_New();
        if (unlikely(op->func_dict == NULL))
            return NULL;
    }
    Py_INCREF(op->func_dict);
    return op->func_dict;
}
static int
__Pyx_CyFunction_set_dict(__pyx_CyFunctionObject *op, PyObject *value)
{
    PyObject *tmp;
    if (unlikely(value == NULL)) {
        PyErr_SetString(PyExc_TypeError,
               "function's dictionary may not be deleted");
        return -1;
    }
    if (unlikely(!PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
               "setting function's dictionary to a non-dict");
        return -1;
    }
    tmp = op->func_dict;
    Py_INCREF(value);
    op->func_dict = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_globals(__pyx_CyFunctionObject *op)
{
    Py_INCREF(op->func_globals);
    return op->func_globals;
}
static PyObject *
__Pyx_CyFunction_get_closure(CYTHON_UNUSED __pyx_CyFunctionObject *op)
{
    Py_INCREF(Py_None);
    return Py_None;
}
static PyObject *
__Pyx_CyFunction_get_code(__pyx_CyFunctionObject *op)
{
    PyObject* result = (op->func_code) ? op->func_code : Py_None;
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_init_defaults(__pyx_CyFunctionObject *op) {
    PyObject *res = op->defaults_getter((PyObject *) op);
    if (unlikely(!res))
        return -1;
    op->defaults_tuple = PyTuple_GET_ITEM(res, 0);
    Py_INCREF(op->defaults_tuple);
    op->defaults_kwdict = PyTuple_GET_ITEM(res, 1);
    Py_INCREF(op->defaults_kwdict);
    Py_DECREF(res);
    return 0;
}
static int
__Pyx_CyFunction_set_defaults(__pyx_CyFunctionObject *op, PyObject* value) {
    PyObject* tmp;
    if (!value) {
        value = Py_None;
    } else if (value != Py_None && !PyTuple_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__defaults__ must be set to a tuple object");
        return -1;
    }
    Py_INCREF(value);
    tmp = op->defaults_tuple;
    op->defaults_tuple = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_defaults(__pyx_CyFunctionObject *op) {
    PyObject* result = op->defaults_tuple;
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (__Pyx_CyFunction_init_defaults(op) < 0) return NULL;
            result = op->defaults_tuple;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_kwdefaults(__pyx_CyFunctionObject *op, PyObject* value) {
    PyObject* tmp;
    if (!value) {
        value = Py_None;
    } else if (value != Py_None && !PyDict_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__kwdefaults__ must be set to a dict object");
        return -1;
    }
    Py_INCREF(value);
    tmp = op->defaults_kwdict;
    op->defaults_kwdict = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_kwdefaults(__pyx_CyFunctionObject *op) {
    PyObject* result = op->defaults_kwdict;
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (__Pyx_CyFunction_init_defaults(op) < 0) return NULL;
            result = op->defaults_kwdict;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_annotations(__pyx_CyFunctionObject *op, PyObject* value) {
    PyObject* tmp;
    if (!value || value == Py_None) {
        value = NULL;
    } else if (!PyDict_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__annotations__ must be set to a dict object");
        return -1;
    }
    Py_XINCREF(value);
    tmp = op->func_annotations;
    op->func_annotations = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_annotations(__pyx_CyFunctionObject *op) {
    PyObject* result = op->func_annotations;
    if (unlikely(!result)) {
        result = PyDict_New();
        if (unlikely(!result)) return NULL;
        op->func_annotations = result;
    }
    Py_INCREF(result);
    return result;
}
static PyGetSetDef __pyx_CyFunction_getsets[] = {
    {(char *) "func_doc", (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "__doc__",  (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "func_name", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__name__", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__qualname__", (getter)__Pyx_CyFunction_get_qualname, (setter)__Pyx_CyFunction_set_qualname, 0, 0},
    {(char *) "__self__", (getter)__Pyx_CyFunction_get_self, 0, 0, 0},
    {(char *) "func_dict", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "__dict__", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "func_globals", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "__globals__", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "func_closure", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "__closure__", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "func_code", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "__code__", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "func_defaults", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__defaults__", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__kwdefaults__", (getter)__Pyx_CyFunction_get_kwdefaults, (setter)__Pyx_CyFunction_set_kwdefaults, 0, 0},
    {(char *) "__annotations__", (getter)__Pyx_CyFunction_get_annotations, (setter)__Pyx_CyFunction_set_annotations, 0, 0},
    {0, 0, 0, 0, 0}
};
#ifndef PY_WRITE_RESTRICTED /* < Py2.5 */
#define PY_WRITE_RESTRICTED WRITE_RESTRICTED
#endif
static PyMemberDef __pyx_CyFunction_members[] = {
    {(char *) "__module__", T_OBJECT, offsetof(__pyx_CyFunctionObject, func.m_module), PY_WRITE_RESTRICTED, 0},
    {0, 0, 0,  0, 0}
};
static PyObject *
__Pyx_CyFunction_reduce(__pyx_CyFunctionObject *m, CYTHON_UNUSED PyObject *args)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromString(m->func.m_ml->ml_name);
#else
    return PyString_FromString(m->func.m_ml->ml_name);
#endif
}
static PyMethodDef __pyx_CyFunction_methods[] = {
    {__Pyx_NAMESTR("__reduce__"), (PyCFunction)__Pyx_CyFunction_reduce, METH_VARARGS, 0},
    {0, 0, 0, 0}
};
static PyObject *__Pyx_CyFunction_New(PyTypeObject *type, PyMethodDef *ml, int flags, PyObject* qualname,
                                      PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
    __pyx_CyFunctionObject *op = PyObject_GC_New(__pyx_CyFunctionObject, type);
    if (op == NULL)
        return NULL;
    op->flags = flags;
    op->func_weakreflist = NULL;
    op->func.m_ml = ml;
    op->func.m_self = (PyObject *) op;
    Py_XINCREF(closure);
    op->func_closure = closure;
    Py_XINCREF(module);
    op->func.m_module = module;
    op->func_dict = NULL;
    op->func_name = NULL;
    Py_INCREF(qualname);
    op->func_qualname = qualname;
    op->func_doc = NULL;
    op->func_classobj = NULL;
    op->func_globals = globals;
    Py_INCREF(op->func_globals);
    Py_XINCREF(code);
    op->func_code = code;
    op->defaults_pyobjects = 0;
    op->defaults = NULL;
    op->defaults_tuple = NULL;
    op->defaults_kwdict = NULL;
    op->defaults_getter = NULL;
    op->func_annotations = NULL;
    PyObject_GC_Track(op);
    return (PyObject *) op;
}
static int
__Pyx_CyFunction_clear(__pyx_CyFunctionObject *m)
{
    Py_CLEAR(m->func_closure);
    Py_CLEAR(m->func.m_module);
    Py_CLEAR(m->func_dict);
    Py_CLEAR(m->func_name);
    Py_CLEAR(m->func_qualname);
    Py_CLEAR(m->func_doc);
    Py_CLEAR(m->func_globals);
    Py_CLEAR(m->func_code);
    Py_CLEAR(m->func_classobj);
    Py_CLEAR(m->defaults_tuple);
    Py_CLEAR(m->defaults_kwdict);
    Py_CLEAR(m->func_annotations);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_XDECREF(pydefaults[i]);
        PyMem_Free(m->defaults);
        m->defaults = NULL;
    }
    return 0;
}
static void __Pyx_CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    PyObject_GC_UnTrack(m);
    if (m->func_weakreflist != NULL)
        PyObject_ClearWeakRefs((PyObject *) m);
    __Pyx_CyFunction_clear(m);
    PyObject_GC_Del(m);
}
static int __Pyx_CyFunction_traverse(__pyx_CyFunctionObject *m, visitproc visit, void *arg)
{
    Py_VISIT(m->func_closure);
    Py_VISIT(m->func.m_module);
    Py_VISIT(m->func_dict);
    Py_VISIT(m->func_name);
    Py_VISIT(m->func_qualname);
    Py_VISIT(m->func_doc);
    Py_VISIT(m->func_globals);
    Py_VISIT(m->func_code);
    Py_VISIT(m->func_classobj);
    Py_VISIT(m->defaults_tuple);
    Py_VISIT(m->defaults_kwdict);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_VISIT(pydefaults[i]);
    }
    return 0;
}
static PyObject *__Pyx_CyFunction_descr_get(PyObject *func, PyObject *obj, PyObject *type)
{
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    if (m->flags & __Pyx_CYFUNCTION_STATICMETHOD) {
        Py_INCREF(func);
        return func;
    }
    if (m->flags & __Pyx_CYFUNCTION_CLASSMETHOD) {
        if (type == NULL)
            type = (PyObject *)(Py_TYPE(obj));
        return PyMethod_New(func,
                            type, (PyObject *)(Py_TYPE(type)));
    }
    if (obj == Py_None)
        obj = NULL;
    return PyMethod_New(func, obj, type);
}
static PyObject*
__Pyx_CyFunction_repr(__pyx_CyFunctionObject *op)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromFormat("<cyfunction %U at %p>",
                                op->func_qualname, (void *)op);
#else
    return PyString_FromFormat("<cyfunction %s at %p>",
                               PyString_AsString(op->func_qualname), (void *)op);
#endif
}
#if CYTHON_COMPILING_IN_PYPY
static PyObject * __Pyx_CyFunction_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyCFunctionObject* f = (PyCFunctionObject*)func;
    PyCFunction meth = PyCFunction_GET_FUNCTION(func);
    PyObject *self = PyCFunction_GET_SELF(func);
    Py_ssize_t size;
    switch (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST)) {
    case METH_VARARGS:
        if (likely(kw == NULL) || PyDict_Size(kw) == 0)
            return (*meth)(self, arg);
        break;
    case METH_VARARGS | METH_KEYWORDS:
        return (*(PyCFunctionWithKeywords)meth)(self, arg, kw);
    case METH_NOARGS:
        if (likely(kw == NULL) || PyDict_Size(kw) == 0) {
            size = PyTuple_GET_SIZE(arg);
            if (size == 0)
                return (*meth)(self, NULL);
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes no arguments (%zd given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    case METH_O:
        if (likely(kw == NULL) || PyDict_Size(kw) == 0) {
            size = PyTuple_GET_SIZE(arg);
            if (size == 1)
                return (*meth)(self, PyTuple_GET_ITEM(arg, 0));
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes exactly one argument (%zd given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    default:
        PyErr_SetString(PyExc_SystemError, "Bad call flags in "
                        "__Pyx_CyFunction_Call. METH_OLDARGS is no "
                        "longer supported!");
        return NULL;
    }
    PyErr_Format(PyExc_TypeError, "%.200s() takes no keyword arguments",
                 f->m_ml->ml_name);
    return NULL;
}
#else
static PyObject * __Pyx_CyFunction_Call(PyObject *func, PyObject *arg, PyObject *kw) {
	return PyCFunction_Call(func, arg, kw);
}
#endif
static PyTypeObject __pyx_CyFunctionType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    __Pyx_NAMESTR("cython_function_or_method"), /*tp_name*/
    sizeof(__pyx_CyFunctionObject),   /*tp_basicsize*/
    0,                                  /*tp_itemsize*/
    (destructor) __Pyx_CyFunction_dealloc, /*tp_dealloc*/
    0,                                  /*tp_print*/
    0,                                  /*tp_getattr*/
    0,                                  /*tp_setattr*/
#if PY_MAJOR_VERSION < 3
    0,                                  /*tp_compare*/
#else
    0,                                  /*reserved*/
#endif
    (reprfunc) __Pyx_CyFunction_repr,   /*tp_repr*/
    0,                                  /*tp_as_number*/
    0,                                  /*tp_as_sequence*/
    0,                                  /*tp_as_mapping*/
    0,                                  /*tp_hash*/
    __Pyx_CyFunction_Call,              /*tp_call*/
    0,                                  /*tp_str*/
    0,                                  /*tp_getattro*/
    0,                                  /*tp_setattro*/
    0,                                  /*tp_as_buffer*/
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC, /* tp_flags*/
    0,                                  /*tp_doc*/
    (traverseproc) __Pyx_CyFunction_traverse,   /*tp_traverse*/
    (inquiry) __Pyx_CyFunction_clear,   /*tp_clear*/
    0,                                  /*tp_richcompare*/
    offsetof(__pyx_CyFunctionObject, func_weakreflist), /* tp_weaklistoffse */
    0,                                  /*tp_iter*/
    0,                                  /*tp_iternext*/
    __pyx_CyFunction_methods,           /*tp_methods*/
    __pyx_CyFunction_members,           /*tp_members*/
    __pyx_CyFunction_getsets,           /*tp_getset*/
    0,                                  /*tp_base*/
    0,                                  /*tp_dict*/
    __Pyx_CyFunction_descr_get,         /*tp_descr_get*/
    0,                                  /*tp_descr_set*/
    offsetof(__pyx_CyFunctionObject, func_dict),/*tp_dictoffset*/
    0,                                  /*tp_init*/
    0,                                  /*tp_alloc*/
    0,                                  /*tp_new*/
    0,                                  /*tp_free*/
    0,                                  /*tp_is_gc*/
    0,                                  /*tp_bases*/
    0,                                  /*tp_mro*/
    0,                                  /*tp_cache*/
    0,                                  /*tp_subclasses*/
    0,                                  /*tp_weaklist*/
    0,                                  /*tp_del*/
#if PY_VERSION_HEX >= 0x02060000
    0,                                  /*tp_version_tag*/
#endif
#if PY_VERSION_HEX >= 0x030400a1
    0,                                  /*tp_finalize*/
#endif
};
static int __Pyx_CyFunction_init(void) {
#if !CYTHON_COMPILING_IN_PYPY
    __pyx_CyFunctionType_type.tp_call = PyCFunction_Call;
#endif
    __pyx_CyFunctionType = __Pyx_FetchCommonType(&__pyx_CyFunctionType_type);
    if (__pyx_CyFunctionType == NULL) {
        return -1;
    }
    return 0;
}
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *func, size_t size, int pyobjects) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults = PyMem_Malloc(size);
    if (!m->defaults)
        return PyErr_NoMemory();
    memset(m->defaults, 0, size);
    m->defaults_pyobjects = pyobjects;
    return m->defaults;
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *func, PyObject *tuple) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_tuple = tuple;
    Py_INCREF(tuple);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_kwdict = dict;
    Py_INCREF(dict);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->func_annotations = dict;
    Py_INCREF(dict);
}

static PyObject *__Pyx_Py3MetaclassPrepare(PyObject *metaclass, PyObject *bases, PyObject *name,
                                           PyObject *qualname, PyObject *mkw, PyObject *modname, PyObject *doc) {
    PyObject *ns;
    if (metaclass) {
        PyObject *prep = __Pyx_PyObject_GetAttrStr(metaclass, __pyx_n_s_prepare);
        if (prep) {
            PyObject *pargs = PyTuple_Pack(2, name, bases);
            if (unlikely(!pargs)) {
                Py_DECREF(prep);
                return NULL;
            }
            ns = PyObject_Call(prep, pargs, mkw);
            Py_DECREF(prep);
            Py_DECREF(pargs);
        } else {
            if (unlikely(!PyErr_ExceptionMatches(PyExc_AttributeError)))
                return NULL;
            PyErr_Clear();
            ns = PyDict_New();
        }
    } else {
        ns = PyDict_New();
    }
    if (unlikely(!ns))
        return NULL;
    if (unlikely(PyObject_SetItem(ns, __pyx_n_s_module, modname) < 0)) goto bad;
    if (unlikely(PyObject_SetItem(ns, __pyx_n_s_qualname, qualname) < 0)) goto bad;
    if (unlikely(doc && PyObject_SetItem(ns, __pyx_n_s_doc, doc) < 0)) goto bad;
    return ns;
bad:
    Py_DECREF(ns);
    return NULL;
}
static PyObject *__Pyx_Py3ClassCreate(PyObject *metaclass, PyObject *name, PyObject *bases,
                                      PyObject *dict, PyObject *mkw,
                                      int calculate_metaclass, int allow_py2_metaclass) {
    PyObject *result, *margs;
    PyObject *owned_metaclass = NULL;
    if (allow_py2_metaclass) {
        owned_metaclass = PyObject_GetItem(dict, __pyx_n_s_metaclass);
        if (owned_metaclass) {
            metaclass = owned_metaclass;
        } else if (likely(PyErr_ExceptionMatches(PyExc_KeyError))) {
            PyErr_Clear();
        } else {
            return NULL;
        }
    }
    if (calculate_metaclass && (!metaclass || PyType_Check(metaclass))) {
        metaclass = __Pyx_CalculateMetaclass((PyTypeObject*) metaclass, bases);
        Py_XDECREF(owned_metaclass);
        if (unlikely(!metaclass))
            return NULL;
        owned_metaclass = metaclass;
    }
    margs = PyTuple_Pack(3, name, bases, dict);
    if (unlikely(!margs)) {
        result = NULL;
    } else {
        result = PyObject_Call(metaclass, margs, mkw);
        Py_DECREF(margs);
    }
    Py_XDECREF(owned_metaclass);
    return result;
}

static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_VERSION_HEX < 0x03030000
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    #if PY_VERSION_HEX >= 0x02050000
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if (strchr(__Pyx_MODULE_NAME, '.')) {
                #if PY_VERSION_HEX < 0x03030000
                PyObject *py_level = PyInt_FromLong(1);
                if (!py_level)
                    goto bad;
                module = PyObject_CallFunctionObjArgs(py_import,
                    name, global_dict, empty_dict, list, py_level, NULL);
                Py_DECREF(py_level);
                #else
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                #endif
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0; /* try absolute import on failure */
        }
        #endif
        if (!module) {
            #if PY_VERSION_HEX < 0x03030000
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
    #else
    if (level>0) {
        PyErr_SetString(PyExc_RuntimeError, "Relative import is not supported for Python <=2.4.");
        goto bad;
    }
    module = PyObject_CallFunctionObjArgs(py_import,
        name, global_dict, empty_dict, list, NULL);
    #endif
bad:
    #if PY_VERSION_HEX < 0x03030000
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func)             \
    {                                                                     \
        func_type value = func(x);                                        \
        if (sizeof(target_type) < sizeof(func_type)) {                    \
            if (unlikely(value != (func_type) (target_type) value)) {     \
                func_type zero = 0;                                       \
                PyErr_SetString(PyExc_OverflowError,                      \
                    (is_unsigned && unlikely(value < zero)) ?             \
                    "can't convert negative value to " #target_type :     \
                    "value too large to convert to " #target_type);       \
                return (target_type) -1;                                  \
            }                                                             \
        }                                                                 \
        return (target_type) value;                                       \
    }

#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
 #endif
#endif
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG)
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to int");
                return (int) -1;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(int)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return (int) ((PyLongObject*)x)->ob_digit[0];
                }
            }
 #endif
#endif
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to int");
                return (int) -1;
            }
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT(int, unsigned long, PyLong_AsUnsignedLong)
            } else if (sizeof(int) <= sizeof(unsigned long long)) {
                __PYX_VERIFY_RETURN_INT(int, unsigned long long, PyLong_AsUnsignedLongLong)
            }
        } else {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(int)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return +(int) ((PyLongObject*)x)->ob_digit[0];
                    case -1: return -(int) ((PyLongObject*)x)->ob_digit[0];
                }
            }
 #endif
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT(int, long, PyLong_AsLong)
            } else if (sizeof(int) <= sizeof(long long)) {
                __PYX_VERIFY_RETURN_INT(int, long long, PyLong_AsLongLong)
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
    const int neg_one = (int) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(int) <= sizeof(unsigned long long)) {
            return PyLong_FromUnsignedLongLong((unsigned long long) value);
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(long long)) {
            return PyLong_FromLongLong((long long) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_int(unsigned int value) {
    const unsigned int neg_one = (unsigned int) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(unsigned int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(unsigned int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(unsigned int) <= sizeof(unsigned long long)) {
            return PyLong_FromUnsignedLongLong((unsigned long long) value);
        }
    } else {
        if (sizeof(unsigned int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(unsigned int) <= sizeof(long long)) {
            return PyLong_FromLongLong((long long) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(unsigned int),
                                     little, !is_unsigned);
    }
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(long) <= sizeof(unsigned long long)) {
            return PyLong_FromUnsignedLongLong((unsigned long long) value);
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(long long)) {
            return PyLong_FromLongLong((long long) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
 #endif
#endif
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG)
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to long");
                return (long) -1;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(long)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return (long) ((PyLongObject*)x)->ob_digit[0];
                }
            }
 #endif
#endif
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to long");
                return (long) -1;
            }
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT(long, unsigned long, PyLong_AsUnsignedLong)
            } else if (sizeof(long) <= sizeof(unsigned long long)) {
                __PYX_VERIFY_RETURN_INT(long, unsigned long long, PyLong_AsUnsignedLongLong)
            }
        } else {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(long)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return +(long) ((PyLongObject*)x)->ob_digit[0];
                    case -1: return -(long) ((PyLongObject*)x)->ob_digit[0];
                }
            }
 #endif
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT(long, long, PyLong_AsLong)
            } else if (sizeof(long) <= sizeof(long long)) {
                __PYX_VERIFY_RETURN_INT(long, long long, PyLong_AsLongLong)
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        #if PY_VERSION_HEX < 0x02050000
        return PyErr_Warn(NULL, message);
        #else
        return PyErr_WarnEx(NULL, message, 1);
        #endif
    }
    return 0;
}

static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = (start + end) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, (size_t)new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,            /*int argcount,*/
        0,            /*int kwonlyargcount,*/
        0,            /*int nlocals,*/
        0,            /*int stacksize,*/
        0,            /*int flags,*/
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,      /*int firstlineno,*/
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_globals = 0;
    PyFrameObject *py_frame = 0;
    py_code = __pyx_find_code_object(c_line ? c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? c_line : py_line, py_code);
    }
    py_globals = PyModule_GetDict(__pyx_m);
    if (!py_globals) goto bad;
    py_frame = PyFrame_New(
        PyThreadState_GET(), /*PyThreadState *tstate,*/
        py_code,             /*PyCodeObject *code,*/
        py_globals,          /*PyObject *globals,*/
        0                    /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    py_frame->f_lineno = py_line;
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else  /* Python 3+ has unicode identifiers */
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
#if PY_VERSION_HEX < 0x03030000
        char* defenc_c;
        PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
        if (!defenc) return NULL;
        defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        {
            char* end = defenc_c + PyBytes_GET_SIZE(defenc);
            char* c;
            for (c = defenc_c; c < end; c++) {
                if ((unsigned char) (*c) >= 128) {
                    PyUnicode_AsASCIIString(o);
                    return NULL;
                }
            }
        }
#endif /*__PYX_DEFAULT_STRING_ENCODING_IS_ASCII*/
        *length = PyBytes_GET_SIZE(defenc);
        return defenc_c;
#else /* PY_VERSION_HEX < 0x03030000 */
        if (PyUnicode_READY(o) == -1) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        if (PyUnicode_IS_ASCII(o)) {
            *length = PyUnicode_GET_LENGTH(o);
            return PyUnicode_AsUTF8(o);
        } else {
            PyUnicode_AsASCIIString(o);
            return NULL;
        }
#else /* __PYX_DEFAULT_STRING_ENCODING_IS_ASCII */
        return PyUnicode_AsUTF8AndSize(o, length);
#endif /* __PYX_DEFAULT_STRING_ENCODING_IS_ASCII */
#endif /* PY_VERSION_HEX < 0x03030000 */
    } else
#endif /* __PYX_DEFAULT_STRING_ENCODING_IS_ASCII  || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT */
#if !CYTHON_COMPILING_IN_PYPY
#if PY_VERSION_HEX >= 0x02060000
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x) {
  PyNumberMethods *m;
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (PyInt_Check(x) || PyLong_Check(x))
#else
  if (PyLong_Check(x))
#endif
    return Py_INCREF(x), x;
  m = Py_TYPE(x)->tp_as_number;
#if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = PyNumber_Long(x);
  }
#else
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Long(x);
  }
#endif
  if (res) {
#if PY_MAJOR_VERSION < 3
    if (!PyInt_Check(res) && !PyLong_Check(res)) {
#else
    if (!PyLong_Check(res)) {
#endif
      PyErr_Format(PyExc_TypeError,
                   "__%.4s__ returned non-%.4s (type %.200s)",
                   name, name, Py_TYPE(res)->tp_name);
      Py_DECREF(res);
      return NULL;
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
 #endif
#endif
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b)))
      return PyInt_AS_LONG(b);
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
     #if CYTHON_USE_PYLONG_INTERNALS
       switch (Py_SIZE(b)) {
       case -1: return -(sdigit)((PyLongObject*)b)->ob_digit[0];
       case  0: return 0;
       case  1: return ((PyLongObject*)b)->ob_digit[0];
       }
     #endif
    #endif
  #if PY_VERSION_HEX < 0x02060000
    return PyInt_AsSsize_t(b);
  #else
    return PyLong_AsSsize_t(b);
  #endif
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
#if PY_VERSION_HEX < 0x02050000
   if (ival <= LONG_MAX)
       return PyInt_FromLong((long)ival);
   else {
       unsigned char *bytes = (unsigned char *) &ival;
       int one = 1; int little = (int)*(unsigned char*)&one;
       return _PyLong_FromByteArray(bytes, sizeof(size_t), little, 0);
   }
#else
   return PyInt_FromSize_t(ival);
#endif
}


#endif /* Py_PYTHON_H */
